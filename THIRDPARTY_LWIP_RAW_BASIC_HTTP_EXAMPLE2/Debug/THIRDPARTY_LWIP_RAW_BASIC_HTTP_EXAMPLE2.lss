
THIRDPARTY_LWIP_RAW_BASIC_HTTP_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000edd0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040edd0  0040edd0  0001edd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008f4  20400000  0040edd8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004004  204008f8  0040f6d0  000208f4  2**3
                  ALLOC
  4 .stack        00000404  204048fc  004136d4  000208f4  2**0
                  ALLOC
  5 .heap         00000200  20404d00  00413ad8  000208f4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020922  2**0
                  CONTENTS, READONLY
  8 .debug_info   00022d04  00000000  00000000  0002097b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005a03  00000000  00000000  0004367f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010fc5  00000000  00000000  00049082  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001308  00000000  00000000  0005a047  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001508  00000000  00000000  0005b34f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002b936  00000000  00000000  0005c857  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001ea3e  00000000  00000000  0008818d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096d7f  00000000  00000000  000a6bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000040f0  00000000  00000000  0013d94c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20404d00 	.word	0x20404d00
  400004:	00400de5 	.word	0x00400de5
  400008:	00400de1 	.word	0x00400de1
  40000c:	00400de1 	.word	0x00400de1
  400010:	00400de1 	.word	0x00400de1
  400014:	00400de1 	.word	0x00400de1
  400018:	00400de1 	.word	0x00400de1
	...
  40002c:	00400de1 	.word	0x00400de1
  400030:	00400de1 	.word	0x00400de1
  400034:	00000000 	.word	0x00000000
  400038:	00400de1 	.word	0x00400de1
  40003c:	00400de1 	.word	0x00400de1
  400040:	00400de1 	.word	0x00400de1
  400044:	00400de1 	.word	0x00400de1
  400048:	00400de1 	.word	0x00400de1
  40004c:	00400de1 	.word	0x00400de1
  400050:	00400de1 	.word	0x00400de1
  400054:	00400de1 	.word	0x00400de1
  400058:	00400de1 	.word	0x00400de1
  40005c:	00400de1 	.word	0x00400de1
  400060:	00400de1 	.word	0x00400de1
  400064:	00000000 	.word	0x00000000
  400068:	00400a15 	.word	0x00400a15
  40006c:	00400a29 	.word	0x00400a29
  400070:	00400a3d 	.word	0x00400a3d
  400074:	00400de1 	.word	0x00400de1
  400078:	00400de1 	.word	0x00400de1
  40007c:	00400de1 	.word	0x00400de1
  400080:	00400a51 	.word	0x00400a51
  400084:	00400a65 	.word	0x00400a65
  400088:	00400de1 	.word	0x00400de1
  40008c:	00400de1 	.word	0x00400de1
  400090:	00400de1 	.word	0x00400de1
  400094:	00400de1 	.word	0x00400de1
  400098:	00400de1 	.word	0x00400de1
  40009c:	00407a65 	.word	0x00407a65
  4000a0:	00400de1 	.word	0x00400de1
  4000a4:	00400de1 	.word	0x00400de1
  4000a8:	00400de1 	.word	0x00400de1
  4000ac:	00400de1 	.word	0x00400de1
  4000b0:	00400de1 	.word	0x00400de1
  4000b4:	00400de1 	.word	0x00400de1
  4000b8:	00400de1 	.word	0x00400de1
  4000bc:	00400de1 	.word	0x00400de1
  4000c0:	00400de1 	.word	0x00400de1
  4000c4:	00400de1 	.word	0x00400de1
  4000c8:	00400de1 	.word	0x00400de1
  4000cc:	00400de1 	.word	0x00400de1
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00400de1 	.word	0x00400de1
  4000d8:	00000000 	.word	0x00000000
  4000dc:	0040739d 	.word	0x0040739d
  4000e0:	00400de1 	.word	0x00400de1
  4000e4:	00400de1 	.word	0x00400de1
  4000e8:	00400de1 	.word	0x00400de1
  4000ec:	00400de1 	.word	0x00400de1
  4000f0:	00400de1 	.word	0x00400de1
  4000f4:	00400de1 	.word	0x00400de1
  4000f8:	00400de1 	.word	0x00400de1
  4000fc:	00400de1 	.word	0x00400de1
  400100:	00400de1 	.word	0x00400de1
  400104:	00400de1 	.word	0x00400de1
  400108:	00400de1 	.word	0x00400de1
  40010c:	00400de1 	.word	0x00400de1
  400110:	00400de1 	.word	0x00400de1
	...
  400120:	00400de1 	.word	0x00400de1
  400124:	00400de1 	.word	0x00400de1
  400128:	00400de1 	.word	0x00400de1
  40012c:	00400de1 	.word	0x00400de1
  400130:	00400de1 	.word	0x00400de1
  400134:	00000000 	.word	0x00000000
  400138:	00400de1 	.word	0x00400de1
  40013c:	00400de1 	.word	0x00400de1

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008f8 	.word	0x204008f8
  40015c:	00000000 	.word	0x00000000
  400160:	0040edd8 	.word	0x0040edd8

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008fc 	.word	0x204008fc
  400190:	0040edd8 	.word	0x0040edd8
  400194:	0040edd8 	.word	0x0040edd8
  400198:	00000000 	.word	0x00000000

0040019c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40019c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40019e:	4810      	ldr	r0, [pc, #64]	; (4001e0 <sysclk_init+0x44>)
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <sysclk_init+0x48>)
  4001a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001a4:	213e      	movs	r1, #62	; 0x3e
  4001a6:	2000      	movs	r0, #0
  4001a8:	4b0f      	ldr	r3, [pc, #60]	; (4001e8 <sysclk_init+0x4c>)
  4001aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001ac:	4c0f      	ldr	r4, [pc, #60]	; (4001ec <sysclk_init+0x50>)
  4001ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b0:	2800      	cmp	r0, #0
  4001b2:	d0fc      	beq.n	4001ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001b4:	4b0e      	ldr	r3, [pc, #56]	; (4001f0 <sysclk_init+0x54>)
  4001b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001b8:	4a0e      	ldr	r2, [pc, #56]	; (4001f4 <sysclk_init+0x58>)
  4001ba:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x5c>)
  4001bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001be:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x60>)
  4001c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001c2:	2800      	cmp	r0, #0
  4001c4:	d0fc      	beq.n	4001c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001c6:	2002      	movs	r0, #2
  4001c8:	4b0d      	ldr	r3, [pc, #52]	; (400200 <sysclk_init+0x64>)
  4001ca:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001cc:	2010      	movs	r0, #16
  4001ce:	4b0d      	ldr	r3, [pc, #52]	; (400204 <sysclk_init+0x68>)
  4001d0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d2:	4b0d      	ldr	r3, [pc, #52]	; (400208 <sysclk_init+0x6c>)
  4001d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d6:	480d      	ldr	r0, [pc, #52]	; (40020c <sysclk_init+0x70>)
  4001d8:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
  4001dc:	bd10      	pop	{r4, pc}
  4001de:	bf00      	nop
  4001e0:	11e1a300 	.word	0x11e1a300
  4001e4:	00400fd1 	.word	0x00400fd1
  4001e8:	00400b1d 	.word	0x00400b1d
  4001ec:	00400b71 	.word	0x00400b71
  4001f0:	00400b81 	.word	0x00400b81
  4001f4:	20183f01 	.word	0x20183f01
  4001f8:	400e0600 	.word	0x400e0600
  4001fc:	00400b91 	.word	0x00400b91
  400200:	00400a79 	.word	0x00400a79
  400204:	00400ab5 	.word	0x00400ab5
  400208:	00400ec1 	.word	0x00400ec1
  40020c:	08f0d180 	.word	0x08f0d180

00400210 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400210:	b990      	cbnz	r0, 400238 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400216:	460c      	mov	r4, r1
  400218:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40021a:	2a00      	cmp	r2, #0
  40021c:	dd0f      	ble.n	40023e <_read+0x2e>
  40021e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400220:	4e08      	ldr	r6, [pc, #32]	; (400244 <_read+0x34>)
  400222:	4d09      	ldr	r5, [pc, #36]	; (400248 <_read+0x38>)
  400224:	6830      	ldr	r0, [r6, #0]
  400226:	4621      	mov	r1, r4
  400228:	682b      	ldr	r3, [r5, #0]
  40022a:	4798      	blx	r3
		ptr++;
  40022c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40022e:	42a7      	cmp	r7, r4
  400230:	d1f8      	bne.n	400224 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400232:	4640      	mov	r0, r8
  400234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400238:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40023c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40023e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400244:	20403830 	.word	0x20403830
  400248:	20403828 	.word	0x20403828

0040024c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40024c:	3801      	subs	r0, #1
  40024e:	2802      	cmp	r0, #2
  400250:	d815      	bhi.n	40027e <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400256:	460e      	mov	r6, r1
  400258:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40025a:	b19a      	cbz	r2, 400284 <_write+0x38>
  40025c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40025e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400298 <_write+0x4c>
  400262:	4f0c      	ldr	r7, [pc, #48]	; (400294 <_write+0x48>)
  400264:	f8d8 0000 	ldr.w	r0, [r8]
  400268:	f815 1b01 	ldrb.w	r1, [r5], #1
  40026c:	683b      	ldr	r3, [r7, #0]
  40026e:	4798      	blx	r3
  400270:	2800      	cmp	r0, #0
  400272:	db0a      	blt.n	40028a <_write+0x3e>
  400274:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400276:	3c01      	subs	r4, #1
  400278:	d1f4      	bne.n	400264 <_write+0x18>
  40027a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40027e:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400282:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400284:	2000      	movs	r0, #0
  400286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400292:	bf00      	nop
  400294:	2040382c 	.word	0x2040382c
  400298:	20403830 	.word	0x20403830

0040029c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  40029c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40029e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002a2:	4b3b      	ldr	r3, [pc, #236]	; (400390 <board_init+0xf4>)
  4002a4:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002a6:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  4002aa:	4a3a      	ldr	r2, [pc, #232]	; (400394 <board_init+0xf8>)
  4002ac:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002ae:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4002b2:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b4:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002b8:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4002bc:	4b36      	ldr	r3, [pc, #216]	; (400398 <board_init+0xfc>)
  4002be:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4002c2:	f022 0201 	bic.w	r2, r2, #1
  4002c6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4002ca:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4002ce:	f022 0201 	bic.w	r2, r2, #1
  4002d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002d6:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002da:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002de:	200a      	movs	r0, #10
  4002e0:	4c2e      	ldr	r4, [pc, #184]	; (40039c <board_init+0x100>)
  4002e2:	47a0      	blx	r4
  4002e4:	200b      	movs	r0, #11
  4002e6:	47a0      	blx	r4
  4002e8:	200c      	movs	r0, #12
  4002ea:	47a0      	blx	r4
  4002ec:	2010      	movs	r0, #16
  4002ee:	47a0      	blx	r4
  4002f0:	2011      	movs	r0, #17
  4002f2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002f4:	4b2a      	ldr	r3, [pc, #168]	; (4003a0 <board_init+0x104>)
  4002f6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4002fa:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400300:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400302:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400306:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40030a:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40030c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400310:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400312:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400316:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  400318:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40031a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40031e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400320:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400324:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400326:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400328:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40032c:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40032e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400332:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400336:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40033a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40033e:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400344:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400346:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40034c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40034e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400352:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400354:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400356:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40035a:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40035c:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40035e:	4a11      	ldr	r2, [pc, #68]	; (4003a4 <board_init+0x108>)
  400360:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400364:	f043 0310 	orr.w	r3, r3, #16
  400368:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40036c:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <board_init+0x10c>)
  40036e:	2210      	movs	r2, #16
  400370:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400376:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400378:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40037a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40037e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400380:	4311      	orrs	r1, r2
  400382:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  400384:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400386:	4311      	orrs	r1, r2
  400388:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40038a:	605a      	str	r2, [r3, #4]
  40038c:	bd10      	pop	{r4, pc}
  40038e:	bf00      	nop
  400390:	400e1850 	.word	0x400e1850
  400394:	5a00080c 	.word	0x5a00080c
  400398:	e000ed00 	.word	0xe000ed00
  40039c:	00400ba1 	.word	0x00400ba1
  4003a0:	400e1200 	.word	0x400e1200
  4003a4:	40088000 	.word	0x40088000
  4003a8:	400e1000 	.word	0x400e1000

004003ac <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  4003ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003ae:	b083      	sub	sp, #12
  4003b0:	4604      	mov	r4, r0
  4003b2:	460f      	mov	r7, r1
  4003b4:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4003b6:	6803      	ldr	r3, [r0, #0]
  4003b8:	f043 0310 	orr.w	r3, r3, #16
  4003bc:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  4003be:	ab01      	add	r3, sp, #4
  4003c0:	2201      	movs	r2, #1
  4003c2:	4d36      	ldr	r5, [pc, #216]	; (40049c <ethernet_phy_set_link+0xf0>)
  4003c4:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4003c6:	b120      	cbz	r0, 4003d2 <ethernet_phy_set_link+0x26>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4003c8:	6822      	ldr	r2, [r4, #0]
  4003ca:	f022 0210 	bic.w	r2, r2, #16
  4003ce:	6022      	str	r2, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return uc_rc;
  4003d0:	e061      	b.n	400496 <ethernet_phy_set_link+0xea>
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  4003d2:	9b01      	ldr	r3, [sp, #4]
  4003d4:	f013 0f04 	tst.w	r3, #4
  4003d8:	d105      	bne.n	4003e6 <ethernet_phy_set_link+0x3a>
  4003da:	6823      	ldr	r3, [r4, #0]
  4003dc:	f023 0310 	bic.w	r3, r3, #16
  4003e0:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  4003e2:	20ff      	movs	r0, #255	; 0xff
  4003e4:	e057      	b.n	400496 <ethernet_phy_set_link+0xea>
	}

	if (uc_apply_setting_flag == 0) {
  4003e6:	b92e      	cbnz	r6, 4003f4 <ethernet_phy_set_link+0x48>
  4003e8:	6823      	ldr	r3, [r4, #0]
  4003ea:	f023 0310 	bic.w	r3, r3, #16
  4003ee:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return uc_rc;
  4003f0:	2000      	movs	r0, #0
  4003f2:	e050      	b.n	400496 <ethernet_phy_set_link+0xea>
	}

	/* Read advertisement */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  4003f4:	466b      	mov	r3, sp
  4003f6:	221e      	movs	r2, #30
  4003f8:	4639      	mov	r1, r7
  4003fa:	4620      	mov	r0, r4
  4003fc:	4d27      	ldr	r5, [pc, #156]	; (40049c <ethernet_phy_set_link+0xf0>)
  4003fe:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  400400:	b120      	cbz	r0, 40040c <ethernet_phy_set_link+0x60>
  400402:	6822      	ldr	r2, [r4, #0]
  400404:	f022 0210 	bic.w	r2, r2, #16
  400408:	6022      	str	r2, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return uc_rc;
  40040a:	e044      	b.n	400496 <ethernet_phy_set_link+0xea>
	}

	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  40040c:	9b01      	ldr	r3, [sp, #4]
		/* Set GMAC for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
	}

	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  40040e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400412:	d006      	beq.n	400422 <ethernet_phy_set_link+0x76>
  400414:	9a00      	ldr	r2, [sp, #0]
  400416:	f012 0f05 	tst.w	r2, #5
  40041a:	bf0c      	ite	eq
  40041c:	2201      	moveq	r2, #1
  40041e:	2200      	movne	r2, #0
  400420:	e000      	b.n	400424 <ethernet_phy_set_link+0x78>
  400422:	2201      	movs	r2, #1
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
		uc_fd = true;
	}

	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  400424:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  400428:	d003      	beq.n	400432 <ethernet_phy_set_link+0x86>
  40042a:	9900      	ldr	r1, [sp, #0]
  40042c:	f011 0f02 	tst.w	r1, #2
  400430:	d128      	bne.n	400484 <ethernet_phy_set_link+0xd8>
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
	}

	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  400432:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400436:	d003      	beq.n	400440 <ethernet_phy_set_link+0x94>
  400438:	9b00      	ldr	r3, [sp, #0]
  40043a:	f013 0f01 	tst.w	r3, #1
  40043e:	d108      	bne.n	400452 <ethernet_phy_set_link+0xa6>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  400440:	b14a      	cbz	r2, 400456 <ethernet_phy_set_link+0xaa>
  400442:	2301      	movs	r3, #1
  400444:	e000      	b.n	400448 <ethernet_phy_set_link+0x9c>
	}

	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
  400446:	2300      	movs	r3, #0
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400448:	6862      	ldr	r2, [r4, #4]
  40044a:	f042 0201 	orr.w	r2, r2, #1
  40044e:	6062      	str	r2, [r4, #4]
  400450:	e008      	b.n	400464 <ethernet_phy_set_link+0xb8>
	}

	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
		/* Set MII for 10BaseT and Half Duplex */
		uc_speed = false;
		uc_fd = false;
  400452:	2300      	movs	r3, #0
  400454:	e002      	b.n	40045c <ethernet_phy_set_link+0xb0>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  400456:	2301      	movs	r3, #1
  400458:	e000      	b.n	40045c <ethernet_phy_set_link+0xb0>
  40045a:	2300      	movs	r3, #0
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  40045c:	6862      	ldr	r2, [r4, #4]
  40045e:	f022 0201 	bic.w	r2, r2, #1
  400462:	6062      	str	r2, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  400464:	b123      	cbz	r3, 400470 <ethernet_phy_set_link+0xc4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400466:	6863      	ldr	r3, [r4, #4]
  400468:	f043 0302 	orr.w	r3, r3, #2
  40046c:	6063      	str	r3, [r4, #4]
  40046e:	e003      	b.n	400478 <ethernet_phy_set_link+0xcc>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400470:	6863      	ldr	r3, [r4, #4]
  400472:	f023 0302 	bic.w	r3, r3, #2
  400476:	6063      	str	r3, [r4, #4]
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400478:	6823      	ldr	r3, [r4, #0]
  40047a:	f023 0310 	bic.w	r3, r3, #16
  40047e:	6023      	str	r3, [r4, #0]
	gmac_set_speed(p_gmac, uc_speed);
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
  400480:	2000      	movs	r0, #0
  400482:	e008      	b.n	400496 <ethernet_phy_set_link+0xea>
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
	}

	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  400484:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400488:	d0dd      	beq.n	400446 <ethernet_phy_set_link+0x9a>
  40048a:	9b00      	ldr	r3, [sp, #0]
  40048c:	f013 0f01 	tst.w	r3, #1
  400490:	d1e3      	bne.n	40045a <ethernet_phy_set_link+0xae>
	}

	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
		uc_fd = false;
  400492:	2300      	movs	r3, #0
  400494:	e7d8      	b.n	400448 <ethernet_phy_set_link+0x9c>
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  400496:	b003      	add	sp, #12
  400498:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40049a:	bf00      	nop
  40049c:	004007f5 	.word	0x004007f5

004004a0 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4004a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004a4:	b082      	sub	sp, #8
  4004a6:	4604      	mov	r4, r0
  4004a8:	460d      	mov	r5, r1
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4004aa:	6803      	ldr	r3, [r0, #0]
  4004ac:	f043 0310 	orr.w	r3, r3, #16
  4004b0:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  4004b2:	ab01      	add	r3, sp, #4
  4004b4:	2200      	movs	r2, #0
  4004b6:	4e59      	ldr	r6, [pc, #356]	; (40061c <ethernet_phy_auto_negotiate+0x17c>)
  4004b8:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4004ba:	b120      	cbz	r0, 4004c6 <ethernet_phy_auto_negotiate+0x26>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4004bc:	6822      	ldr	r2, [r4, #0]
  4004be:	f022 0210 	bic.w	r2, r2, #16
  4004c2:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  4004c4:	e0a6      	b.n	400614 <ethernet_phy_auto_negotiate+0x174>
	}

	ul_value &= ~(uint32_t)GMII_AUTONEG; /* Remove auto-negotiation enable */
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  4004c6:	9b01      	ldr	r3, [sp, #4]
  4004c8:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
  4004cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4004d0:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  4004d2:	2200      	movs	r2, #0
  4004d4:	4629      	mov	r1, r5
  4004d6:	4620      	mov	r0, r4
  4004d8:	4e51      	ldr	r6, [pc, #324]	; (400620 <ethernet_phy_auto_negotiate+0x180>)
  4004da:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4004dc:	b120      	cbz	r0, 4004e8 <ethernet_phy_auto_negotiate+0x48>
  4004de:	6822      	ldr	r2, [r4, #0]
  4004e0:	f022 0210 	bic.w	r2, r2, #16
  4004e4:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  4004e6:	e095      	b.n	400614 <ethernet_phy_auto_negotiate+0x174>
	 * MII advertising for Next page.
	 * 100BaseTxFD and HD, 10BaseTFD and HD, IEEE 802.3.
	 */
	ul_phy_anar = GMII_100TX_FDX | GMII_100TX_HDX | GMII_10_FDX | GMII_10_HDX |
			GMII_AN_IEEE_802_3;
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  4004e8:	f240 13e1 	movw	r3, #481	; 0x1e1
  4004ec:	2204      	movs	r2, #4
  4004ee:	4629      	mov	r1, r5
  4004f0:	4620      	mov	r0, r4
  4004f2:	4e4b      	ldr	r6, [pc, #300]	; (400620 <ethernet_phy_auto_negotiate+0x180>)
  4004f4:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4004f6:	b120      	cbz	r0, 400502 <ethernet_phy_auto_negotiate+0x62>
  4004f8:	6822      	ldr	r2, [r4, #0]
  4004fa:	f022 0210 	bic.w	r2, r2, #16
  4004fe:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  400500:	e088      	b.n	400614 <ethernet_phy_auto_negotiate+0x174>
	}

	/* Read & modify control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400502:	ab01      	add	r3, sp, #4
  400504:	2200      	movs	r2, #0
  400506:	4629      	mov	r1, r5
  400508:	4620      	mov	r0, r4
  40050a:	4e44      	ldr	r6, [pc, #272]	; (40061c <ethernet_phy_auto_negotiate+0x17c>)
  40050c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40050e:	b120      	cbz	r0, 40051a <ethernet_phy_auto_negotiate+0x7a>
  400510:	6822      	ldr	r2, [r4, #0]
  400512:	f022 0210 	bic.w	r2, r2, #16
  400516:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  400518:	e07c      	b.n	400614 <ethernet_phy_auto_negotiate+0x174>
	}

	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  40051a:	9b01      	ldr	r3, [sp, #4]
  40051c:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  400520:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400522:	2200      	movs	r2, #0
  400524:	4629      	mov	r1, r5
  400526:	4620      	mov	r0, r4
  400528:	4e3d      	ldr	r6, [pc, #244]	; (400620 <ethernet_phy_auto_negotiate+0x180>)
  40052a:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40052c:	b120      	cbz	r0, 400538 <ethernet_phy_auto_negotiate+0x98>
  40052e:	6822      	ldr	r2, [r4, #0]
  400530:	f022 0210 	bic.w	r2, r2, #16
  400534:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  400536:	e06d      	b.n	400614 <ethernet_phy_auto_negotiate+0x174>
	}

	/* Restart auto negotiation */
	ul_value |= (uint32_t)GMII_RESTART_AUTONEG;
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  400538:	9b01      	ldr	r3, [sp, #4]
  40053a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  40053e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  400542:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400544:	2200      	movs	r2, #0
  400546:	4629      	mov	r1, r5
  400548:	4620      	mov	r0, r4
  40054a:	4e35      	ldr	r6, [pc, #212]	; (400620 <ethernet_phy_auto_negotiate+0x180>)
  40054c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40054e:	b120      	cbz	r0, 40055a <ethernet_phy_auto_negotiate+0xba>
  400550:	6822      	ldr	r2, [r4, #0]
  400552:	f022 0210 	bic.w	r2, r2, #16
  400556:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  400558:	e05c      	b.n	400614 <ethernet_phy_auto_negotiate+0x174>
  40055a:	4e32      	ldr	r6, [pc, #200]	; (400624 <ethernet_phy_auto_negotiate+0x184>)
	}

	/* Check if auto negotiation is completed */
	while (1) {
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  40055c:	f04f 0801 	mov.w	r8, #1
  400560:	4f2e      	ldr	r7, [pc, #184]	; (40061c <ethernet_phy_auto_negotiate+0x17c>)
  400562:	ab01      	add	r3, sp, #4
  400564:	4642      	mov	r2, r8
  400566:	4629      	mov	r1, r5
  400568:	4620      	mov	r0, r4
  40056a:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  40056c:	b120      	cbz	r0, 400578 <ethernet_phy_auto_negotiate+0xd8>
  40056e:	6822      	ldr	r2, [r4, #0]
  400570:	f022 0210 	bic.w	r2, r2, #16
  400574:	6022      	str	r2, [r4, #0]
			gmac_enable_management(p_gmac, false);
			return uc_rc;
  400576:	e04d      	b.n	400614 <ethernet_phy_auto_negotiate+0x174>
		}
		/* Done successfully */
		if (ul_value & GMII_AUTONEG_COMP) {
  400578:	9b01      	ldr	r3, [sp, #4]
  40057a:	f013 0f20 	tst.w	r3, #32
  40057e:	d107      	bne.n	400590 <ethernet_phy_auto_negotiate+0xf0>
			break;
		}

		/* Timeout check */
		if (ul_retry_max) {
			if (++ul_retry_count >= ul_retry_max) {
  400580:	3e01      	subs	r6, #1
  400582:	d1ee      	bne.n	400562 <ethernet_phy_auto_negotiate+0xc2>
  400584:	6823      	ldr	r3, [r4, #0]
  400586:	f023 0310 	bic.w	r3, r3, #16
  40058a:	6023      	str	r3, [r4, #0]
				gmac_enable_management(p_gmac, false);
				return GMAC_TIMEOUT;
  40058c:	2001      	movs	r0, #1
  40058e:	e041      	b.n	400614 <ethernet_phy_auto_negotiate+0x174>
			}
		}
	}

	/* Get the auto negotiate link partner base page */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  400590:	466b      	mov	r3, sp
  400592:	2205      	movs	r2, #5
  400594:	4629      	mov	r1, r5
  400596:	4620      	mov	r0, r4
  400598:	4d20      	ldr	r5, [pc, #128]	; (40061c <ethernet_phy_auto_negotiate+0x17c>)
  40059a:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40059c:	b120      	cbz	r0, 4005a8 <ethernet_phy_auto_negotiate+0x108>
  40059e:	6822      	ldr	r2, [r4, #0]
  4005a0:	f022 0210 	bic.w	r2, r2, #16
  4005a4:	6022      	str	r2, [r4, #0]
		gmac_enable_management(p_gmac, false);
		return uc_rc;
  4005a6:	e035      	b.n	400614 <ethernet_phy_auto_negotiate+0x174>
	}


	/* Set up the GMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  4005a8:	9b00      	ldr	r3, [sp, #0]
  4005aa:	f413 7f80 	tst.w	r3, #256	; 0x100
  4005ae:	d109      	bne.n	4005c4 <ethernet_phy_auto_negotiate+0x124>
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  4005b0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4005b4:	d10c      	bne.n	4005d0 <ethernet_phy_auto_negotiate+0x130>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  4005b6:	f013 0f80 	tst.w	r3, #128	; 0x80
		uc_speed = false;
		uc_fd = true;
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_HDX) {
		/* Set MII for 100BaseTX and half Duplex */
		uc_speed = true;
		uc_fd = false;
  4005ba:	bf08      	it	eq
  4005bc:	2300      	moveq	r3, #0
  4005be:	d009      	beq.n	4005d4 <ethernet_phy_auto_negotiate+0x134>
  4005c0:	2300      	movs	r3, #0
  4005c2:	e000      	b.n	4005c6 <ethernet_phy_auto_negotiate+0x126>

	/* Set up the GMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
		uc_fd = true;
  4005c4:	2301      	movs	r3, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  4005c6:	6862      	ldr	r2, [r4, #4]
  4005c8:	f042 0201 	orr.w	r2, r2, #1
  4005cc:	6062      	str	r2, [r4, #4]
  4005ce:	e005      	b.n	4005dc <ethernet_phy_auto_negotiate+0x13c>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
		uc_fd = true;
  4005d0:	2301      	movs	r3, #1
  4005d2:	e7ff      	b.n	4005d4 <ethernet_phy_auto_negotiate+0x134>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4005d4:	6862      	ldr	r2, [r4, #4]
  4005d6:	f022 0201 	bic.w	r2, r2, #1
  4005da:	6062      	str	r2, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  4005dc:	b123      	cbz	r3, 4005e8 <ethernet_phy_auto_negotiate+0x148>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  4005de:	6863      	ldr	r3, [r4, #4]
  4005e0:	f043 0302 	orr.w	r3, r3, #2
  4005e4:	6063      	str	r3, [r4, #4]
  4005e6:	e003      	b.n	4005f0 <ethernet_phy_auto_negotiate+0x150>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4005e8:	6863      	ldr	r3, [r4, #4]
  4005ea:	f023 0302 	bic.w	r3, r3, #2
  4005ee:	6063      	str	r3, [r4, #4]
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
			break;

		case GMAC_PHY_RMII:
		default:
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  4005f0:	68e3      	ldr	r3, [r4, #12]
  4005f2:	f023 0301 	bic.w	r3, r3, #1
  4005f6:	60e3      	str	r3, [r4, #12]
 * \param uc_enable   0 to disable GMAC transmit, else to enable it.
 */
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4005f8:	4b0b      	ldr	r3, [pc, #44]	; (400628 <ethernet_phy_auto_negotiate+0x188>)
  4005fa:	681a      	ldr	r2, [r3, #0]
  4005fc:	f042 0208 	orr.w	r2, r2, #8
  400600:	601a      	str	r2, [r3, #0]
 * \param uc_enable   0 to disable GMAC receiver, else to enable it.
 */
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  400602:	681a      	ldr	r2, [r3, #0]
  400604:	f042 0204 	orr.w	r2, r2, #4
  400608:	601a      	str	r2, [r3, #0]
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40060a:	6823      	ldr	r3, [r4, #0]
  40060c:	f023 0310 	bic.w	r3, r3, #16
  400610:	6023      	str	r3, [r4, #0]

	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
  400612:	2000      	movs	r0, #0
}
  400614:	b002      	add	sp, #8
  400616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40061a:	bf00      	nop
  40061c:	004007f5 	.word	0x004007f5
  400620:	00400855 	.word	0x00400855
  400624:	000f4240 	.word	0x000f4240
  400628:	40050000 	.word	0x40050000

0040062c <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  40062c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400630:	b083      	sub	sp, #12
  400632:	4605      	mov	r5, r0
  400634:	4689      	mov	r9, r1
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400636:	6803      	ldr	r3, [r0, #0]
  400638:	f043 0310 	orr.w	r3, r3, #16
  40063c:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  40063e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400642:	ae02      	add	r6, sp, #8
  400644:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  400648:	2200      	movs	r2, #0
  40064a:	4c0e      	ldr	r4, [pc, #56]	; (400684 <ethernet_phy_reset+0x58>)
  40064c:	47a0      	blx	r4
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
	uint32_t ul_bmcr;
	uint8_t uc_phy_address = uc_phy_addr;
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  40064e:	240a      	movs	r4, #10

	ul_bmcr = GMII_RESET;
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  400650:	f04f 0800 	mov.w	r8, #0
  400654:	4f0c      	ldr	r7, [pc, #48]	; (400688 <ethernet_phy_reset+0x5c>)
  400656:	4633      	mov	r3, r6
  400658:	4642      	mov	r2, r8
  40065a:	4649      	mov	r1, r9
  40065c:	4628      	mov	r0, r5
  40065e:	47b8      	blx	r7
		ul_timeout--;
  400660:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  400662:	9b01      	ldr	r3, [sp, #4]
  400664:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  400668:	d001      	beq.n	40066e <ethernet_phy_reset+0x42>
  40066a:	2c00      	cmp	r4, #0
  40066c:	d1f3      	bne.n	400656 <ethernet_phy_reset+0x2a>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40066e:	682b      	ldr	r3, [r5, #0]
  400670:	f023 0310 	bic.w	r3, r3, #16
  400674:	602b      	str	r3, [r5, #0]
	if (ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  400676:	fab4 f084 	clz	r0, r4
  40067a:	0940      	lsrs	r0, r0, #5
  40067c:	b003      	add	sp, #12
  40067e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400682:	bf00      	nop
  400684:	00400855 	.word	0x00400855
  400688:	004007f5 	.word	0x004007f5

0040068c <ethernet_phy_init>:
 * \param ul_mck GMAC MCK.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_init(Gmac *p_gmac, uint8_t uc_phy_addr, uint32_t mck)
{
  40068c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400690:	b085      	sub	sp, #20
  400692:	4606      	mov	r6, r0
  400694:	4688      	mov	r8, r1
  400696:	4614      	mov	r4, r2
	uint8_t uc_rc;
	uint8_t uc_phy;

	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  400698:	2501      	movs	r5, #1
  40069a:	9500      	str	r5, [sp, #0]
  40069c:	2300      	movs	r3, #0
  40069e:	462a      	mov	r2, r5
  4006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4006a4:	4844      	ldr	r0, [pc, #272]	; (4007b8 <ethernet_phy_init+0x12c>)
  4006a6:	4f45      	ldr	r7, [pc, #276]	; (4007bc <ethernet_phy_init+0x130>)
  4006a8:	47b8      	blx	r7
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  4006aa:	462a      	mov	r2, r5
  4006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4006b0:	4843      	ldr	r0, [pc, #268]	; (4007c0 <ethernet_phy_init+0x134>)
  4006b2:	4b44      	ldr	r3, [pc, #272]	; (4007c4 <ethernet_phy_init+0x138>)
  4006b4:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  4006b6:	f240 32ff 	movw	r2, #1023	; 0x3ff
  4006ba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006be:	4842      	ldr	r0, [pc, #264]	; (4007c8 <ethernet_phy_init+0x13c>)
  4006c0:	4b42      	ldr	r3, [pc, #264]	; (4007cc <ethernet_phy_init+0x140>)
  4006c2:	4798      	blx	r3

	ethernet_phy_reset(GMAC,uc_phy_addr);
  4006c4:	4641      	mov	r1, r8
  4006c6:	4842      	ldr	r0, [pc, #264]	; (4007d0 <ethernet_phy_init+0x144>)
  4006c8:	4b42      	ldr	r3, [pc, #264]	; (4007d4 <ethernet_phy_init+0x148>)
  4006ca:	4798      	blx	r3
 */
static inline uint8_t gmac_set_mdc_clock(Gmac* p_gmac, uint32_t ul_mck)
{
	uint32_t ul_clk;

	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  4006cc:	4b42      	ldr	r3, [pc, #264]	; (4007d8 <ethernet_phy_init+0x14c>)
  4006ce:	429c      	cmp	r4, r3
  4006d0:	d86d      	bhi.n	4007ae <ethernet_phy_init+0x122>
		return GMAC_INVALID;
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  4006d2:	4b42      	ldr	r3, [pc, #264]	; (4007dc <ethernet_phy_init+0x150>)
  4006d4:	429c      	cmp	r4, r3
  4006d6:	d80f      	bhi.n	4006f8 <ethernet_phy_init+0x6c>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  4006d8:	4b41      	ldr	r3, [pc, #260]	; (4007e0 <ethernet_phy_init+0x154>)
  4006da:	429c      	cmp	r4, r3
  4006dc:	d80f      	bhi.n	4006fe <ethernet_phy_init+0x72>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  4006de:	4b41      	ldr	r3, [pc, #260]	; (4007e4 <ethernet_phy_init+0x158>)
  4006e0:	429c      	cmp	r4, r3
  4006e2:	d80f      	bhi.n	400704 <ethernet_phy_init+0x78>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  4006e4:	4b40      	ldr	r3, [pc, #256]	; (4007e8 <ethernet_phy_init+0x15c>)
  4006e6:	429c      	cmp	r4, r3
  4006e8:	d80f      	bhi.n	40070a <ethernet_phy_init+0x7e>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
	} else if (ul_mck > GMAC_MCK_SPEED_20MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_16;
	} else {
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  4006ea:	4b40      	ldr	r3, [pc, #256]	; (4007ec <ethernet_phy_init+0x160>)
  4006ec:	429c      	cmp	r4, r3
  4006ee:	bf8c      	ite	hi
  4006f0:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  4006f4:	2300      	movls	r3, #0
  4006f6:	e00a      	b.n	40070e <ethernet_phy_init+0x82>
	uint32_t ul_clk;

	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
		return GMAC_INVALID;
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  4006f8:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
  4006fc:	e007      	b.n	40070e <ethernet_phy_init+0x82>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  4006fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400702:	e004      	b.n	40070e <ethernet_phy_init+0x82>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  400704:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  400708:	e001      	b.n	40070e <ethernet_phy_init+0x82>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  40070a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	} else if (ul_mck > GMAC_MCK_SPEED_20MHZ) {
		ul_clk = GMAC_NCFGR_CLK_MCK_16;
	} else {
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
	}
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  40070e:	6872      	ldr	r2, [r6, #4]
  400710:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  400714:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  400716:	6874      	ldr	r4, [r6, #4]
  400718:	431c      	orrs	r4, r3
  40071a:	6074      	str	r4, [r6, #4]
 * \return 0xFF when no valid PHY address is found.
 */
static uint8_t ethernet_phy_find_valid(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_start_addr)
{
	uint32_t ul_value = 0;
  40071c:	ab04      	add	r3, sp, #16
  40071e:	2200      	movs	r2, #0
  400720:	f843 2d04 	str.w	r2, [r3, #-4]!
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400724:	6832      	ldr	r2, [r6, #0]
  400726:	f042 0210 	orr.w	r2, r2, #16
  40072a:	6032      	str	r2, [r6, #0]
	uint8_t uc_phy_address = uc_phy_addr;

	gmac_enable_management(p_gmac, true);
    uc_rc = uc_phy_address;
	/* Check the current PHY address */
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  40072c:	2202      	movs	r2, #2
  40072e:	4641      	mov	r1, r8
  400730:	4630      	mov	r0, r6
  400732:	4c2f      	ldr	r4, [pc, #188]	; (4007f0 <ethernet_phy_init+0x164>)
  400734:	47a0      	blx	r4

	/* Find another one */
	if (ul_value != GMII_OUI_MSB) {
  400736:	9b03      	ldr	r3, [sp, #12]
  400738:	2b22      	cmp	r3, #34	; 0x22
  40073a:	d031      	beq.n	4007a0 <ethernet_phy_init+0x114>
  40073c:	4644      	mov	r4, r8
  40073e:	2520      	movs	r5, #32
		uc_rc = 0xFF;
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400740:	f04f 0902 	mov.w	r9, #2
  400744:	4f2a      	ldr	r7, [pc, #168]	; (4007f0 <ethernet_phy_init+0x164>)

	/* Find another one */
	if (ul_value != GMII_OUI_MSB) {
		uc_rc = 0xFF;
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  400746:	3401      	adds	r4, #1
  400748:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  40074c:	ab03      	add	r3, sp, #12
  40074e:	464a      	mov	r2, r9
  400750:	4621      	mov	r1, r4
  400752:	4630      	mov	r0, r6
  400754:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  400756:	9b03      	ldr	r3, [sp, #12]
  400758:	2b22      	cmp	r3, #34	; 0x22
  40075a:	d004      	beq.n	400766 <ethernet_phy_init+0xda>
  40075c:	1e6b      	subs	r3, r5, #1
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);

	/* Find another one */
	if (ul_value != GMII_OUI_MSB) {
		uc_rc = 0xFF;
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  40075e:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  400762:	d1f0      	bne.n	400746 <ethernet_phy_init+0xba>
  400764:	e010      	b.n	400788 <ethernet_phy_init+0xfc>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400766:	6833      	ldr	r3, [r6, #0]
  400768:	f023 0310 	bic.w	r3, r3, #16
  40076c:	6033      	str	r3, [r6, #0]
	}

	gmac_enable_management(p_gmac, false);

	if (uc_rc != 0xFF) {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  40076e:	ab03      	add	r3, sp, #12
  400770:	2201      	movs	r2, #1
  400772:	4621      	mov	r1, r4
  400774:	4630      	mov	r0, r6
  400776:	4d1e      	ldr	r5, [pc, #120]	; (4007f0 <ethernet_phy_init+0x164>)
  400778:	47a8      	blx	r5
	/* Check PHY Address */
	uc_phy = ethernet_phy_find_valid(p_gmac, uc_phy_addr, 0);
	if (uc_phy == 0xFF) {
		return 0;
	}
	if (uc_phy != uc_phy_addr) {
  40077a:	45a0      	cmp	r8, r4
  40077c:	d017      	beq.n	4007ae <ethernet_phy_init+0x122>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  40077e:	4641      	mov	r1, r8
  400780:	4630      	mov	r0, r6
  400782:	4b14      	ldr	r3, [pc, #80]	; (4007d4 <ethernet_phy_init+0x148>)
  400784:	4798      	blx	r3
  400786:	e012      	b.n	4007ae <ethernet_phy_init+0x122>
  400788:	6833      	ldr	r3, [r6, #0]
  40078a:	f023 0310 	bic.w	r3, r3, #16
  40078e:	6033      	str	r3, [r6, #0]
  400790:	e00d      	b.n	4007ae <ethernet_phy_init+0x122>
	}

	gmac_enable_management(p_gmac, false);

	if (uc_rc != 0xFF) {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  400792:	ab03      	add	r3, sp, #12
  400794:	2201      	movs	r2, #1
  400796:	4641      	mov	r1, r8
  400798:	4630      	mov	r0, r6
  40079a:	4c15      	ldr	r4, [pc, #84]	; (4007f0 <ethernet_phy_init+0x164>)
  40079c:	47a0      	blx	r4
  40079e:	e006      	b.n	4007ae <ethernet_phy_init+0x122>
  4007a0:	6833      	ldr	r3, [r6, #0]
  4007a2:	f023 0310 	bic.w	r3, r3, #16
  4007a6:	6033      	str	r3, [r6, #0]
		}
	}

	gmac_enable_management(p_gmac, false);

	if (uc_rc != 0xFF) {
  4007a8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  4007ac:	d1f1      	bne.n	400792 <ethernet_phy_init+0x106>
	if (uc_phy != uc_phy_addr) {
		ethernet_phy_reset(p_gmac, uc_phy_addr);
	}

	return uc_rc;
}
  4007ae:	2000      	movs	r0, #0
  4007b0:	b005      	add	sp, #20
  4007b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4007b6:	bf00      	nop
  4007b8:	400e1200 	.word	0x400e1200
  4007bc:	00400995 	.word	0x00400995
  4007c0:	400e0e00 	.word	0x400e0e00
  4007c4:	0040095d 	.word	0x0040095d
  4007c8:	400e1400 	.word	0x400e1400
  4007cc:	004008c9 	.word	0x004008c9
  4007d0:	40050000 	.word	0x40050000
  4007d4:	0040062d 	.word	0x0040062d
  4007d8:	0e4e1c00 	.word	0x0e4e1c00
  4007dc:	09896800 	.word	0x09896800
  4007e0:	07270e00 	.word	0x07270e00
  4007e4:	04c4b400 	.word	0x04c4b400
  4007e8:	02625a00 	.word	0x02625a00
  4007ec:	01312d00 	.word	0x01312d00
  4007f0:	004007f5 	.word	0x004007f5

004007f4 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  4007f4:	b410      	push	{r4}
  4007f6:	b083      	sub	sp, #12
static inline void gmac_maintain_phy(Gmac* p_gmac,
		uint8_t uc_phy_addr, uint8_t uc_reg_addr, uint8_t uc_rw,
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  4007f8:	6884      	ldr	r4, [r0, #8]
  4007fa:	f014 0f04 	tst.w	r4, #4
  4007fe:	d0fb      	beq.n	4007f8 <gmac_phy_read+0x4>
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
			| GMAC_MAN_CLTTO
			| GMAC_MAN_PHYA(uc_phy_addr)
			| GMAC_MAN_REGA(uc_reg_addr)
			| GMAC_MAN_OP((uc_rw ? GMAC_MAN_RW_TYPE : GMAC_MAN_READ_ONLY))
			| GMAC_MAN_DATA(us_data);
  400800:	0492      	lsls	r2, r2, #18
  400802:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
  400806:	4c11      	ldr	r4, [pc, #68]	; (40084c <gmac_phy_read+0x58>)
  400808:	4314      	orrs	r4, r2
  40080a:	05c9      	lsls	r1, r1, #23
  40080c:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
  400810:	4321      	orrs	r1, r4
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  400812:	6341      	str	r1, [r0, #52]	; 0x34
 *
 * Return GMAC_OK if the operation is completed successfully.
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;
  400814:	2200      	movs	r2, #0
  400816:	9201      	str	r2, [sp, #4]

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
  400818:	490d      	ldr	r1, [pc, #52]	; (400850 <gmac_phy_read+0x5c>)
  40081a:	e005      	b.n	400828 <gmac_phy_read+0x34>
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;
  40081c:	9a01      	ldr	r2, [sp, #4]
  40081e:	3201      	adds	r2, #1
  400820:	9201      	str	r2, [sp, #4]

		if (ul_retry_count >= ul_retry) {
  400822:	9a01      	ldr	r2, [sp, #4]
  400824:	428a      	cmp	r2, r1
  400826:	d80c      	bhi.n	400842 <gmac_phy_read+0x4e>
 *
 * \return  1 if PHY is idle.
 */
static inline uint8_t gmac_is_phy_idle(Gmac* p_gmac)
{
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  400828:	6882      	ldr	r2, [r0, #8]
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!gmac_is_phy_idle(p_gmac)) {
  40082a:	f012 0f04 	tst.w	r2, #4
  40082e:	d0f5      	beq.n	40081c <gmac_phy_read+0x28>
 * \return Get PHY data.
 */
static inline uint16_t gmac_get_phy_data(Gmac* p_gmac)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400830:	6882      	ldr	r2, [r0, #8]
  400832:	f012 0f04 	tst.w	r2, #4
  400836:	d0fb      	beq.n	400830 <gmac_phy_read+0x3c>
	/* Return data */
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  400838:	6b42      	ldr	r2, [r0, #52]	; 0x34
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	*p_value = gmac_get_phy_data(p_gmac);
  40083a:	b292      	uxth	r2, r2
  40083c:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  40083e:	2000      	movs	r0, #0
  400840:	e000      	b.n	400844 <gmac_phy_read+0x50>
		uint32_t* p_value)
{
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  400842:	2001      	movs	r0, #1
	}
	*p_value = gmac_get_phy_data(p_gmac);
	return GMAC_OK;
}
  400844:	b003      	add	sp, #12
  400846:	f85d 4b04 	ldr.w	r4, [sp], #4
  40084a:	4770      	bx	lr
  40084c:	60020000 	.word	0x60020000
  400850:	000f423f 	.word	0x000f423f

00400854 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  400854:	b410      	push	{r4}
  400856:	b083      	sub	sp, #12
static inline void gmac_maintain_phy(Gmac* p_gmac,
		uint8_t uc_phy_addr, uint8_t uc_reg_addr, uint8_t uc_rw,
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400858:	6884      	ldr	r4, [r0, #8]
  40085a:	f014 0f04 	tst.w	r4, #4
  40085e:	d0fb      	beq.n	400858 <gmac_phy_write+0x4>
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
			| GMAC_MAN_CLTTO
			| GMAC_MAN_PHYA(uc_phy_addr)
			| GMAC_MAN_REGA(uc_reg_addr)
			| GMAC_MAN_OP((uc_rw ? GMAC_MAN_RW_TYPE : GMAC_MAN_READ_ONLY))
			| GMAC_MAN_DATA(us_data);
  400860:	0492      	lsls	r2, r2, #18
  400862:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
  400866:	4c0f      	ldr	r4, [pc, #60]	; (4008a4 <gmac_phy_write+0x50>)
  400868:	4314      	orrs	r4, r2
  40086a:	05c9      	lsls	r1, r1, #23
  40086c:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
  400870:	4321      	orrs	r1, r4
  400872:	b29b      	uxth	r3, r3
  400874:	4319      	orrs	r1, r3
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  400876:	6341      	str	r1, [r0, #52]	; 0x34
 *
 * Return GMAC_OK if the operation is completed successfully.
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;
  400878:	2300      	movs	r3, #0
  40087a:	9301      	str	r3, [sp, #4]

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
  40087c:	4a0a      	ldr	r2, [pc, #40]	; (4008a8 <gmac_phy_write+0x54>)
  40087e:	e005      	b.n	40088c <gmac_phy_write+0x38>
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;
  400880:	9b01      	ldr	r3, [sp, #4]
  400882:	3301      	adds	r3, #1
  400884:	9301      	str	r3, [sp, #4]

		if (ul_retry_count >= ul_retry) {
  400886:	9b01      	ldr	r3, [sp, #4]
  400888:	4293      	cmp	r3, r2
  40088a:	d805      	bhi.n	400898 <gmac_phy_write+0x44>
 *
 * \return  1 if PHY is idle.
 */
static inline uint8_t gmac_is_phy_idle(Gmac* p_gmac)
{
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  40088c:	6883      	ldr	r3, [r0, #8]
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!gmac_is_phy_idle(p_gmac)) {
  40088e:	f013 0f04 	tst.w	r3, #4
  400892:	d0f5      	beq.n	400880 <gmac_phy_write+0x2c>

		if (ul_retry_count >= ul_retry) {
			return GMAC_TIMEOUT;
		}
	}
	return GMAC_OK;
  400894:	2000      	movs	r0, #0
  400896:	e000      	b.n	40089a <gmac_phy_write+0x46>

	while (!gmac_is_phy_idle(p_gmac)) {
		ul_retry_count++;

		if (ul_retry_count >= ul_retry) {
			return GMAC_TIMEOUT;
  400898:	2001      	movs	r0, #1

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  40089a:	b003      	add	sp, #12
  40089c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008a0:	4770      	bx	lr
  4008a2:	bf00      	nop
  4008a4:	50020000 	.word	0x50020000
  4008a8:	000f423f 	.word	0x000f423f

004008ac <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  4008ac:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4008b0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4008b4:	d101      	bne.n	4008ba <pio_get+0xe>
		ul_reg = p_pio->PIO_ODSR;
  4008b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4008b8:	e000      	b.n	4008bc <pio_get+0x10>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  4008ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  4008bc:	4213      	tst	r3, r2
	if ((ul_reg & ul_mask) == 0) {
		return 0;
	} else {
		return 1;
	}
}
  4008be:	bf14      	ite	ne
  4008c0:	2001      	movne	r0, #1
  4008c2:	2000      	moveq	r0, #0
  4008c4:	4770      	bx	lr
  4008c6:	bf00      	nop

004008c8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4008c8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4008ca:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4008ce:	d02f      	beq.n	400930 <pio_set_peripheral+0x68>
  4008d0:	d807      	bhi.n	4008e2 <pio_set_peripheral+0x1a>
  4008d2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4008d6:	d014      	beq.n	400902 <pio_set_peripheral+0x3a>
  4008d8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4008dc:	d01e      	beq.n	40091c <pio_set_peripheral+0x54>
  4008de:	b939      	cbnz	r1, 4008f0 <pio_set_peripheral+0x28>
  4008e0:	4770      	bx	lr
  4008e2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4008e6:	d037      	beq.n	400958 <pio_set_peripheral+0x90>
  4008e8:	d804      	bhi.n	4008f4 <pio_set_peripheral+0x2c>
  4008ea:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4008ee:	d029      	beq.n	400944 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4008f0:	6042      	str	r2, [r0, #4]
  4008f2:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4008f4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4008f8:	d02e      	beq.n	400958 <pio_set_peripheral+0x90>
  4008fa:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4008fe:	d02b      	beq.n	400958 <pio_set_peripheral+0x90>
  400900:	e7f6      	b.n	4008f0 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400902:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400904:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400906:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400908:	43d3      	mvns	r3, r2
  40090a:	4021      	ands	r1, r4
  40090c:	4019      	ands	r1, r3
  40090e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400910:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400912:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400914:	4021      	ands	r1, r4
  400916:	400b      	ands	r3, r1
  400918:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40091a:	e01a      	b.n	400952 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40091c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40091e:	4313      	orrs	r3, r2
  400920:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400922:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400924:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400926:	400b      	ands	r3, r1
  400928:	ea23 0302 	bic.w	r3, r3, r2
  40092c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40092e:	e7df      	b.n	4008f0 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400930:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400932:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400934:	400b      	ands	r3, r1
  400936:	ea23 0302 	bic.w	r3, r3, r2
  40093a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40093c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40093e:	4313      	orrs	r3, r2
  400940:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400942:	e7d5      	b.n	4008f0 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400944:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400946:	4313      	orrs	r3, r2
  400948:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40094a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40094c:	4313      	orrs	r3, r2
  40094e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400950:	e7ce      	b.n	4008f0 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400952:	6042      	str	r2, [r0, #4]
}
  400954:	f85d 4b04 	ldr.w	r4, [sp], #4
  400958:	4770      	bx	lr
  40095a:	bf00      	nop

0040095c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40095c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40095e:	f012 0f01 	tst.w	r2, #1
  400962:	d001      	beq.n	400968 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  400964:	6641      	str	r1, [r0, #100]	; 0x64
  400966:	e000      	b.n	40096a <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400968:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40096a:	f012 0f0a 	tst.w	r2, #10
  40096e:	d001      	beq.n	400974 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  400970:	6201      	str	r1, [r0, #32]
  400972:	e000      	b.n	400976 <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400974:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400976:	f012 0f02 	tst.w	r2, #2
  40097a:	d002      	beq.n	400982 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  40097c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400980:	e004      	b.n	40098c <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400982:	f012 0f08 	tst.w	r2, #8
  400986:	d001      	beq.n	40098c <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400988:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40098c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40098e:	6001      	str	r1, [r0, #0]
  400990:	4770      	bx	lr
  400992:	bf00      	nop

00400994 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400994:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400996:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400998:	9c01      	ldr	r4, [sp, #4]
  40099a:	b10c      	cbz	r4, 4009a0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  40099c:	6641      	str	r1, [r0, #100]	; 0x64
  40099e:	e000      	b.n	4009a2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4009a0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4009a2:	b10b      	cbz	r3, 4009a8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4009a4:	6501      	str	r1, [r0, #80]	; 0x50
  4009a6:	e000      	b.n	4009aa <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4009a8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4009aa:	b10a      	cbz	r2, 4009b0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4009ac:	6301      	str	r1, [r0, #48]	; 0x30
  4009ae:	e000      	b.n	4009b2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4009b0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4009b2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4009b4:	6001      	str	r1, [r0, #0]
}
  4009b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009ba:	4770      	bx	lr

004009bc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4009bc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4009be:	4770      	bx	lr

004009c0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4009c0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4009c2:	4770      	bx	lr

004009c4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009c8:	4604      	mov	r4, r0
  4009ca:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009cc:	4b0e      	ldr	r3, [pc, #56]	; (400a08 <pio_handler_process+0x44>)
  4009ce:	4798      	blx	r3
  4009d0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4009d2:	4620      	mov	r0, r4
  4009d4:	4b0d      	ldr	r3, [pc, #52]	; (400a0c <pio_handler_process+0x48>)
  4009d6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4009d8:	4005      	ands	r5, r0
  4009da:	d013      	beq.n	400a04 <pio_handler_process+0x40>
  4009dc:	4c0c      	ldr	r4, [pc, #48]	; (400a10 <pio_handler_process+0x4c>)
  4009de:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4009e2:	6823      	ldr	r3, [r4, #0]
  4009e4:	4543      	cmp	r3, r8
  4009e6:	d108      	bne.n	4009fa <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4009e8:	6861      	ldr	r1, [r4, #4]
  4009ea:	4229      	tst	r1, r5
  4009ec:	d005      	beq.n	4009fa <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4009ee:	68e3      	ldr	r3, [r4, #12]
  4009f0:	4640      	mov	r0, r8
  4009f2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4009f4:	6863      	ldr	r3, [r4, #4]
  4009f6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4009fa:	42b4      	cmp	r4, r6
  4009fc:	d002      	beq.n	400a04 <pio_handler_process+0x40>
  4009fe:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400a00:	2d00      	cmp	r5, #0
  400a02:	d1ee      	bne.n	4009e2 <pio_handler_process+0x1e>
  400a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a08:	004009bd 	.word	0x004009bd
  400a0c:	004009c1 	.word	0x004009c1
  400a10:	20400914 	.word	0x20400914

00400a14 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a14:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400a16:	210a      	movs	r1, #10
  400a18:	4801      	ldr	r0, [pc, #4]	; (400a20 <PIOA_Handler+0xc>)
  400a1a:	4b02      	ldr	r3, [pc, #8]	; (400a24 <PIOA_Handler+0x10>)
  400a1c:	4798      	blx	r3
  400a1e:	bd08      	pop	{r3, pc}
  400a20:	400e0e00 	.word	0x400e0e00
  400a24:	004009c5 	.word	0x004009c5

00400a28 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400a28:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400a2a:	210b      	movs	r1, #11
  400a2c:	4801      	ldr	r0, [pc, #4]	; (400a34 <PIOB_Handler+0xc>)
  400a2e:	4b02      	ldr	r3, [pc, #8]	; (400a38 <PIOB_Handler+0x10>)
  400a30:	4798      	blx	r3
  400a32:	bd08      	pop	{r3, pc}
  400a34:	400e1000 	.word	0x400e1000
  400a38:	004009c5 	.word	0x004009c5

00400a3c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400a3c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400a3e:	210c      	movs	r1, #12
  400a40:	4801      	ldr	r0, [pc, #4]	; (400a48 <PIOC_Handler+0xc>)
  400a42:	4b02      	ldr	r3, [pc, #8]	; (400a4c <PIOC_Handler+0x10>)
  400a44:	4798      	blx	r3
  400a46:	bd08      	pop	{r3, pc}
  400a48:	400e1200 	.word	0x400e1200
  400a4c:	004009c5 	.word	0x004009c5

00400a50 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400a50:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400a52:	2110      	movs	r1, #16
  400a54:	4801      	ldr	r0, [pc, #4]	; (400a5c <PIOD_Handler+0xc>)
  400a56:	4b02      	ldr	r3, [pc, #8]	; (400a60 <PIOD_Handler+0x10>)
  400a58:	4798      	blx	r3
  400a5a:	bd08      	pop	{r3, pc}
  400a5c:	400e1400 	.word	0x400e1400
  400a60:	004009c5 	.word	0x004009c5

00400a64 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400a64:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400a66:	2111      	movs	r1, #17
  400a68:	4801      	ldr	r0, [pc, #4]	; (400a70 <PIOE_Handler+0xc>)
  400a6a:	4b02      	ldr	r3, [pc, #8]	; (400a74 <PIOE_Handler+0x10>)
  400a6c:	4798      	blx	r3
  400a6e:	bd08      	pop	{r3, pc}
  400a70:	400e1600 	.word	0x400e1600
  400a74:	004009c5 	.word	0x004009c5

00400a78 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400a78:	2803      	cmp	r0, #3
  400a7a:	d007      	beq.n	400a8c <pmc_mck_set_division+0x14>
  400a7c:	2804      	cmp	r0, #4
  400a7e:	d008      	beq.n	400a92 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400a80:	2802      	cmp	r0, #2
  400a82:	bf0c      	ite	eq
  400a84:	f44f 7280 	moveq.w	r2, #256	; 0x100
  400a88:	2200      	movne	r2, #0
  400a8a:	e004      	b.n	400a96 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400a8c:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  400a90:	e001      	b.n	400a96 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400a92:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400a96:	4906      	ldr	r1, [pc, #24]	; (400ab0 <pmc_mck_set_division+0x38>)
  400a98:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400a9e:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400aa0:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400aa2:	460a      	mov	r2, r1
  400aa4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400aa6:	f013 0f08 	tst.w	r3, #8
  400aaa:	d0fb      	beq.n	400aa4 <pmc_mck_set_division+0x2c>
}
  400aac:	4770      	bx	lr
  400aae:	bf00      	nop
  400ab0:	400e0600 	.word	0x400e0600

00400ab4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ab4:	4a18      	ldr	r2, [pc, #96]	; (400b18 <pmc_switch_mck_to_pllack+0x64>)
  400ab6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400abc:	4318      	orrs	r0, r3
  400abe:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ac0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ac2:	f013 0f08 	tst.w	r3, #8
  400ac6:	d003      	beq.n	400ad0 <pmc_switch_mck_to_pllack+0x1c>
  400ac8:	e009      	b.n	400ade <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400aca:	3b01      	subs	r3, #1
  400acc:	d103      	bne.n	400ad6 <pmc_switch_mck_to_pllack+0x22>
  400ace:	e01e      	b.n	400b0e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ad4:	4910      	ldr	r1, [pc, #64]	; (400b18 <pmc_switch_mck_to_pllack+0x64>)
  400ad6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ad8:	f012 0f08 	tst.w	r2, #8
  400adc:	d0f5      	beq.n	400aca <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ade:	4a0e      	ldr	r2, [pc, #56]	; (400b18 <pmc_switch_mck_to_pllack+0x64>)
  400ae0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ae2:	f023 0303 	bic.w	r3, r3, #3
  400ae6:	f043 0302 	orr.w	r3, r3, #2
  400aea:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400aec:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400aee:	f010 0008 	ands.w	r0, r0, #8
  400af2:	d004      	beq.n	400afe <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400af4:	2000      	movs	r0, #0
  400af6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400af8:	3b01      	subs	r3, #1
  400afa:	d103      	bne.n	400b04 <pmc_switch_mck_to_pllack+0x50>
  400afc:	e009      	b.n	400b12 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b02:	4905      	ldr	r1, [pc, #20]	; (400b18 <pmc_switch_mck_to_pllack+0x64>)
  400b04:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b06:	f012 0f08 	tst.w	r2, #8
  400b0a:	d0f5      	beq.n	400af8 <pmc_switch_mck_to_pllack+0x44>
  400b0c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400b0e:	2001      	movs	r0, #1
  400b10:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400b12:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b14:	4770      	bx	lr
  400b16:	bf00      	nop
  400b18:	400e0600 	.word	0x400e0600

00400b1c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400b1c:	b138      	cbz	r0, 400b2e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b1e:	490e      	ldr	r1, [pc, #56]	; (400b58 <pmc_switch_mainck_to_xtal+0x3c>)
  400b20:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b22:	4a0e      	ldr	r2, [pc, #56]	; (400b5c <pmc_switch_mainck_to_xtal+0x40>)
  400b24:	401a      	ands	r2, r3
  400b26:	4b0e      	ldr	r3, [pc, #56]	; (400b60 <pmc_switch_mainck_to_xtal+0x44>)
  400b28:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b2a:	620b      	str	r3, [r1, #32]
  400b2c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b2e:	480a      	ldr	r0, [pc, #40]	; (400b58 <pmc_switch_mainck_to_xtal+0x3c>)
  400b30:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b32:	0209      	lsls	r1, r1, #8
  400b34:	b289      	uxth	r1, r1
  400b36:	4a0b      	ldr	r2, [pc, #44]	; (400b64 <pmc_switch_mainck_to_xtal+0x48>)
  400b38:	401a      	ands	r2, r3
  400b3a:	4b0b      	ldr	r3, [pc, #44]	; (400b68 <pmc_switch_mainck_to_xtal+0x4c>)
  400b3c:	4313      	orrs	r3, r2
  400b3e:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b40:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400b42:	4602      	mov	r2, r0
  400b44:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b46:	f013 0f01 	tst.w	r3, #1
  400b4a:	d0fb      	beq.n	400b44 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b4c:	4a02      	ldr	r2, [pc, #8]	; (400b58 <pmc_switch_mainck_to_xtal+0x3c>)
  400b4e:	6a11      	ldr	r1, [r2, #32]
  400b50:	4b06      	ldr	r3, [pc, #24]	; (400b6c <pmc_switch_mainck_to_xtal+0x50>)
  400b52:	430b      	orrs	r3, r1
  400b54:	6213      	str	r3, [r2, #32]
  400b56:	4770      	bx	lr
  400b58:	400e0600 	.word	0x400e0600
  400b5c:	fec8fffc 	.word	0xfec8fffc
  400b60:	01370002 	.word	0x01370002
  400b64:	ffc8fffc 	.word	0xffc8fffc
  400b68:	00370001 	.word	0x00370001
  400b6c:	01370000 	.word	0x01370000

00400b70 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b70:	4b02      	ldr	r3, [pc, #8]	; (400b7c <pmc_osc_is_ready_mainck+0xc>)
  400b72:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b74:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400b78:	4770      	bx	lr
  400b7a:	bf00      	nop
  400b7c:	400e0600 	.word	0x400e0600

00400b80 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b84:	4b01      	ldr	r3, [pc, #4]	; (400b8c <pmc_disable_pllack+0xc>)
  400b86:	629a      	str	r2, [r3, #40]	; 0x28
  400b88:	4770      	bx	lr
  400b8a:	bf00      	nop
  400b8c:	400e0600 	.word	0x400e0600

00400b90 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b90:	4b02      	ldr	r3, [pc, #8]	; (400b9c <pmc_is_locked_pllack+0xc>)
  400b92:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b94:	f000 0002 	and.w	r0, r0, #2
  400b98:	4770      	bx	lr
  400b9a:	bf00      	nop
  400b9c:	400e0600 	.word	0x400e0600

00400ba0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400ba0:	283f      	cmp	r0, #63	; 0x3f
  400ba2:	d81e      	bhi.n	400be2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400ba4:	281f      	cmp	r0, #31
  400ba6:	d80c      	bhi.n	400bc2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400ba8:	4b11      	ldr	r3, [pc, #68]	; (400bf0 <pmc_enable_periph_clk+0x50>)
  400baa:	699a      	ldr	r2, [r3, #24]
  400bac:	2301      	movs	r3, #1
  400bae:	4083      	lsls	r3, r0
  400bb0:	4393      	bics	r3, r2
  400bb2:	d018      	beq.n	400be6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400bb4:	2301      	movs	r3, #1
  400bb6:	fa03 f000 	lsl.w	r0, r3, r0
  400bba:	4b0d      	ldr	r3, [pc, #52]	; (400bf0 <pmc_enable_periph_clk+0x50>)
  400bbc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400bbe:	2000      	movs	r0, #0
  400bc0:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400bc2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400bc4:	4b0a      	ldr	r3, [pc, #40]	; (400bf0 <pmc_enable_periph_clk+0x50>)
  400bc6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400bca:	2301      	movs	r3, #1
  400bcc:	4083      	lsls	r3, r0
  400bce:	4393      	bics	r3, r2
  400bd0:	d00b      	beq.n	400bea <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400bd2:	2301      	movs	r3, #1
  400bd4:	fa03 f000 	lsl.w	r0, r3, r0
  400bd8:	4b05      	ldr	r3, [pc, #20]	; (400bf0 <pmc_enable_periph_clk+0x50>)
  400bda:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400bde:	2000      	movs	r0, #0
  400be0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400be2:	2001      	movs	r0, #1
  400be4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400be6:	2000      	movs	r0, #0
  400be8:	4770      	bx	lr
  400bea:	2000      	movs	r0, #0
}
  400bec:	4770      	bx	lr
  400bee:	bf00      	nop
  400bf0:	400e0600 	.word	0x400e0600

00400bf4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400bf4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bf6:	0189      	lsls	r1, r1, #6
  400bf8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400bfa:	2402      	movs	r4, #2
  400bfc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400bfe:	f04f 31ff 	mov.w	r1, #4294967295
  400c02:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400c04:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400c06:	605a      	str	r2, [r3, #4]
}
  400c08:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c0c:	4770      	bx	lr
  400c0e:	bf00      	nop

00400c10 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400c10:	0189      	lsls	r1, r1, #6
  400c12:	2305      	movs	r3, #5
  400c14:	5043      	str	r3, [r0, r1]
  400c16:	4770      	bx	lr

00400c18 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400c18:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400c1c:	61ca      	str	r2, [r1, #28]
  400c1e:	4770      	bx	lr

00400c20 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c20:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400c24:	624a      	str	r2, [r1, #36]	; 0x24
  400c26:	4770      	bx	lr

00400c28 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400c28:	b4f0      	push	{r4, r5, r6, r7}
  400c2a:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c2c:	2402      	movs	r4, #2
  400c2e:	9401      	str	r4, [sp, #4]
  400c30:	2408      	movs	r4, #8
  400c32:	9402      	str	r4, [sp, #8]
  400c34:	2420      	movs	r4, #32
  400c36:	9403      	str	r4, [sp, #12]
  400c38:	2480      	movs	r4, #128	; 0x80
  400c3a:	9404      	str	r4, [sp, #16]
  400c3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400c3e:	0be4      	lsrs	r4, r4, #15
  400c40:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400c42:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400c46:	d81c      	bhi.n	400c82 <tc_find_mck_divisor+0x5a>
  400c48:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400c4a:	42a0      	cmp	r0, r4
  400c4c:	d21f      	bcs.n	400c8e <tc_find_mck_divisor+0x66>
  400c4e:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  400c50:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400c52:	f856 4f04 	ldr.w	r4, [r6, #4]!
  400c56:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400c5a:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
  400c5c:	4284      	cmp	r4, r0
  400c5e:	d312      	bcc.n	400c86 <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
  400c60:	4287      	cmp	r7, r0
  400c62:	d915      	bls.n	400c90 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  400c64:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400c66:	2d05      	cmp	r5, #5
  400c68:	d1f3      	bne.n	400c52 <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400c6a:	2000      	movs	r0, #0
  400c6c:	e013      	b.n	400c96 <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
  400c6e:	a906      	add	r1, sp, #24
  400c70:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400c74:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400c78:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  400c7a:	b133      	cbz	r3, 400c8a <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  400c7c:	601d      	str	r5, [r3, #0]
	}

	return 1;
  400c7e:	2001      	movs	r0, #1
  400c80:	e009      	b.n	400c96 <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
  400c82:	2000      	movs	r0, #0
  400c84:	e007      	b.n	400c96 <tc_find_mck_divisor+0x6e>
  400c86:	2000      	movs	r0, #0
  400c88:	e005      	b.n	400c96 <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
  400c8a:	2001      	movs	r0, #1
  400c8c:	e003      	b.n	400c96 <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400c8e:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  400c90:	2a00      	cmp	r2, #0
  400c92:	d1ec      	bne.n	400c6e <tc_find_mck_divisor+0x46>
  400c94:	e7f1      	b.n	400c7a <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400c96:	b006      	add	sp, #24
  400c98:	bcf0      	pop	{r4, r5, r6, r7}
  400c9a:	4770      	bx	lr

00400c9c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400c9c:	6943      	ldr	r3, [r0, #20]
  400c9e:	f013 0f02 	tst.w	r3, #2
  400ca2:	d002      	beq.n	400caa <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400ca4:	61c1      	str	r1, [r0, #28]
	return 0;
  400ca6:	2000      	movs	r0, #0
  400ca8:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400caa:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400cac:	4770      	bx	lr
  400cae:	bf00      	nop

00400cb0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400cb0:	6943      	ldr	r3, [r0, #20]
  400cb2:	f013 0f01 	tst.w	r3, #1
  400cb6:	d003      	beq.n	400cc0 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400cb8:	6983      	ldr	r3, [r0, #24]
  400cba:	700b      	strb	r3, [r1, #0]
	return 0;
  400cbc:	2000      	movs	r0, #0
  400cbe:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400cc0:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400cc2:	4770      	bx	lr

00400cc4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400cc4:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400cc6:	010c      	lsls	r4, r1, #4
  400cc8:	4294      	cmp	r4, r2
  400cca:	d90f      	bls.n	400cec <usart_set_async_baudrate+0x28>
  400ccc:	e01a      	b.n	400d04 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400cce:	6841      	ldr	r1, [r0, #4]
  400cd0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400cd4:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400cd6:	0412      	lsls	r2, r2, #16
  400cd8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400cdc:	431a      	orrs	r2, r3
  400cde:	6202      	str	r2, [r0, #32]

	return 0;
  400ce0:	2000      	movs	r0, #0
  400ce2:	e01c      	b.n	400d1e <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  400ce4:	2001      	movs	r0, #1
  400ce6:	e01a      	b.n	400d1e <usart_set_async_baudrate+0x5a>
  400ce8:	2001      	movs	r0, #1
  400cea:	e018      	b.n	400d1e <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400cec:	0863      	lsrs	r3, r4, #1
  400cee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400cf2:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  400cf6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400cf8:	1e5c      	subs	r4, r3, #1
  400cfa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cfe:	428c      	cmp	r4, r1
  400d00:	d9e9      	bls.n	400cd6 <usart_set_async_baudrate+0x12>
  400d02:	e7ef      	b.n	400ce4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400d04:	00c9      	lsls	r1, r1, #3
  400d06:	084b      	lsrs	r3, r1, #1
  400d08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400d0c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400d10:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400d12:	1e5c      	subs	r4, r3, #1
  400d14:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400d18:	428c      	cmp	r4, r1
  400d1a:	d8e5      	bhi.n	400ce8 <usart_set_async_baudrate+0x24>
  400d1c:	e7d7      	b.n	400cce <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d22:	4770      	bx	lr

00400d24 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d24:	4b08      	ldr	r3, [pc, #32]	; (400d48 <usart_reset+0x24>)
  400d26:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400d2a:	2300      	movs	r3, #0
  400d2c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400d2e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400d30:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400d32:	2388      	movs	r3, #136	; 0x88
  400d34:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d36:	2324      	movs	r3, #36	; 0x24
  400d38:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  400d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d3e:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  400d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400d44:	6003      	str	r3, [r0, #0]
  400d46:	4770      	bx	lr
  400d48:	55534100 	.word	0x55534100

00400d4c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400d4c:	b570      	push	{r4, r5, r6, lr}
  400d4e:	4605      	mov	r5, r0
  400d50:	460c      	mov	r4, r1
  400d52:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400d54:	4b0f      	ldr	r3, [pc, #60]	; (400d94 <usart_init_rs232+0x48>)
  400d56:	4798      	blx	r3

	ul_reg_val = 0;
  400d58:	2200      	movs	r2, #0
  400d5a:	4b0f      	ldr	r3, [pc, #60]	; (400d98 <usart_init_rs232+0x4c>)
  400d5c:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400d5e:	b19c      	cbz	r4, 400d88 <usart_init_rs232+0x3c>
  400d60:	4632      	mov	r2, r6
  400d62:	6821      	ldr	r1, [r4, #0]
  400d64:	4628      	mov	r0, r5
  400d66:	4b0d      	ldr	r3, [pc, #52]	; (400d9c <usart_init_rs232+0x50>)
  400d68:	4798      	blx	r3
  400d6a:	4602      	mov	r2, r0
  400d6c:	b970      	cbnz	r0, 400d8c <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400d6e:	6861      	ldr	r1, [r4, #4]
  400d70:	68a3      	ldr	r3, [r4, #8]
  400d72:	4319      	orrs	r1, r3
  400d74:	6923      	ldr	r3, [r4, #16]
  400d76:	4319      	orrs	r1, r3
  400d78:	68e3      	ldr	r3, [r4, #12]
  400d7a:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d7c:	4906      	ldr	r1, [pc, #24]	; (400d98 <usart_init_rs232+0x4c>)
  400d7e:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  400d80:	6869      	ldr	r1, [r5, #4]
  400d82:	430b      	orrs	r3, r1
  400d84:	606b      	str	r3, [r5, #4]

	return 0;
  400d86:	e002      	b.n	400d8e <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400d88:	2201      	movs	r2, #1
  400d8a:	e000      	b.n	400d8e <usart_init_rs232+0x42>
  400d8c:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  400d8e:	4610      	mov	r0, r2
  400d90:	bd70      	pop	{r4, r5, r6, pc}
  400d92:	bf00      	nop
  400d94:	00400d25 	.word	0x00400d25
  400d98:	20400984 	.word	0x20400984
  400d9c:	00400cc5 	.word	0x00400cc5

00400da0 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  400da0:	2340      	movs	r3, #64	; 0x40
  400da2:	6003      	str	r3, [r0, #0]
  400da4:	4770      	bx	lr
  400da6:	bf00      	nop

00400da8 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  400da8:	2310      	movs	r3, #16
  400daa:	6003      	str	r3, [r0, #0]
  400dac:	4770      	bx	lr
  400dae:	bf00      	nop

00400db0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400db0:	6943      	ldr	r3, [r0, #20]
  400db2:	f013 0f02 	tst.w	r3, #2
  400db6:	d004      	beq.n	400dc2 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400db8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400dbc:	61c1      	str	r1, [r0, #28]
	return 0;
  400dbe:	2000      	movs	r0, #0
  400dc0:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400dc2:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400dc4:	4770      	bx	lr
  400dc6:	bf00      	nop

00400dc8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400dc8:	6943      	ldr	r3, [r0, #20]
  400dca:	f013 0f01 	tst.w	r3, #1
  400dce:	d005      	beq.n	400ddc <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400dd0:	6983      	ldr	r3, [r0, #24]
  400dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400dd6:	600b      	str	r3, [r1, #0]

	return 0;
  400dd8:	2000      	movs	r0, #0
  400dda:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400ddc:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400dde:	4770      	bx	lr

00400de0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400de0:	e7fe      	b.n	400de0 <Dummy_Handler>
  400de2:	bf00      	nop

00400de4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400de4:	b500      	push	{lr}
  400de6:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400de8:	4b27      	ldr	r3, [pc, #156]	; (400e88 <Reset_Handler+0xa4>)
  400dea:	4a28      	ldr	r2, [pc, #160]	; (400e8c <Reset_Handler+0xa8>)
  400dec:	429a      	cmp	r2, r3
  400dee:	d003      	beq.n	400df8 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  400df0:	4b27      	ldr	r3, [pc, #156]	; (400e90 <Reset_Handler+0xac>)
  400df2:	4a25      	ldr	r2, [pc, #148]	; (400e88 <Reset_Handler+0xa4>)
  400df4:	429a      	cmp	r2, r3
  400df6:	d304      	bcc.n	400e02 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400df8:	4b26      	ldr	r3, [pc, #152]	; (400e94 <Reset_Handler+0xb0>)
  400dfa:	4a27      	ldr	r2, [pc, #156]	; (400e98 <Reset_Handler+0xb4>)
  400dfc:	429a      	cmp	r2, r3
  400dfe:	d30f      	bcc.n	400e20 <Reset_Handler+0x3c>
  400e00:	e01a      	b.n	400e38 <Reset_Handler+0x54>
  400e02:	4921      	ldr	r1, [pc, #132]	; (400e88 <Reset_Handler+0xa4>)
  400e04:	4b25      	ldr	r3, [pc, #148]	; (400e9c <Reset_Handler+0xb8>)
  400e06:	1a5b      	subs	r3, r3, r1
  400e08:	f023 0303 	bic.w	r3, r3, #3
  400e0c:	3304      	adds	r3, #4
  400e0e:	4a1f      	ldr	r2, [pc, #124]	; (400e8c <Reset_Handler+0xa8>)
  400e10:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  400e12:	f852 0b04 	ldr.w	r0, [r2], #4
  400e16:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400e1a:	429a      	cmp	r2, r3
  400e1c:	d1f9      	bne.n	400e12 <Reset_Handler+0x2e>
  400e1e:	e7eb      	b.n	400df8 <Reset_Handler+0x14>
  400e20:	4b1f      	ldr	r3, [pc, #124]	; (400ea0 <Reset_Handler+0xbc>)
  400e22:	4a20      	ldr	r2, [pc, #128]	; (400ea4 <Reset_Handler+0xc0>)
  400e24:	1ad2      	subs	r2, r2, r3
  400e26:	f022 0203 	bic.w	r2, r2, #3
  400e2a:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400e2c:	3b04      	subs	r3, #4
                *pDest++ = 0;
  400e2e:	2100      	movs	r1, #0
  400e30:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400e34:	4293      	cmp	r3, r2
  400e36:	d1fb      	bne.n	400e30 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400e38:	4a1b      	ldr	r2, [pc, #108]	; (400ea8 <Reset_Handler+0xc4>)
  400e3a:	4b1c      	ldr	r3, [pc, #112]	; (400eac <Reset_Handler+0xc8>)
  400e3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400e40:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e42:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e46:	fab3 f383 	clz	r3, r3
  400e4a:	095b      	lsrs	r3, r3, #5
  400e4c:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400e4e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400e50:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e54:	2200      	movs	r2, #0
  400e56:	4b16      	ldr	r3, [pc, #88]	; (400eb0 <Reset_Handler+0xcc>)
  400e58:	701a      	strb	r2, [r3, #0]
	return flags;
  400e5a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400e5c:	4a15      	ldr	r2, [pc, #84]	; (400eb4 <Reset_Handler+0xd0>)
  400e5e:	6813      	ldr	r3, [r2, #0]
  400e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e64:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400e66:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400e6a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400e6e:	b129      	cbz	r1, 400e7c <Reset_Handler+0x98>
		cpu_irq_enable();
  400e70:	2201      	movs	r2, #1
  400e72:	4b0f      	ldr	r3, [pc, #60]	; (400eb0 <Reset_Handler+0xcc>)
  400e74:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400e76:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400e7a:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400e7c:	4b0e      	ldr	r3, [pc, #56]	; (400eb8 <Reset_Handler+0xd4>)
  400e7e:	4798      	blx	r3

        /* Branch to main function */
        main();
  400e80:	4b0e      	ldr	r3, [pc, #56]	; (400ebc <Reset_Handler+0xd8>)
  400e82:	4798      	blx	r3
  400e84:	e7fe      	b.n	400e84 <Reset_Handler+0xa0>
  400e86:	bf00      	nop
  400e88:	20400000 	.word	0x20400000
  400e8c:	0040edd8 	.word	0x0040edd8
  400e90:	204008f4 	.word	0x204008f4
  400e94:	204048fc 	.word	0x204048fc
  400e98:	204008f8 	.word	0x204008f8
  400e9c:	204008f3 	.word	0x204008f3
  400ea0:	204008fc 	.word	0x204008fc
  400ea4:	204048ff 	.word	0x204048ff
  400ea8:	e000ed00 	.word	0xe000ed00
  400eac:	00400000 	.word	0x00400000
  400eb0:	20400000 	.word	0x20400000
  400eb4:	e000ed88 	.word	0xe000ed88
  400eb8:	00407e4d 	.word	0x00407e4d
  400ebc:	00407cd9 	.word	0x00407cd9

00400ec0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400ec0:	4b3c      	ldr	r3, [pc, #240]	; (400fb4 <SystemCoreClockUpdate+0xf4>)
  400ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ec4:	f003 0303 	and.w	r3, r3, #3
  400ec8:	2b01      	cmp	r3, #1
  400eca:	d00f      	beq.n	400eec <SystemCoreClockUpdate+0x2c>
  400ecc:	b113      	cbz	r3, 400ed4 <SystemCoreClockUpdate+0x14>
  400ece:	2b02      	cmp	r3, #2
  400ed0:	d029      	beq.n	400f26 <SystemCoreClockUpdate+0x66>
  400ed2:	e057      	b.n	400f84 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400ed4:	4b38      	ldr	r3, [pc, #224]	; (400fb8 <SystemCoreClockUpdate+0xf8>)
  400ed6:	695b      	ldr	r3, [r3, #20]
  400ed8:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400edc:	bf14      	ite	ne
  400ede:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ee2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400ee6:	4b35      	ldr	r3, [pc, #212]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400ee8:	601a      	str	r2, [r3, #0]
  400eea:	e04b      	b.n	400f84 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400eec:	4b31      	ldr	r3, [pc, #196]	; (400fb4 <SystemCoreClockUpdate+0xf4>)
  400eee:	6a1b      	ldr	r3, [r3, #32]
  400ef0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ef4:	d003      	beq.n	400efe <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400ef6:	4a32      	ldr	r2, [pc, #200]	; (400fc0 <SystemCoreClockUpdate+0x100>)
  400ef8:	4b30      	ldr	r3, [pc, #192]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400efa:	601a      	str	r2, [r3, #0]
  400efc:	e042      	b.n	400f84 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400efe:	4a31      	ldr	r2, [pc, #196]	; (400fc4 <SystemCoreClockUpdate+0x104>)
  400f00:	4b2e      	ldr	r3, [pc, #184]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400f02:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f04:	4b2b      	ldr	r3, [pc, #172]	; (400fb4 <SystemCoreClockUpdate+0xf4>)
  400f06:	6a1b      	ldr	r3, [r3, #32]
  400f08:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f0c:	2b10      	cmp	r3, #16
  400f0e:	d002      	beq.n	400f16 <SystemCoreClockUpdate+0x56>
  400f10:	2b20      	cmp	r3, #32
  400f12:	d004      	beq.n	400f1e <SystemCoreClockUpdate+0x5e>
  400f14:	e036      	b.n	400f84 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400f16:	4a2c      	ldr	r2, [pc, #176]	; (400fc8 <SystemCoreClockUpdate+0x108>)
  400f18:	4b28      	ldr	r3, [pc, #160]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400f1a:	601a      	str	r2, [r3, #0]
          break;
  400f1c:	e032      	b.n	400f84 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400f1e:	4a28      	ldr	r2, [pc, #160]	; (400fc0 <SystemCoreClockUpdate+0x100>)
  400f20:	4b26      	ldr	r3, [pc, #152]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400f22:	601a      	str	r2, [r3, #0]
          break;
  400f24:	e02e      	b.n	400f84 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f26:	4b23      	ldr	r3, [pc, #140]	; (400fb4 <SystemCoreClockUpdate+0xf4>)
  400f28:	6a1b      	ldr	r3, [r3, #32]
  400f2a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f2e:	d003      	beq.n	400f38 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400f30:	4a23      	ldr	r2, [pc, #140]	; (400fc0 <SystemCoreClockUpdate+0x100>)
  400f32:	4b22      	ldr	r3, [pc, #136]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400f34:	601a      	str	r2, [r3, #0]
  400f36:	e012      	b.n	400f5e <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f38:	4a22      	ldr	r2, [pc, #136]	; (400fc4 <SystemCoreClockUpdate+0x104>)
  400f3a:	4b20      	ldr	r3, [pc, #128]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400f3c:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f3e:	4b1d      	ldr	r3, [pc, #116]	; (400fb4 <SystemCoreClockUpdate+0xf4>)
  400f40:	6a1b      	ldr	r3, [r3, #32]
  400f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f46:	2b10      	cmp	r3, #16
  400f48:	d002      	beq.n	400f50 <SystemCoreClockUpdate+0x90>
  400f4a:	2b20      	cmp	r3, #32
  400f4c:	d004      	beq.n	400f58 <SystemCoreClockUpdate+0x98>
  400f4e:	e006      	b.n	400f5e <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400f50:	4a1d      	ldr	r2, [pc, #116]	; (400fc8 <SystemCoreClockUpdate+0x108>)
  400f52:	4b1a      	ldr	r3, [pc, #104]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400f54:	601a      	str	r2, [r3, #0]
          break;
  400f56:	e002      	b.n	400f5e <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400f58:	4a19      	ldr	r2, [pc, #100]	; (400fc0 <SystemCoreClockUpdate+0x100>)
  400f5a:	4b18      	ldr	r3, [pc, #96]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400f5c:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f5e:	4b15      	ldr	r3, [pc, #84]	; (400fb4 <SystemCoreClockUpdate+0xf4>)
  400f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f62:	f003 0303 	and.w	r3, r3, #3
  400f66:	2b02      	cmp	r3, #2
  400f68:	d10c      	bne.n	400f84 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f6a:	4a12      	ldr	r2, [pc, #72]	; (400fb4 <SystemCoreClockUpdate+0xf4>)
  400f6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400f70:	4812      	ldr	r0, [pc, #72]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400f72:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400f76:	6803      	ldr	r3, [r0, #0]
  400f78:	fb01 3303 	mla	r3, r1, r3, r3
  400f7c:	b2d2      	uxtb	r2, r2
  400f7e:	fbb3 f3f2 	udiv	r3, r3, r2
  400f82:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400f84:	4b0b      	ldr	r3, [pc, #44]	; (400fb4 <SystemCoreClockUpdate+0xf4>)
  400f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f8c:	2b70      	cmp	r3, #112	; 0x70
  400f8e:	d107      	bne.n	400fa0 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  400f90:	4a0a      	ldr	r2, [pc, #40]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400f92:	6813      	ldr	r3, [r2, #0]
  400f94:	490d      	ldr	r1, [pc, #52]	; (400fcc <SystemCoreClockUpdate+0x10c>)
  400f96:	fba1 1303 	umull	r1, r3, r1, r3
  400f9a:	085b      	lsrs	r3, r3, #1
  400f9c:	6013      	str	r3, [r2, #0]
  400f9e:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400fa0:	4b04      	ldr	r3, [pc, #16]	; (400fb4 <SystemCoreClockUpdate+0xf4>)
  400fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fa4:	4905      	ldr	r1, [pc, #20]	; (400fbc <SystemCoreClockUpdate+0xfc>)
  400fa6:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400faa:	680b      	ldr	r3, [r1, #0]
  400fac:	40d3      	lsrs	r3, r2
  400fae:	600b      	str	r3, [r1, #0]
  400fb0:	4770      	bx	lr
  400fb2:	bf00      	nop
  400fb4:	400e0600 	.word	0x400e0600
  400fb8:	400e1810 	.word	0x400e1810
  400fbc:	20400004 	.word	0x20400004
  400fc0:	00b71b00 	.word	0x00b71b00
  400fc4:	003d0900 	.word	0x003d0900
  400fc8:	007a1200 	.word	0x007a1200
  400fcc:	aaaaaaab 	.word	0xaaaaaaab

00400fd0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400fd0:	4b12      	ldr	r3, [pc, #72]	; (40101c <system_init_flash+0x4c>)
  400fd2:	4298      	cmp	r0, r3
  400fd4:	d804      	bhi.n	400fe0 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400fda:	4b11      	ldr	r3, [pc, #68]	; (401020 <system_init_flash+0x50>)
  400fdc:	601a      	str	r2, [r3, #0]
  400fde:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400fe0:	4b10      	ldr	r3, [pc, #64]	; (401024 <system_init_flash+0x54>)
  400fe2:	4298      	cmp	r0, r3
  400fe4:	d803      	bhi.n	400fee <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fe6:	4a10      	ldr	r2, [pc, #64]	; (401028 <system_init_flash+0x58>)
  400fe8:	4b0d      	ldr	r3, [pc, #52]	; (401020 <system_init_flash+0x50>)
  400fea:	601a      	str	r2, [r3, #0]
  400fec:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400fee:	4b0f      	ldr	r3, [pc, #60]	; (40102c <system_init_flash+0x5c>)
  400ff0:	4298      	cmp	r0, r3
  400ff2:	d803      	bhi.n	400ffc <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ff4:	4a0e      	ldr	r2, [pc, #56]	; (401030 <system_init_flash+0x60>)
  400ff6:	4b0a      	ldr	r3, [pc, #40]	; (401020 <system_init_flash+0x50>)
  400ff8:	601a      	str	r2, [r3, #0]
  400ffa:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400ffc:	4b0d      	ldr	r3, [pc, #52]	; (401034 <system_init_flash+0x64>)
  400ffe:	4298      	cmp	r0, r3
  401000:	d803      	bhi.n	40100a <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401002:	4a0d      	ldr	r2, [pc, #52]	; (401038 <system_init_flash+0x68>)
  401004:	4b06      	ldr	r3, [pc, #24]	; (401020 <system_init_flash+0x50>)
  401006:	601a      	str	r2, [r3, #0]
  401008:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40100a:	4b0c      	ldr	r3, [pc, #48]	; (40103c <system_init_flash+0x6c>)
  40100c:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40100e:	bf94      	ite	ls
  401010:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401014:	4a0a      	ldrhi	r2, [pc, #40]	; (401040 <system_init_flash+0x70>)
  401016:	4b02      	ldr	r3, [pc, #8]	; (401020 <system_init_flash+0x50>)
  401018:	601a      	str	r2, [r3, #0]
  40101a:	4770      	bx	lr
  40101c:	01312cff 	.word	0x01312cff
  401020:	400e0c00 	.word	0x400e0c00
  401024:	026259ff 	.word	0x026259ff
  401028:	04000100 	.word	0x04000100
  40102c:	039386ff 	.word	0x039386ff
  401030:	04000200 	.word	0x04000200
  401034:	04c4b3ff 	.word	0x04c4b3ff
  401038:	04000300 	.word	0x04000300
  40103c:	05f5e0ff 	.word	0x05f5e0ff
  401040:	04000500 	.word	0x04000500

00401044 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401044:	4b09      	ldr	r3, [pc, #36]	; (40106c <_sbrk+0x28>)
  401046:	681b      	ldr	r3, [r3, #0]
  401048:	b913      	cbnz	r3, 401050 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40104a:	4a09      	ldr	r2, [pc, #36]	; (401070 <_sbrk+0x2c>)
  40104c:	4b07      	ldr	r3, [pc, #28]	; (40106c <_sbrk+0x28>)
  40104e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401050:	4b06      	ldr	r3, [pc, #24]	; (40106c <_sbrk+0x28>)
  401052:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401054:	181a      	adds	r2, r3, r0
  401056:	4907      	ldr	r1, [pc, #28]	; (401074 <_sbrk+0x30>)
  401058:	4291      	cmp	r1, r2
  40105a:	db04      	blt.n	401066 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  40105c:	4610      	mov	r0, r2
  40105e:	4a03      	ldr	r2, [pc, #12]	; (40106c <_sbrk+0x28>)
  401060:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401062:	4618      	mov	r0, r3
  401064:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401066:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40106a:	4770      	bx	lr
  40106c:	20400988 	.word	0x20400988
  401070:	20404f00 	.word	0x20404f00
  401074:	2045fffc 	.word	0x2045fffc

00401078 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401078:	f04f 30ff 	mov.w	r0, #4294967295
  40107c:	4770      	bx	lr
  40107e:	bf00      	nop

00401080 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401084:	604b      	str	r3, [r1, #4]

	return 0;
}
  401086:	2000      	movs	r0, #0
  401088:	4770      	bx	lr
  40108a:	bf00      	nop

0040108c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40108c:	2001      	movs	r0, #1
  40108e:	4770      	bx	lr

00401090 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401090:	2000      	movs	r0, #0
  401092:	4770      	bx	lr

00401094 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  401094:	0a03      	lsrs	r3, r0, #8
  401096:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
  40109a:	b280      	uxth	r0, r0
  40109c:	4770      	bx	lr
  40109e:	bf00      	nop

004010a0 <lwip_ntohs>:
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
  4010a0:	0a03      	lsrs	r3, r0, #8
  4010a2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
  4010a6:	b280      	uxth	r0, r0
  4010a8:	4770      	bx	lr
  4010aa:	bf00      	nop

004010ac <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
  4010ac:	0e03      	lsrs	r3, r0, #24
  4010ae:	ea43 6200 	orr.w	r2, r3, r0, lsl #24
  4010b2:	0203      	lsls	r3, r0, #8
  4010b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  4010b8:	4313      	orrs	r3, r2
  4010ba:	0a00      	lsrs	r0, r0, #8
  4010bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
  4010c0:	4318      	orrs	r0, r3
  4010c2:	4770      	bx	lr

004010c4 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  4010c4:	b508      	push	{r3, lr}
  return lwip_htonl(n);
  4010c6:	4b01      	ldr	r3, [pc, #4]	; (4010cc <lwip_ntohl+0x8>)
  4010c8:	4798      	blx	r3
}
  4010ca:	bd08      	pop	{r3, pc}
  4010cc:	004010ad 	.word	0x004010ad

004010d0 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
  4010d0:	7b03      	ldrb	r3, [r0, #12]
  4010d2:	428b      	cmp	r3, r1
  4010d4:	d003      	beq.n	4010de <dhcp_set_state+0xe>
    dhcp->state = new_state;
  4010d6:	7301      	strb	r1, [r0, #12]
    dhcp->tries = 0;
  4010d8:	2300      	movs	r3, #0
  4010da:	7343      	strb	r3, [r0, #13]
    dhcp->request_timeout = 0;
  4010dc:	8343      	strh	r3, [r0, #26]
  4010de:	4770      	bx	lr

004010e0 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  4010e0:	b430      	push	{r4, r5}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  4010e2:	6944      	ldr	r4, [r0, #20]
  4010e4:	8b03      	ldrh	r3, [r0, #24]
  4010e6:	1c5d      	adds	r5, r3, #1
  4010e8:	8305      	strh	r5, [r0, #24]
  4010ea:	4423      	add	r3, r4
  4010ec:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  4010f0:	6941      	ldr	r1, [r0, #20]
  4010f2:	8b03      	ldrh	r3, [r0, #24]
  4010f4:	1c5c      	adds	r4, r3, #1
  4010f6:	8304      	strh	r4, [r0, #24]
  4010f8:	440b      	add	r3, r1
  4010fa:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  4010fe:	bc30      	pop	{r4, r5}
  401100:	4770      	bx	lr
  401102:	bf00      	nop

00401104 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  401104:	b410      	push	{r4}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  401106:	6942      	ldr	r2, [r0, #20]
  401108:	8b03      	ldrh	r3, [r0, #24]
  40110a:	1c5c      	adds	r4, r3, #1
  40110c:	8304      	strh	r4, [r0, #24]
  40110e:	4413      	add	r3, r2
  401110:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
}
  401114:	f85d 4b04 	ldr.w	r4, [sp], #4
  401118:	4770      	bx	lr
  40111a:	bf00      	nop

0040111c <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  40111c:	b410      	push	{r4}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  40111e:	6942      	ldr	r2, [r0, #20]
  401120:	8b03      	ldrh	r3, [r0, #24]
  401122:	1c5c      	adds	r4, r3, #1
  401124:	8304      	strh	r4, [r0, #24]
  401126:	4413      	add	r3, r2
  401128:	0a0a      	lsrs	r2, r1, #8
  40112a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  40112e:	6942      	ldr	r2, [r0, #20]
  401130:	8b03      	ldrh	r3, [r0, #24]
  401132:	1c5c      	adds	r4, r3, #1
  401134:	8304      	strh	r4, [r0, #24]
  401136:	4413      	add	r3, r2
  401138:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
}
  40113c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401140:	4770      	bx	lr
  401142:	bf00      	nop

00401144 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  401144:	b410      	push	{r4}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  401146:	6942      	ldr	r2, [r0, #20]
  401148:	8b03      	ldrh	r3, [r0, #24]
  40114a:	1c5c      	adds	r4, r3, #1
  40114c:	8304      	strh	r4, [r0, #24]
  40114e:	4413      	add	r3, r2
  401150:	0e0a      	lsrs	r2, r1, #24
  401152:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  401156:	6942      	ldr	r2, [r0, #20]
  401158:	8b03      	ldrh	r3, [r0, #24]
  40115a:	1c5c      	adds	r4, r3, #1
  40115c:	8304      	strh	r4, [r0, #24]
  40115e:	4413      	add	r3, r2
  401160:	0c0a      	lsrs	r2, r1, #16
  401162:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  401166:	6942      	ldr	r2, [r0, #20]
  401168:	8b03      	ldrh	r3, [r0, #24]
  40116a:	1c5c      	adds	r4, r3, #1
  40116c:	8304      	strh	r4, [r0, #24]
  40116e:	4413      	add	r3, r2
  401170:	0a0a      	lsrs	r2, r1, #8
  401172:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  401176:	6942      	ldr	r2, [r0, #20]
  401178:	8b03      	ldrh	r3, [r0, #24]
  40117a:	1c5c      	adds	r4, r3, #1
  40117c:	8304      	strh	r4, [r0, #24]
  40117e:	4413      	add	r3, r2
  401180:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
}
  401184:	f85d 4b04 	ldr.w	r4, [sp], #4
  401188:	4770      	bx	lr
  40118a:	bf00      	nop

0040118c <dhcp_option_trailer>:
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  40118c:	b900      	cbnz	r0, 401190 <dhcp_option_trailer+0x4>
  40118e:	e7fe      	b.n	40118e <dhcp_option_trailer+0x2>
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  401190:	b410      	push	{r4}
  401192:	4602      	mov	r2, r0
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  401194:	6941      	ldr	r1, [r0, #20]
  401196:	8b03      	ldrh	r3, [r0, #24]
  401198:	1c58      	adds	r0, r3, #1
  40119a:	8310      	strh	r0, [r2, #24]
  40119c:	440b      	add	r3, r1
  40119e:	21ff      	movs	r1, #255	; 0xff
  4011a0:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  4011a4:	2400      	movs	r4, #0
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  4011a6:	e005      	b.n	4011b4 <dhcp_option_trailer+0x28>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  4011a8:	6951      	ldr	r1, [r2, #20]
  4011aa:	1c58      	adds	r0, r3, #1
  4011ac:	8310      	strh	r0, [r2, #24]
  4011ae:	440b      	add	r3, r1
  4011b0:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  4011b4:	8b13      	ldrh	r3, [r2, #24]
  4011b6:	2b43      	cmp	r3, #67	; 0x43
  4011b8:	d9f6      	bls.n	4011a8 <dhcp_option_trailer+0x1c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
  4011ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011be:	4770      	bx	lr

004011c0 <dhcp_create_msg>:
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  4011c0:	b900      	cbnz	r0, 4011c4 <dhcp_create_msg+0x4>
  4011c2:	e7fe      	b.n	4011c2 <dhcp_create_msg+0x2>
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  4011c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011c8:	4607      	mov	r7, r0
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  4011ca:	b901      	cbnz	r1, 4011ce <dhcp_create_msg+0xe>
  4011cc:	e7fe      	b.n	4011cc <dhcp_create_msg+0xc>
  4011ce:	4615      	mov	r5, r2
  4011d0:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  4011d2:	2200      	movs	r2, #0
  4011d4:	f44f 719a 	mov.w	r1, #308	; 0x134
  4011d8:	4610      	mov	r0, r2
  4011da:	4b4b      	ldr	r3, [pc, #300]	; (401308 <dhcp_create_msg+0x148>)
  4011dc:	4798      	blx	r3
  4011de:	6120      	str	r0, [r4, #16]
  if (dhcp->p_out == NULL) {
  4011e0:	2800      	cmp	r0, #0
  4011e2:	f000 808c 	beq.w	4012fe <dhcp_create_msg+0x13e>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* reuse transaction identifier in retransmissions */
  if (dhcp->tries == 0) {
  4011e6:	7b63      	ldrb	r3, [r4, #13]
  4011e8:	b91b      	cbnz	r3, 4011f2 <dhcp_create_msg+0x32>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
  4011ea:	4a48      	ldr	r2, [pc, #288]	; (40130c <dhcp_create_msg+0x14c>)
  4011ec:	6813      	ldr	r3, [r2, #0]
  4011ee:	3301      	adds	r3, #1
  4011f0:	6013      	str	r3, [r2, #0]
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
  }
  dhcp->xid = xid;
  4011f2:	4b46      	ldr	r3, [pc, #280]	; (40130c <dhcp_create_msg+0x14c>)
  4011f4:	681b      	ldr	r3, [r3, #0]
  4011f6:	6023      	str	r3, [r4, #0]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  4011f8:	6842      	ldr	r2, [r0, #4]
  4011fa:	6162      	str	r2, [r4, #20]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  4011fc:	2301      	movs	r3, #1
  4011fe:	7013      	strb	r3, [r2, #0]
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  401200:	6962      	ldr	r2, [r4, #20]
  401202:	7053      	strb	r3, [r2, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  401204:	6963      	ldr	r3, [r4, #20]
  401206:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
  40120a:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  40120c:	6963      	ldr	r3, [r4, #20]
  40120e:	2600      	movs	r6, #0
  401210:	70de      	strb	r6, [r3, #3]
  dhcp->msg_out->xid = htonl(dhcp->xid);
  401212:	f8d4 8014 	ldr.w	r8, [r4, #20]
  401216:	6820      	ldr	r0, [r4, #0]
  401218:	4b3d      	ldr	r3, [pc, #244]	; (401310 <dhcp_create_msg+0x150>)
  40121a:	4798      	blx	r3
  40121c:	f8c8 0004 	str.w	r0, [r8, #4]
  dhcp->msg_out->secs = 0;
  401220:	6963      	ldr	r3, [r4, #20]
  401222:	721e      	strb	r6, [r3, #8]
  401224:	725e      	strb	r6, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  401226:	6963      	ldr	r3, [r4, #20]
  401228:	729e      	strb	r6, [r3, #10]
  40122a:	72de      	strb	r6, [r3, #11]
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  40122c:	6963      	ldr	r3, [r4, #20]
  40122e:	731e      	strb	r6, [r3, #12]
  401230:	735e      	strb	r6, [r3, #13]
  401232:	739e      	strb	r6, [r3, #14]
  401234:	73de      	strb	r6, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
  401236:	2d08      	cmp	r5, #8
  401238:	d008      	beq.n	40124c <dhcp_create_msg+0x8c>
  40123a:	2d04      	cmp	r5, #4
  40123c:	d006      	beq.n	40124c <dhcp_create_msg+0x8c>
  40123e:	2d03      	cmp	r5, #3
  401240:	d107      	bne.n	401252 <dhcp_create_msg+0x92>
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
  401242:	7b23      	ldrb	r3, [r4, #12]
  401244:	3b04      	subs	r3, #4
  401246:	b2db      	uxtb	r3, r3
  401248:	2b01      	cmp	r3, #1
  40124a:	d802      	bhi.n	401252 <dhcp_create_msg+0x92>
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  40124c:	6963      	ldr	r3, [r4, #20]
  40124e:	687a      	ldr	r2, [r7, #4]
  401250:	60da      	str	r2, [r3, #12]
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  401252:	6962      	ldr	r2, [r4, #20]
  401254:	2300      	movs	r3, #0
  401256:	7413      	strb	r3, [r2, #16]
  401258:	7453      	strb	r3, [r2, #17]
  40125a:	7493      	strb	r3, [r2, #18]
  40125c:	74d3      	strb	r3, [r2, #19]
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  40125e:	6962      	ldr	r2, [r4, #20]
  401260:	7513      	strb	r3, [r2, #20]
  401262:	7553      	strb	r3, [r2, #21]
  401264:	7593      	strb	r3, [r2, #22]
  401266:	75d3      	strb	r3, [r2, #23]
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  401268:	6962      	ldr	r2, [r4, #20]
  40126a:	7613      	strb	r3, [r2, #24]
  40126c:	7653      	strb	r3, [r2, #25]
  40126e:	7693      	strb	r3, [r2, #26]
  401270:	76d3      	strb	r3, [r2, #27]
  401272:	f107 012b 	add.w	r1, r7, #43	; 0x2b
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  401276:	469c      	mov	ip, r3
  401278:	6960      	ldr	r0, [r4, #20]
  40127a:	461a      	mov	r2, r3
  40127c:	f897 e02a 	ldrb.w	lr, [r7, #42]	; 0x2a
  401280:	b29e      	uxth	r6, r3
  401282:	45b6      	cmp	lr, r6
  401284:	bf8c      	ite	hi
  401286:	780e      	ldrbhi	r6, [r1, #0]
  401288:	4666      	movls	r6, ip
  40128a:	4402      	add	r2, r0
  40128c:	7716      	strb	r6, [r2, #28]
  40128e:	3301      	adds	r3, #1
  401290:	3101      	adds	r1, #1
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  401292:	2b10      	cmp	r3, #16
  401294:	d1f0      	bne.n	401278 <dhcp_create_msg+0xb8>
  401296:	2300      	movs	r3, #0
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  401298:	4619      	mov	r1, r3
  40129a:	6962      	ldr	r2, [r4, #20]
  40129c:	441a      	add	r2, r3
  40129e:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
  4012a2:	3301      	adds	r3, #1
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  4012a4:	2b40      	cmp	r3, #64	; 0x40
  4012a6:	d1f8      	bne.n	40129a <dhcp_create_msg+0xda>
  4012a8:	2300      	movs	r3, #0
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
  4012aa:	4619      	mov	r1, r3
  4012ac:	6962      	ldr	r2, [r4, #20]
  4012ae:	441a      	add	r2, r3
  4012b0:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
  4012b4:	3301      	adds	r3, #1
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  4012b6:	2b80      	cmp	r3, #128	; 0x80
  4012b8:	d1f8      	bne.n	4012ac <dhcp_create_msg+0xec>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  4012ba:	6962      	ldr	r2, [r4, #20]
  4012bc:	2300      	movs	r3, #0
  4012be:	2163      	movs	r1, #99	; 0x63
  4012c0:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
  4012c4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
  4012c8:	f882 00ed 	strb.w	r0, [r2, #237]	; 0xed
  4012cc:	2053      	movs	r0, #83	; 0x53
  4012ce:	f882 00ee 	strb.w	r0, [r2, #238]	; 0xee
  4012d2:	f882 10ef 	strb.w	r1, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  4012d6:	8323      	strh	r3, [r4, #24]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  4012d8:	6962      	ldr	r2, [r4, #20]
  4012da:	441a      	add	r2, r3
  4012dc:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
  4012e0:	3301      	adds	r3, #1
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  4012e2:	2b44      	cmp	r3, #68	; 0x44
  4012e4:	d1f8      	bne.n	4012d8 <dhcp_create_msg+0x118>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  4012e6:	2201      	movs	r2, #1
  4012e8:	2135      	movs	r1, #53	; 0x35
  4012ea:	4620      	mov	r0, r4
  4012ec:	4b09      	ldr	r3, [pc, #36]	; (401314 <dhcp_create_msg+0x154>)
  4012ee:	4798      	blx	r3
  dhcp_option_byte(dhcp, message_type);
  4012f0:	4629      	mov	r1, r5
  4012f2:	4620      	mov	r0, r4
  4012f4:	4b08      	ldr	r3, [pc, #32]	; (401318 <dhcp_create_msg+0x158>)
  4012f6:	4798      	blx	r3
  return ERR_OK;
  4012f8:	2000      	movs	r0, #0
  4012fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  if (dhcp->p_out == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  4012fe:	f04f 30ff 	mov.w	r0, #4294967295
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
}
  401302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401306:	bf00      	nop
  401308:	00403729 	.word	0x00403729
  40130c:	20400008 	.word	0x20400008
  401310:	004010ad 	.word	0x004010ad
  401314:	004010e1 	.word	0x004010e1
  401318:	00401105 	.word	0x00401105

0040131c <dhcp_delete_msg>:
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  40131c:	b900      	cbnz	r0, 401320 <dhcp_delete_msg+0x4>
  40131e:	e7fe      	b.n	40131e <dhcp_delete_msg+0x2>
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  401320:	b510      	push	{r4, lr}
  401322:	4604      	mov	r4, r0
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
  401324:	6900      	ldr	r0, [r0, #16]
  401326:	b108      	cbz	r0, 40132c <dhcp_delete_msg+0x10>
    pbuf_free(dhcp->p_out);
  401328:	4b02      	ldr	r3, [pc, #8]	; (401334 <dhcp_delete_msg+0x18>)
  40132a:	4798      	blx	r3
  }
  dhcp->p_out = NULL;
  40132c:	2300      	movs	r3, #0
  40132e:	6123      	str	r3, [r4, #16]
  dhcp->msg_out = NULL;
  401330:	6163      	str	r3, [r4, #20]
  401332:	bd10      	pop	{r4, pc}
  401334:	004036c9 	.word	0x004036c9

00401338 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  401338:	b570      	push	{r4, r5, r6, lr}
  40133a:	b082      	sub	sp, #8
  40133c:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  40133e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_REBINDING);
  401340:	2104      	movs	r1, #4
  401342:	4620      	mov	r0, r4
  401344:	4b1f      	ldr	r3, [pc, #124]	; (4013c4 <dhcp_rebind+0x8c>)
  401346:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  401348:	2203      	movs	r2, #3
  40134a:	4621      	mov	r1, r4
  40134c:	4630      	mov	r0, r6
  40134e:	4b1e      	ldr	r3, [pc, #120]	; (4013c8 <dhcp_rebind+0x90>)
  401350:	4798      	blx	r3
  if (result == ERR_OK) {
  401352:	4605      	mov	r5, r0
  401354:	b9d8      	cbnz	r0, 40138e <dhcp_rebind+0x56>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  401356:	2202      	movs	r2, #2
  401358:	2139      	movs	r1, #57	; 0x39
  40135a:	4620      	mov	r0, r4
  40135c:	4b1b      	ldr	r3, [pc, #108]	; (4013cc <dhcp_rebind+0x94>)
  40135e:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  401360:	8d31      	ldrh	r1, [r6, #40]	; 0x28
  401362:	4620      	mov	r0, r4
  401364:	4b1a      	ldr	r3, [pc, #104]	; (4013d0 <dhcp_rebind+0x98>)
  401366:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

    dhcp_option_trailer(dhcp);
  401368:	4620      	mov	r0, r4
  40136a:	4b1a      	ldr	r3, [pc, #104]	; (4013d4 <dhcp_rebind+0x9c>)
  40136c:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  40136e:	8b21      	ldrh	r1, [r4, #24]
  401370:	31f0      	adds	r1, #240	; 0xf0
  401372:	b289      	uxth	r1, r1
  401374:	6920      	ldr	r0, [r4, #16]
  401376:	4b18      	ldr	r3, [pc, #96]	; (4013d8 <dhcp_rebind+0xa0>)
  401378:	4798      	blx	r3

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  40137a:	6921      	ldr	r1, [r4, #16]
  40137c:	6860      	ldr	r0, [r4, #4]
  40137e:	9600      	str	r6, [sp, #0]
  401380:	2343      	movs	r3, #67	; 0x43
  401382:	4a16      	ldr	r2, [pc, #88]	; (4013dc <dhcp_rebind+0xa4>)
  401384:	4e16      	ldr	r6, [pc, #88]	; (4013e0 <dhcp_rebind+0xa8>)
  401386:	47b0      	blx	r6
    dhcp_delete_msg(dhcp);
  401388:	4620      	mov	r0, r4
  40138a:	4b16      	ldr	r3, [pc, #88]	; (4013e4 <dhcp_rebind+0xac>)
  40138c:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  40138e:	7b63      	ldrb	r3, [r4, #13]
  401390:	3301      	adds	r3, #1
  401392:	b2db      	uxtb	r3, r3
  401394:	7363      	strb	r3, [r4, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  401396:	2b09      	cmp	r3, #9
  401398:	d806      	bhi.n	4013a8 <dhcp_rebind+0x70>
  40139a:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
  40139e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4013a2:	00db      	lsls	r3, r3, #3
  4013a4:	b29b      	uxth	r3, r3
  4013a6:	e001      	b.n	4013ac <dhcp_rebind+0x74>
  4013a8:	f242 7310 	movw	r3, #10000	; 0x2710
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  4013ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  4013b0:	4a0d      	ldr	r2, [pc, #52]	; (4013e8 <dhcp_rebind+0xb0>)
  4013b2:	fb82 1203 	smull	r1, r2, r2, r3
  4013b6:	17db      	asrs	r3, r3, #31
  4013b8:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  4013bc:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
  4013be:	4628      	mov	r0, r5
  4013c0:	b002      	add	sp, #8
  4013c2:	bd70      	pop	{r4, r5, r6, pc}
  4013c4:	004010d1 	.word	0x004010d1
  4013c8:	004011c1 	.word	0x004011c1
  4013cc:	004010e1 	.word	0x004010e1
  4013d0:	0040111d 	.word	0x0040111d
  4013d4:	0040118d 	.word	0x0040118d
  4013d8:	0040387d 	.word	0x0040387d
  4013dc:	0040e798 	.word	0x0040e798
  4013e0:	00406935 	.word	0x00406935
  4013e4:	0040131d 	.word	0x0040131d
  4013e8:	10624dd3 	.word	0x10624dd3

004013ec <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  4013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4013ee:	b083      	sub	sp, #12
  4013f0:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  4013f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  err_t result = ERR_OK;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
  4013f4:	2300      	movs	r3, #0
  4013f6:	6263      	str	r3, [r4, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_SELECTING);
  4013f8:	2106      	movs	r1, #6
  4013fa:	4620      	mov	r0, r4
  4013fc:	4b28      	ldr	r3, [pc, #160]	; (4014a0 <dhcp_discover+0xb4>)
  4013fe:	4798      	blx	r3
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  401400:	2201      	movs	r2, #1
  401402:	4621      	mov	r1, r4
  401404:	4630      	mov	r0, r6
  401406:	4b27      	ldr	r3, [pc, #156]	; (4014a4 <dhcp_discover+0xb8>)
  401408:	4798      	blx	r3
  if (result == ERR_OK) {
  40140a:	4605      	mov	r5, r0
  40140c:	2800      	cmp	r0, #0
  40140e:	d12c      	bne.n	40146a <dhcp_discover+0x7e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  401410:	2202      	movs	r2, #2
  401412:	2139      	movs	r1, #57	; 0x39
  401414:	4620      	mov	r0, r4
  401416:	4f24      	ldr	r7, [pc, #144]	; (4014a8 <dhcp_discover+0xbc>)
  401418:	47b8      	blx	r7
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  40141a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
  40141c:	4620      	mov	r0, r4
  40141e:	4b23      	ldr	r3, [pc, #140]	; (4014ac <dhcp_discover+0xc0>)
  401420:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  401422:	2204      	movs	r2, #4
  401424:	2137      	movs	r1, #55	; 0x37
  401426:	4620      	mov	r0, r4
  401428:	47b8      	blx	r7
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  40142a:	2101      	movs	r1, #1
  40142c:	4620      	mov	r0, r4
  40142e:	4f20      	ldr	r7, [pc, #128]	; (4014b0 <dhcp_discover+0xc4>)
  401430:	47b8      	blx	r7
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  401432:	2103      	movs	r1, #3
  401434:	4620      	mov	r0, r4
  401436:	47b8      	blx	r7
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  401438:	211c      	movs	r1, #28
  40143a:	4620      	mov	r0, r4
  40143c:	47b8      	blx	r7
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  40143e:	2106      	movs	r1, #6
  401440:	4620      	mov	r0, r4
  401442:	47b8      	blx	r7

    dhcp_option_trailer(dhcp);
  401444:	4620      	mov	r0, r4
  401446:	4b1b      	ldr	r3, [pc, #108]	; (4014b4 <dhcp_discover+0xc8>)
  401448:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  40144a:	8b21      	ldrh	r1, [r4, #24]
  40144c:	31f0      	adds	r1, #240	; 0xf0
  40144e:	b289      	uxth	r1, r1
  401450:	6920      	ldr	r0, [r4, #16]
  401452:	4b19      	ldr	r3, [pc, #100]	; (4014b8 <dhcp_discover+0xcc>)
  401454:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  401456:	6921      	ldr	r1, [r4, #16]
  401458:	6860      	ldr	r0, [r4, #4]
  40145a:	9600      	str	r6, [sp, #0]
  40145c:	2343      	movs	r3, #67	; 0x43
  40145e:	4a17      	ldr	r2, [pc, #92]	; (4014bc <dhcp_discover+0xd0>)
  401460:	4e17      	ldr	r6, [pc, #92]	; (4014c0 <dhcp_discover+0xd4>)
  401462:	47b0      	blx	r6
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  401464:	4620      	mov	r0, r4
  401466:	4b17      	ldr	r3, [pc, #92]	; (4014c4 <dhcp_discover+0xd8>)
  401468:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  40146a:	7b63      	ldrb	r3, [r4, #13]
  40146c:	3301      	adds	r3, #1
  40146e:	b2db      	uxtb	r3, r3
  401470:	7363      	strb	r3, [r4, #13]
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  401472:	2b05      	cmp	r3, #5
  401474:	d805      	bhi.n	401482 <dhcp_discover+0x96>
  401476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40147a:	fa02 f303 	lsl.w	r3, r2, r3
  40147e:	b29b      	uxth	r3, r3
  401480:	e001      	b.n	401486 <dhcp_discover+0x9a>
  401482:	f64e 2360 	movw	r3, #60000	; 0xea60
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  401486:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  40148a:	4a0f      	ldr	r2, [pc, #60]	; (4014c8 <dhcp_discover+0xdc>)
  40148c:	fb82 1203 	smull	r1, r2, r2, r3
  401490:	17db      	asrs	r3, r3, #31
  401492:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  401496:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
  401498:	4628      	mov	r0, r5
  40149a:	b003      	add	sp, #12
  40149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40149e:	bf00      	nop
  4014a0:	004010d1 	.word	0x004010d1
  4014a4:	004011c1 	.word	0x004011c1
  4014a8:	004010e1 	.word	0x004010e1
  4014ac:	0040111d 	.word	0x0040111d
  4014b0:	00401105 	.word	0x00401105
  4014b4:	0040118d 	.word	0x0040118d
  4014b8:	0040387d 	.word	0x0040387d
  4014bc:	0040e798 	.word	0x0040e798
  4014c0:	00406935 	.word	0x00406935
  4014c4:	0040131d 	.word	0x0040131d
  4014c8:	10624dd3 	.word	0x10624dd3

004014cc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  4014cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4014d0:	b083      	sub	sp, #12
  4014d2:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  4014d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  err_t result;
  u16_t msecs;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_REQUESTING);
  4014d6:	2101      	movs	r1, #1
  4014d8:	4620      	mov	r0, r4
  4014da:	4b34      	ldr	r3, [pc, #208]	; (4015ac <dhcp_select+0xe0>)
  4014dc:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  4014de:	2203      	movs	r2, #3
  4014e0:	4621      	mov	r1, r4
  4014e2:	4630      	mov	r0, r6
  4014e4:	4b32      	ldr	r3, [pc, #200]	; (4015b0 <dhcp_select+0xe4>)
  4014e6:	4798      	blx	r3
  if (result == ERR_OK) {
  4014e8:	4605      	mov	r5, r0
  4014ea:	2800      	cmp	r0, #0
  4014ec:	d142      	bne.n	401574 <dhcp_select+0xa8>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  4014ee:	2202      	movs	r2, #2
  4014f0:	2139      	movs	r1, #57	; 0x39
  4014f2:	4620      	mov	r0, r4
  4014f4:	4f2f      	ldr	r7, [pc, #188]	; (4015b4 <dhcp_select+0xe8>)
  4014f6:	47b8      	blx	r7
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  4014f8:	8d31      	ldrh	r1, [r6, #40]	; 0x28
  4014fa:	4620      	mov	r0, r4
  4014fc:	4b2e      	ldr	r3, [pc, #184]	; (4015b8 <dhcp_select+0xec>)
  4014fe:	4798      	blx	r3

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  401500:	2204      	movs	r2, #4
  401502:	2132      	movs	r1, #50	; 0x32
  401504:	4620      	mov	r0, r4
  401506:	47b8      	blx	r7
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  401508:	6a60      	ldr	r0, [r4, #36]	; 0x24
  40150a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4015d8 <dhcp_select+0x10c>
  40150e:	47c8      	blx	r9
  401510:	4601      	mov	r1, r0
  401512:	4620      	mov	r0, r4
  401514:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 4015dc <dhcp_select+0x110>
  401518:	47c0      	blx	r8

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  40151a:	2204      	movs	r2, #4
  40151c:	2136      	movs	r1, #54	; 0x36
  40151e:	4620      	mov	r0, r4
  401520:	47b8      	blx	r7
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
  401522:	6a20      	ldr	r0, [r4, #32]
  401524:	47c8      	blx	r9
  401526:	4601      	mov	r1, r0
  401528:	4620      	mov	r0, r4
  40152a:	47c0      	blx	r8

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  40152c:	2204      	movs	r2, #4
  40152e:	2137      	movs	r1, #55	; 0x37
  401530:	4620      	mov	r0, r4
  401532:	47b8      	blx	r7
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  401534:	2101      	movs	r1, #1
  401536:	4620      	mov	r0, r4
  401538:	4f20      	ldr	r7, [pc, #128]	; (4015bc <dhcp_select+0xf0>)
  40153a:	47b8      	blx	r7
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  40153c:	2103      	movs	r1, #3
  40153e:	4620      	mov	r0, r4
  401540:	47b8      	blx	r7
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  401542:	211c      	movs	r1, #28
  401544:	4620      	mov	r0, r4
  401546:	47b8      	blx	r7
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  401548:	2106      	movs	r1, #6
  40154a:	4620      	mov	r0, r4
  40154c:	47b8      	blx	r7

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  40154e:	4620      	mov	r0, r4
  401550:	4b1b      	ldr	r3, [pc, #108]	; (4015c0 <dhcp_select+0xf4>)
  401552:	4798      	blx	r3
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  401554:	8b21      	ldrh	r1, [r4, #24]
  401556:	31f0      	adds	r1, #240	; 0xf0
  401558:	b289      	uxth	r1, r1
  40155a:	6920      	ldr	r0, [r4, #16]
  40155c:	4b19      	ldr	r3, [pc, #100]	; (4015c4 <dhcp_select+0xf8>)
  40155e:	4798      	blx	r3

    /* send broadcast to any DHCP server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  401560:	6921      	ldr	r1, [r4, #16]
  401562:	6860      	ldr	r0, [r4, #4]
  401564:	9600      	str	r6, [sp, #0]
  401566:	2343      	movs	r3, #67	; 0x43
  401568:	4a17      	ldr	r2, [pc, #92]	; (4015c8 <dhcp_select+0xfc>)
  40156a:	4e18      	ldr	r6, [pc, #96]	; (4015cc <dhcp_select+0x100>)
  40156c:	47b0      	blx	r6
    dhcp_delete_msg(dhcp);
  40156e:	4620      	mov	r0, r4
  401570:	4b17      	ldr	r3, [pc, #92]	; (4015d0 <dhcp_select+0x104>)
  401572:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  401574:	7b63      	ldrb	r3, [r4, #13]
  401576:	3301      	adds	r3, #1
  401578:	b2db      	uxtb	r3, r3
  40157a:	7363      	strb	r3, [r4, #13]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  40157c:	2b05      	cmp	r3, #5
  40157e:	d805      	bhi.n	40158c <dhcp_select+0xc0>
  401580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401584:	fa02 f303 	lsl.w	r3, r2, r3
  401588:	b29b      	uxth	r3, r3
  40158a:	e001      	b.n	401590 <dhcp_select+0xc4>
  40158c:	f64e 2360 	movw	r3, #60000	; 0xea60
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  401590:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  401594:	4a0f      	ldr	r2, [pc, #60]	; (4015d4 <dhcp_select+0x108>)
  401596:	fb82 1203 	smull	r1, r2, r2, r3
  40159a:	17db      	asrs	r3, r3, #31
  40159c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  4015a0:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
  4015a2:	4628      	mov	r0, r5
  4015a4:	b003      	add	sp, #12
  4015a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4015aa:	bf00      	nop
  4015ac:	004010d1 	.word	0x004010d1
  4015b0:	004011c1 	.word	0x004011c1
  4015b4:	004010e1 	.word	0x004010e1
  4015b8:	0040111d 	.word	0x0040111d
  4015bc:	00401105 	.word	0x00401105
  4015c0:	0040118d 	.word	0x0040118d
  4015c4:	0040387d 	.word	0x0040387d
  4015c8:	0040e798 	.word	0x0040e798
  4015cc:	00406935 	.word	0x00406935
  4015d0:	0040131d 	.word	0x0040131d
  4015d4:	10624dd3 	.word	0x10624dd3
  4015d8:	004010c5 	.word	0x004010c5
  4015dc:	00401145 	.word	0x00401145

004015e0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  4015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4015e2:	b083      	sub	sp, #12
  4015e4:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  4015e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_REBOOTING);
  4015e8:	2103      	movs	r1, #3
  4015ea:	4620      	mov	r0, r4
  4015ec:	4b26      	ldr	r3, [pc, #152]	; (401688 <dhcp_reboot+0xa8>)
  4015ee:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  4015f0:	2203      	movs	r2, #3
  4015f2:	4621      	mov	r1, r4
  4015f4:	4630      	mov	r0, r6
  4015f6:	4b25      	ldr	r3, [pc, #148]	; (40168c <dhcp_reboot+0xac>)
  4015f8:	4798      	blx	r3
  if (result == ERR_OK) {
  4015fa:	4605      	mov	r5, r0
  4015fc:	2800      	cmp	r0, #0
  4015fe:	d127      	bne.n	401650 <dhcp_reboot+0x70>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  401600:	2202      	movs	r2, #2
  401602:	2139      	movs	r1, #57	; 0x39
  401604:	4620      	mov	r0, r4
  401606:	4f22      	ldr	r7, [pc, #136]	; (401690 <dhcp_reboot+0xb0>)
  401608:	47b8      	blx	r7
    dhcp_option_short(dhcp, 576);
  40160a:	f44f 7110 	mov.w	r1, #576	; 0x240
  40160e:	4620      	mov	r0, r4
  401610:	4b20      	ldr	r3, [pc, #128]	; (401694 <dhcp_reboot+0xb4>)
  401612:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  401614:	2204      	movs	r2, #4
  401616:	2132      	movs	r1, #50	; 0x32
  401618:	4620      	mov	r0, r4
  40161a:	47b8      	blx	r7
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  40161c:	6a60      	ldr	r0, [r4, #36]	; 0x24
  40161e:	4b1e      	ldr	r3, [pc, #120]	; (401698 <dhcp_reboot+0xb8>)
  401620:	4798      	blx	r3
  401622:	4601      	mov	r1, r0
  401624:	4620      	mov	r0, r4
  401626:	4b1d      	ldr	r3, [pc, #116]	; (40169c <dhcp_reboot+0xbc>)
  401628:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  40162a:	4620      	mov	r0, r4
  40162c:	4b1c      	ldr	r3, [pc, #112]	; (4016a0 <dhcp_reboot+0xc0>)
  40162e:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  401630:	8b21      	ldrh	r1, [r4, #24]
  401632:	31f0      	adds	r1, #240	; 0xf0
  401634:	b289      	uxth	r1, r1
  401636:	6920      	ldr	r0, [r4, #16]
  401638:	4b1a      	ldr	r3, [pc, #104]	; (4016a4 <dhcp_reboot+0xc4>)
  40163a:	4798      	blx	r3

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  40163c:	6921      	ldr	r1, [r4, #16]
  40163e:	6860      	ldr	r0, [r4, #4]
  401640:	9600      	str	r6, [sp, #0]
  401642:	2343      	movs	r3, #67	; 0x43
  401644:	4a18      	ldr	r2, [pc, #96]	; (4016a8 <dhcp_reboot+0xc8>)
  401646:	4e19      	ldr	r6, [pc, #100]	; (4016ac <dhcp_reboot+0xcc>)
  401648:	47b0      	blx	r6
    dhcp_delete_msg(dhcp);
  40164a:	4620      	mov	r0, r4
  40164c:	4b18      	ldr	r3, [pc, #96]	; (4016b0 <dhcp_reboot+0xd0>)
  40164e:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  401650:	7b63      	ldrb	r3, [r4, #13]
  401652:	3301      	adds	r3, #1
  401654:	b2db      	uxtb	r3, r3
  401656:	7363      	strb	r3, [r4, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  401658:	2b09      	cmp	r3, #9
  40165a:	d806      	bhi.n	40166a <dhcp_reboot+0x8a>
  40165c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
  401660:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401664:	00db      	lsls	r3, r3, #3
  401666:	b29b      	uxth	r3, r3
  401668:	e001      	b.n	40166e <dhcp_reboot+0x8e>
  40166a:	f242 7310 	movw	r3, #10000	; 0x2710
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  40166e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  401672:	4a10      	ldr	r2, [pc, #64]	; (4016b4 <dhcp_reboot+0xd4>)
  401674:	fb82 1203 	smull	r1, r2, r2, r3
  401678:	17db      	asrs	r3, r3, #31
  40167a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  40167e:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
  401680:	4628      	mov	r0, r5
  401682:	b003      	add	sp, #12
  401684:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401686:	bf00      	nop
  401688:	004010d1 	.word	0x004010d1
  40168c:	004011c1 	.word	0x004011c1
  401690:	004010e1 	.word	0x004010e1
  401694:	0040111d 	.word	0x0040111d
  401698:	004010c5 	.word	0x004010c5
  40169c:	00401145 	.word	0x00401145
  4016a0:	0040118d 	.word	0x0040118d
  4016a4:	0040387d 	.word	0x0040387d
  4016a8:	0040e798 	.word	0x0040e798
  4016ac:	00406935 	.word	0x00406935
  4016b0:	0040131d 	.word	0x0040131d
  4016b4:	10624dd3 	.word	0x10624dd3

004016b8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  4016b8:	b538      	push	{r3, r4, r5, lr}
  4016ba:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif->dhcp;
  4016bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_CHECKING);
  4016be:	2108      	movs	r1, #8
  4016c0:	4620      	mov	r0, r4
  4016c2:	4b07      	ldr	r3, [pc, #28]	; (4016e0 <dhcp_check+0x28>)
  4016c4:	4798      	blx	r3
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  4016c6:	2200      	movs	r2, #0
  4016c8:	f104 0124 	add.w	r1, r4, #36	; 0x24
  4016cc:	4628      	mov	r0, r5
  4016ce:	4b05      	ldr	r3, [pc, #20]	; (4016e4 <dhcp_check+0x2c>)
  4016d0:	4798      	blx	r3
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  dhcp->tries++;
  4016d2:	7b63      	ldrb	r3, [r4, #13]
  4016d4:	3301      	adds	r3, #1
  4016d6:	7363      	strb	r3, [r4, #13]
  msecs = 500;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  4016d8:	2301      	movs	r3, #1
  4016da:	8363      	strh	r3, [r4, #26]
  4016dc:	bd38      	pop	{r3, r4, r5, pc}
  4016de:	bf00      	nop
  4016e0:	004010d1 	.word	0x004010d1
  4016e4:	00406ded 	.word	0x00406ded

004016e8 <dhcp_bind>:
dhcp_bind(struct netif *netif)
{
  u32_t timeout;
  struct dhcp *dhcp;
  ip_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  4016e8:	b900      	cbnz	r0, 4016ec <dhcp_bind+0x4>
  4016ea:	e7fe      	b.n	4016ea <dhcp_bind+0x2>
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  4016ec:	b530      	push	{r4, r5, lr}
  4016ee:	b083      	sub	sp, #12
  4016f0:	4605      	mov	r5, r0
  u32_t timeout;
  struct dhcp *dhcp;
  ip_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  dhcp = netif->dhcp;
  4016f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  4016f4:	b904      	cbnz	r4, 4016f8 <dhcp_bind+0x10>
  4016f6:	e7fe      	b.n	4016f6 <dhcp_bind+0xe>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  4016f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4016fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016fe:	d00f      	beq.n	401720 <dhcp_bind+0x38>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  401700:	331e      	adds	r3, #30
  401702:	4a2e      	ldr	r2, [pc, #184]	; (4017bc <dhcp_bind+0xd4>)
  401704:	fba2 2303 	umull	r2, r3, r2, r3
  401708:	095b      	lsrs	r3, r3, #5
    if(timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t1_timeout = (u16_t)timeout;
  40170a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40170e:	4293      	cmp	r3, r2
  401710:	bf28      	it	cs
  401712:	4613      	movcs	r3, r2
  401714:	b29b      	uxth	r3, r3
    if (dhcp->t1_timeout == 0) {
  401716:	b10b      	cbz	r3, 40171c <dhcp_bind+0x34>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
    if(timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t1_timeout = (u16_t)timeout;
  401718:	83a3      	strh	r3, [r4, #28]
  40171a:	e001      	b.n	401720 <dhcp_bind+0x38>
    if (dhcp->t1_timeout == 0) {
      dhcp->t1_timeout = 1;
  40171c:	2301      	movs	r3, #1
  40171e:	83a3      	strh	r3, [r4, #28]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  401720:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401722:	f1b3 3fff 	cmp.w	r3, #4294967295
  401726:	d00f      	beq.n	401748 <dhcp_bind+0x60>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  401728:	331e      	adds	r3, #30
  40172a:	4a24      	ldr	r2, [pc, #144]	; (4017bc <dhcp_bind+0xd4>)
  40172c:	fba2 2303 	umull	r2, r3, r2, r3
  401730:	095b      	lsrs	r3, r3, #5
    if(timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t2_timeout = (u16_t)timeout;
  401732:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401736:	4293      	cmp	r3, r2
  401738:	bf28      	it	cs
  40173a:	4613      	movcs	r3, r2
  40173c:	b29b      	uxth	r3, r3
    if (dhcp->t2_timeout == 0) {
  40173e:	b10b      	cbz	r3, 401744 <dhcp_bind+0x5c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
    if(timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t2_timeout = (u16_t)timeout;
  401740:	83e3      	strh	r3, [r4, #30]
  401742:	e001      	b.n	401748 <dhcp_bind+0x60>
    if (dhcp->t2_timeout == 0) {
      dhcp->t2_timeout = 1;
  401744:	2301      	movs	r3, #1
  401746:	83e3      	strh	r3, [r4, #30]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  401748:	8be3      	ldrh	r3, [r4, #30]
  40174a:	8ba2      	ldrh	r2, [r4, #28]
  40174c:	429a      	cmp	r2, r3
  40174e:	d302      	bcc.n	401756 <dhcp_bind+0x6e>
  401750:	b10b      	cbz	r3, 401756 <dhcp_bind+0x6e>
    dhcp->t1_timeout = 0;
  401752:	2300      	movs	r3, #0
  401754:	83a3      	strh	r3, [r4, #28]
  }

  if (dhcp->subnet_mask_given) {
  401756:	7ba3      	ldrb	r3, [r4, #14]
  401758:	b113      	cbz	r3, 401760 <dhcp_bind+0x78>
    /* copy offered network mask */
    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
  40175a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40175c:	9301      	str	r3, [sp, #4]
  40175e:	e00e      	b.n	40177e <dhcp_bind+0x96>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  401760:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    if (first_octet <= 127) {
  401764:	f013 0f80 	tst.w	r3, #128	; 0x80
  401768:	d102      	bne.n	401770 <dhcp_bind+0x88>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  40176a:	23ff      	movs	r3, #255	; 0xff
  40176c:	9301      	str	r3, [sp, #4]
  40176e:	e006      	b.n	40177e <dhcp_bind+0x96>
    } else if (first_octet >= 192) {
  401770:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  401772:	bf8c      	ite	hi
  401774:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  401778:	f64f 73ff 	movwls	r3, #65535	; 0xffff
  40177c:	9301      	str	r3, [sp, #4]
    }
  }

  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
  40177e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401780:	9300      	str	r3, [sp, #0]
  /* gateway address not given? */
  if (ip_addr_isany(&gw_addr)) {
  401782:	b92b      	cbnz	r3, 401790 <dhcp_bind+0xa8>
    /* copy network address */
    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  401784:	6a62      	ldr	r2, [r4, #36]	; 0x24
  401786:	9b01      	ldr	r3, [sp, #4]
  401788:	4013      	ands	r3, r2
  40178a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  40178e:	9300      	str	r3, [sp, #0]
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
  401790:	f104 0124 	add.w	r1, r4, #36	; 0x24
  401794:	4628      	mov	r0, r5
  401796:	4b0a      	ldr	r3, [pc, #40]	; (4017c0 <dhcp_bind+0xd8>)
  401798:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&sn_mask)));
  netif_set_netmask(netif, &sn_mask);
  40179a:	a901      	add	r1, sp, #4
  40179c:	4628      	mov	r0, r5
  40179e:	4b09      	ldr	r3, [pc, #36]	; (4017c4 <dhcp_bind+0xdc>)
  4017a0:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&gw_addr)));
  netif_set_gw(netif, &gw_addr);
  4017a2:	4669      	mov	r1, sp
  4017a4:	4628      	mov	r0, r5
  4017a6:	4b08      	ldr	r3, [pc, #32]	; (4017c8 <dhcp_bind+0xe0>)
  4017a8:	4798      	blx	r3
  /* bring the interface up */
  netif_set_up(netif);
  4017aa:	4628      	mov	r0, r5
  4017ac:	4b07      	ldr	r3, [pc, #28]	; (4017cc <dhcp_bind+0xe4>)
  4017ae:	4798      	blx	r3
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
  4017b0:	210a      	movs	r1, #10
  4017b2:	4620      	mov	r0, r4
  4017b4:	4b06      	ldr	r3, [pc, #24]	; (4017d0 <dhcp_bind+0xe8>)
  4017b6:	4798      	blx	r3
}
  4017b8:	b003      	add	sp, #12
  4017ba:	bd30      	pop	{r4, r5, pc}
  4017bc:	88888889 	.word	0x88888889
  4017c0:	004034e9 	.word	0x004034e9
  4017c4:	004035d1 	.word	0x004035d1
  4017c8:	004035c5 	.word	0x004035c5
  4017cc:	004035e9 	.word	0x004035e9
  4017d0:	004010d1 	.word	0x004010d1

004017d4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
{
  4017d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017d8:	b08b      	sub	sp, #44	; 0x2c
  4017da:	4693      	mov	fp, r2
  struct netif *netif = (struct netif *)arg;
  struct dhcp *dhcp = netif->dhcp;
  4017dc:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
  4017e0:	8953      	ldrh	r3, [r2, #10]
  4017e2:	2b2b      	cmp	r3, #43	; 0x2b
  4017e4:	f240 81cd 	bls.w	401b82 <dhcp_recv+0x3ae>
  4017e8:	4681      	mov	r9, r0
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
{
  struct netif *netif = (struct netif *)arg;
  struct dhcp *dhcp = netif->dhcp;
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  4017ea:	6855      	ldr	r5, [r2, #4]
  if (p->len < DHCP_MIN_REPLY_LEN) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  4017ec:	782b      	ldrb	r3, [r5, #0]
  4017ee:	2b02      	cmp	r3, #2
  4017f0:	f040 81c7 	bne.w	401b82 <dhcp_recv+0x3ae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
  4017f4:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  4017f8:	b1b9      	cbz	r1, 40182a <dhcp_recv+0x56>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  4017fa:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
  4017fe:	7f2b      	ldrb	r3, [r5, #28]
  401800:	429a      	cmp	r2, r3
  401802:	f040 81be 	bne.w	401b82 <dhcp_recv+0x3ae>
  401806:	f100 032b 	add.w	r3, r0, #43	; 0x2b
  40180a:	f105 021c 	add.w	r2, r5, #28
  40180e:	3901      	subs	r1, #1
  401810:	b2c9      	uxtb	r1, r1
  401812:	312b      	adds	r1, #43	; 0x2b
  401814:	4401      	add	r1, r0
  401816:	e006      	b.n	401826 <dhcp_recv+0x52>
  401818:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  40181c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  401820:	4284      	cmp	r4, r0
  401822:	f040 81ae 	bne.w	401b82 <dhcp_recv+0x3ae>
  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
  401826:	4299      	cmp	r1, r3
  401828:	d1f6      	bne.n	401818 <dhcp_recv+0x44>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
  40182a:	6868      	ldr	r0, [r5, #4]
  40182c:	4ba1      	ldr	r3, [pc, #644]	; (401ab4 <dhcp_recv+0x2e0>)
  40182e:	4798      	blx	r3
  401830:	f8da 3000 	ldr.w	r3, [sl]
  401834:	4298      	cmp	r0, r3
  401836:	f040 81a4 	bne.w	401b82 <dhcp_recv+0x3ae>
  struct pbuf *q;
  int parse_file_as_options = 0;
  int parse_sname_as_options = 0;

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  40183a:	4b9f      	ldr	r3, [pc, #636]	; (401ab8 <dhcp_recv+0x2e4>)
  40183c:	2200      	movs	r2, #0
  40183e:	601a      	str	r2, [r3, #0]
  401840:	605a      	str	r2, [r3, #4]
  401842:	811a      	strh	r2, [r3, #8]
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  401844:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  401848:	2b2b      	cmp	r3, #43	; 0x2b
  40184a:	f240 819a 	bls.w	401b82 <dhcp_recv+0x3ae>
    return ERR_BUF;
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  40184e:	f8db 3004 	ldr.w	r3, [fp, #4]
  401852:	f8ca 3008 	str.w	r3, [sl, #8]
  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  401856:	f8bb 4008 	ldrh.w	r4, [fp, #8]
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  int parse_sname_as_options = 0;
  40185a:	9202      	str	r2, [sp, #8]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  40185c:	23f0      	movs	r3, #240	; 0xf0
  40185e:	f8cd a014 	str.w	sl, [sp, #20]
  401862:	f8cd 901c 	str.w	r9, [sp, #28]
  401866:	f8cd b004 	str.w	fp, [sp, #4]
  40186a:	46a3      	mov	fp, r4
  40186c:	e00a      	b.n	401884 <dhcp_recv+0xb0>
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
  40186e:	2300      	movs	r3, #0
  401870:	9302      	str	r3, [sp, #8]
    options_idx = DHCP_SNAME_OFS;
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  401872:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
    options_idx = DHCP_SNAME_OFS;
  401876:	232c      	movs	r3, #44	; 0x2c
  401878:	e004      	b.n	401884 <dhcp_recv+0xb0>
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
  40187a:	2300      	movs	r3, #0
  40187c:	9302      	str	r3, [sp, #8]
    options_idx = DHCP_SNAME_OFS;
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  40187e:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
    options_idx = DHCP_SNAME_OFS;
  401882:	232c      	movs	r3, #44	; 0x2c
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while((q != NULL) && (options_idx >= q->len)) {
  401884:	9d01      	ldr	r5, [sp, #4]
  401886:	2d00      	cmp	r5, #0
  401888:	f000 8172 	beq.w	401b70 <dhcp_recv+0x39c>
  40188c:	896a      	ldrh	r2, [r5, #10]
  40188e:	4293      	cmp	r3, r2
  401890:	f0c0 817e 	bcc.w	401b90 <dhcp_recv+0x3bc>
    options_idx -= q->len;
  401894:	1a9b      	subs	r3, r3, r2
  401896:	b29b      	uxth	r3, r3
    options_idx_max -= q->len;
  401898:	ebc2 0b0b 	rsb	fp, r2, fp
  40189c:	fa1f fb8b 	uxth.w	fp, fp
    q = q->next;
  4018a0:	682d      	ldr	r5, [r5, #0]
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while((q != NULL) && (options_idx >= q->len)) {
  4018a2:	2d00      	cmp	r5, #0
  4018a4:	f000 8169 	beq.w	401b7a <dhcp_recv+0x3a6>
  4018a8:	896a      	ldrh	r2, [r5, #10]
  4018aa:	429a      	cmp	r2, r3
  4018ac:	d9f2      	bls.n	401894 <dhcp_recv+0xc0>
  4018ae:	e170      	b.n	401b92 <dhcp_recv+0x3be>
    u8_t len;
    u8_t decode_len = 0;
    int decode_idx = -1;
    u16_t val_offset = offset + 2;
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
  4018b0:	1c58      	adds	r0, r3, #1
  4018b2:	896c      	ldrh	r4, [r5, #10]
  4018b4:	42a0      	cmp	r0, r4
  4018b6:	da03      	bge.n	4018c0 <dhcp_recv+0xec>
      len = options[offset + 1];
  4018b8:	9803      	ldr	r0, [sp, #12]
  4018ba:	4402      	add	r2, r0
  4018bc:	7852      	ldrb	r2, [r2, #1]
  4018be:	e17a      	b.n	401bb6 <dhcp_recv+0x3e2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  4018c0:	682a      	ldr	r2, [r5, #0]
  4018c2:	2a00      	cmp	r2, #0
  4018c4:	f000 8176 	beq.w	401bb4 <dhcp_recv+0x3e0>
  4018c8:	6852      	ldr	r2, [r2, #4]
  4018ca:	7812      	ldrb	r2, [r2, #0]
  4018cc:	e173      	b.n	401bb6 <dhcp_recv+0x3e2>
      default:
        decode_len = 0;
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
  4018ce:	3301      	adds	r3, #1
  4018d0:	b29b      	uxth	r3, r3
  4018d2:	e081      	b.n	4019d8 <dhcp_recv+0x204>
        decode_len = len = 0;
        /* will be increased below */
        offset--;
        break;
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  4018d4:	2a04      	cmp	r2, #4
  4018d6:	f000 81eb 	beq.w	401cb0 <dhcp_recv+0x4dc>
  4018da:	e7fe      	b.n	4018da <dhcp_recv+0x106>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
        break;
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  4018dc:	2a03      	cmp	r2, #3
  4018de:	f200 81ea 	bhi.w	401cb6 <dhcp_recv+0x4e2>
  4018e2:	e7fe      	b.n	4018e2 <dhcp_recv+0x10e>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
        break;
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
  4018e4:	f012 0f03 	tst.w	r2, #3
  4018e8:	d000      	beq.n	4018ec <dhcp_recv+0x118>
  4018ea:	e7fe      	b.n	4018ea <dhcp_recv+0x116>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  4018ec:	4614      	mov	r4, r2
  4018ee:	2a08      	cmp	r2, #8
  4018f0:	bf28      	it	cs
  4018f2:	2408      	movcs	r4, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  4018f4:	4294      	cmp	r4, r2
  4018f6:	d918      	bls.n	40192a <dhcp_recv+0x156>
  4018f8:	e7fe      	b.n	4018f8 <dhcp_recv+0x124>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  4018fa:	2a04      	cmp	r2, #4
  4018fc:	f000 81de 	beq.w	401cbc <dhcp_recv+0x4e8>
  401900:	e7fe      	b.n	401900 <dhcp_recv+0x12c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
        break;
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  401902:	2a01      	cmp	r2, #1
  401904:	f000 81dd 	beq.w	401cc2 <dhcp_recv+0x4ee>
  401908:	e7fe      	b.n	401908 <dhcp_recv+0x134>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
        break;
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  40190a:	2a01      	cmp	r2, #1
  40190c:	f000 81dc 	beq.w	401cc8 <dhcp_recv+0x4f4>
  401910:	e7fe      	b.n	401910 <dhcp_recv+0x13c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
        break;
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  401912:	2a04      	cmp	r2, #4
  401914:	f000 81db 	beq.w	401cce <dhcp_recv+0x4fa>
  401918:	e7fe      	b.n	401918 <dhcp_recv+0x144>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
        break;
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  40191a:	2a04      	cmp	r2, #4
  40191c:	f000 81da 	beq.w	401cd4 <dhcp_recv+0x500>
  401920:	e7fe      	b.n	401920 <dhcp_recv+0x14c>
        decode_idx = DHCP_OPTION_IDX_T1;
        break;
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  401922:	2a04      	cmp	r2, #4
  401924:	f000 81d9 	beq.w	401cda <dhcp_recv+0x506>
  401928:	e7fe      	b.n	401928 <dhcp_recv+0x154>
  40192a:	1c99      	adds	r1, r3, #2
      default:
        decode_len = 0;
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
  40192c:	fa12 f281 	uxtah	r2, r2, r1
  401930:	b292      	uxth	r2, r2
  401932:	9204      	str	r2, [sp, #16]
    if (decode_len > 0) {
  401934:	2c00      	cmp	r4, #0
  401936:	d04e      	beq.n	4019d6 <dhcp_recv+0x202>
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  401938:	2708      	movs	r7, #8
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
    if (decode_len > 0) {
      u32_t value = 0;
  40193a:	2200      	movs	r2, #0
  40193c:	9209      	str	r2, [sp, #36]	; 0x24
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
  40193e:	4a5e      	ldr	r2, [pc, #376]	; (401ab8 <dhcp_recv+0x2e4>)
  401940:	5dd2      	ldrb	r2, [r2, r7]
  401942:	2a00      	cmp	r2, #0
  401944:	d145      	bne.n	4019d2 <dhcp_recv+0x1fe>
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
    u8_t op = options[offset];
    u8_t len;
    u8_t decode_len = 0;
    int decode_idx = -1;
    u16_t val_offset = offset + 2;
  401946:	3302      	adds	r3, #2
  401948:	b29e      	uxth	r6, r3
  40194a:	4b5b      	ldr	r3, [pc, #364]	; (401ab8 <dhcp_recv+0x2e4>)
  40194c:	eb07 0903 	add.w	r9, r7, r3
  401950:	4b5a      	ldr	r3, [pc, #360]	; (401abc <dhcp_recv+0x2e8>)
  401952:	eb03 0a87 	add.w	sl, r3, r7, lsl #2
  401956:	f1aa 0a04 	sub.w	sl, sl, #4
  40195a:	46b8      	mov	r8, r7
      u32_t value = 0;
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
        copy_len = LWIP_MIN(decode_len, 4);
  40195c:	9606      	str	r6, [sp, #24]
  40195e:	ebc7 0308 	rsb	r3, r7, r8
  401962:	9a06      	ldr	r2, [sp, #24]
  401964:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401968:	b29b      	uxth	r3, r3
  40196a:	2c03      	cmp	r4, #3
  40196c:	bf94      	ite	ls
  40196e:	b2a2      	uxthls	r2, r4
  401970:	2204      	movhi	r2, #4
        pbuf_copy_partial(q, &value, copy_len, val_offset);
  401972:	a909      	add	r1, sp, #36	; 0x24
  401974:	4628      	mov	r0, r5
  401976:	4e52      	ldr	r6, [pc, #328]	; (401ac0 <dhcp_recv+0x2ec>)
  401978:	47b0      	blx	r6
        if (decode_len > 4) {
  40197a:	2c04      	cmp	r4, #4
  40197c:	d914      	bls.n	4019a8 <dhcp_recv+0x1d4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  40197e:	f014 0f03 	tst.w	r4, #3
  401982:	d000      	beq.n	401986 <dhcp_recv+0x1b2>
  401984:	e7fe      	b.n	401984 <dhcp_recv+0x1b0>
          dhcp_got_option(dhcp, decode_idx);
  401986:	2301      	movs	r3, #1
  401988:	f889 3000 	strb.w	r3, [r9]
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
  40198c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40198e:	4b4d      	ldr	r3, [pc, #308]	; (401ac4 <dhcp_recv+0x2f0>)
  401990:	4798      	blx	r3
  401992:	f84a 0f04 	str.w	r0, [sl, #4]!
          decode_len -= 4;
  401996:	3c04      	subs	r4, #4
  401998:	b2e4      	uxtb	r4, r4
          val_offset += 4;
          decode_idx++;
  40199a:	f108 0801 	add.w	r8, r8, #1
    if (decode_len > 0) {
      u32_t value = 0;
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
  40199e:	f819 3f01 	ldrb.w	r3, [r9, #1]!
  4019a2:	2b00      	cmp	r3, #0
  4019a4:	d0db      	beq.n	40195e <dhcp_recv+0x18a>
  4019a6:	e014      	b.n	4019d2 <dhcp_recv+0x1fe>
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
          decode_len -= 4;
          val_offset += 4;
          decode_idx++;
          goto decode_next;
        } else if (decode_len == 4) {
  4019a8:	2c04      	cmp	r4, #4
  4019aa:	d104      	bne.n	4019b6 <dhcp_recv+0x1e2>
          value = ntohl(value);
  4019ac:	9809      	ldr	r0, [sp, #36]	; 0x24
  4019ae:	4b41      	ldr	r3, [pc, #260]	; (401ab4 <dhcp_recv+0x2e0>)
  4019b0:	4798      	blx	r3
  4019b2:	9009      	str	r0, [sp, #36]	; 0x24
  4019b4:	e005      	b.n	4019c2 <dhcp_recv+0x1ee>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  4019b6:	2c01      	cmp	r4, #1
  4019b8:	d000      	beq.n	4019bc <dhcp_recv+0x1e8>
  4019ba:	e7fe      	b.n	4019ba <dhcp_recv+0x1e6>
          value = ((u8_t*)&value)[0];
  4019bc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  4019c0:	9309      	str	r3, [sp, #36]	; 0x24
        }
        dhcp_got_option(dhcp, decode_idx);
  4019c2:	2301      	movs	r3, #1
  4019c4:	4a3c      	ldr	r2, [pc, #240]	; (401ab8 <dhcp_recv+0x2e4>)
  4019c6:	f802 3008 	strb.w	r3, [r2, r8]
        dhcp_set_option_value(dhcp, decode_idx, value);
  4019ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4019cc:	4a3b      	ldr	r2, [pc, #236]	; (401abc <dhcp_recv+0x2e8>)
  4019ce:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
  4019d2:	9b04      	ldr	r3, [sp, #16]
  4019d4:	e000      	b.n	4019d8 <dhcp_recv+0x204>
      default:
        decode_len = 0;
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
  4019d6:	9b04      	ldr	r3, [sp, #16]
        }
        dhcp_got_option(dhcp, decode_idx);
        dhcp_set_option_value(dhcp, decode_idx, value);
      }
    }
    if (offset >= q->len) {
  4019d8:	896a      	ldrh	r2, [r5, #10]
  4019da:	429a      	cmp	r2, r3
  4019dc:	d80d      	bhi.n	4019fa <dhcp_recv+0x226>
      offset -= q->len;
  4019de:	1a9b      	subs	r3, r3, r2
  4019e0:	b29b      	uxth	r3, r3
      offset_max -= q->len;
  4019e2:	ebc2 0b0b 	rsb	fp, r2, fp
  4019e6:	fa1f fb8b 	uxth.w	fp, fp
      if ((offset < offset_max) && offset_max) {
  4019ea:	455b      	cmp	r3, fp
  4019ec:	d20e      	bcs.n	401a0c <dhcp_recv+0x238>
  4019ee:	f1bb 0f00 	cmp.w	fp, #0
  4019f2:	d00b      	beq.n	401a0c <dhcp_recv+0x238>
        q = q->next;
  4019f4:	682d      	ldr	r5, [r5, #0]
        LWIP_ASSERT("next pbuf was null", q);
        options = (u8_t*)q->payload;
  4019f6:	686a      	ldr	r2, [r5, #4]
  4019f8:	9203      	str	r2, [sp, #12]
  }
  offset = options_idx;
  offset_max = options_idx_max;
  options = (u8_t*)q->payload;
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  4019fa:	b13d      	cbz	r5, 401a0c <dhcp_recv+0x238>
  4019fc:	461a      	mov	r2, r3
  4019fe:	9903      	ldr	r1, [sp, #12]
  401a00:	5cc9      	ldrb	r1, [r1, r3]
  401a02:	459b      	cmp	fp, r3
  401a04:	d902      	bls.n	401a0c <dhcp_recv+0x238>
  401a06:	29ff      	cmp	r1, #255	; 0xff
  401a08:	f47f af52 	bne.w	4018b0 <dhcp_recv+0xdc>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  401a0c:	4b2a      	ldr	r3, [pc, #168]	; (401ab8 <dhcp_recv+0x2e4>)
  401a0e:	781b      	ldrb	r3, [r3, #0]
  401a10:	b16b      	cbz	r3, 401a2e <dhcp_recv+0x25a>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  401a12:	4b2a      	ldr	r3, [pc, #168]	; (401abc <dhcp_recv+0x2e8>)
  401a14:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  401a16:	2100      	movs	r1, #0
  401a18:	4a27      	ldr	r2, [pc, #156]	; (401ab8 <dhcp_recv+0x2e4>)
  401a1a:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
  401a1c:	2b01      	cmp	r3, #1
  401a1e:	f000 8166 	beq.w	401cee <dhcp_recv+0x51a>
      parse_file_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  401a22:	2b02      	cmp	r3, #2
  401a24:	f43f af23 	beq.w	40186e <dhcp_recv+0x9a>
      parse_sname_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  401a28:	2b03      	cmp	r3, #3
  401a2a:	f000 815e 	beq.w	401cea <dhcp_recv+0x516>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
  401a2e:	9b02      	ldr	r3, [sp, #8]
  401a30:	2b00      	cmp	r3, #0
  401a32:	f47f af22 	bne.w	40187a <dhcp_recv+0xa6>
  401a36:	f8dd a014 	ldr.w	sl, [sp, #20]
  401a3a:	f8dd 901c 	ldr.w	r9, [sp, #28]
  401a3e:	f8dd b004 	ldr.w	fp, [sp, #4]
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  401a42:	4b1d      	ldr	r3, [pc, #116]	; (401ab8 <dhcp_recv+0x2e4>)
  401a44:	785b      	ldrb	r3, [r3, #1]
  401a46:	2b00      	cmp	r3, #0
  401a48:	f000 809b 	beq.w	401b82 <dhcp_recv+0x3ae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  401a4c:	4b1b      	ldr	r3, [pc, #108]	; (401abc <dhcp_recv+0x2e8>)
  401a4e:	791b      	ldrb	r3, [r3, #4]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  401a50:	2b05      	cmp	r3, #5
  401a52:	d14f      	bne.n	401af4 <dhcp_recv+0x320>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
  401a54:	f89a 300c 	ldrb.w	r3, [sl, #12]
  401a58:	2b01      	cmp	r3, #1
  401a5a:	d143      	bne.n	401ae4 <dhcp_recv+0x310>
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  401a5c:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
#if LWIP_DNS
  u8_t n;
#endif /* LWIP_DNS */

  /* clear options we might not get from the ACK */
  ip_addr_set_zero(&dhcp->offered_sn_mask);
  401a60:	2300      	movs	r3, #0
  401a62:	62a3      	str	r3, [r4, #40]	; 0x28
  ip_addr_set_zero(&dhcp->offered_gw_addr);
  401a64:	62e3      	str	r3, [r4, #44]	; 0x2c
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  401a66:	4b14      	ldr	r3, [pc, #80]	; (401ab8 <dhcp_recv+0x2e4>)
  401a68:	78db      	ldrb	r3, [r3, #3]
  401a6a:	b113      	cbz	r3, 401a72 <dhcp_recv+0x29e>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  401a6c:	4b13      	ldr	r3, [pc, #76]	; (401abc <dhcp_recv+0x2e8>)
  401a6e:	68db      	ldr	r3, [r3, #12]
  401a70:	6323      	str	r3, [r4, #48]	; 0x30
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  401a72:	4b11      	ldr	r3, [pc, #68]	; (401ab8 <dhcp_recv+0x2e4>)
  401a74:	791b      	ldrb	r3, [r3, #4]
  401a76:	b11b      	cbz	r3, 401a80 <dhcp_recv+0x2ac>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  401a78:	4b10      	ldr	r3, [pc, #64]	; (401abc <dhcp_recv+0x2e8>)
  401a7a:	691b      	ldr	r3, [r3, #16]
  401a7c:	6363      	str	r3, [r4, #52]	; 0x34
  401a7e:	e002      	b.n	401a86 <dhcp_recv+0x2b2>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  401a80:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a82:	085b      	lsrs	r3, r3, #1
  401a84:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  401a86:	4b0c      	ldr	r3, [pc, #48]	; (401ab8 <dhcp_recv+0x2e4>)
  401a88:	795b      	ldrb	r3, [r3, #5]
  401a8a:	b11b      	cbz	r3, 401a94 <dhcp_recv+0x2c0>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  401a8c:	4b0b      	ldr	r3, [pc, #44]	; (401abc <dhcp_recv+0x2e8>)
  401a8e:	695b      	ldr	r3, [r3, #20]
  401a90:	63a3      	str	r3, [r4, #56]	; 0x38
  401a92:	e001      	b.n	401a98 <dhcp_recv+0x2c4>
  } else {
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
  401a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a96:	63a3      	str	r3, [r4, #56]	; 0x38
  }

  /* (y)our internet address */
  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  401a98:	68a3      	ldr	r3, [r4, #8]
  401a9a:	691b      	ldr	r3, [r3, #16]
  401a9c:	6263      	str	r3, [r4, #36]	; 0x24
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  401a9e:	4b06      	ldr	r3, [pc, #24]	; (401ab8 <dhcp_recv+0x2e4>)
  401aa0:	799b      	ldrb	r3, [r3, #6]
  401aa2:	b18b      	cbz	r3, 401ac8 <dhcp_recv+0x2f4>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  401aa4:	4b05      	ldr	r3, [pc, #20]	; (401abc <dhcp_recv+0x2e8>)
  401aa6:	6998      	ldr	r0, [r3, #24]
  401aa8:	4b06      	ldr	r3, [pc, #24]	; (401ac4 <dhcp_recv+0x2f0>)
  401aaa:	4798      	blx	r3
  401aac:	62a0      	str	r0, [r4, #40]	; 0x28
    dhcp->subnet_mask_given = 1;
  401aae:	2301      	movs	r3, #1
  401ab0:	73a3      	strb	r3, [r4, #14]
  401ab2:	e00b      	b.n	401acc <dhcp_recv+0x2f8>
  401ab4:	004010c5 	.word	0x004010c5
  401ab8:	20403834 	.word	0x20403834
  401abc:	20403840 	.word	0x20403840
  401ac0:	004039f9 	.word	0x004039f9
  401ac4:	004010ad 	.word	0x004010ad
  } else {
    dhcp->subnet_mask_given = 0;
  401ac8:	2300      	movs	r3, #0
  401aca:	73a3      	strb	r3, [r4, #14]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  401acc:	4b8b      	ldr	r3, [pc, #556]	; (401cfc <dhcp_recv+0x528>)
  401ace:	79db      	ldrb	r3, [r3, #7]
  401ad0:	b123      	cbz	r3, 401adc <dhcp_recv+0x308>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  401ad2:	4b8b      	ldr	r3, [pc, #556]	; (401d00 <dhcp_recv+0x52c>)
  401ad4:	69d8      	ldr	r0, [r3, #28]
  401ad6:	4b8b      	ldr	r3, [pc, #556]	; (401d04 <dhcp_recv+0x530>)
  401ad8:	4798      	blx	r3
  401ada:	62e0      	str	r0, [r4, #44]	; 0x2c
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
      dhcp_handle_ack(netif);
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
  401adc:	4648      	mov	r0, r9
  401ade:	4b8a      	ldr	r3, [pc, #552]	; (401d08 <dhcp_recv+0x534>)
  401ae0:	4798      	blx	r3
  401ae2:	e04e      	b.n	401b82 <dhcp_recv+0x3ae>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
  401ae4:	3b03      	subs	r3, #3
  401ae6:	b2db      	uxtb	r3, r3
  401ae8:	2b02      	cmp	r3, #2
  401aea:	d84a      	bhi.n	401b82 <dhcp_recv+0x3ae>
      dhcp_bind(netif);
  401aec:	4648      	mov	r0, r9
  401aee:	4b87      	ldr	r3, [pc, #540]	; (401d0c <dhcp_recv+0x538>)
  401af0:	4798      	blx	r3
  401af2:	e046      	b.n	401b82 <dhcp_recv+0x3ae>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  401af4:	2b06      	cmp	r3, #6
  401af6:	d121      	bne.n	401b3c <dhcp_recv+0x368>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  401af8:	f89a 200c 	ldrb.w	r2, [sl, #12]
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
  401afc:	1ed3      	subs	r3, r2, #3
  401afe:	b2db      	uxtb	r3, r3
  401b00:	2b02      	cmp	r3, #2
  401b02:	d901      	bls.n	401b08 <dhcp_recv+0x334>
  401b04:	2a01      	cmp	r2, #1
  401b06:	d13c      	bne.n	401b82 <dhcp_recv+0x3ae>
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  401b08:	f8d9 5024 	ldr.w	r5, [r9, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Set the interface down since the address must no longer be used, as per RFC2131 */
  netif_set_down(netif);
  401b0c:	4648      	mov	r0, r9
  401b0e:	4b80      	ldr	r3, [pc, #512]	; (401d10 <dhcp_recv+0x53c>)
  401b10:	4798      	blx	r3
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  401b12:	4c80      	ldr	r4, [pc, #512]	; (401d14 <dhcp_recv+0x540>)
  401b14:	4621      	mov	r1, r4
  401b16:	4648      	mov	r0, r9
  401b18:	4b7f      	ldr	r3, [pc, #508]	; (401d18 <dhcp_recv+0x544>)
  401b1a:	4798      	blx	r3
  netif_set_gw(netif, IP_ADDR_ANY);
  401b1c:	4621      	mov	r1, r4
  401b1e:	4648      	mov	r0, r9
  401b20:	4b7e      	ldr	r3, [pc, #504]	; (401d1c <dhcp_recv+0x548>)
  401b22:	4798      	blx	r3
  netif_set_netmask(netif, IP_ADDR_ANY); 
  401b24:	4621      	mov	r1, r4
  401b26:	4648      	mov	r0, r9
  401b28:	4b7d      	ldr	r3, [pc, #500]	; (401d20 <dhcp_recv+0x54c>)
  401b2a:	4798      	blx	r3
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  401b2c:	210c      	movs	r1, #12
  401b2e:	4628      	mov	r0, r5
  401b30:	4b7c      	ldr	r3, [pc, #496]	; (401d24 <dhcp_recv+0x550>)
  401b32:	4798      	blx	r3
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  401b34:	4648      	mov	r0, r9
  401b36:	4b7c      	ldr	r3, [pc, #496]	; (401d28 <dhcp_recv+0x554>)
  401b38:	4798      	blx	r3
  401b3a:	e022      	b.n	401b82 <dhcp_recv+0x3ae>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
  401b3c:	2b02      	cmp	r3, #2
  401b3e:	d120      	bne.n	401b82 <dhcp_recv+0x3ae>
  401b40:	f89a 300c 	ldrb.w	r3, [sl, #12]
  401b44:	2b06      	cmp	r3, #6
  401b46:	d11c      	bne.n	401b82 <dhcp_recv+0x3ae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
  401b48:	2300      	movs	r3, #0
  401b4a:	f8aa 301a 	strh.w	r3, [sl, #26]
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  401b4e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  401b52:	4b6a      	ldr	r3, [pc, #424]	; (401cfc <dhcp_recv+0x528>)
  401b54:	789b      	ldrb	r3, [r3, #2]
  401b56:	b1a3      	cbz	r3, 401b82 <dhcp_recv+0x3ae>
    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  401b58:	4b69      	ldr	r3, [pc, #420]	; (401d00 <dhcp_recv+0x52c>)
  401b5a:	6898      	ldr	r0, [r3, #8]
  401b5c:	4b69      	ldr	r3, [pc, #420]	; (401d04 <dhcp_recv+0x530>)
  401b5e:	4798      	blx	r3
  401b60:	6220      	str	r0, [r4, #32]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->server_ip_addr)));
    /* remember offered address */
    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  401b62:	68a3      	ldr	r3, [r4, #8]
  401b64:	691b      	ldr	r3, [r3, #16]
  401b66:	6263      	str	r3, [r4, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  401b68:	4648      	mov	r0, r9
  401b6a:	4b70      	ldr	r3, [pc, #448]	; (401d2c <dhcp_recv+0x558>)
  401b6c:	4798      	blx	r3
  401b6e:	e008      	b.n	401b82 <dhcp_recv+0x3ae>
  401b70:	f8dd a014 	ldr.w	sl, [sp, #20]
  401b74:	f8dd b004 	ldr.w	fp, [sp, #4]
  401b78:	e003      	b.n	401b82 <dhcp_recv+0x3ae>
  401b7a:	f8dd a014 	ldr.w	sl, [sp, #20]
  401b7e:	f8dd b004 	ldr.w	fp, [sp, #4]
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
  401b82:	2300      	movs	r3, #0
  401b84:	f8ca 3008 	str.w	r3, [sl, #8]
  pbuf_free(p);
  401b88:	4658      	mov	r0, fp
  401b8a:	4b69      	ldr	r3, [pc, #420]	; (401d30 <dhcp_recv+0x55c>)
  401b8c:	4798      	blx	r3
}
  401b8e:	e0b2      	b.n	401cf6 <dhcp_recv+0x522>
  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  401b90:	9d01      	ldr	r5, [sp, #4]
  if (q == NULL) {
    return ERR_BUF;
  }
  offset = options_idx;
  offset_max = options_idx_max;
  options = (u8_t*)q->payload;
  401b92:	686a      	ldr	r2, [r5, #4]
  401b94:	4611      	mov	r1, r2
  401b96:	9203      	str	r2, [sp, #12]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  401b98:	461a      	mov	r2, r3
  401b9a:	5cc9      	ldrb	r1, [r1, r3]
  401b9c:	459b      	cmp	fp, r3
  401b9e:	f67f af35 	bls.w	401a0c <dhcp_recv+0x238>
  401ba2:	29ff      	cmp	r1, #255	; 0xff
  401ba4:	f47f ae84 	bne.w	4018b0 <dhcp_recv+0xdc>
  401ba8:	e730      	b.n	401a0c <dhcp_recv+0x238>
  401baa:	3302      	adds	r3, #2
      default:
        decode_len = 0;
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
  401bac:	fa12 f383 	uxtah	r3, r2, r3
  401bb0:	b29b      	uxth	r3, r3
  401bb2:	e711      	b.n	4019d8 <dhcp_recv+0x204>
    u16_t val_offset = offset + 2;
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  401bb4:	2200      	movs	r2, #0
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
  401bb6:	293b      	cmp	r1, #59	; 0x3b
  401bb8:	d8f7      	bhi.n	401baa <dhcp_recv+0x3d6>
  401bba:	a001      	add	r0, pc, #4	; (adr r0, 401bc0 <dhcp_recv+0x3ec>)
  401bbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
  401bc0:	004018cf 	.word	0x004018cf
  401bc4:	004018d5 	.word	0x004018d5
  401bc8:	00401bab 	.word	0x00401bab
  401bcc:	004018dd 	.word	0x004018dd
  401bd0:	00401bab 	.word	0x00401bab
  401bd4:	00401bab 	.word	0x00401bab
  401bd8:	004018e5 	.word	0x004018e5
  401bdc:	00401bab 	.word	0x00401bab
  401be0:	00401bab 	.word	0x00401bab
  401be4:	00401bab 	.word	0x00401bab
  401be8:	00401bab 	.word	0x00401bab
  401bec:	00401bab 	.word	0x00401bab
  401bf0:	00401bab 	.word	0x00401bab
  401bf4:	00401bab 	.word	0x00401bab
  401bf8:	00401bab 	.word	0x00401bab
  401bfc:	00401bab 	.word	0x00401bab
  401c00:	00401bab 	.word	0x00401bab
  401c04:	00401bab 	.word	0x00401bab
  401c08:	00401bab 	.word	0x00401bab
  401c0c:	00401bab 	.word	0x00401bab
  401c10:	00401bab 	.word	0x00401bab
  401c14:	00401bab 	.word	0x00401bab
  401c18:	00401bab 	.word	0x00401bab
  401c1c:	00401bab 	.word	0x00401bab
  401c20:	00401bab 	.word	0x00401bab
  401c24:	00401bab 	.word	0x00401bab
  401c28:	00401bab 	.word	0x00401bab
  401c2c:	00401bab 	.word	0x00401bab
  401c30:	00401bab 	.word	0x00401bab
  401c34:	00401bab 	.word	0x00401bab
  401c38:	00401bab 	.word	0x00401bab
  401c3c:	00401bab 	.word	0x00401bab
  401c40:	00401bab 	.word	0x00401bab
  401c44:	00401bab 	.word	0x00401bab
  401c48:	00401bab 	.word	0x00401bab
  401c4c:	00401bab 	.word	0x00401bab
  401c50:	00401bab 	.word	0x00401bab
  401c54:	00401bab 	.word	0x00401bab
  401c58:	00401bab 	.word	0x00401bab
  401c5c:	00401bab 	.word	0x00401bab
  401c60:	00401bab 	.word	0x00401bab
  401c64:	00401bab 	.word	0x00401bab
  401c68:	00401bab 	.word	0x00401bab
  401c6c:	00401bab 	.word	0x00401bab
  401c70:	00401bab 	.word	0x00401bab
  401c74:	00401bab 	.word	0x00401bab
  401c78:	00401bab 	.word	0x00401bab
  401c7c:	00401bab 	.word	0x00401bab
  401c80:	00401bab 	.word	0x00401bab
  401c84:	00401bab 	.word	0x00401bab
  401c88:	00401bab 	.word	0x00401bab
  401c8c:	004018fb 	.word	0x004018fb
  401c90:	00401903 	.word	0x00401903
  401c94:	0040190b 	.word	0x0040190b
  401c98:	00401913 	.word	0x00401913
  401c9c:	00401bab 	.word	0x00401bab
  401ca0:	00401bab 	.word	0x00401bab
  401ca4:	00401bab 	.word	0x00401bab
  401ca8:	0040191b 	.word	0x0040191b
  401cac:	00401923 	.word	0x00401923
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  401cb0:	4614      	mov	r4, r2
        /* will be increased below */
        offset--;
        break;
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  401cb2:	2706      	movs	r7, #6
  401cb4:	e013      	b.n	401cde <dhcp_recv+0x50a>
        break;
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  401cb6:	2707      	movs	r7, #7
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
        break;
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  401cb8:	2404      	movs	r4, #4
  401cba:	e010      	b.n	401cde <dhcp_recv+0x50a>
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  401cbc:	4614      	mov	r4, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  401cbe:	2703      	movs	r7, #3
  401cc0:	e00d      	b.n	401cde <dhcp_recv+0x50a>
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  401cc2:	4614      	mov	r4, r2
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
        break;
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  401cc4:	2700      	movs	r7, #0
  401cc6:	e00a      	b.n	401cde <dhcp_recv+0x50a>
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  401cc8:	4614      	mov	r4, r2
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
        break;
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  401cca:	2701      	movs	r7, #1
  401ccc:	e007      	b.n	401cde <dhcp_recv+0x50a>
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  401cce:	4614      	mov	r4, r2
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
        break;
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  401cd0:	2702      	movs	r7, #2
  401cd2:	e004      	b.n	401cde <dhcp_recv+0x50a>
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  401cd4:	4614      	mov	r4, r2
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
        break;
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_T1;
  401cd6:	2704      	movs	r7, #4
  401cd8:	e001      	b.n	401cde <dhcp_recv+0x50a>
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  401cda:	4614      	mov	r4, r2
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_T1;
        break;
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_T2;
  401cdc:	2705      	movs	r7, #5
  401cde:	1c99      	adds	r1, r3, #2
      default:
        decode_len = 0;
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
  401ce0:	fa12 f281 	uxtah	r2, r2, r1
  401ce4:	b292      	uxth	r2, r2
  401ce6:	9204      	str	r2, [sp, #16]
  401ce8:	e627      	b.n	40193a <dhcp_recv+0x166>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
      parse_sname_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
      parse_sname_as_options = 1;
  401cea:	2301      	movs	r3, #1
  401cec:	9302      	str	r3, [sp, #8]
  }
  if (parse_file_as_options) {
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  401cee:	f04f 0bec 	mov.w	fp, #236	; 0xec
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
  401cf2:	236c      	movs	r3, #108	; 0x6c
  401cf4:	e5c6      	b.n	401884 <dhcp_recv+0xb0>
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
  pbuf_free(p);
}
  401cf6:	b00b      	add	sp, #44	; 0x2c
  401cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cfc:	20403834 	.word	0x20403834
  401d00:	20403840 	.word	0x20403840
  401d04:	004010ad 	.word	0x004010ad
  401d08:	004016b9 	.word	0x004016b9
  401d0c:	004016e9 	.word	0x004016e9
  401d10:	00403621 	.word	0x00403621
  401d14:	0040e79c 	.word	0x0040e79c
  401d18:	004034e9 	.word	0x004034e9
  401d1c:	004035c5 	.word	0x004035c5
  401d20:	004035d1 	.word	0x004035d1
  401d24:	004010d1 	.word	0x004010d1
  401d28:	004013ed 	.word	0x004013ed
  401d2c:	004014cd 	.word	0x004014cd
  401d30:	004036c9 	.word	0x004036c9

00401d34 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  401d34:	b900      	cbnz	r0, 401d38 <dhcp_arp_reply+0x4>
  401d36:	e7fe      	b.n	401d36 <dhcp_arp_reply+0x2>
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
  401d38:	b530      	push	{r4, r5, lr}
  401d3a:	b083      	sub	sp, #12
  401d3c:	4605      	mov	r5, r0
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
  401d3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  401d40:	2c00      	cmp	r4, #0
  401d42:	d034      	beq.n	401dae <dhcp_arp_reply+0x7a>
  401d44:	7b23      	ldrb	r3, [r4, #12]
  401d46:	2b08      	cmp	r3, #8
  401d48:	d131      	bne.n	401dae <dhcp_arp_reply+0x7a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
  401d4a:	680a      	ldr	r2, [r1, #0]
  401d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d4e:	429a      	cmp	r2, r3
  401d50:	d12d      	bne.n	401dae <dhcp_arp_reply+0x7a>
{
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  401d52:	210c      	movs	r1, #12
  401d54:	4620      	mov	r0, r4
  401d56:	4b17      	ldr	r3, [pc, #92]	; (401db4 <dhcp_arp_reply+0x80>)
  401d58:	4798      	blx	r3
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  401d5a:	2204      	movs	r2, #4
  401d5c:	4621      	mov	r1, r4
  401d5e:	4628      	mov	r0, r5
  401d60:	4b15      	ldr	r3, [pc, #84]	; (401db8 <dhcp_arp_reply+0x84>)
  401d62:	4798      	blx	r3
  if (result == ERR_OK) {
  401d64:	b9f0      	cbnz	r0, 401da4 <dhcp_arp_reply+0x70>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  401d66:	2204      	movs	r2, #4
  401d68:	2132      	movs	r1, #50	; 0x32
  401d6a:	4620      	mov	r0, r4
  401d6c:	4b13      	ldr	r3, [pc, #76]	; (401dbc <dhcp_arp_reply+0x88>)
  401d6e:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  401d70:	6a60      	ldr	r0, [r4, #36]	; 0x24
  401d72:	4b13      	ldr	r3, [pc, #76]	; (401dc0 <dhcp_arp_reply+0x8c>)
  401d74:	4798      	blx	r3
  401d76:	4601      	mov	r1, r0
  401d78:	4620      	mov	r0, r4
  401d7a:	4b12      	ldr	r3, [pc, #72]	; (401dc4 <dhcp_arp_reply+0x90>)
  401d7c:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  401d7e:	4620      	mov	r0, r4
  401d80:	4b11      	ldr	r3, [pc, #68]	; (401dc8 <dhcp_arp_reply+0x94>)
  401d82:	4798      	blx	r3
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  401d84:	8b21      	ldrh	r1, [r4, #24]
  401d86:	31f0      	adds	r1, #240	; 0xf0
  401d88:	b289      	uxth	r1, r1
  401d8a:	6920      	ldr	r0, [r4, #16]
  401d8c:	4b0f      	ldr	r3, [pc, #60]	; (401dcc <dhcp_arp_reply+0x98>)
  401d8e:	4798      	blx	r3

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  401d90:	6921      	ldr	r1, [r4, #16]
  401d92:	6860      	ldr	r0, [r4, #4]
  401d94:	9500      	str	r5, [sp, #0]
  401d96:	2343      	movs	r3, #67	; 0x43
  401d98:	4a0d      	ldr	r2, [pc, #52]	; (401dd0 <dhcp_arp_reply+0x9c>)
  401d9a:	4d0e      	ldr	r5, [pc, #56]	; (401dd4 <dhcp_arp_reply+0xa0>)
  401d9c:	47a8      	blx	r5
    dhcp_delete_msg(dhcp);
  401d9e:	4620      	mov	r0, r4
  401da0:	4b0d      	ldr	r3, [pc, #52]	; (401dd8 <dhcp_arp_reply+0xa4>)
  401da2:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  401da4:	7b63      	ldrb	r3, [r4, #13]
  401da6:	3301      	adds	r3, #1
  401da8:	7363      	strb	r3, [r4, #13]
  msecs = 10*1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  401daa:	2314      	movs	r3, #20
  401dac:	8363      	strh	r3, [r4, #26]
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
    }
  }
}
  401dae:	b003      	add	sp, #12
  401db0:	bd30      	pop	{r4, r5, pc}
  401db2:	bf00      	nop
  401db4:	004010d1 	.word	0x004010d1
  401db8:	004011c1 	.word	0x004011c1
  401dbc:	004010e1 	.word	0x004010e1
  401dc0:	004010c5 	.word	0x004010c5
  401dc4:	00401145 	.word	0x00401145
  401dc8:	0040118d 	.word	0x0040118d
  401dcc:	0040387d 	.word	0x0040387d
  401dd0:	0040e798 	.word	0x0040e798
  401dd4:	00406935 	.word	0x00406935
  401dd8:	0040131d 	.word	0x0040131d

00401ddc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  401ddc:	b570      	push	{r4, r5, r6, lr}
  401dde:	b082      	sub	sp, #8
  401de0:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  401de2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_RENEWING);
  401de4:	2105      	movs	r1, #5
  401de6:	4620      	mov	r0, r4
  401de8:	4b20      	ldr	r3, [pc, #128]	; (401e6c <dhcp_renew+0x90>)
  401dea:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  401dec:	2203      	movs	r2, #3
  401dee:	4621      	mov	r1, r4
  401df0:	4630      	mov	r0, r6
  401df2:	4b1f      	ldr	r3, [pc, #124]	; (401e70 <dhcp_renew+0x94>)
  401df4:	4798      	blx	r3
  if (result == ERR_OK) {
  401df6:	4605      	mov	r5, r0
  401df8:	b9e0      	cbnz	r0, 401e34 <dhcp_renew+0x58>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  401dfa:	2202      	movs	r2, #2
  401dfc:	2139      	movs	r1, #57	; 0x39
  401dfe:	4620      	mov	r0, r4
  401e00:	4b1c      	ldr	r3, [pc, #112]	; (401e74 <dhcp_renew+0x98>)
  401e02:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  401e04:	8d31      	ldrh	r1, [r6, #40]	; 0x28
  401e06:	4620      	mov	r0, r4
  401e08:	4b1b      	ldr	r3, [pc, #108]	; (401e78 <dhcp_renew+0x9c>)
  401e0a:	4798      	blx	r3
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  401e0c:	4620      	mov	r0, r4
  401e0e:	4b1b      	ldr	r3, [pc, #108]	; (401e7c <dhcp_renew+0xa0>)
  401e10:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  401e12:	8b21      	ldrh	r1, [r4, #24]
  401e14:	31f0      	adds	r1, #240	; 0xf0
  401e16:	b289      	uxth	r1, r1
  401e18:	6920      	ldr	r0, [r4, #16]
  401e1a:	4b19      	ldr	r3, [pc, #100]	; (401e80 <dhcp_renew+0xa4>)
  401e1c:	4798      	blx	r3

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  401e1e:	6921      	ldr	r1, [r4, #16]
  401e20:	6860      	ldr	r0, [r4, #4]
  401e22:	9600      	str	r6, [sp, #0]
  401e24:	2343      	movs	r3, #67	; 0x43
  401e26:	f104 0220 	add.w	r2, r4, #32
  401e2a:	4e16      	ldr	r6, [pc, #88]	; (401e84 <dhcp_renew+0xa8>)
  401e2c:	47b0      	blx	r6
    dhcp_delete_msg(dhcp);
  401e2e:	4620      	mov	r0, r4
  401e30:	4b15      	ldr	r3, [pc, #84]	; (401e88 <dhcp_renew+0xac>)
  401e32:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  401e34:	7b63      	ldrb	r3, [r4, #13]
  401e36:	3301      	adds	r3, #1
  401e38:	b2db      	uxtb	r3, r3
  401e3a:	7363      	strb	r3, [r4, #13]
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  401e3c:	2b09      	cmp	r3, #9
  401e3e:	d806      	bhi.n	401e4e <dhcp_renew+0x72>
  401e40:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
  401e44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401e48:	011b      	lsls	r3, r3, #4
  401e4a:	b29b      	uxth	r3, r3
  401e4c:	e001      	b.n	401e52 <dhcp_renew+0x76>
  401e4e:	f644 6320 	movw	r3, #20000	; 0x4e20
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  401e52:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  401e56:	4a0d      	ldr	r2, [pc, #52]	; (401e8c <dhcp_renew+0xb0>)
  401e58:	fb82 1203 	smull	r1, r2, r2, r3
  401e5c:	17db      	asrs	r3, r3, #31
  401e5e:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  401e62:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
  401e64:	4628      	mov	r0, r5
  401e66:	b002      	add	sp, #8
  401e68:	bd70      	pop	{r4, r5, r6, pc}
  401e6a:	bf00      	nop
  401e6c:	004010d1 	.word	0x004010d1
  401e70:	004011c1 	.word	0x004011c1
  401e74:	004010e1 	.word	0x004010e1
  401e78:	0040111d 	.word	0x0040111d
  401e7c:	0040118d 	.word	0x0040118d
  401e80:	0040387d 	.word	0x0040387d
  401e84:	00406935 	.word	0x00406935
  401e88:	0040131d 	.word	0x0040131d
  401e8c:	10624dd3 	.word	0x10624dd3

00401e90 <dhcp_coarse_tmr>:
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr()
{
  401e90:	b570      	push	{r4, r5, r6, lr}
  struct netif *netif = netif_list;
  401e92:	4b15      	ldr	r3, [pc, #84]	; (401ee8 <dhcp_coarse_tmr+0x58>)
  401e94:	681c      	ldr	r4, [r3, #0]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  401e96:	b334      	cbz	r4, 401ee6 <dhcp_coarse_tmr+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_RENEWING, not DHCP_BOUND */
    dhcp_renew(netif);
  401e98:	4e14      	ldr	r6, [pc, #80]	; (401eec <dhcp_coarse_tmr+0x5c>)
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_REBINDING, not DHCP_BOUND */
    dhcp_rebind(netif);
  401e9a:	4d15      	ldr	r5, [pc, #84]	; (401ef0 <dhcp_coarse_tmr+0x60>)
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  401e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e9e:	b1fb      	cbz	r3, 401ee0 <dhcp_coarse_tmr+0x50>
      /* timer is active (non zero), and triggers (zeroes) now? */
      if (netif->dhcp->t2_timeout-- == 1) {
  401ea0:	8bda      	ldrh	r2, [r3, #30]
  401ea2:	1e51      	subs	r1, r2, #1
  401ea4:	83d9      	strh	r1, [r3, #30]
  401ea6:	2a01      	cmp	r2, #1
  401ea8:	d10a      	bne.n	401ec0 <dhcp_coarse_tmr+0x30>
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  401eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401eac:	7b1b      	ldrb	r3, [r3, #12]
  401eae:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
  401eb2:	2a01      	cmp	r2, #1
  401eb4:	d001      	beq.n	401eba <dhcp_coarse_tmr+0x2a>
  401eb6:	2b0a      	cmp	r3, #10
  401eb8:	d112      	bne.n	401ee0 <dhcp_coarse_tmr+0x50>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_REBINDING, not DHCP_BOUND */
    dhcp_rebind(netif);
  401eba:	4620      	mov	r0, r4
  401ebc:	47a8      	blx	r5
  401ebe:	e00f      	b.n	401ee0 <dhcp_coarse_tmr+0x50>
      if (netif->dhcp->t2_timeout-- == 1) {
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (netif->dhcp->t1_timeout-- == 1) {
  401ec0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  401ec2:	8b93      	ldrh	r3, [r2, #28]
  401ec4:	1e59      	subs	r1, r3, #1
  401ec6:	8391      	strh	r1, [r2, #28]
  401ec8:	2b01      	cmp	r3, #1
  401eca:	d109      	bne.n	401ee0 <dhcp_coarse_tmr+0x50>
static void
dhcp_t1_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  401ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ece:	7b1b      	ldrb	r3, [r3, #12]
  401ed0:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
  401ed4:	2a01      	cmp	r2, #1
  401ed6:	d001      	beq.n	401edc <dhcp_coarse_tmr+0x4c>
  401ed8:	2b0a      	cmp	r3, #10
  401eda:	d101      	bne.n	401ee0 <dhcp_coarse_tmr+0x50>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_RENEWING, not DHCP_BOUND */
    dhcp_renew(netif);
  401edc:	4620      	mov	r0, r4
  401ede:	47b0      	blx	r6
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  401ee0:	6824      	ldr	r4, [r4, #0]
dhcp_coarse_tmr()
{
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  401ee2:	2c00      	cmp	r4, #0
  401ee4:	d1da      	bne.n	401e9c <dhcp_coarse_tmr+0xc>
  401ee6:	bd70      	pop	{r4, r5, r6, pc}
  401ee8:	2040488c 	.word	0x2040488c
  401eec:	00401ddd 	.word	0x00401ddd
  401ef0:	00401339 	.word	0x00401339

00401ef4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  401ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  401ef6:	b083      	sub	sp, #12
  401ef8:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif->dhcp;
  401efa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_OFF);
  401efc:	2100      	movs	r1, #0
  401efe:	4620      	mov	r0, r4
  401f00:	4b27      	ldr	r3, [pc, #156]	; (401fa0 <dhcp_release+0xac>)
  401f02:	4798      	blx	r3
  /* clean old DHCP offer */
  ip_addr_set_zero(&dhcp->server_ip_addr);
  401f04:	2300      	movs	r3, #0
  401f06:	6223      	str	r3, [r4, #32]
  ip_addr_set_zero(&dhcp->offered_ip_addr);
  401f08:	6263      	str	r3, [r4, #36]	; 0x24
  ip_addr_set_zero(&dhcp->offered_sn_mask);
  401f0a:	62a3      	str	r3, [r4, #40]	; 0x28
  ip_addr_set_zero(&dhcp->offered_gw_addr);
  401f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  401f0e:	63a3      	str	r3, [r4, #56]	; 0x38
  401f10:	6363      	str	r3, [r4, #52]	; 0x34
  401f12:	6323      	str	r3, [r4, #48]	; 0x30
  
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  401f14:	2207      	movs	r2, #7
  401f16:	4621      	mov	r1, r4
  401f18:	4628      	mov	r0, r5
  401f1a:	4b22      	ldr	r3, [pc, #136]	; (401fa4 <dhcp_release+0xb0>)
  401f1c:	4798      	blx	r3
  if (result == ERR_OK) {
  401f1e:	4606      	mov	r6, r0
  401f20:	b998      	cbnz	r0, 401f4a <dhcp_release+0x56>
    dhcp_option_trailer(dhcp);
  401f22:	4620      	mov	r0, r4
  401f24:	4b20      	ldr	r3, [pc, #128]	; (401fa8 <dhcp_release+0xb4>)
  401f26:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  401f28:	8b21      	ldrh	r1, [r4, #24]
  401f2a:	31f0      	adds	r1, #240	; 0xf0
  401f2c:	b289      	uxth	r1, r1
  401f2e:	6920      	ldr	r0, [r4, #16]
  401f30:	4b1e      	ldr	r3, [pc, #120]	; (401fac <dhcp_release+0xb8>)
  401f32:	4798      	blx	r3

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  401f34:	6921      	ldr	r1, [r4, #16]
  401f36:	6860      	ldr	r0, [r4, #4]
  401f38:	9500      	str	r5, [sp, #0]
  401f3a:	2343      	movs	r3, #67	; 0x43
  401f3c:	f104 0220 	add.w	r2, r4, #32
  401f40:	4f1b      	ldr	r7, [pc, #108]	; (401fb0 <dhcp_release+0xbc>)
  401f42:	47b8      	blx	r7
    dhcp_delete_msg(dhcp);
  401f44:	4620      	mov	r0, r4
  401f46:	4b1b      	ldr	r3, [pc, #108]	; (401fb4 <dhcp_release+0xc0>)
  401f48:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  401f4a:	7b63      	ldrb	r3, [r4, #13]
  401f4c:	3301      	adds	r3, #1
  401f4e:	b2db      	uxtb	r3, r3
  401f50:	7363      	strb	r3, [r4, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  401f52:	2b09      	cmp	r3, #9
  401f54:	d806      	bhi.n	401f64 <dhcp_release+0x70>
  401f56:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
  401f5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401f5e:	00db      	lsls	r3, r3, #3
  401f60:	b29b      	uxth	r3, r3
  401f62:	e001      	b.n	401f68 <dhcp_release+0x74>
  401f64:	f242 7310 	movw	r3, #10000	; 0x2710
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  401f68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  401f6c:	4a12      	ldr	r2, [pc, #72]	; (401fb8 <dhcp_release+0xc4>)
  401f6e:	fb82 1203 	smull	r1, r2, r2, r3
  401f72:	17db      	asrs	r3, r3, #31
  401f74:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  401f78:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
  /* bring the interface down */
  netif_set_down(netif);
  401f7a:	4628      	mov	r0, r5
  401f7c:	4b0f      	ldr	r3, [pc, #60]	; (401fbc <dhcp_release+0xc8>)
  401f7e:	4798      	blx	r3
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  401f80:	4c0f      	ldr	r4, [pc, #60]	; (401fc0 <dhcp_release+0xcc>)
  401f82:	4621      	mov	r1, r4
  401f84:	4628      	mov	r0, r5
  401f86:	4b0f      	ldr	r3, [pc, #60]	; (401fc4 <dhcp_release+0xd0>)
  401f88:	4798      	blx	r3
  netif_set_gw(netif, IP_ADDR_ANY);
  401f8a:	4621      	mov	r1, r4
  401f8c:	4628      	mov	r0, r5
  401f8e:	4b0e      	ldr	r3, [pc, #56]	; (401fc8 <dhcp_release+0xd4>)
  401f90:	4798      	blx	r3
  netif_set_netmask(netif, IP_ADDR_ANY);
  401f92:	4621      	mov	r1, r4
  401f94:	4628      	mov	r0, r5
  401f96:	4b0d      	ldr	r3, [pc, #52]	; (401fcc <dhcp_release+0xd8>)
  401f98:	4798      	blx	r3
  
  return result;
}
  401f9a:	4630      	mov	r0, r6
  401f9c:	b003      	add	sp, #12
  401f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401fa0:	004010d1 	.word	0x004010d1
  401fa4:	004011c1 	.word	0x004011c1
  401fa8:	0040118d 	.word	0x0040118d
  401fac:	0040387d 	.word	0x0040387d
  401fb0:	00406935 	.word	0x00406935
  401fb4:	0040131d 	.word	0x0040131d
  401fb8:	10624dd3 	.word	0x10624dd3
  401fbc:	00403621 	.word	0x00403621
  401fc0:	0040e79c 	.word	0x0040e79c
  401fc4:	004034e9 	.word	0x004034e9
  401fc8:	004035c5 	.word	0x004035c5
  401fcc:	004035d1 	.word	0x004035d1

00401fd0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr()
{
  401fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct netif *netif = netif_list;
  401fd2:	4b2b      	ldr	r3, [pc, #172]	; (402080 <dhcp_fine_tmr+0xb0>)
  401fd4:	681c      	ldr	r4, [r3, #0]
  /* loop through netif's */
  while (netif != NULL) {
  401fd6:	2c00      	cmp	r4, #0
  401fd8:	d051      	beq.n	40207e <dhcp_fine_tmr+0xae>
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  401fda:	4d2a      	ldr	r5, [pc, #168]	; (402084 <dhcp_fine_tmr+0xb4>)
      dhcp_release(netif);
      dhcp_discover(netif);
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
    if (dhcp->tries < REBOOT_TRIES) {
      dhcp_reboot(netif);
  401fdc:	4f2a      	ldr	r7, [pc, #168]	; (402088 <dhcp_fine_tmr+0xb8>)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
      dhcp_rebind(netif);
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
  401fde:	4e2b      	ldr	r6, [pc, #172]	; (40208c <dhcp_fine_tmr+0xbc>)
{
  struct netif *netif = netif_list;
  /* loop through netif's */
  while (netif != NULL) {
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  401fe0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  401fe2:	2a00      	cmp	r2, #0
  401fe4:	d048      	beq.n	402078 <dhcp_fine_tmr+0xa8>
      /* timer is active (non zero), and is about to trigger now */      
      if (netif->dhcp->request_timeout > 1) {
  401fe6:	8b53      	ldrh	r3, [r2, #26]
  401fe8:	2b01      	cmp	r3, #1
  401fea:	d902      	bls.n	401ff2 <dhcp_fine_tmr+0x22>
        netif->dhcp->request_timeout--;
  401fec:	3b01      	subs	r3, #1
  401fee:	8353      	strh	r3, [r2, #26]
  401ff0:	e042      	b.n	402078 <dhcp_fine_tmr+0xa8>
      }
      else if (netif->dhcp->request_timeout == 1) {
  401ff2:	2b01      	cmp	r3, #1
  401ff4:	d140      	bne.n	402078 <dhcp_fine_tmr+0xa8>
        netif->dhcp->request_timeout--;
  401ff6:	2300      	movs	r3, #0
  401ff8:	8353      	strh	r3, [r2, #26]
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  401ffa:	6a62      	ldr	r2, [r4, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
  401ffc:	7b13      	ldrb	r3, [r2, #12]
  401ffe:	2b0c      	cmp	r3, #12
  402000:	d001      	beq.n	402006 <dhcp_fine_tmr+0x36>
  402002:	2b06      	cmp	r3, #6
  402004:	d102      	bne.n	40200c <dhcp_fine_tmr+0x3c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  402006:	4620      	mov	r0, r4
  402008:	47a8      	blx	r5
  40200a:	e035      	b.n	402078 <dhcp_fine_tmr+0xa8>
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_REQUESTING) {
  40200c:	2b01      	cmp	r3, #1
  40200e:	d10b      	bne.n	402028 <dhcp_fine_tmr+0x58>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
  402010:	7b53      	ldrb	r3, [r2, #13]
  402012:	2b05      	cmp	r3, #5
  402014:	d803      	bhi.n	40201e <dhcp_fine_tmr+0x4e>
      dhcp_select(netif);
  402016:	4620      	mov	r0, r4
  402018:	4b1d      	ldr	r3, [pc, #116]	; (402090 <dhcp_fine_tmr+0xc0>)
  40201a:	4798      	blx	r3
  40201c:	e02c      	b.n	402078 <dhcp_fine_tmr+0xa8>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
      dhcp_release(netif);
  40201e:	4620      	mov	r0, r4
  402020:	47b0      	blx	r6
      dhcp_discover(netif);
  402022:	4620      	mov	r0, r4
  402024:	47a8      	blx	r5
  402026:	e027      	b.n	402078 <dhcp_fine_tmr+0xa8>
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_CHECKING) {
  402028:	2b08      	cmp	r3, #8
  40202a:	d107      	bne.n	40203c <dhcp_fine_tmr+0x6c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
  40202c:	7b53      	ldrb	r3, [r2, #13]
  40202e:	2b01      	cmp	r3, #1
      dhcp_check(netif);
  402030:	4620      	mov	r0, r4
  402032:	bf94      	ite	ls
  402034:	4b17      	ldrls	r3, [pc, #92]	; (402094 <dhcp_fine_tmr+0xc4>)
    /* no ARP replies on the offered address,
       looks like the IP address is indeed free */
    } else {
      /* bind the interface to the offered address */
      dhcp_bind(netif);
  402036:	4b18      	ldrhi	r3, [pc, #96]	; (402098 <dhcp_fine_tmr+0xc8>)
  402038:	4798      	blx	r3
  40203a:	e01d      	b.n	402078 <dhcp_fine_tmr+0xa8>
    }
#endif /* DHCP_DOES_ARP_CHECK */
  }
  /* did not get response to renew request? */
  else if (dhcp->state == DHCP_RENEWING) {
  40203c:	2b05      	cmp	r3, #5
  40203e:	d103      	bne.n	402048 <dhcp_fine_tmr+0x78>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
  402040:	4620      	mov	r0, r4
  402042:	4b16      	ldr	r3, [pc, #88]	; (40209c <dhcp_fine_tmr+0xcc>)
  402044:	4798      	blx	r3
  402046:	e017      	b.n	402078 <dhcp_fine_tmr+0xa8>
  /* did not get response to rebind request? */
  } else if (dhcp->state == DHCP_REBINDING) {
  402048:	2b04      	cmp	r3, #4
  40204a:	d10b      	bne.n	402064 <dhcp_fine_tmr+0x94>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
  40204c:	7b53      	ldrb	r3, [r2, #13]
  40204e:	2b08      	cmp	r3, #8
  402050:	d803      	bhi.n	40205a <dhcp_fine_tmr+0x8a>
      dhcp_rebind(netif);
  402052:	4620      	mov	r0, r4
  402054:	4b12      	ldr	r3, [pc, #72]	; (4020a0 <dhcp_fine_tmr+0xd0>)
  402056:	4798      	blx	r3
  402058:	e00e      	b.n	402078 <dhcp_fine_tmr+0xa8>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
  40205a:	4620      	mov	r0, r4
  40205c:	47b0      	blx	r6
      dhcp_discover(netif);
  40205e:	4620      	mov	r0, r4
  402060:	47a8      	blx	r5
  402062:	e009      	b.n	402078 <dhcp_fine_tmr+0xa8>
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
  402064:	2b03      	cmp	r3, #3
  402066:	d107      	bne.n	402078 <dhcp_fine_tmr+0xa8>
    if (dhcp->tries < REBOOT_TRIES) {
  402068:	7b53      	ldrb	r3, [r2, #13]
  40206a:	2b01      	cmp	r3, #1
  40206c:	d802      	bhi.n	402074 <dhcp_fine_tmr+0xa4>
      dhcp_reboot(netif);
  40206e:	4620      	mov	r0, r4
  402070:	47b8      	blx	r7
  402072:	e001      	b.n	402078 <dhcp_fine_tmr+0xa8>
    } else {
      dhcp_discover(netif);
  402074:	4620      	mov	r0, r4
  402076:	47a8      	blx	r5
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  402078:	6824      	ldr	r4, [r4, #0]
void
dhcp_fine_tmr()
{
  struct netif *netif = netif_list;
  /* loop through netif's */
  while (netif != NULL) {
  40207a:	2c00      	cmp	r4, #0
  40207c:	d1b0      	bne.n	401fe0 <dhcp_fine_tmr+0x10>
  40207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402080:	2040488c 	.word	0x2040488c
  402084:	004013ed 	.word	0x004013ed
  402088:	004015e1 	.word	0x004015e1
  40208c:	00401ef5 	.word	0x00401ef5
  402090:	004014cd 	.word	0x004014cd
  402094:	004016b9 	.word	0x004016b9
  402098:	004016e9 	.word	0x004016e9
  40209c:	00401ddd 	.word	0x00401ddd
  4020a0:	00401339 	.word	0x00401339

004020a4 <dhcp_stop>:
 */
void
dhcp_stop(struct netif *netif)
{
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  4020a4:	b900      	cbnz	r0, 4020a8 <dhcp_stop+0x4>
  4020a6:	e7fe      	b.n	4020a6 <dhcp_stop+0x2>
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  4020a8:	b510      	push	{r4, lr}
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  dhcp = netif->dhcp;
  4020aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  /* Remove the flag that says this netif is handled by DHCP. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  4020ac:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
  4020b0:	f022 0208 	bic.w	r2, r2, #8
  4020b4:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  4020b8:	b14c      	cbz	r4, 4020ce <dhcp_stop+0x2a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
  4020ba:	6860      	ldr	r0, [r4, #4]
  4020bc:	b118      	cbz	r0, 4020c6 <dhcp_stop+0x22>
      udp_remove(dhcp->pcb);
  4020be:	4b04      	ldr	r3, [pc, #16]	; (4020d0 <dhcp_stop+0x2c>)
  4020c0:	4798      	blx	r3
      dhcp->pcb = NULL;
  4020c2:	2300      	movs	r3, #0
  4020c4:	6063      	str	r3, [r4, #4]
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_OFF);
  4020c6:	2100      	movs	r1, #0
  4020c8:	4620      	mov	r0, r4
  4020ca:	4b02      	ldr	r3, [pc, #8]	; (4020d4 <dhcp_stop+0x30>)
  4020cc:	4798      	blx	r3
  4020ce:	bd10      	pop	{r4, pc}
  4020d0:	00406ab1 	.word	0x00406ab1
  4020d4:	004010d1 	.word	0x004010d1

004020d8 <dhcp_start>:
dhcp_start(struct netif *netif)
{
  struct dhcp *dhcp;
  err_t result = ERR_OK;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  4020d8:	b900      	cbnz	r0, 4020dc <dhcp_start+0x4>
  4020da:	e7fe      	b.n	4020da <dhcp_start+0x2>
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  4020dc:	b570      	push	{r4, r5, r6, lr}
  4020de:	4604      	mov	r4, r0
  struct dhcp *dhcp;
  err_t result = ERR_OK;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  dhcp = netif->dhcp;
  4020e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Remove the flag that says this netif is handled by DHCP,
     it is set when we succeeded starting. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  4020e2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4020e6:	f023 0208 	bic.w	r2, r3, #8
  4020ea:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
  4020ee:	f013 0f20 	tst.w	r3, #32
  4020f2:	d040      	beq.n	402176 <dhcp_start+0x9e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  4020f4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  4020f6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
  4020fa:	d33f      	bcc.n	40217c <dhcp_start+0xa4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  4020fc:	b93d      	cbnz	r5, 40210e <dhcp_start+0x36>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  4020fe:	203c      	movs	r0, #60	; 0x3c
  402100:	4b23      	ldr	r3, [pc, #140]	; (402190 <dhcp_start+0xb8>)
  402102:	4798      	blx	r3
    if (dhcp == NULL) {
  402104:	4605      	mov	r5, r0
  402106:	2800      	cmp	r0, #0
  402108:	d03b      	beq.n	402182 <dhcp_start+0xaa>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
  40210a:	6260      	str	r0, [r4, #36]	; 0x24
  40210c:	e003      	b.n	402116 <dhcp_start+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
  40210e:	6868      	ldr	r0, [r5, #4]
  402110:	b108      	cbz	r0, 402116 <dhcp_start+0x3e>
      udp_remove(dhcp->pcb);
  402112:	4b20      	ldr	r3, [pc, #128]	; (402194 <dhcp_start+0xbc>)
  402114:	4798      	blx	r3
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  }
    
  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  402116:	223c      	movs	r2, #60	; 0x3c
  402118:	2100      	movs	r1, #0
  40211a:	4628      	mov	r0, r5
  40211c:	4b1e      	ldr	r3, [pc, #120]	; (402198 <dhcp_start+0xc0>)
  40211e:	4798      	blx	r3
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
  402120:	4b1e      	ldr	r3, [pc, #120]	; (40219c <dhcp_start+0xc4>)
  402122:	4798      	blx	r3
  402124:	6068      	str	r0, [r5, #4]
  if (dhcp->pcb == NULL) {
  402126:	2800      	cmp	r0, #0
  402128:	d02e      	beq.n	402188 <dhcp_start+0xb0>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
  40212a:	7a03      	ldrb	r3, [r0, #8]
  40212c:	f043 0320 	orr.w	r3, r3, #32
  402130:	7203      	strb	r3, [r0, #8]
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
  402132:	4e1b      	ldr	r6, [pc, #108]	; (4021a0 <dhcp_start+0xc8>)
  402134:	2244      	movs	r2, #68	; 0x44
  402136:	4631      	mov	r1, r6
  402138:	6868      	ldr	r0, [r5, #4]
  40213a:	4b1a      	ldr	r3, [pc, #104]	; (4021a4 <dhcp_start+0xcc>)
  40213c:	4798      	blx	r3
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  40213e:	2243      	movs	r2, #67	; 0x43
  402140:	4631      	mov	r1, r6
  402142:	6868      	ldr	r0, [r5, #4]
  402144:	4b18      	ldr	r3, [pc, #96]	; (4021a8 <dhcp_start+0xd0>)
  402146:	4798      	blx	r3
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
  402148:	4622      	mov	r2, r4
  40214a:	4918      	ldr	r1, [pc, #96]	; (4021ac <dhcp_start+0xd4>)
  40214c:	6868      	ldr	r0, [r5, #4]
  40214e:	4b18      	ldr	r3, [pc, #96]	; (4021b0 <dhcp_start+0xd8>)
  402150:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  402152:	4620      	mov	r0, r4
  402154:	4b17      	ldr	r3, [pc, #92]	; (4021b4 <dhcp_start+0xdc>)
  402156:	4798      	blx	r3
  if (result != ERR_OK) {
  402158:	b128      	cbz	r0, 402166 <dhcp_start+0x8e>
    /* free resources allocated above */
    dhcp_stop(netif);
  40215a:	4620      	mov	r0, r4
  40215c:	4b16      	ldr	r3, [pc, #88]	; (4021b8 <dhcp_start+0xe0>)
  40215e:	4798      	blx	r3
    return ERR_MEM;
  402160:	f04f 30ff 	mov.w	r0, #4294967295
  402164:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
  402166:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  40216a:	f043 0308 	orr.w	r3, r3, #8
  40216e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  return result;
  402172:	2000      	movs	r0, #0
  402174:	bd70      	pop	{r4, r5, r6, pc}
  netif->flags &= ~NETIF_FLAG_DHCP;

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
  402176:	f06f 000d 	mvn.w	r0, #13
  40217a:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  40217c:	f04f 30ff 	mov.w	r0, #4294967295
  402180:	bd70      	pop	{r4, r5, r6, pc}
  if (dhcp == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
    if (dhcp == NULL) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  402182:	f04f 30ff 	mov.w	r0, #4294967295
  402186:	bd70      	pop	{r4, r5, r6, pc}
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
  if (dhcp->pcb == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
  402188:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
  return result;
}
  40218c:	bd70      	pop	{r4, r5, r6, pc}
  40218e:	bf00      	nop
  402190:	00403365 	.word	0x00403365
  402194:	00406ab1 	.word	0x00406ab1
  402198:	0040805d 	.word	0x0040805d
  40219c:	00406aed 	.word	0x00406aed
  4021a0:	0040e79c 	.word	0x0040e79c
  4021a4:	0040685d 	.word	0x0040685d
  4021a8:	00406a49 	.word	0x00406a49
  4021ac:	004017d5 	.word	0x004017d5
  4021b0:	00406aa9 	.word	0x00406aa9
  4021b4:	004013ed 	.word	0x004013ed
  4021b8:	004020a5 	.word	0x004020a5

004021bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  4021bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4021c0:	b085      	sub	sp, #20
  4021c2:	4680      	mov	r8, r0
  4021c4:	4689      	mov	r9, r1
  4021c6:	4615      	mov	r5, r2
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  4021c8:	2200      	movs	r2, #0
  4021ca:	2124      	movs	r1, #36	; 0x24
  4021cc:	2001      	movs	r0, #1
  4021ce:	4b22      	ldr	r3, [pc, #136]	; (402258 <icmp_send_response+0x9c>)
  4021d0:	4798      	blx	r3
                 PBUF_RAM);
  if (q == NULL) {
  4021d2:	2800      	cmp	r0, #0
  4021d4:	d03d      	beq.n	402252 <icmp_send_response+0x96>
  4021d6:	4606      	mov	r6, r0
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  4021d8:	f8d8 7004 	ldr.w	r7, [r8, #4]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  4021dc:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
  4021de:	f884 9000 	strb.w	r9, [r4]
  icmphdr->code = code;
  4021e2:	7065      	strb	r5, [r4, #1]
  icmphdr->id = 0;
  4021e4:	2500      	movs	r5, #0
  4021e6:	7125      	strb	r5, [r4, #4]
  4021e8:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
  4021ea:	71a5      	strb	r5, [r4, #6]
  4021ec:	71e5      	strb	r5, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  4021ee:	f8d0 c004 	ldr.w	ip, [r0, #4]
  4021f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4021f6:	f8d3 e000 	ldr.w	lr, [r3]
  4021fa:	6858      	ldr	r0, [r3, #4]
  4021fc:	6899      	ldr	r1, [r3, #8]
  4021fe:	f8d3 800c 	ldr.w	r8, [r3, #12]
  402202:	f8cc e008 	str.w	lr, [ip, #8]
  402206:	f8cc 000c 	str.w	r0, [ip, #12]
  40220a:	f8cc 1010 	str.w	r1, [ip, #16]
  40220e:	f8cc 8014 	str.w	r8, [ip, #20]
  402212:	f8d3 e010 	ldr.w	lr, [r3, #16]
  402216:	6958      	ldr	r0, [r3, #20]
  402218:	6999      	ldr	r1, [r3, #24]
  40221a:	f8cc e018 	str.w	lr, [ip, #24]
  40221e:	f8cc 001c 	str.w	r0, [ip, #28]
  402222:	f8cc 1020 	str.w	r1, [ip, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
  402226:	70a5      	strb	r5, [r4, #2]
  402228:	70e5      	strb	r5, [r4, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
  40222a:	8971      	ldrh	r1, [r6, #10]
  40222c:	4620      	mov	r0, r4
  40222e:	4b0b      	ldr	r3, [pc, #44]	; (40225c <icmp_send_response+0xa0>)
  402230:	4798      	blx	r3
  402232:	8060      	strh	r0, [r4, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  402234:	68fb      	ldr	r3, [r7, #12]
  402236:	aa04      	add	r2, sp, #16
  402238:	f842 3d04 	str.w	r3, [r2, #-4]!
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  40223c:	2301      	movs	r3, #1
  40223e:	9301      	str	r3, [sp, #4]
  402240:	9500      	str	r5, [sp, #0]
  402242:	23ff      	movs	r3, #255	; 0xff
  402244:	4629      	mov	r1, r5
  402246:	4630      	mov	r0, r6
  402248:	4c05      	ldr	r4, [pc, #20]	; (402260 <icmp_send_response+0xa4>)
  40224a:	47a0      	blx	r4
  pbuf_free(q);
  40224c:	4630      	mov	r0, r6
  40224e:	4b05      	ldr	r3, [pc, #20]	; (402264 <icmp_send_response+0xa8>)
  402250:	4798      	blx	r3
}
  402252:	b005      	add	sp, #20
  402254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402258:	00403729 	.word	0x00403729
  40225c:	004024f5 	.word	0x004024f5
  402260:	00402875 	.word	0x00402875
  402264:	004036c9 	.word	0x004036c9

00402268 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  402268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40226c:	b085      	sub	sp, #20
  40226e:	4606      	mov	r6, r0
  402270:	4688      	mov	r8, r1

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  402272:	6847      	ldr	r7, [r0, #4]
  hlen = IPH_HL(iphdr) * 4;
  402274:	783c      	ldrb	r4, [r7, #0]
  402276:	f004 040f 	and.w	r4, r4, #15
  40227a:	00a4      	lsls	r4, r4, #2
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
  40227c:	4265      	negs	r5, r4
  40227e:	b22d      	sxth	r5, r5
  402280:	4629      	mov	r1, r5
  402282:	4b46      	ldr	r3, [pc, #280]	; (40239c <icmp_input+0x134>)
  402284:	4798      	blx	r3
  402286:	2800      	cmp	r0, #0
  402288:	d17e      	bne.n	402388 <icmp_input+0x120>
  40228a:	8933      	ldrh	r3, [r6, #8]
  40228c:	2b03      	cmp	r3, #3
  40228e:	d97b      	bls.n	402388 <icmp_input+0x120>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  402290:	6873      	ldr	r3, [r6, #4]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  402292:	781b      	ldrb	r3, [r3, #0]
  402294:	2b08      	cmp	r3, #8
  402296:	d173      	bne.n	402380 <icmp_input+0x118>
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
  402298:	4b41      	ldr	r3, [pc, #260]	; (4023a0 <icmp_input+0x138>)
  40229a:	f8d3 9000 	ldr.w	r9, [r3]
        accepted = 0;
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
  40229e:	4641      	mov	r1, r8
  4022a0:	4648      	mov	r0, r9
  4022a2:	4b40      	ldr	r3, [pc, #256]	; (4023a4 <icmp_input+0x13c>)
  4022a4:	4798      	blx	r3
  4022a6:	b920      	cbnz	r0, 4022b2 <icmp_input+0x4a>
        accepted = 0;
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
  4022a8:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
  4022ac:	f1b9 0fe0 	cmp.w	r9, #224	; 0xe0
  4022b0:	d103      	bne.n	4022ba <icmp_input+0x52>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
        pbuf_free(p);
  4022b2:	4630      	mov	r0, r6
  4022b4:	4b3c      	ldr	r3, [pc, #240]	; (4023a8 <icmp_input+0x140>)
  4022b6:	4798      	blx	r3
        return;
  4022b8:	e06d      	b.n	402396 <icmp_input+0x12e>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  4022ba:	8933      	ldrh	r3, [r6, #8]
  4022bc:	2b07      	cmp	r3, #7
  4022be:	d963      	bls.n	402388 <icmp_input+0x120>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
  4022c0:	4630      	mov	r0, r6
  4022c2:	4b3a      	ldr	r3, [pc, #232]	; (4023ac <icmp_input+0x144>)
  4022c4:	4798      	blx	r3
  4022c6:	b118      	cbz	r0, 4022d0 <icmp_input+0x68>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
  4022c8:	4630      	mov	r0, r6
  4022ca:	4b37      	ldr	r3, [pc, #220]	; (4023a8 <icmp_input+0x140>)
  4022cc:	4798      	blx	r3
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
  4022ce:	e062      	b.n	402396 <icmp_input+0x12e>
  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  hlen = IPH_HL(iphdr) * 4;
  4022d0:	b224      	sxth	r4, r4
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  4022d2:	2122      	movs	r1, #34	; 0x22
  4022d4:	4630      	mov	r0, r6
  4022d6:	4b31      	ldr	r3, [pc, #196]	; (40239c <icmp_input+0x134>)
  4022d8:	4798      	blx	r3
  4022da:	b1f8      	cbz	r0, 40231c <icmp_input+0xb4>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
  4022dc:	4621      	mov	r1, r4
  4022de:	4630      	mov	r0, r6
  4022e0:	4b2e      	ldr	r3, [pc, #184]	; (40239c <icmp_input+0x134>)
  4022e2:	4798      	blx	r3
  4022e4:	2800      	cmp	r0, #0
  4022e6:	d153      	bne.n	402390 <icmp_input+0x128>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  4022e8:	2200      	movs	r2, #0
  4022ea:	8931      	ldrh	r1, [r6, #8]
  4022ec:	2002      	movs	r0, #2
  4022ee:	4b30      	ldr	r3, [pc, #192]	; (4023b0 <icmp_input+0x148>)
  4022f0:	4798      	blx	r3
      if (r == NULL) {
  4022f2:	4681      	mov	r9, r0
  4022f4:	2800      	cmp	r0, #0
  4022f6:	d04b      	beq.n	402390 <icmp_input+0x128>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  4022f8:	4631      	mov	r1, r6
  4022fa:	4b2e      	ldr	r3, [pc, #184]	; (4023b4 <icmp_input+0x14c>)
  4022fc:	4798      	blx	r3
  4022fe:	2800      	cmp	r0, #0
  402300:	d146      	bne.n	402390 <icmp_input+0x128>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
  402302:	f8d9 7004 	ldr.w	r7, [r9, #4]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
  402306:	4629      	mov	r1, r5
  402308:	4648      	mov	r0, r9
  40230a:	4b24      	ldr	r3, [pc, #144]	; (40239c <icmp_input+0x134>)
  40230c:	4798      	blx	r3
  40230e:	2800      	cmp	r0, #0
  402310:	d13e      	bne.n	402390 <icmp_input+0x128>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
  402312:	4630      	mov	r0, r6
  402314:	4b24      	ldr	r3, [pc, #144]	; (4023a8 <icmp_input+0x140>)
  402316:	4798      	blx	r3
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  402318:	464e      	mov	r6, r9
  40231a:	e006      	b.n	40232a <icmp_input+0xc2>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  40231c:	f06f 0121 	mvn.w	r1, #33	; 0x21
  402320:	4630      	mov	r0, r6
  402322:	4b1e      	ldr	r3, [pc, #120]	; (40239c <icmp_input+0x134>)
  402324:	4798      	blx	r3
  402326:	2800      	cmp	r0, #0
  402328:	d132      	bne.n	402390 <icmp_input+0x128>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  40232a:	6872      	ldr	r2, [r6, #4]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
  40232c:	4b1c      	ldr	r3, [pc, #112]	; (4023a0 <icmp_input+0x138>)
  40232e:	681b      	ldr	r3, [r3, #0]
  402330:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
  402332:	4b21      	ldr	r3, [pc, #132]	; (4023b8 <icmp_input+0x150>)
  402334:	681b      	ldr	r3, [r3, #0]
  402336:	613b      	str	r3, [r7, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
  402338:	2300      	movs	r3, #0
  40233a:	7013      	strb	r3, [r2, #0]
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  40233c:	8853      	ldrh	r3, [r2, #2]
  40233e:	f64f 71f6 	movw	r1, #65526	; 0xfff6
  402342:	428b      	cmp	r3, r1
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  402344:	bf8c      	ite	hi
  402346:	3309      	addhi	r3, #9
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  402348:	3308      	addls	r3, #8
  40234a:	8053      	strh	r3, [r2, #2]
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
  40234c:	23ff      	movs	r3, #255	; 0xff
  40234e:	723b      	strb	r3, [r7, #8]
    IPH_CHKSUM_SET(iphdr, 0);
  402350:	2300      	movs	r3, #0
  402352:	72bb      	strb	r3, [r7, #10]
  402354:	72fb      	strb	r3, [r7, #11]
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  402356:	2114      	movs	r1, #20
  402358:	4638      	mov	r0, r7
  40235a:	4b18      	ldr	r3, [pc, #96]	; (4023bc <icmp_input+0x154>)
  40235c:	4798      	blx	r3
  40235e:	8178      	strh	r0, [r7, #10]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
  402360:	4621      	mov	r1, r4
  402362:	4630      	mov	r0, r6
  402364:	4b0d      	ldr	r3, [pc, #52]	; (40239c <icmp_input+0x134>)
  402366:	4798      	blx	r3
  402368:	b950      	cbnz	r0, 402380 <icmp_input+0x118>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
  40236a:	f8cd 8008 	str.w	r8, [sp, #8]
  40236e:	2301      	movs	r3, #1
  402370:	9301      	str	r3, [sp, #4]
  402372:	2200      	movs	r2, #0
  402374:	9200      	str	r2, [sp, #0]
  402376:	23ff      	movs	r3, #255	; 0xff
  402378:	4909      	ldr	r1, [pc, #36]	; (4023a0 <icmp_input+0x138>)
  40237a:	4630      	mov	r0, r6
  40237c:	4c10      	ldr	r4, [pc, #64]	; (4023c0 <icmp_input+0x158>)
  40237e:	47a0      	blx	r4
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  402380:	4630      	mov	r0, r6
  402382:	4b09      	ldr	r3, [pc, #36]	; (4023a8 <icmp_input+0x140>)
  402384:	4798      	blx	r3
  return;
  402386:	e006      	b.n	402396 <icmp_input+0x12e>
lenerr:
  pbuf_free(p);
  402388:	4630      	mov	r0, r6
  40238a:	4b07      	ldr	r3, [pc, #28]	; (4023a8 <icmp_input+0x140>)
  40238c:	4798      	blx	r3
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
  40238e:	e002      	b.n	402396 <icmp_input+0x12e>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
  402390:	4630      	mov	r0, r6
  402392:	4b05      	ldr	r3, [pc, #20]	; (4023a8 <icmp_input+0x140>)
  402394:	4798      	blx	r3
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
  402396:	b005      	add	sp, #20
  402398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40239c:	00403659 	.word	0x00403659
  4023a0:	20403870 	.word	0x20403870
  4023a4:	004028b5 	.word	0x004028b5
  4023a8:	004036c9 	.word	0x004036c9
  4023ac:	00402505 	.word	0x00402505
  4023b0:	00403729 	.word	0x00403729
  4023b4:	0040394d 	.word	0x0040394d
  4023b8:	20403868 	.word	0x20403868
  4023bc:	004024f5 	.word	0x004024f5
  4023c0:	00402781 	.word	0x00402781

004023c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  4023c4:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
  4023c6:	460a      	mov	r2, r1
  4023c8:	2103      	movs	r1, #3
  4023ca:	4b01      	ldr	r3, [pc, #4]	; (4023d0 <icmp_dest_unreach+0xc>)
  4023cc:	4798      	blx	r3
  4023ce:	bd08      	pop	{r3, pc}
  4023d0:	004021bd 	.word	0x004021bd

004023d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  4023d4:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
  4023d6:	460a      	mov	r2, r1
  4023d8:	210b      	movs	r1, #11
  4023da:	4b01      	ldr	r3, [pc, #4]	; (4023e0 <icmp_time_exceeded+0xc>)
  4023dc:	4798      	blx	r3
  4023de:	bd08      	pop	{r3, pc}
  4023e0:	004021bd 	.word	0x004021bd

004023e4 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  4023e4:	b470      	push	{r4, r5, r6}
  4023e6:	b083      	sub	sp, #12
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  4023e8:	2300      	movs	r3, #0
  4023ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
  4023ee:	f000 0601 	and.w	r6, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  4023f2:	f016 0fff 	tst.w	r6, #255	; 0xff
  4023f6:	d006      	beq.n	402406 <lwip_standard_chksum+0x22>
  4023f8:	4299      	cmp	r1, r3
  4023fa:	dd04      	ble.n	402406 <lwip_standard_chksum+0x22>
    ((u8_t *)&t)[1] = *pb++;
  4023fc:	7803      	ldrb	r3, [r0, #0]
  4023fe:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
  402402:	3901      	subs	r1, #1
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    ((u8_t *)&t)[1] = *pb++;
  402404:	3001      	adds	r0, #1
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
  402406:	2901      	cmp	r1, #1
  402408:	dd10      	ble.n	40242c <lwip_standard_chksum+0x48>
  40240a:	4604      	mov	r4, r0
  40240c:	460b      	mov	r3, r1
  40240e:	2200      	movs	r2, #0
    sum += *ps++;
  402410:	f834 5b02 	ldrh.w	r5, [r4], #2
  402414:	442a      	add	r2, r5
    len -= 2;
  402416:	3b02      	subs	r3, #2
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
  402418:	2b01      	cmp	r3, #1
  40241a:	dcf9      	bgt.n	402410 <lwip_standard_chksum+0x2c>
  40241c:	3902      	subs	r1, #2
  40241e:	084b      	lsrs	r3, r1, #1
  402420:	1c5c      	adds	r4, r3, #1
  402422:	eb00 0044 	add.w	r0, r0, r4, lsl #1
  402426:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
  40242a:	e000      	b.n	40242e <lwip_standard_chksum+0x4a>
static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  u32_t sum = 0;
  40242c:	2200      	movs	r2, #0
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  40242e:	2900      	cmp	r1, #0
  402430:	dd02      	ble.n	402438 <lwip_standard_chksum+0x54>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
  402432:	7803      	ldrb	r3, [r0, #0]
  402434:	f88d 3006 	strb.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
  402438:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40243c:	4402      	add	r2, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  40243e:	b290      	uxth	r0, r2
  402440:	eb00 4212 	add.w	r2, r0, r2, lsr #16
  sum = FOLD_U32T(sum);
  402444:	b293      	uxth	r3, r2
  402446:	eb03 4012 	add.w	r0, r3, r2, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
  40244a:	b126      	cbz	r6, 402456 <lwip_standard_chksum+0x72>
    sum = SWAP_BYTES_IN_WORD(sum);
  40244c:	0203      	lsls	r3, r0, #8
  40244e:	b29b      	uxth	r3, r3
  402450:	f3c0 2007 	ubfx	r0, r0, #8, #8
  402454:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
  402456:	b280      	uxth	r0, r0
  402458:	b003      	add	sp, #12
  40245a:	bc70      	pop	{r4, r5, r6}
  40245c:	4770      	bx	lr
  40245e:	bf00      	nop

00402460 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
  402460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402464:	468a      	mov	sl, r1
  402466:	4691      	mov	r9, r2
  402468:	4698      	mov	r8, r3
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  40246a:	b300      	cbz	r0, 4024ae <inet_chksum_pseudo+0x4e>
  40246c:	4605      	mov	r5, r0
  40246e:	2600      	movs	r6, #0
  402470:	4634      	mov	r4, r6
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  402472:	4f1e      	ldr	r7, [pc, #120]	; (4024ec <inet_chksum_pseudo+0x8c>)
  402474:	8969      	ldrh	r1, [r5, #10]
  402476:	6868      	ldr	r0, [r5, #4]
  402478:	47b8      	blx	r7
  40247a:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  40247c:	b284      	uxth	r4, r0
  40247e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
  402482:	896b      	ldrh	r3, [r5, #10]
  402484:	f013 0f01 	tst.w	r3, #1
  402488:	d007      	beq.n	40249a <inet_chksum_pseudo+0x3a>
      swapped = 1 - swapped;
  40248a:	f1c6 0601 	rsb	r6, r6, #1
  40248e:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  402490:	0223      	lsls	r3, r4, #8
  402492:	b29b      	uxth	r3, r3
  402494:	f3c4 2407 	ubfx	r4, r4, #8, #8
  402498:	431c      	orrs	r4, r3
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  40249a:	682d      	ldr	r5, [r5, #0]
  40249c:	2d00      	cmp	r5, #0
  40249e:	d1e9      	bne.n	402474 <inet_chksum_pseudo+0x14>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  4024a0:	b136      	cbz	r6, 4024b0 <inet_chksum_pseudo+0x50>
    acc = SWAP_BYTES_IN_WORD(acc);
  4024a2:	0223      	lsls	r3, r4, #8
  4024a4:	b29b      	uxth	r3, r3
  4024a6:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4024aa:	431c      	orrs	r4, r3
  4024ac:	e000      	b.n	4024b0 <inet_chksum_pseudo+0x50>
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  4024ae:	2400      	movs	r4, #0
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  addr = ip4_addr_get_u32(src);
  4024b0:	f8da 3000 	ldr.w	r3, [sl]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
  4024b4:	f8d9 0000 	ldr.w	r0, [r9]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  4024b8:	0c1a      	lsrs	r2, r3, #16
  4024ba:	fa12 f383 	uxtah	r3, r2, r3
  4024be:	fa13 f380 	uxtah	r3, r3, r0
  4024c2:	eb03 4010 	add.w	r0, r3, r0, lsr #16
  4024c6:	4404      	add	r4, r0
  acc += (u32_t)htons((u16_t)proto);
  4024c8:	4640      	mov	r0, r8
  4024ca:	4d09      	ldr	r5, [pc, #36]	; (4024f0 <inet_chksum_pseudo+0x90>)
  4024cc:	47a8      	blx	r5
  4024ce:	4404      	add	r4, r0
  acc += (u32_t)htons(proto_len);
  4024d0:	f8bd 0020 	ldrh.w	r0, [sp, #32]
  4024d4:	47a8      	blx	r5
  4024d6:	4420      	add	r0, r4

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  4024d8:	b283      	uxth	r3, r0
  4024da:	eb03 4010 	add.w	r0, r3, r0, lsr #16
  acc = FOLD_U32T(acc);
  4024de:	b283      	uxth	r3, r0
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  4024e0:	eb03 4010 	add.w	r0, r3, r0, lsr #16
  4024e4:	43c0      	mvns	r0, r0
}
  4024e6:	b280      	uxth	r0, r0
  4024e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024ec:	004023e5 	.word	0x004023e5
  4024f0:	00401095 	.word	0x00401095

004024f4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  4024f4:	b508      	push	{r3, lr}
  return ~LWIP_CHKSUM(dataptr, len);
  4024f6:	4b02      	ldr	r3, [pc, #8]	; (402500 <inet_chksum+0xc>)
  4024f8:	4798      	blx	r3
  4024fa:	43c0      	mvns	r0, r0
}
  4024fc:	b280      	uxth	r0, r0
  4024fe:	bd08      	pop	{r3, pc}
  402500:	004023e5 	.word	0x004023e5

00402504 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  402504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  402506:	b300      	cbz	r0, 40254a <inet_chksum_pbuf+0x46>
  402508:	4605      	mov	r5, r0
  40250a:	2600      	movs	r6, #0
  40250c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
  40250e:	4f11      	ldr	r7, [pc, #68]	; (402554 <inet_chksum_pbuf+0x50>)
  402510:	8969      	ldrh	r1, [r5, #10]
  402512:	6868      	ldr	r0, [r5, #4]
  402514:	47b8      	blx	r7
  402516:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
  402518:	b284      	uxth	r4, r0
  40251a:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
  40251e:	896b      	ldrh	r3, [r5, #10]
  402520:	f013 0f01 	tst.w	r3, #1
  402524:	d007      	beq.n	402536 <inet_chksum_pbuf+0x32>
      swapped = 1 - swapped;
  402526:	f1c6 0601 	rsb	r6, r6, #1
  40252a:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  40252c:	0223      	lsls	r3, r4, #8
  40252e:	b29b      	uxth	r3, r3
  402530:	f3c4 2407 	ubfx	r4, r4, #8, #8
  402534:	431c      	orrs	r4, r3
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  402536:	682d      	ldr	r5, [r5, #0]
  402538:	2d00      	cmp	r5, #0
  40253a:	d1e9      	bne.n	402510 <inet_chksum_pbuf+0xc>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
  40253c:	b136      	cbz	r6, 40254c <inet_chksum_pbuf+0x48>
    acc = SWAP_BYTES_IN_WORD(acc);
  40253e:	0223      	lsls	r3, r4, #8
  402540:	b29b      	uxth	r3, r3
  402542:	f3c4 2407 	ubfx	r4, r4, #8, #8
  402546:	431c      	orrs	r4, r3
  402548:	e000      	b.n	40254c <inet_chksum_pbuf+0x48>
{
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  40254a:	2400      	movs	r4, #0
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  return (u16_t)~(acc & 0xffffUL);
  40254c:	43e0      	mvns	r0, r4
}
  40254e:	b280      	uxth	r0, r0
  402550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402552:	bf00      	nop
  402554:	004023e5 	.word	0x004023e5

00402558 <ip_route>:
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  402558:	4b0e      	ldr	r3, [pc, #56]	; (402594 <ip_route+0x3c>)
  40255a:	681b      	ldr	r3, [r3, #0]
  40255c:	b16b      	cbz	r3, 40257a <ip_route+0x22>
    /* network mask matches? */
    if (netif_is_up(netif)) {
  40255e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
  402562:	f012 0f01 	tst.w	r2, #1
  402566:	d005      	beq.n	402574 <ip_route+0x1c>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  402568:	6801      	ldr	r1, [r0, #0]
  40256a:	685a      	ldr	r2, [r3, #4]
  40256c:	404a      	eors	r2, r1
  40256e:	6899      	ldr	r1, [r3, #8]
  402570:	420a      	tst	r2, r1
  402572:	d00d      	beq.n	402590 <ip_route+0x38>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  402574:	681b      	ldr	r3, [r3, #0]
  402576:	2b00      	cmp	r3, #0
  402578:	d1f1      	bne.n	40255e <ip_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  40257a:	4b07      	ldr	r3, [pc, #28]	; (402598 <ip_route+0x40>)
  40257c:	6818      	ldr	r0, [r3, #0]
  40257e:	b140      	cbz	r0, 402592 <ip_route+0x3a>
  402580:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  402584:	f003 0301 	and.w	r3, r3, #1
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  402588:	2b00      	cmp	r3, #0
  40258a:	bf08      	it	eq
  40258c:	2000      	moveq	r0, #0
  40258e:	4770      	bx	lr
  402590:	4618      	mov	r0, r3
  }
  /* no matching netif found, use default netif */
  return netif_default;
}
  402592:	4770      	bx	lr
  402594:	2040488c 	.word	0x2040488c
  402598:	20404890 	.word	0x20404890

0040259c <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  40259c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025a0:	4606      	mov	r6, r0

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  4025a2:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_V(iphdr) != 4) {
  4025a6:	f899 5000 	ldrb.w	r5, [r9]
  4025aa:	092b      	lsrs	r3, r5, #4
  4025ac:	2b04      	cmp	r3, #4
  4025ae:	d002      	beq.n	4025b6 <ip_input+0x1a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
  4025b0:	4b64      	ldr	r3, [pc, #400]	; (402744 <ip_input+0x1a8>)
  4025b2:	4798      	blx	r3
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  4025b4:	e0c2      	b.n	40273c <ip_input+0x1a0>
  4025b6:	4688      	mov	r8, r1
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  4025b8:	f005 050f 	and.w	r5, r5, #15
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  4025bc:	00ad      	lsls	r5, r5, #2
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
  4025be:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  4025c2:	4b61      	ldr	r3, [pc, #388]	; (402748 <ip_input+0x1ac>)
  4025c4:	4798      	blx	r3
  4025c6:	4604      	mov	r4, r0

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  4025c8:	8973      	ldrh	r3, [r6, #10]
  4025ca:	42ab      	cmp	r3, r5
  4025cc:	d302      	bcc.n	4025d4 <ip_input+0x38>
  4025ce:	8933      	ldrh	r3, [r6, #8]
  4025d0:	4283      	cmp	r3, r0
  4025d2:	d203      	bcs.n	4025dc <ip_input+0x40>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  4025d4:	4630      	mov	r0, r6
  4025d6:	4b5b      	ldr	r3, [pc, #364]	; (402744 <ip_input+0x1a8>)
  4025d8:	4798      	blx	r3
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipindiscards();
    return ERR_OK;
  4025da:	e0af      	b.n	40273c <ip_input+0x1a0>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  4025dc:	4629      	mov	r1, r5
  4025de:	4648      	mov	r0, r9
  4025e0:	4b5a      	ldr	r3, [pc, #360]	; (40274c <ip_input+0x1b0>)
  4025e2:	4798      	blx	r3
  4025e4:	b118      	cbz	r0, 4025ee <ip_input+0x52>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
  4025e6:	4630      	mov	r0, r6
  4025e8:	4b56      	ldr	r3, [pc, #344]	; (402744 <ip_input+0x1a8>)
  4025ea:	4798      	blx	r3
    IP_STATS_INC(ip.chkerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  4025ec:	e0a6      	b.n	40273c <ip_input+0x1a0>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
  4025ee:	4621      	mov	r1, r4
  4025f0:	4630      	mov	r0, r6
  4025f2:	4b57      	ldr	r3, [pc, #348]	; (402750 <ip_input+0x1b4>)
  4025f4:	4798      	blx	r3

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  4025f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
  4025fa:	4b56      	ldr	r3, [pc, #344]	; (402754 <ip_input+0x1b8>)
  4025fc:	601a      	str	r2, [r3, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
  4025fe:	f8d9 200c 	ldr.w	r2, [r9, #12]
  402602:	4b55      	ldr	r3, [pc, #340]	; (402758 <ip_input+0x1bc>)
  402604:	601a      	str	r2, [r3, #0]
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
    netif = inp;
  402606:	4644      	mov	r4, r8
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  402608:	2701      	movs	r7, #1
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  40260a:	f8df b148 	ldr.w	fp, [pc, #328]	; 402754 <ip_input+0x1b8>
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
        first = 0;
        netif = netif_list;
  40260e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 40277c <ip_input+0x1e0>
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  402612:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  402616:	f013 0f01 	tst.w	r3, #1
  40261a:	d00c      	beq.n	402636 <ip_input+0x9a>
  40261c:	f114 0f04 	cmn.w	r4, #4
  402620:	d009      	beq.n	402636 <ip_input+0x9a>
  402622:	6863      	ldr	r3, [r4, #4]
  402624:	b13b      	cbz	r3, 402636 <ip_input+0x9a>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  402626:	f8db 0000 	ldr.w	r0, [fp]
  40262a:	4283      	cmp	r3, r0
  40262c:	d010      	beq.n	402650 <ip_input+0xb4>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  40262e:	4621      	mov	r1, r4
  402630:	4b4a      	ldr	r3, [pc, #296]	; (40275c <ip_input+0x1c0>)
  402632:	4798      	blx	r3
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  402634:	b960      	cbnz	r0, 402650 <ip_input+0xb4>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  402636:	b117      	cbz	r7, 40263e <ip_input+0xa2>
        first = 0;
        netif = netif_list;
  402638:	f8da 4000 	ldr.w	r4, [sl]
  40263c:	e000      	b.n	402640 <ip_input+0xa4>
      } else {
        netif = netif->next;
  40263e:	6824      	ldr	r4, [r4, #0]
      }
      if (netif == inp) {
  402640:	4544      	cmp	r4, r8
        netif = netif->next;
  402642:	bf08      	it	eq
  402644:	f8d8 4000 	ldreq.w	r4, [r8]
  402648:	2700      	movs	r7, #0
      }
    } while(netif != NULL);
  40264a:	2c00      	cmp	r4, #0
  40264c:	d1e1      	bne.n	402612 <ip_input+0x76>
  40264e:	e001      	b.n	402654 <ip_input+0xb8>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  402650:	2c00      	cmp	r4, #0
  402652:	d16e      	bne.n	402732 <ip_input+0x196>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  402654:	f899 3009 	ldrb.w	r3, [r9, #9]
  402658:	2b11      	cmp	r3, #17
  40265a:	d165      	bne.n	402728 <ip_input+0x18c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  40265c:	444d      	add	r5, r9
  40265e:	886b      	ldrh	r3, [r5, #2]
  402660:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
  402664:	d160      	bne.n	402728 <ip_input+0x18c>
  402666:	e00e      	b.n	402686 <ip_input+0xea>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
  402668:	2400      	movs	r4, #0
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  40266a:	4641      	mov	r1, r8
  40266c:	4b3b      	ldr	r3, [pc, #236]	; (40275c <ip_input+0x1c0>)
  40266e:	4798      	blx	r3
  402670:	b928      	cbnz	r0, 40267e <ip_input+0xe2>
         (ip_addr_ismulticast(&current_iphdr_src))) {
  402672:	4b39      	ldr	r3, [pc, #228]	; (402758 <ip_input+0x1bc>)
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  402674:	681b      	ldr	r3, [r3, #0]
  402676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40267a:	2be0      	cmp	r3, #224	; 0xe0
  40267c:	d104      	bne.n	402688 <ip_input+0xec>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  40267e:	4630      	mov	r0, r6
  402680:	4b30      	ldr	r3, [pc, #192]	; (402744 <ip_input+0x1a8>)
  402682:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
  402684:	e05a      	b.n	40273c <ip_input+0x1a0>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
  402686:	4644      	mov	r4, r8
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  402688:	b91c      	cbnz	r4, 402692 <ip_input+0xf6>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
  40268a:	4630      	mov	r0, r6
  40268c:	4b2d      	ldr	r3, [pc, #180]	; (402744 <ip_input+0x1a8>)
  40268e:	4798      	blx	r3
    return ERR_OK;
  402690:	e054      	b.n	40273c <ip_input+0x1a0>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  402692:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  402696:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  40269a:	b29b      	uxth	r3, r3
  40269c:	b13b      	cbz	r3, 4026ae <ip_input+0x112>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
  40269e:	4630      	mov	r0, r6
  4026a0:	4b2f      	ldr	r3, [pc, #188]	; (402760 <ip_input+0x1c4>)
  4026a2:	4798      	blx	r3
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  4026a4:	4606      	mov	r6, r0
  4026a6:	2800      	cmp	r0, #0
  4026a8:	d048      	beq.n	40273c <ip_input+0x1a0>
      return ERR_OK;
    }
    iphdr = (struct ip_hdr *)p->payload;
  4026aa:	f8d0 9004 	ldr.w	r9, [r0, #4]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
  4026ae:	4b2d      	ldr	r3, [pc, #180]	; (402764 <ip_input+0x1c8>)
  4026b0:	f8c3 8000 	str.w	r8, [r3]
  current_header = iphdr;
  4026b4:	4b2c      	ldr	r3, [pc, #176]	; (402768 <ip_input+0x1cc>)
  4026b6:	f8c3 9000 	str.w	r9, [r3]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
  4026ba:	f899 3009 	ldrb.w	r3, [r9, #9]
  4026be:	2b06      	cmp	r3, #6
  4026c0:	d009      	beq.n	4026d6 <ip_input+0x13a>
  4026c2:	2b11      	cmp	r3, #17
  4026c4:	d002      	beq.n	4026cc <ip_input+0x130>
  4026c6:	2b01      	cmp	r3, #1
  4026c8:	d10f      	bne.n	4026ea <ip_input+0x14e>
  4026ca:	e009      	b.n	4026e0 <ip_input+0x144>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
  4026cc:	4641      	mov	r1, r8
  4026ce:	4630      	mov	r0, r6
  4026d0:	4b26      	ldr	r3, [pc, #152]	; (40276c <ip_input+0x1d0>)
  4026d2:	4798      	blx	r3
      break;
  4026d4:	e01e      	b.n	402714 <ip_input+0x178>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
  4026d6:	4641      	mov	r1, r8
  4026d8:	4630      	mov	r0, r6
  4026da:	4b25      	ldr	r3, [pc, #148]	; (402770 <ip_input+0x1d4>)
  4026dc:	4798      	blx	r3
      break;
  4026de:	e019      	b.n	402714 <ip_input+0x178>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
  4026e0:	4641      	mov	r1, r8
  4026e2:	4630      	mov	r0, r6
  4026e4:	4b23      	ldr	r3, [pc, #140]	; (402774 <ip_input+0x1d8>)
  4026e6:	4798      	blx	r3
      break;
  4026e8:	e014      	b.n	402714 <ip_input+0x178>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4026ea:	4641      	mov	r1, r8
  4026ec:	4b19      	ldr	r3, [pc, #100]	; (402754 <ip_input+0x1b8>)
  4026ee:	6818      	ldr	r0, [r3, #0]
  4026f0:	4b1a      	ldr	r3, [pc, #104]	; (40275c <ip_input+0x1c0>)
  4026f2:	4798      	blx	r3
  4026f4:	b958      	cbnz	r0, 40270e <ip_input+0x172>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  4026f6:	4b17      	ldr	r3, [pc, #92]	; (402754 <ip_input+0x1b8>)
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4026f8:	681b      	ldr	r3, [r3, #0]
  4026fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4026fe:	2be0      	cmp	r3, #224	; 0xe0
  402700:	d005      	beq.n	40270e <ip_input+0x172>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
  402702:	f8c6 9004 	str.w	r9, [r6, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  402706:	2102      	movs	r1, #2
  402708:	4630      	mov	r0, r6
  40270a:	4b1b      	ldr	r3, [pc, #108]	; (402778 <ip_input+0x1dc>)
  40270c:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  40270e:	4630      	mov	r0, r6
  402710:	4b0c      	ldr	r3, [pc, #48]	; (402744 <ip_input+0x1a8>)
  402712:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
  402714:	2300      	movs	r3, #0
  402716:	4a13      	ldr	r2, [pc, #76]	; (402764 <ip_input+0x1c8>)
  402718:	6013      	str	r3, [r2, #0]
  current_header = NULL;
  40271a:	4a13      	ldr	r2, [pc, #76]	; (402768 <ip_input+0x1cc>)
  40271c:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_src);
  40271e:	4a0e      	ldr	r2, [pc, #56]	; (402758 <ip_input+0x1bc>)
  402720:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_dest);
  402722:	4a0c      	ldr	r2, [pc, #48]	; (402754 <ip_input+0x1b8>)
  402724:	6013      	str	r3, [r2, #0]
  402726:	e009      	b.n	40273c <ip_input+0x1a0>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
  402728:	4b0b      	ldr	r3, [pc, #44]	; (402758 <ip_input+0x1bc>)
  40272a:	6818      	ldr	r0, [r3, #0]
  40272c:	2800      	cmp	r0, #0
  40272e:	d19b      	bne.n	402668 <ip_input+0xcc>
  402730:	e7ab      	b.n	40268a <ip_input+0xee>
  402732:	4b09      	ldr	r3, [pc, #36]	; (402758 <ip_input+0x1bc>)
  402734:	6818      	ldr	r0, [r3, #0]
  402736:	2800      	cmp	r0, #0
  402738:	d0ab      	beq.n	402692 <ip_input+0xf6>
  40273a:	e796      	b.n	40266a <ip_input+0xce>
  current_header = NULL;
  ip_addr_set_any(&current_iphdr_src);
  ip_addr_set_any(&current_iphdr_dest);

  return ERR_OK;
}
  40273c:	2000      	movs	r0, #0
  40273e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402742:	bf00      	nop
  402744:	004036c9 	.word	0x004036c9
  402748:	004010a1 	.word	0x004010a1
  40274c:	004024f5 	.word	0x004024f5
  402750:	0040387d 	.word	0x0040387d
  402754:	20403870 	.word	0x20403870
  402758:	20403868 	.word	0x20403868
  40275c:	004028b5 	.word	0x004028b5
  402760:	00402b25 	.word	0x00402b25
  402764:	2040386c 	.word	0x2040386c
  402768:	20403874 	.word	0x20403874
  40276c:	0040665d 	.word	0x0040665d
  402770:	004050d9 	.word	0x004050d9
  402774:	00402269 	.word	0x00402269
  402778:	004023c5 	.word	0x004023c5
  40277c:	2040488c 	.word	0x2040488c

00402780 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  402780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402784:	b087      	sub	sp, #28
  402786:	4605      	mov	r5, r0
  402788:	9102      	str	r1, [sp, #8]
  40278a:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
  40278e:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
  402792:	9e12      	ldr	r6, [sp, #72]	; 0x48
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  402794:	9201      	str	r2, [sp, #4]
  402796:	2a00      	cmp	r2, #0
  402798:	d048      	beq.n	40282c <ip_output_if+0xac>
  40279a:	4698      	mov	r8, r3
  40279c:	4617      	mov	r7, r2
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  40279e:	2114      	movs	r1, #20
  4027a0:	4b30      	ldr	r3, [pc, #192]	; (402864 <ip_output_if+0xe4>)
  4027a2:	4798      	blx	r3
  4027a4:	2800      	cmp	r0, #0
  4027a6:	d158      	bne.n	40285a <ip_output_if+0xda>
      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
  4027a8:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  4027aa:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
  4027ae:	f884 b009 	strb.w	fp, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
  4027b2:	ea48 2a0b 	orr.w	sl, r8, fp, lsl #8
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  4027b6:	683b      	ldr	r3, [r7, #0]
  4027b8:	6123      	str	r3, [r4, #16]
  4027ba:	0c1a      	lsrs	r2, r3, #16
  4027bc:	fa12 f283 	uxtah	r2, r2, r3
  4027c0:	9203      	str	r2, [sp, #12]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  4027c2:	2345      	movs	r3, #69	; 0x45
  4027c4:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
  4027c6:	f884 9001 	strb.w	r9, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
  4027ca:	ea4f 2909 	mov.w	r9, r9, lsl #8
  4027ce:	ea49 0b03 	orr.w	fp, r9, r3
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  4027d2:	8928      	ldrh	r0, [r5, #8]
  4027d4:	4f24      	ldr	r7, [pc, #144]	; (402868 <ip_output_if+0xe8>)
  4027d6:	47b8      	blx	r7
  4027d8:	4680      	mov	r8, r0
  4027da:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  4027dc:	2300      	movs	r3, #0
  4027de:	71a3      	strb	r3, [r4, #6]
  4027e0:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
  4027e2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402870 <ip_output_if+0xf0>
  4027e6:	f8b9 0000 	ldrh.w	r0, [r9]
  4027ea:	47b8      	blx	r7
  4027ec:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  4027ee:	f8b9 3000 	ldrh.w	r3, [r9]
  4027f2:	3301      	adds	r3, #1
  4027f4:	f8a9 3000 	strh.w	r3, [r9]

    if (ip_addr_isany(src)) {
  4027f8:	9b02      	ldr	r3, [sp, #8]
  4027fa:	b10b      	cbz	r3, 402800 <ip_output_if+0x80>
  4027fc:	681b      	ldr	r3, [r3, #0]
  4027fe:	b913      	cbnz	r3, 402806 <ip_output_if+0x86>
      ip_addr_copy(iphdr->src, netif->ip_addr);
  402800:	6873      	ldr	r3, [r6, #4]
  402802:	60e3      	str	r3, [r4, #12]
  402804:	e000      	b.n	402808 <ip_output_if+0x88>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
  402806:	60e3      	str	r3, [r4, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  402808:	68e2      	ldr	r2, [r4, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  40280a:	9b03      	ldr	r3, [sp, #12]
  40280c:	fa13 f382 	uxtah	r3, r3, r2
  402810:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  402814:	445b      	add	r3, fp
  402816:	4453      	add	r3, sl
  402818:	4498      	add	r8, r3
  40281a:	4440      	add	r0, r8
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  40281c:	b283      	uxth	r3, r0
  40281e:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
  402822:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
  402826:	43c0      	mvns	r0, r0
  402828:	8160      	strh	r0, [r4, #10]
  40282a:	e005      	b.n	402838 <ip_output_if+0xb8>
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
    ip_addr_copy(dest_addr, iphdr->dest);
  40282c:	6843      	ldr	r3, [r0, #4]
  40282e:	691b      	ldr	r3, [r3, #16]
  402830:	aa06      	add	r2, sp, #24
  402832:	f842 3d04 	str.w	r3, [r2, #-4]!
  402836:	9201      	str	r2, [sp, #4]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  402838:	8d33      	ldrh	r3, [r6, #40]	; 0x28
  40283a:	b143      	cbz	r3, 40284e <ip_output_if+0xce>
  40283c:	892a      	ldrh	r2, [r5, #8]
  40283e:	429a      	cmp	r2, r3
  402840:	d905      	bls.n	40284e <ip_output_if+0xce>
    return ip_frag(p, netif, dest);
  402842:	9a01      	ldr	r2, [sp, #4]
  402844:	4631      	mov	r1, r6
  402846:	4628      	mov	r0, r5
  402848:	4b08      	ldr	r3, [pc, #32]	; (40286c <ip_output_if+0xec>)
  40284a:	4798      	blx	r3
  40284c:	e007      	b.n	40285e <ip_output_if+0xde>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
  40284e:	6973      	ldr	r3, [r6, #20]
  402850:	9a01      	ldr	r2, [sp, #4]
  402852:	4629      	mov	r1, r5
  402854:	4630      	mov	r0, r6
  402856:	4798      	blx	r3
  402858:	e001      	b.n	40285e <ip_output_if+0xde>
    if (pbuf_header(p, IP_HLEN)) {
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
  40285a:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
}
  40285e:	b007      	add	sp, #28
  402860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402864:	00403659 	.word	0x00403659
  402868:	00401095 	.word	0x00401095
  40286c:	00402e8d 	.word	0x00402e8d
  402870:	2040098c 	.word	0x2040098c

00402874 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  402874:	b5f0      	push	{r4, r5, r6, r7, lr}
  402876:	b085      	sub	sp, #20
  402878:	4605      	mov	r5, r0
  40287a:	460e      	mov	r6, r1
  40287c:	4614      	mov	r4, r2
  40287e:	461f      	mov	r7, r3

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
  402880:	4610      	mov	r0, r2
  402882:	4b0a      	ldr	r3, [pc, #40]	; (4028ac <ip_output+0x38>)
  402884:	4798      	blx	r3
  402886:	b168      	cbz	r0, 4028a4 <ip_output+0x30>
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  402888:	9002      	str	r0, [sp, #8]
  40288a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  40288e:	9301      	str	r3, [sp, #4]
  402890:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  402894:	9300      	str	r3, [sp, #0]
  402896:	463b      	mov	r3, r7
  402898:	4622      	mov	r2, r4
  40289a:	4631      	mov	r1, r6
  40289c:	4628      	mov	r0, r5
  40289e:	4c04      	ldr	r4, [pc, #16]	; (4028b0 <ip_output+0x3c>)
  4028a0:	47a0      	blx	r4
  4028a2:	e001      	b.n	4028a8 <ip_output+0x34>

  if ((netif = ip_route(dest)) == NULL) {
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  4028a4:	f06f 0003 	mvn.w	r0, #3
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
}
  4028a8:	b005      	add	sp, #20
  4028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4028ac:	00402559 	.word	0x00402559
  4028b0:	00402781 	.word	0x00402781

004028b4 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
  4028b4:	4602      	mov	r2, r0
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  4028b6:	1e43      	subs	r3, r0, #1
  4028b8:	f113 0f03 	cmn.w	r3, #3
  4028bc:	d814      	bhi.n	4028e8 <ip4_addr_isbroadcast+0x34>
  4028be:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
  4028c2:	f003 0302 	and.w	r3, r3, #2
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  4028c6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4028ca:	b193      	cbz	r3, 4028f2 <ip4_addr_isbroadcast+0x3e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
  4028cc:	684b      	ldr	r3, [r1, #4]
  4028ce:	429a      	cmp	r2, r3
  4028d0:	d00c      	beq.n	4028ec <ip4_addr_isbroadcast+0x38>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
  4028d2:	6889      	ldr	r1, [r1, #8]
  4028d4:	4053      	eors	r3, r2
  4028d6:	420b      	tst	r3, r1
  4028d8:	d10a      	bne.n	4028f0 <ip4_addr_isbroadcast+0x3c>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  4028da:	43c9      	mvns	r1, r1
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
      (addr == IPADDR_ANY)) {
    return 1;
  4028dc:	ea31 0302 	bics.w	r3, r1, r2
  4028e0:	bf0c      	ite	eq
  4028e2:	2001      	moveq	r0, #1
  4028e4:	2000      	movne	r0, #0
  4028e6:	4770      	bx	lr
  4028e8:	2001      	movs	r0, #1
  4028ea:	4770      	bx	lr
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  4028ec:	2000      	movs	r0, #0
  4028ee:	4770      	bx	lr
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  4028f0:	2000      	movs	r0, #0
  }
}
  4028f2:	4770      	bx	lr

004028f4 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
  4028f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028f8:	b085      	sub	sp, #20
  4028fa:	9101      	str	r1, [sp, #4]
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
  4028fc:	6803      	ldr	r3, [r0, #0]
  4028fe:	f10d 0e10 	add.w	lr, sp, #16
  402902:	f84e 3d04 	str.w	r3, [lr, #-4]!
  402906:	f10d 0b10 	add.w	fp, sp, #16

  rp = buf;
  40290a:	468c      	mov	ip, r1
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  40290c:	2600      	movs	r6, #0
  40290e:	46b0      	mov	r8, r6
  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  402910:	4f27      	ldr	r7, [pc, #156]	; (4029b0 <ipaddr_ntoa_r+0xbc>)
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
  402912:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
  402916:	4675      	mov	r5, lr
  402918:	f89e 3000 	ldrb.w	r3, [lr]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  40291c:	4641      	mov	r1, r8
  40291e:	e000      	b.n	402922 <ipaddr_ntoa_r+0x2e>
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
  402920:	4621      	mov	r1, r4
  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  402922:	fba7 4003 	umull	r4, r0, r7, r3
  402926:	08c0      	lsrs	r0, r0, #3
  402928:	eb00 0480 	add.w	r4, r0, r0, lsl #2
  40292c:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
  402930:	1c4c      	adds	r4, r1, #1
  402932:	b2e4      	uxtb	r4, r4
  402934:	3330      	adds	r3, #48	; 0x30
  402936:	f10d 0910 	add.w	r9, sp, #16
  40293a:	4489      	add	r9, r1
  40293c:	f809 3c08 	strb.w	r3, [r9, #-8]
    } while(*ap);
  402940:	f000 03ff 	and.w	r3, r0, #255	; 0xff
  402944:	2800      	cmp	r0, #0
  402946:	d1eb      	bne.n	402920 <ipaddr_ntoa_r+0x2c>
  402948:	f885 8000 	strb.w	r8, [r5]
  40294c:	f10e 0e01 	add.w	lr, lr, #1
    while(i--) {
  402950:	b1bc      	cbz	r4, 402982 <ipaddr_ntoa_r+0x8e>
      if (len++ >= buflen) {
  402952:	42b2      	cmp	r2, r6
  402954:	dd24      	ble.n	4029a0 <ipaddr_ntoa_r+0xac>
  402956:	4663      	mov	r3, ip
  402958:	1c74      	adds	r4, r6, #1
  40295a:	ebcc 0404 	rsb	r4, ip, r4
  40295e:	ebcc 0606 	rsb	r6, ip, r6
  402962:	e004      	b.n	40296e <ipaddr_ntoa_r+0x7a>
  402964:	3901      	subs	r1, #1
  402966:	b2c9      	uxtb	r1, r1
  402968:	1998      	adds	r0, r3, r6
  40296a:	4282      	cmp	r2, r0
  40296c:	dd1a      	ble.n	4029a4 <ipaddr_ntoa_r+0xb0>
  40296e:	191d      	adds	r5, r3, r4
        return NULL;
      }
      *rp++ = inv[i];
  402970:	a804      	add	r0, sp, #16
  402972:	4408      	add	r0, r1
  402974:	f810 0c08 	ldrb.w	r0, [r0, #-8]
  402978:	f803 0b01 	strb.w	r0, [r3], #1
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
  40297c:	2900      	cmp	r1, #0
  40297e:	d1f1      	bne.n	402964 <ipaddr_ntoa_r+0x70>
  402980:	e001      	b.n	402986 <ipaddr_ntoa_r+0x92>
  402982:	4635      	mov	r5, r6
  402984:	4663      	mov	r3, ip
      if (len++ >= buflen) {
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
  402986:	1c6e      	adds	r6, r5, #1
  402988:	42aa      	cmp	r2, r5
  40298a:	dd0d      	ble.n	4029a8 <ipaddr_ntoa_r+0xb4>
      return NULL;
    }
    *rp++ = '.';
  40298c:	f103 0c01 	add.w	ip, r3, #1
  402990:	f883 a000 	strb.w	sl, [r3]

  s_addr = ip4_addr_get_u32(addr);

  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
  402994:	45de      	cmp	lr, fp
  402996:	d1be      	bne.n	402916 <ipaddr_ntoa_r+0x22>
      return NULL;
    }
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
  402998:	2200      	movs	r2, #0
  40299a:	701a      	strb	r2, [r3, #0]
  return buf;
  40299c:	9801      	ldr	r0, [sp, #4]
  40299e:	e004      	b.n	4029aa <ipaddr_ntoa_r+0xb6>
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
      if (len++ >= buflen) {
        return NULL;
  4029a0:	2000      	movs	r0, #0
  4029a2:	e002      	b.n	4029aa <ipaddr_ntoa_r+0xb6>
  4029a4:	2000      	movs	r0, #0
  4029a6:	e000      	b.n	4029aa <ipaddr_ntoa_r+0xb6>
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
  4029a8:	2000      	movs	r0, #0
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
  return buf;
}
  4029aa:	b005      	add	sp, #20
  4029ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029b0:	cccccccd 	.word	0xcccccccd

004029b4 <ipaddr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         represenation of addr
 */
char *
ipaddr_ntoa(const ip_addr_t *addr)
{
  4029b4:	b508      	push	{r3, lr}
  static char str[16];
  return ipaddr_ntoa_r(addr, str, 16);
  4029b6:	2210      	movs	r2, #16
  4029b8:	4901      	ldr	r1, [pc, #4]	; (4029c0 <ipaddr_ntoa+0xc>)
  4029ba:	4b02      	ldr	r3, [pc, #8]	; (4029c4 <ipaddr_ntoa+0x10>)
  4029bc:	4798      	blx	r3
}
  4029be:	bd08      	pop	{r3, pc}
  4029c0:	20400990 	.word	0x20400990
  4029c4:	004028f5 	.word	0x004028f5

004029c8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  4029c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4029cc:	4681      	mov	r9, r0
  4029ce:	468a      	mov	sl, r1
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  4029d0:	6845      	ldr	r5, [r0, #4]
  4029d2:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
  4029d4:	889a      	ldrh	r2, [r3, #4]
  4029d6:	b9d2      	cbnz	r2, 402a0e <ip_reass_free_complete_datagram+0x46>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
    ipr->p = iprh->next_pbuf;
  4029d8:	681b      	ldr	r3, [r3, #0]
  4029da:	6043      	str	r3, [r0, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  4029dc:	686a      	ldr	r2, [r5, #4]
  4029de:	4603      	mov	r3, r0
  4029e0:	f853 1f08 	ldr.w	r1, [r3, #8]!
  4029e4:	685e      	ldr	r6, [r3, #4]
  4029e6:	689c      	ldr	r4, [r3, #8]
  4029e8:	68d8      	ldr	r0, [r3, #12]
  4029ea:	6011      	str	r1, [r2, #0]
  4029ec:	6056      	str	r6, [r2, #4]
  4029ee:	6094      	str	r4, [r2, #8]
  4029f0:	60d0      	str	r0, [r2, #12]
  4029f2:	6919      	ldr	r1, [r3, #16]
  4029f4:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  4029f6:	2101      	movs	r1, #1
  4029f8:	4628      	mov	r0, r5
  4029fa:	4b1a      	ldr	r3, [pc, #104]	; (402a64 <ip_reass_free_complete_datagram+0x9c>)
  4029fc:	4798      	blx	r3
    clen = pbuf_clen(p);
  4029fe:	4628      	mov	r0, r5
  402a00:	4b19      	ldr	r3, [pc, #100]	; (402a68 <ip_reass_free_complete_datagram+0xa0>)
  402a02:	4798      	blx	r3
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  402a04:	b284      	uxth	r4, r0
    pbuf_free(p);
  402a06:	4628      	mov	r0, r5
  402a08:	4b18      	ldr	r3, [pc, #96]	; (402a6c <ip_reass_free_complete_datagram+0xa4>)
  402a0a:	4798      	blx	r3
  402a0c:	e000      	b.n	402a10 <ip_reass_free_complete_datagram+0x48>
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  u16_t pbufs_freed = 0;
  402a0e:	2400      	movs	r4, #0
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  402a10:	f8d9 6004 	ldr.w	r6, [r9, #4]
  while (p != NULL) {
  402a14:	b16e      	cbz	r6, 402a32 <ip_reass_free_complete_datagram+0x6a>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
  402a16:	f8df 8050 	ldr.w	r8, [pc, #80]	; 402a68 <ip_reass_free_complete_datagram+0xa0>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  402a1a:	4f14      	ldr	r7, [pc, #80]	; (402a6c <ip_reass_free_complete_datagram+0xa4>)
  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  402a1c:	6873      	ldr	r3, [r6, #4]
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  402a1e:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
  402a20:	4630      	mov	r0, r6
  402a22:	47c0      	blx	r8
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  402a24:	4420      	add	r0, r4
  402a26:	b284      	uxth	r4, r0
    pbuf_free(pcur);
  402a28:	4630      	mov	r0, r6
  402a2a:	47b8      	blx	r7
  while (p != NULL) {
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  402a2c:	462e      	mov	r6, r5
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
  402a2e:	2d00      	cmp	r5, #0
  402a30:	d1f4      	bne.n	402a1c <ip_reass_free_complete_datagram+0x54>
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  402a32:	4b0f      	ldr	r3, [pc, #60]	; (402a70 <ip_reass_free_complete_datagram+0xa8>)
  402a34:	681b      	ldr	r3, [r3, #0]
  402a36:	4599      	cmp	r9, r3
  402a38:	d104      	bne.n	402a44 <ip_reass_free_complete_datagram+0x7c>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  402a3a:	f8d9 2000 	ldr.w	r2, [r9]
  402a3e:	4b0c      	ldr	r3, [pc, #48]	; (402a70 <ip_reass_free_complete_datagram+0xa8>)
  402a40:	601a      	str	r2, [r3, #0]
  402a42:	e003      	b.n	402a4c <ip_reass_free_complete_datagram+0x84>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  402a44:	f8d9 3000 	ldr.w	r3, [r9]
  402a48:	f8ca 3000 	str.w	r3, [sl]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  402a4c:	4649      	mov	r1, r9
  402a4e:	2004      	movs	r0, #4
  402a50:	4b08      	ldr	r3, [pc, #32]	; (402a74 <ip_reass_free_complete_datagram+0xac>)
  402a52:	4798      	blx	r3
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
  402a54:	4a08      	ldr	r2, [pc, #32]	; (402a78 <ip_reass_free_complete_datagram+0xb0>)
  402a56:	8813      	ldrh	r3, [r2, #0]
  402a58:	1b1b      	subs	r3, r3, r4
  402a5a:	8013      	strh	r3, [r2, #0]

  return pbufs_freed;
}
  402a5c:	4620      	mov	r0, r4
  402a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a62:	bf00      	nop
  402a64:	004023d5 	.word	0x004023d5
  402a68:	004038dd 	.word	0x004038dd
  402a6c:	004036c9 	.word	0x004036c9
  402a70:	204009a0 	.word	0x204009a0
  402a74:	004034cd 	.word	0x004034cd
  402a78:	204009a4 	.word	0x204009a4

00402a7c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  402a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402a80:	4605      	mov	r5, r0
  402a82:	4688      	mov	r8, r1
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
  402a84:	2600      	movs	r6, #0
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
  402a86:	4f18      	ldr	r7, [pc, #96]	; (402ae8 <ip_reass_remove_oldest_datagram+0x6c>)
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  402a88:	f8df 9060 	ldr.w	r9, [pc, #96]	; 402aec <ip_reass_remove_oldest_datagram+0x70>
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
  402a8c:	683b      	ldr	r3, [r7, #0]
    while (r != NULL) {
  402a8e:	b343      	cbz	r3, 402ae2 <ip_reass_remove_oldest_datagram+0x66>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  402a90:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  402a94:	2400      	movs	r4, #0
  402a96:	4621      	mov	r1, r4
  402a98:	4620      	mov	r0, r4
  402a9a:	e001      	b.n	402aa0 <ip_reass_remove_oldest_datagram+0x24>
  402a9c:	4619      	mov	r1, r3
  402a9e:	4613      	mov	r3, r2
  402aa0:	695a      	ldr	r2, [r3, #20]
  402aa2:	4572      	cmp	r2, lr
  402aa4:	d109      	bne.n	402aba <ip_reass_remove_oldest_datagram+0x3e>
  402aa6:	f8d5 c010 	ldr.w	ip, [r5, #16]
  402aaa:	699a      	ldr	r2, [r3, #24]
  402aac:	4562      	cmp	r2, ip
  402aae:	d104      	bne.n	402aba <ip_reass_remove_oldest_datagram+0x3e>
  402ab0:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
  402ab4:	88aa      	ldrh	r2, [r5, #4]
  402ab6:	4594      	cmp	ip, r2
  402ab8:	d009      	beq.n	402ace <ip_reass_remove_oldest_datagram+0x52>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  402aba:	3401      	adds	r4, #1
        if (oldest == NULL) {
  402abc:	b130      	cbz	r0, 402acc <ip_reass_remove_oldest_datagram+0x50>
          oldest = r;
        } else if (r->timer <= oldest->timer) {
  402abe:	f893 c01f 	ldrb.w	ip, [r3, #31]
  402ac2:	7fc2      	ldrb	r2, [r0, #31]
  402ac4:	4594      	cmp	ip, r2
  402ac6:	bf98      	it	ls
  402ac8:	4618      	movls	r0, r3
  402aca:	e000      	b.n	402ace <ip_reass_remove_oldest_datagram+0x52>
  402acc:	4618      	mov	r0, r3
          /* older than the previous oldest */
          oldest = r;
        }
      }
      if (r->next != NULL) {
  402ace:	681a      	ldr	r2, [r3, #0]
  402ad0:	2a00      	cmp	r2, #0
  402ad2:	d1e3      	bne.n	402a9c <ip_reass_remove_oldest_datagram+0x20>
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
  402ad4:	b108      	cbz	r0, 402ada <ip_reass_remove_oldest_datagram+0x5e>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  402ad6:	47c8      	blx	r9
      pbufs_freed += pbufs_freed_current;
  402ad8:	4406      	add	r6, r0
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  402ada:	4546      	cmp	r6, r8
  402adc:	da01      	bge.n	402ae2 <ip_reass_remove_oldest_datagram+0x66>
  402ade:	2c01      	cmp	r4, #1
  402ae0:	dcd4      	bgt.n	402a8c <ip_reass_remove_oldest_datagram+0x10>
  return pbufs_freed;
}
  402ae2:	4630      	mov	r0, r6
  402ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ae8:	204009a0 	.word	0x204009a0
  402aec:	004029c9 	.word	0x004029c9

00402af0 <ip_reass_tmr>:
void
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  402af0:	4b0a      	ldr	r3, [pc, #40]	; (402b1c <ip_reass_tmr+0x2c>)
  402af2:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
  402af4:	b180      	cbz	r0, 402b18 <ip_reass_tmr+0x28>
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  402af6:	b570      	push	{r4, r5, r6, lr}
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
  402af8:	2400      	movs	r4, #0
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  402afa:	4e09      	ldr	r6, [pc, #36]	; (402b20 <ip_reass_tmr+0x30>)

  r = reassdatagrams;
  while (r != NULL) {
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  402afc:	7fc3      	ldrb	r3, [r0, #31]
  402afe:	b123      	cbz	r3, 402b0a <ip_reass_tmr+0x1a>
      r->timer--;
  402b00:	3b01      	subs	r3, #1
  402b02:	77c3      	strb	r3, [r0, #31]
  402b04:	4604      	mov	r4, r0
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
      r = r->next;
  402b06:	6800      	ldr	r0, [r0, #0]
  402b08:	e003      	b.n	402b12 <ip_reass_tmr+0x22>
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
  402b0a:	6805      	ldr	r5, [r0, #0]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  402b0c:	4621      	mov	r1, r4
  402b0e:	47b0      	blx	r6
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
      /* get the next pointer before freeing */
      r = r->next;
  402b10:	4628      	mov	r0, r5
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
  402b12:	2800      	cmp	r0, #0
  402b14:	d1f2      	bne.n	402afc <ip_reass_tmr+0xc>
  402b16:	bd70      	pop	{r4, r5, r6, pc}
  402b18:	4770      	bx	lr
  402b1a:	bf00      	nop
  402b1c:	204009a0 	.word	0x204009a0
  402b20:	004029c9 	.word	0x004029c9

00402b24 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
  402b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b28:	b083      	sub	sp, #12
  402b2a:	4607      	mov	r7, r0
  struct ip_reassdata *ipr_prev = NULL;

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
  402b2c:	6846      	ldr	r6, [r0, #4]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  402b2e:	7833      	ldrb	r3, [r6, #0]
  402b30:	f003 030f 	and.w	r3, r3, #15
  402b34:	2b05      	cmp	r3, #5
  402b36:	f040 8154 	bne.w	402de2 <ip_reass+0x2be>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  402b3a:	88f0      	ldrh	r0, [r6, #6]
  402b3c:	4caf      	ldr	r4, [pc, #700]	; (402dfc <ip_reass+0x2d8>)
  402b3e:	47a0      	blx	r4
  402b40:	4683      	mov	fp, r0
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  402b42:	8870      	ldrh	r0, [r6, #2]
  402b44:	47a0      	blx	r4
  402b46:	9001      	str	r0, [sp, #4]
  402b48:	f896 a000 	ldrb.w	sl, [r6]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  402b4c:	4638      	mov	r0, r7
  402b4e:	4bac      	ldr	r3, [pc, #688]	; (402e00 <ip_reass+0x2dc>)
  402b50:	4798      	blx	r3
  402b52:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  402b54:	4bab      	ldr	r3, [pc, #684]	; (402e04 <ip_reass+0x2e0>)
  402b56:	881b      	ldrh	r3, [r3, #0]
  402b58:	4403      	add	r3, r0
  402b5a:	2b0a      	cmp	r3, #10
  402b5c:	dd0c      	ble.n	402b78 <ip_reass+0x54>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  402b5e:	4601      	mov	r1, r0
  402b60:	4630      	mov	r0, r6
  402b62:	4ba9      	ldr	r3, [pc, #676]	; (402e08 <ip_reass+0x2e4>)
  402b64:	4798      	blx	r3
  402b66:	2800      	cmp	r0, #0
  402b68:	f000 813b 	beq.w	402de2 <ip_reass+0x2be>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  402b6c:	4ba5      	ldr	r3, [pc, #660]	; (402e04 <ip_reass+0x2e0>)

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  402b6e:	881b      	ldrh	r3, [r3, #0]
  402b70:	4443      	add	r3, r8
  402b72:	2b0a      	cmp	r3, #10
  402b74:	f300 8135 	bgt.w	402de2 <ip_reass+0x2be>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  402b78:	4ba4      	ldr	r3, [pc, #656]	; (402e0c <ip_reass+0x2e8>)
  402b7a:	681c      	ldr	r4, [r3, #0]
  402b7c:	b1b4      	cbz	r4, 402bac <ip_reass+0x88>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  402b7e:	68f2      	ldr	r2, [r6, #12]
  402b80:	2500      	movs	r5, #0
  402b82:	e000      	b.n	402b86 <ip_reass+0x62>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  402b84:	461c      	mov	r4, r3
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  402b86:	6963      	ldr	r3, [r4, #20]
  402b88:	4293      	cmp	r3, r2
  402b8a:	d107      	bne.n	402b9c <ip_reass+0x78>
  402b8c:	6933      	ldr	r3, [r6, #16]
  402b8e:	69a1      	ldr	r1, [r4, #24]
  402b90:	4299      	cmp	r1, r3
  402b92:	d103      	bne.n	402b9c <ip_reass+0x78>
  402b94:	89a1      	ldrh	r1, [r4, #12]
  402b96:	88b3      	ldrh	r3, [r6, #4]
  402b98:	4299      	cmp	r1, r3
  402b9a:	d004      	beq.n	402ba6 <ip_reass+0x82>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  402b9c:	6823      	ldr	r3, [r4, #0]
  402b9e:	4625      	mov	r5, r4
  402ba0:	2b00      	cmp	r3, #0
  402ba2:	d1ef      	bne.n	402b84 <ip_reass+0x60>
  402ba4:	e002      	b.n	402bac <ip_reass+0x88>
      break;
    }
    ipr_prev = ipr;
  }

  if (ipr == NULL) {
  402ba6:	2c00      	cmp	r4, #0
  402ba8:	d137      	bne.n	402c1a <ip_reass+0xf6>
  402baa:	462c      	mov	r4, r5
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  402bac:	2004      	movs	r0, #4
  402bae:	4b98      	ldr	r3, [pc, #608]	; (402e10 <ip_reass+0x2ec>)
  402bb0:	4798      	blx	r3
  if (ipr == NULL) {
  402bb2:	4681      	mov	r9, r0
  402bb4:	b968      	cbnz	r0, 402bd2 <ip_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  402bb6:	4641      	mov	r1, r8
  402bb8:	4630      	mov	r0, r6
  402bba:	4b93      	ldr	r3, [pc, #588]	; (402e08 <ip_reass+0x2e4>)
  402bbc:	4798      	blx	r3
  402bbe:	4580      	cmp	r8, r0
  402bc0:	f300 810f 	bgt.w	402de2 <ip_reass+0x2be>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  402bc4:	2004      	movs	r0, #4
  402bc6:	4b92      	ldr	r3, [pc, #584]	; (402e10 <ip_reass+0x2ec>)
  402bc8:	4798      	blx	r3
    }
    if (ipr == NULL)
  402bca:	4681      	mov	r9, r0
  402bcc:	2800      	cmp	r0, #0
  402bce:	f000 8108 	beq.w	402de2 <ip_reass+0x2be>
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  402bd2:	2220      	movs	r2, #32
  402bd4:	2100      	movs	r1, #0
  402bd6:	4648      	mov	r0, r9
  402bd8:	4b8e      	ldr	r3, [pc, #568]	; (402e14 <ip_reass+0x2f0>)
  402bda:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
  402bdc:	2303      	movs	r3, #3
  402bde:	f889 301f 	strb.w	r3, [r9, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  402be2:	4b8a      	ldr	r3, [pc, #552]	; (402e0c <ip_reass+0x2e8>)
  402be4:	681a      	ldr	r2, [r3, #0]
  402be6:	f8c9 2000 	str.w	r2, [r9]
  reassdatagrams = ipr;
  402bea:	f8c3 9000 	str.w	r9, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  402bee:	6832      	ldr	r2, [r6, #0]
  402bf0:	6875      	ldr	r5, [r6, #4]
  402bf2:	68b0      	ldr	r0, [r6, #8]
  402bf4:	68f1      	ldr	r1, [r6, #12]
  402bf6:	f8c9 2008 	str.w	r2, [r9, #8]
  402bfa:	f8c9 500c 	str.w	r5, [r9, #12]
  402bfe:	f8c9 0010 	str.w	r0, [r9, #16]
  402c02:	f8c9 1014 	str.w	r1, [r9, #20]
  402c06:	6932      	ldr	r2, [r6, #16]
  402c08:	f8c9 2018 	str.w	r2, [r9, #24]

  if (ipr == NULL) {
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
  402c0c:	f1b9 0f00 	cmp.w	r9, #0
  402c10:	f000 80e7 	beq.w	402de2 <ip_reass+0x2be>
  402c14:	4625      	mov	r5, r4
  ipr->next = reassdatagrams;
  reassdatagrams = ipr;
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  return ipr;
  402c16:	464c      	mov	r4, r9
  402c18:	e017      	b.n	402c4a <ip_reass+0x126>
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  402c1a:	88f0      	ldrh	r0, [r6, #6]
  402c1c:	4b77      	ldr	r3, [pc, #476]	; (402dfc <ip_reass+0x2d8>)
  402c1e:	4798      	blx	r3
  402c20:	f3c0 000c 	ubfx	r0, r0, #0, #13
  402c24:	b988      	cbnz	r0, 402c4a <ip_reass+0x126>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  402c26:	89e0      	ldrh	r0, [r4, #14]
  402c28:	4b74      	ldr	r3, [pc, #464]	; (402dfc <ip_reass+0x2d8>)
  402c2a:	4798      	blx	r3
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  402c2c:	f3c0 000c 	ubfx	r0, r0, #0, #13
  402c30:	b158      	cbz	r0, 402c4a <ip_reass+0x126>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  402c32:	6832      	ldr	r2, [r6, #0]
  402c34:	f8d6 e004 	ldr.w	lr, [r6, #4]
  402c38:	68b0      	ldr	r0, [r6, #8]
  402c3a:	68f1      	ldr	r1, [r6, #12]
  402c3c:	60a2      	str	r2, [r4, #8]
  402c3e:	f8c4 e00c 	str.w	lr, [r4, #12]
  402c42:	6120      	str	r0, [r4, #16]
  402c44:	6161      	str	r1, [r4, #20]
  402c46:	6932      	ldr	r2, [r6, #16]
  402c48:	61a2      	str	r2, [r4, #24]
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  402c4a:	4a6e      	ldr	r2, [pc, #440]	; (402e04 <ip_reass+0x2e0>)
  402c4c:	8813      	ldrh	r3, [r2, #0]
  402c4e:	4498      	add	r8, r3
  402c50:	f8a2 8000 	strh.w	r8, [r2]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  402c54:	88f3      	ldrh	r3, [r6, #6]
  402c56:	f003 0320 	and.w	r3, r3, #32
  402c5a:	b29b      	uxth	r3, r3
  402c5c:	b963      	cbnz	r3, 402c78 <ip_reass+0x154>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  402c5e:	7fa3      	ldrb	r3, [r4, #30]
  402c60:	f043 0301 	orr.w	r3, r3, #1
  402c64:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = offset + len;
  402c66:	f00a 0a0f 	and.w	sl, sl, #15
  402c6a:	9b01      	ldr	r3, [sp, #4]
  402c6c:	eba3 098a 	sub.w	r9, r3, sl, lsl #2
  402c70:	eb09 0bcb 	add.w	fp, r9, fp, lsl #3
  402c74:	f8a4 b01c 	strh.w	fp, [r4, #28]
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
  402c78:	687e      	ldr	r6, [r7, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  402c7a:	8870      	ldrh	r0, [r6, #2]
  402c7c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 402dfc <ip_reass+0x2d8>
  402c80:	47c8      	blx	r9
  402c82:	f896 8000 	ldrb.w	r8, [r6]
  402c86:	f008 080f 	and.w	r8, r8, #15
  402c8a:	eba0 0088 	sub.w	r0, r0, r8, lsl #2
  402c8e:	fa1f f880 	uxth.w	r8, r0
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  402c92:	88f0      	ldrh	r0, [r6, #6]
  402c94:	47c8      	blx	r9
  402c96:	f3c0 000c 	ubfx	r0, r0, #0, #13
  402c9a:	00c0      	lsls	r0, r0, #3
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  402c9c:	f8d7 c004 	ldr.w	ip, [r7, #4]
  iprh->next_pbuf = NULL;
  402ca0:	2300      	movs	r3, #0
  402ca2:	f88c 3000 	strb.w	r3, [ip]
  402ca6:	f88c 3001 	strb.w	r3, [ip, #1]
  402caa:	f88c 3002 	strb.w	r3, [ip, #2]
  402cae:	f88c 3003 	strb.w	r3, [ip, #3]
  iprh->start = offset;
  402cb2:	f8ac 0004 	strh.w	r0, [ip, #4]
  iprh->end = offset + len;
  402cb6:	4480      	add	r8, r0
  402cb8:	fa1f f888 	uxth.w	r8, r8
  402cbc:	f8ac 8006 	strh.w	r8, [ip, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  402cc0:	6862      	ldr	r2, [r4, #4]
  402cc2:	b3a2      	cbz	r2, 402d2e <ip_reass+0x20a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  402cc4:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
  402cc6:	8899      	ldrh	r1, [r3, #4]
  402cc8:	4288      	cmp	r0, r1
  402cca:	f0c0 808f 	bcc.w	402dec <ip_reass+0x2c8>
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
  402cce:	d056      	beq.n	402d7e <ip_reass+0x25a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
  402cd0:	88da      	ldrh	r2, [r3, #6]
  402cd2:	4282      	cmp	r2, r0
  402cd4:	d853      	bhi.n	402d7e <ip_reass+0x25a>
  402cd6:	f04f 0e01 	mov.w	lr, #1
  402cda:	e01c      	b.n	402d16 <ip_reass+0x1f2>
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  402cdc:	6872      	ldr	r2, [r6, #4]
    if (iprh->start < iprh_tmp->start) {
  402cde:	8891      	ldrh	r1, [r2, #4]
  402ce0:	4288      	cmp	r0, r1
  402ce2:	d20c      	bcs.n	402cfe <ip_reass+0x1da>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  402ce4:	f8cc 6000 	str.w	r6, [ip]
      if (iprh_prev != NULL) {
  402ce8:	2b00      	cmp	r3, #0
  402cea:	f000 80c5 	beq.w	402e78 <ip_reass+0x354>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  402cee:	88d9      	ldrh	r1, [r3, #6]
  402cf0:	4281      	cmp	r1, r0
  402cf2:	d844      	bhi.n	402d7e <ip_reass+0x25a>
  402cf4:	8892      	ldrh	r2, [r2, #4]
  402cf6:	4542      	cmp	r2, r8
  402cf8:	d341      	bcc.n	402d7e <ip_reass+0x25a>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  402cfa:	601f      	str	r7, [r3, #0]
  402cfc:	e01a      	b.n	402d34 <ip_reass+0x210>
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
  402cfe:	4288      	cmp	r0, r1
  402d00:	d03d      	beq.n	402d7e <ip_reass+0x25a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
  402d02:	88d6      	ldrh	r6, [r2, #6]
  402d04:	4286      	cmp	r6, r0
  402d06:	d83a      	bhi.n	402d7e <ip_reass+0x25a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
  402d08:	b123      	cbz	r3, 402d14 <ip_reass+0x1f0>
        if (iprh_prev->end != iprh_tmp->start) {
  402d0a:	88db      	ldrh	r3, [r3, #6]
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  402d0c:	428b      	cmp	r3, r1
  402d0e:	bf18      	it	ne
  402d10:	f04f 0e00 	movne.w	lr, #0
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  402d14:	4613      	mov	r3, r2
           * and the previous fragment */
          valid = 0;
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  402d16:	681e      	ldr	r6, [r3, #0]
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  402d18:	2e00      	cmp	r6, #0
  402d1a:	d1df      	bne.n	402cdc <ip_reass+0x1b8>
  402d1c:	e06b      	b.n	402df6 <ip_reass+0x2d2>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  402d1e:	601f      	str	r7, [r3, #0]
      if (iprh_prev->end != iprh->start) {
  402d20:	88da      	ldrh	r2, [r3, #6]
  402d22:	f8bc 3004 	ldrh.w	r3, [ip, #4]
  402d26:	429a      	cmp	r2, r3
  402d28:	f040 80a4 	bne.w	402e74 <ip_reass+0x350>
  402d2c:	e002      	b.n	402d34 <ip_reass+0x210>
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  402d2e:	f04f 0e01 	mov.w	lr, #1
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  402d32:	6067      	str	r7, [r4, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  402d34:	7fa3      	ldrb	r3, [r4, #30]
  402d36:	f013 0f01 	tst.w	r3, #1
  402d3a:	f000 809b 	beq.w	402e74 <ip_reass+0x350>
    /* and had no wholes so far */
    if (valid) {
  402d3e:	f1be 0f00 	cmp.w	lr, #0
  402d42:	f000 8097 	beq.w	402e74 <ip_reass+0x350>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
  402d46:	6860      	ldr	r0, [r4, #4]
  402d48:	6843      	ldr	r3, [r0, #4]
  402d4a:	889b      	ldrh	r3, [r3, #4]
  402d4c:	2b00      	cmp	r3, #0
  402d4e:	f040 8091 	bne.w	402e74 <ip_reass+0x350>
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
  402d52:	f8dc 3000 	ldr.w	r3, [ip]
        while (q != NULL) {
  402d56:	2b00      	cmp	r3, #0
  402d58:	d066      	beq.n	402e28 <ip_reass+0x304>
          iprh = (struct ip_reass_helper*)q->payload;
  402d5a:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
  402d5c:	f8bc 1006 	ldrh.w	r1, [ip, #6]
  402d60:	889a      	ldrh	r2, [r3, #4]
  402d62:	4291      	cmp	r1, r2
  402d64:	d007      	beq.n	402d76 <ip_reass+0x252>
  402d66:	e085      	b.n	402e74 <ip_reass+0x350>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
          iprh = (struct ip_reass_helper*)q->payload;
  402d68:	6852      	ldr	r2, [r2, #4]
          if (iprh_prev->end != iprh->start) {
  402d6a:	88d9      	ldrh	r1, [r3, #6]
  402d6c:	8893      	ldrh	r3, [r2, #4]
  402d6e:	4299      	cmp	r1, r3
  402d70:	f040 8080 	bne.w	402e74 <ip_reass+0x350>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
          iprh = (struct ip_reass_helper*)q->payload;
  402d74:	4613      	mov	r3, r2
          if (iprh_prev->end != iprh->start) {
            valid = 0;
            break;
          }
          iprh_prev = iprh;
          q = iprh->next_pbuf;
  402d76:	681a      	ldr	r2, [r3, #0]
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
  402d78:	2a00      	cmp	r2, #0
  402d7a:	d1f5      	bne.n	402d68 <ip_reass+0x244>
  402d7c:	e054      	b.n	402e28 <ip_reass+0x304>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
  402d7e:	4638      	mov	r0, r7
  402d80:	4b1f      	ldr	r3, [pc, #124]	; (402e00 <ip_reass+0x2dc>)
  402d82:	4798      	blx	r3
  402d84:	4a1f      	ldr	r2, [pc, #124]	; (402e04 <ip_reass+0x2e0>)
  402d86:	8813      	ldrh	r3, [r2, #0]
  402d88:	1a18      	subs	r0, r3, r0
  402d8a:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
  402d8c:	4638      	mov	r0, r7
  402d8e:	4b22      	ldr	r3, [pc, #136]	; (402e18 <ip_reass+0x2f4>)
  402d90:	4798      	blx	r3
  402d92:	e06f      	b.n	402e74 <ip_reass+0x350>
    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
      iprh = (struct ip_reass_helper*)r->payload;

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
  402d94:	f06f 0b13 	mvn.w	fp, #19
  402d98:	f8df a084 	ldr.w	sl, [pc, #132]	; 402e20 <ip_reass+0x2fc>
      pbuf_cat(p, r);
  402d9c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402e24 <ip_reass+0x300>

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
      iprh = (struct ip_reass_helper*)r->payload;
  402da0:	6877      	ldr	r7, [r6, #4]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
  402da2:	4659      	mov	r1, fp
  402da4:	4630      	mov	r0, r6
  402da6:	47d0      	blx	sl
      pbuf_cat(p, r);
  402da8:	4631      	mov	r1, r6
  402daa:	4640      	mov	r0, r8
  402dac:	47c8      	blx	r9
      r = iprh->next_pbuf;
  402dae:	683e      	ldr	r6, [r7, #0]
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  402db0:	2e00      	cmp	r6, #0
  402db2:	d1f5      	bne.n	402da0 <ip_reass+0x27c>
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  402db4:	4b15      	ldr	r3, [pc, #84]	; (402e0c <ip_reass+0x2e8>)
  402db6:	681b      	ldr	r3, [r3, #0]
  402db8:	429c      	cmp	r4, r3
  402dba:	d103      	bne.n	402dc4 <ip_reass+0x2a0>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  402dbc:	6822      	ldr	r2, [r4, #0]
  402dbe:	4b13      	ldr	r3, [pc, #76]	; (402e0c <ip_reass+0x2e8>)
  402dc0:	601a      	str	r2, [r3, #0]
  402dc2:	e001      	b.n	402dc8 <ip_reass+0x2a4>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  402dc4:	6823      	ldr	r3, [r4, #0]
  402dc6:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  402dc8:	4621      	mov	r1, r4
  402dca:	2004      	movs	r0, #4
  402dcc:	4b13      	ldr	r3, [pc, #76]	; (402e1c <ip_reass+0x2f8>)
  402dce:	4798      	blx	r3
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  402dd0:	4640      	mov	r0, r8
  402dd2:	4b0b      	ldr	r3, [pc, #44]	; (402e00 <ip_reass+0x2dc>)
  402dd4:	4798      	blx	r3
  402dd6:	4a0b      	ldr	r2, [pc, #44]	; (402e04 <ip_reass+0x2e0>)
  402dd8:	8813      	ldrh	r3, [r2, #0]
  402dda:	1a18      	subs	r0, r3, r0
  402ddc:	8010      	strh	r0, [r2, #0]

    /* Return the pbuf chain */
    return p;
  402dde:	4640      	mov	r0, r8
  402de0:	e04c      	b.n	402e7c <ip_reass+0x358>
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  402de2:	4638      	mov	r0, r7
  402de4:	4b0c      	ldr	r3, [pc, #48]	; (402e18 <ip_reass+0x2f4>)
  402de6:	4798      	blx	r3
  return NULL;
  402de8:	2000      	movs	r0, #0
  402dea:	e047      	b.n	402e7c <ip_reass+0x358>
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    iprh_tmp = (struct ip_reass_helper*)q->payload;
    if (iprh->start < iprh_tmp->start) {
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  402dec:	f8cc 2000 	str.w	r2, [ip]
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  402df0:	f04f 0e01 	mov.w	lr, #1
  402df4:	e040      	b.n	402e78 <ip_reass+0x354>
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
    if (iprh_prev != NULL) {
  402df6:	2b00      	cmp	r3, #0
  402df8:	d191      	bne.n	402d1e <ip_reass+0x1fa>
  402dfa:	e79a      	b.n	402d32 <ip_reass+0x20e>
  402dfc:	004010a1 	.word	0x004010a1
  402e00:	004038dd 	.word	0x004038dd
  402e04:	204009a4 	.word	0x204009a4
  402e08:	00402a7d 	.word	0x00402a7d
  402e0c:	204009a0 	.word	0x204009a0
  402e10:	004034ad 	.word	0x004034ad
  402e14:	0040805d 	.word	0x0040805d
  402e18:	004036c9 	.word	0x004036c9
  402e1c:	004034cd 	.word	0x004034cd
  402e20:	00403659 	.word	0x00403659
  402e24:	00403901 	.word	0x00403901
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  402e28:	8ba3      	ldrh	r3, [r4, #28]
  402e2a:	3314      	adds	r3, #20
  402e2c:	83a3      	strh	r3, [r4, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  402e2e:	6847      	ldr	r7, [r0, #4]
  402e30:	683e      	ldr	r6, [r7, #0]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  402e32:	4623      	mov	r3, r4
  402e34:	f853 2f08 	ldr.w	r2, [r3, #8]!
  402e38:	f8d3 e004 	ldr.w	lr, [r3, #4]
  402e3c:	6898      	ldr	r0, [r3, #8]
  402e3e:	68d9      	ldr	r1, [r3, #12]
  402e40:	603a      	str	r2, [r7, #0]
  402e42:	f8c7 e004 	str.w	lr, [r7, #4]
  402e46:	60b8      	str	r0, [r7, #8]
  402e48:	60f9      	str	r1, [r7, #12]
  402e4a:	691a      	ldr	r2, [r3, #16]
  402e4c:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
  402e4e:	8ba0      	ldrh	r0, [r4, #28]
  402e50:	4b0c      	ldr	r3, [pc, #48]	; (402e84 <ip_reass+0x360>)
  402e52:	4798      	blx	r3
  402e54:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  402e56:	2300      	movs	r3, #0
  402e58:	71bb      	strb	r3, [r7, #6]
  402e5a:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  402e5c:	72bb      	strb	r3, [r7, #10]
  402e5e:	72fb      	strb	r3, [r7, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  402e60:	2114      	movs	r1, #20
  402e62:	4638      	mov	r0, r7
  402e64:	4b08      	ldr	r3, [pc, #32]	; (402e88 <ip_reass+0x364>)
  402e66:	4798      	blx	r3
  402e68:	8178      	strh	r0, [r7, #10]

    p = ipr->p;
  402e6a:	f8d4 8004 	ldr.w	r8, [r4, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  402e6e:	2e00      	cmp	r6, #0
  402e70:	d190      	bne.n	402d94 <ip_reass+0x270>
  402e72:	e79f      	b.n	402db4 <ip_reass+0x290>
    /* Return the pbuf chain */
    return p;
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  402e74:	2000      	movs	r0, #0
  402e76:	e001      	b.n	402e7c <ip_reass+0x358>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
  402e78:	6067      	str	r7, [r4, #4]
  402e7a:	e75b      	b.n	402d34 <ip_reass+0x210>
nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  return NULL;
}
  402e7c:	b003      	add	sp, #12
  402e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e82:	bf00      	nop
  402e84:	00401095 	.word	0x00401095
  402e88:	004024f5 	.word	0x004024f5

00402e8c <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
  402e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e90:	b089      	sub	sp, #36	; 0x24
  402e92:	4604      	mov	r4, r0
  402e94:	9003      	str	r0, [sp, #12]
  402e96:	9105      	str	r1, [sp, #20]
  402e98:	9206      	str	r2, [sp, #24]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  402e9a:	8d0e      	ldrh	r6, [r1, #40]	; 0x28

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
  402e9c:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  402ea0:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  402ea4:	4b3f      	ldr	r3, [pc, #252]	; (402fa4 <ip_frag+0x118>)
  402ea6:	4798      	blx	r3
  ofo = tmp & IP_OFFMASK;
  402ea8:	f3c0 0b0c 	ubfx	fp, r0, #0, #13
  omf = tmp & IP_MF;
  402eac:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
  402eb0:	b283      	uxth	r3, r0
  402eb2:	9302      	str	r3, [sp, #8]

  left = p->tot_len - IP_HLEN;
  402eb4:	8925      	ldrh	r5, [r4, #8]
  402eb6:	3d14      	subs	r5, #20
  402eb8:	b2ad      	uxth	r5, r5

  nfb = (mtu - IP_HLEN) / 8;
  402eba:	f1a6 0314 	sub.w	r3, r6, #20
  402ebe:	9301      	str	r3, [sp, #4]
  402ec0:	2b00      	cmp	r3, #0
  402ec2:	bfb8      	it	lt
  402ec4:	3307      	addlt	r3, #7
  402ec6:	f3c3 03cf 	ubfx	r3, r3, #3, #16
  402eca:	9304      	str	r3, [sp, #16]

  while (left) {
  402ecc:	2d00      	cmp	r5, #0
  402ece:	d062      	beq.n	402f96 <ip_frag+0x10a>
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  402ed0:	00db      	lsls	r3, r3, #3
  402ed2:	b29b      	uxth	r3, r3
  402ed4:	9307      	str	r3, [sp, #28]
  402ed6:	f04f 0914 	mov.w	r9, #20

  while (left) {
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
  402eda:	f3cb 080c 	ubfx	r8, fp, #0, #13
  402ede:	9b02      	ldr	r3, [sp, #8]
  402ee0:	ea43 0808 	orr.w	r8, r3, r8
    if (!last) {
  402ee4:	9b01      	ldr	r3, [sp, #4]
  402ee6:	42ab      	cmp	r3, r5
  402ee8:	da03      	bge.n	402ef2 <ip_frag+0x66>
      tmp = tmp | IP_MF;
  402eea:	f448 5800 	orr.w	r8, r8, #8192	; 0x2000
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  402eee:	9c07      	ldr	r4, [sp, #28]
  402ef0:	e000      	b.n	402ef4 <ip_frag+0x68>
  402ef2:	462c      	mov	r4, r5

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
  402ef4:	2200      	movs	r2, #0
  402ef6:	4621      	mov	r1, r4
  402ef8:	2001      	movs	r0, #1
  402efa:	4b2b      	ldr	r3, [pc, #172]	; (402fa8 <ip_frag+0x11c>)
  402efc:	4798      	blx	r3
    if (rambuf == NULL) {
  402efe:	4606      	mov	r6, r0
  402f00:	2800      	cmp	r0, #0
  402f02:	d04a      	beq.n	402f9a <ip_frag+0x10e>
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
      (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
    poff += pbuf_copy_partial(p, rambuf->payload, cop, poff);
  402f04:	464b      	mov	r3, r9
  402f06:	4622      	mov	r2, r4
  402f08:	6841      	ldr	r1, [r0, #4]
  402f0a:	9803      	ldr	r0, [sp, #12]
  402f0c:	4f27      	ldr	r7, [pc, #156]	; (402fac <ip_frag+0x120>)
  402f0e:	47b8      	blx	r7
  402f10:	4448      	add	r0, r9
  402f12:	fa1f f980 	uxth.w	r9, r0
    /* make room for the IP header */
    if(pbuf_header(rambuf, IP_HLEN)) {
  402f16:	2114      	movs	r1, #20
  402f18:	4630      	mov	r0, r6
  402f1a:	4b25      	ldr	r3, [pc, #148]	; (402fb0 <ip_frag+0x124>)
  402f1c:	4798      	blx	r3
  402f1e:	b128      	cbz	r0, 402f2c <ip_frag+0xa0>
      pbuf_free(rambuf);
  402f20:	4630      	mov	r0, r6
  402f22:	4b24      	ldr	r3, [pc, #144]	; (402fb4 <ip_frag+0x128>)
  402f24:	4798      	blx	r3
      return ERR_MEM;
  402f26:	f04f 30ff 	mov.w	r0, #4294967295
  402f2a:	e038      	b.n	402f9e <ip_frag+0x112>
    }
    /* fill in the IP header */
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  402f2c:	6873      	ldr	r3, [r6, #4]
  402f2e:	f8da 2000 	ldr.w	r2, [sl]
  402f32:	f8da 7004 	ldr.w	r7, [sl, #4]
  402f36:	f8da 0008 	ldr.w	r0, [sl, #8]
  402f3a:	f8da 100c 	ldr.w	r1, [sl, #12]
  402f3e:	601a      	str	r2, [r3, #0]
  402f40:	605f      	str	r7, [r3, #4]
  402f42:	6098      	str	r0, [r3, #8]
  402f44:	60d9      	str	r1, [r3, #12]
  402f46:	f8da 2010 	ldr.w	r2, [sl, #16]
  402f4a:	611a      	str	r2, [r3, #16]
    iphdr = rambuf->payload;
  402f4c:	6877      	ldr	r7, [r6, #4]
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  402f4e:	4640      	mov	r0, r8
  402f50:	f8df 8068 	ldr.w	r8, [pc, #104]	; 402fbc <ip_frag+0x130>
  402f54:	47c0      	blx	r8
  402f56:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  402f58:	f104 0014 	add.w	r0, r4, #20
  402f5c:	b280      	uxth	r0, r0
  402f5e:	47c0      	blx	r8
  402f60:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  402f62:	2300      	movs	r3, #0
  402f64:	72bb      	strb	r3, [r7, #10]
  402f66:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  402f68:	2114      	movs	r1, #20
  402f6a:	4638      	mov	r0, r7
  402f6c:	4b12      	ldr	r3, [pc, #72]	; (402fb8 <ip_frag+0x12c>)
  402f6e:	4798      	blx	r3
  402f70:	8178      	strh	r0, [r7, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  402f72:	9805      	ldr	r0, [sp, #20]
  402f74:	6943      	ldr	r3, [r0, #20]
  402f76:	9a06      	ldr	r2, [sp, #24]
  402f78:	4631      	mov	r1, r6
  402f7a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
  402f7c:	4630      	mov	r0, r6
  402f7e:	4b0d      	ldr	r3, [pc, #52]	; (402fb4 <ip_frag+0x128>)
  402f80:	4798      	blx	r3
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
  402f82:	1b2d      	subs	r5, r5, r4
  402f84:	b2ad      	uxth	r5, r5
    ofo += nfb;
  402f86:	9b04      	ldr	r3, [sp, #16]
  402f88:	449b      	add	fp, r3
  402f8a:	fa1f fb8b 	uxth.w	fp, fp

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
  402f8e:	2d00      	cmp	r5, #0
  402f90:	d1a3      	bne.n	402eda <ip_frag+0x4e>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
  402f92:	2000      	movs	r0, #0
  402f94:	e003      	b.n	402f9e <ip_frag+0x112>
  402f96:	2000      	movs	r0, #0
  402f98:	e001      	b.n	402f9e <ip_frag+0x112>
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
    if (rambuf == NULL) {
      return ERR_MEM;
  402f9a:	f04f 30ff 	mov.w	r0, #4294967295
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
}
  402f9e:	b009      	add	sp, #36	; 0x24
  402fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fa4:	004010a1 	.word	0x004010a1
  402fa8:	00403729 	.word	0x00403729
  402fac:	004039f9 	.word	0x004039f9
  402fb0:	00403659 	.word	0x00403659
  402fb4:	004036c9 	.word	0x004036c9
  402fb8:	004024f5 	.word	0x004024f5
  402fbc:	00401095 	.word	0x00401095

00402fc0 <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  402fc0:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
  402fc2:	4b06      	ldr	r3, [pc, #24]	; (402fdc <lwip_init+0x1c>)
  402fc4:	4798      	blx	r3
  memp_init();
  402fc6:	4b06      	ldr	r3, [pc, #24]	; (402fe0 <lwip_init+0x20>)
  402fc8:	4798      	blx	r3
  pbuf_init();
  netif_init();
  402fca:	4b06      	ldr	r3, [pc, #24]	; (402fe4 <lwip_init+0x24>)
  402fcc:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  402fce:	4b06      	ldr	r3, [pc, #24]	; (402fe8 <lwip_init+0x28>)
  402fd0:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  402fd2:	4b06      	ldr	r3, [pc, #24]	; (402fec <lwip_init+0x2c>)
  402fd4:	4798      	blx	r3
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
  402fd6:	4b06      	ldr	r3, [pc, #24]	; (402ff0 <lwip_init+0x30>)
  402fd8:	4798      	blx	r3
  402fda:	bd08      	pop	{r3, pc}
  402fdc:	004031c5 	.word	0x004031c5
  402fe0:	00403439 	.word	0x00403439
  402fe4:	004034e5 	.word	0x004034e5
  402fe8:	00406659 	.word	0x00406659
  402fec:	00403ac9 	.word	0x00403ac9
  402ff0:	004030f1 	.word	0x004030f1

00402ff4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  402ff4:	b570      	push	{r4, r5, r6, lr}
  402ff6:	4604      	mov	r4, r0
  402ff8:	460e      	mov	r6, r1
  402ffa:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  402ffc:	2005      	movs	r0, #5
  402ffe:	4b1b      	ldr	r3, [pc, #108]	; (40306c <sys_timeout+0x78>)
  403000:	4798      	blx	r3
  if (timeout == NULL) {
  403002:	2800      	cmp	r0, #0
  403004:	d031      	beq.n	40306a <sys_timeout+0x76>
  403006:	4601      	mov	r1, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
  403008:	2300      	movs	r3, #0
  40300a:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
  40300c:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
  40300e:	60c5      	str	r5, [r0, #12]
  timeout->time = msecs;
  403010:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  403012:	4b17      	ldr	r3, [pc, #92]	; (403070 <sys_timeout+0x7c>)
  403014:	681d      	ldr	r5, [r3, #0]
  403016:	b90d      	cbnz	r5, 40301c <sys_timeout+0x28>
    next_timeout = timeout;
  403018:	6018      	str	r0, [r3, #0]
    return;
  40301a:	bd70      	pop	{r4, r5, r6, pc}
  }

  if (next_timeout->time > msecs) {
  40301c:	6868      	ldr	r0, [r5, #4]
  40301e:	4284      	cmp	r4, r0
  403020:	d214      	bcs.n	40304c <sys_timeout+0x58>
    next_timeout->time -= msecs;
  403022:	1b00      	subs	r0, r0, r4
  403024:	6068      	str	r0, [r5, #4]
    timeout->next = next_timeout;
  403026:	600d      	str	r5, [r1, #0]
    next_timeout = timeout;
  403028:	4b11      	ldr	r3, [pc, #68]	; (403070 <sys_timeout+0x7c>)
  40302a:	6019      	str	r1, [r3, #0]
  40302c:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
  40302e:	684b      	ldr	r3, [r1, #4]
  403030:	6850      	ldr	r0, [r2, #4]
  403032:	1a18      	subs	r0, r3, r0
  403034:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  403036:	6813      	ldr	r3, [r2, #0]
  403038:	b123      	cbz	r3, 403044 <sys_timeout+0x50>
  40303a:	685c      	ldr	r4, [r3, #4]
  40303c:	42a0      	cmp	r0, r4
  40303e:	d30e      	bcc.n	40305e <sys_timeout+0x6a>
  403040:	461a      	mov	r2, r3
  403042:	e7f4      	b.n	40302e <sys_timeout+0x3a>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
        }
        timeout->next = t->next;
  403044:	6813      	ldr	r3, [r2, #0]
  403046:	600b      	str	r3, [r1, #0]
        t->next = timeout;
  403048:	6011      	str	r1, [r2, #0]
        break;
  40304a:	bd70      	pop	{r4, r5, r6, pc}
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
  40304c:	1a20      	subs	r0, r4, r0
  40304e:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  403050:	682a      	ldr	r2, [r5, #0]
  403052:	b142      	cbz	r2, 403066 <sys_timeout+0x72>
  403054:	6853      	ldr	r3, [r2, #4]
  403056:	4298      	cmp	r0, r3
  403058:	d2e9      	bcs.n	40302e <sys_timeout+0x3a>
  40305a:	4613      	mov	r3, r2
  40305c:	462a      	mov	r2, r5
        if (t->next != NULL) {
          t->next->time -= timeout->time;
  40305e:	685c      	ldr	r4, [r3, #4]
  403060:	1a20      	subs	r0, r4, r0
  403062:	6058      	str	r0, [r3, #4]
  403064:	e7ee      	b.n	403044 <sys_timeout+0x50>
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
  403066:	462a      	mov	r2, r5
  403068:	e7ec      	b.n	403044 <sys_timeout+0x50>
  40306a:	bd70      	pop	{r4, r5, r6, pc}
  40306c:	004034ad 	.word	0x004034ad
  403070:	204009b0 	.word	0x204009b0

00403074 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  403074:	b508      	push	{r3, lr}
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  403076:	4b09      	ldr	r3, [pc, #36]	; (40309c <tcp_timer_needed+0x28>)
  403078:	681b      	ldr	r3, [r3, #0]
  40307a:	b96b      	cbnz	r3, 403098 <tcp_timer_needed+0x24>
  40307c:	4b08      	ldr	r3, [pc, #32]	; (4030a0 <tcp_timer_needed+0x2c>)
  40307e:	681b      	ldr	r3, [r3, #0]
  403080:	b913      	cbnz	r3, 403088 <tcp_timer_needed+0x14>
  403082:	4b08      	ldr	r3, [pc, #32]	; (4030a4 <tcp_timer_needed+0x30>)
  403084:	681b      	ldr	r3, [r3, #0]
  403086:	b13b      	cbz	r3, 403098 <tcp_timer_needed+0x24>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  403088:	2201      	movs	r2, #1
  40308a:	4b04      	ldr	r3, [pc, #16]	; (40309c <tcp_timer_needed+0x28>)
  40308c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  40308e:	2200      	movs	r2, #0
  403090:	4905      	ldr	r1, [pc, #20]	; (4030a8 <tcp_timer_needed+0x34>)
  403092:	20fa      	movs	r0, #250	; 0xfa
  403094:	4b05      	ldr	r3, [pc, #20]	; (4030ac <tcp_timer_needed+0x38>)
  403096:	4798      	blx	r3
  403098:	bd08      	pop	{r3, pc}
  40309a:	bf00      	nop
  40309c:	204009a8 	.word	0x204009a8
  4030a0:	2040489c 	.word	0x2040489c
  4030a4:	204048b0 	.word	0x204048b0
  4030a8:	004030b1 	.word	0x004030b1
  4030ac:	00402ff5 	.word	0x00402ff5

004030b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  4030b0:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  4030b2:	4b09      	ldr	r3, [pc, #36]	; (4030d8 <tcpip_tcp_timer+0x28>)
  4030b4:	4798      	blx	r3
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  4030b6:	4b09      	ldr	r3, [pc, #36]	; (4030dc <tcpip_tcp_timer+0x2c>)
  4030b8:	681b      	ldr	r3, [r3, #0]
  4030ba:	b913      	cbnz	r3, 4030c2 <tcpip_tcp_timer+0x12>
  4030bc:	4b08      	ldr	r3, [pc, #32]	; (4030e0 <tcpip_tcp_timer+0x30>)
  4030be:	681b      	ldr	r3, [r3, #0]
  4030c0:	b12b      	cbz	r3, 4030ce <tcpip_tcp_timer+0x1e>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  4030c2:	2200      	movs	r2, #0
  4030c4:	4907      	ldr	r1, [pc, #28]	; (4030e4 <tcpip_tcp_timer+0x34>)
  4030c6:	20fa      	movs	r0, #250	; 0xfa
  4030c8:	4b07      	ldr	r3, [pc, #28]	; (4030e8 <tcpip_tcp_timer+0x38>)
  4030ca:	4798      	blx	r3
  4030cc:	bd08      	pop	{r3, pc}
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  4030ce:	2200      	movs	r2, #0
  4030d0:	4b06      	ldr	r3, [pc, #24]	; (4030ec <tcpip_tcp_timer+0x3c>)
  4030d2:	601a      	str	r2, [r3, #0]
  4030d4:	bd08      	pop	{r3, pc}
  4030d6:	bf00      	nop
  4030d8:	00404339 	.word	0x00404339
  4030dc:	2040489c 	.word	0x2040489c
  4030e0:	204048b0 	.word	0x204048b0
  4030e4:	004030b1 	.word	0x004030b1
  4030e8:	00402ff5 	.word	0x00402ff5
  4030ec:	204009a8 	.word	0x204009a8

004030f0 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
  4030f0:	b510      	push	{r4, lr}
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  4030f2:	2200      	movs	r2, #0
  4030f4:	490c      	ldr	r1, [pc, #48]	; (403128 <sys_timeouts_init+0x38>)
  4030f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4030fa:	4c0c      	ldr	r4, [pc, #48]	; (40312c <sys_timeouts_init+0x3c>)
  4030fc:	47a0      	blx	r4
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  4030fe:	2200      	movs	r2, #0
  403100:	490b      	ldr	r1, [pc, #44]	; (403130 <sys_timeouts_init+0x40>)
  403102:	f241 3088 	movw	r0, #5000	; 0x1388
  403106:	47a0      	blx	r4
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  403108:	2200      	movs	r2, #0
  40310a:	490a      	ldr	r1, [pc, #40]	; (403134 <sys_timeouts_init+0x44>)
  40310c:	f64e 2060 	movw	r0, #60000	; 0xea60
  403110:	47a0      	blx	r4
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  403112:	2200      	movs	r2, #0
  403114:	4908      	ldr	r1, [pc, #32]	; (403138 <sys_timeouts_init+0x48>)
  403116:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40311a:	47a0      	blx	r4
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  40311c:	4b07      	ldr	r3, [pc, #28]	; (40313c <sys_timeouts_init+0x4c>)
  40311e:	4798      	blx	r3
  403120:	4b07      	ldr	r3, [pc, #28]	; (403140 <sys_timeouts_init+0x50>)
  403122:	6018      	str	r0, [r3, #0]
  403124:	bd10      	pop	{r4, pc}
  403126:	bf00      	nop
  403128:	004031a5 	.word	0x004031a5
  40312c:	00402ff5 	.word	0x00402ff5
  403130:	00403185 	.word	0x00403185
  403134:	00403165 	.word	0x00403165
  403138:	00403145 	.word	0x00403145
  40313c:	00407b21 	.word	0x00407b21
  403140:	204009ac 	.word	0x204009ac

00403144 <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
  403144:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
  403146:	4b04      	ldr	r3, [pc, #16]	; (403158 <dhcp_timer_fine+0x14>)
  403148:	4798      	blx	r3
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  40314a:	2200      	movs	r2, #0
  40314c:	4903      	ldr	r1, [pc, #12]	; (40315c <dhcp_timer_fine+0x18>)
  40314e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403152:	4b03      	ldr	r3, [pc, #12]	; (403160 <dhcp_timer_fine+0x1c>)
  403154:	4798      	blx	r3
  403156:	bd08      	pop	{r3, pc}
  403158:	00401fd1 	.word	0x00401fd1
  40315c:	00403145 	.word	0x00403145
  403160:	00402ff5 	.word	0x00402ff5

00403164 <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
  403164:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
  403166:	4b04      	ldr	r3, [pc, #16]	; (403178 <dhcp_timer_coarse+0x14>)
  403168:	4798      	blx	r3
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  40316a:	2200      	movs	r2, #0
  40316c:	4903      	ldr	r1, [pc, #12]	; (40317c <dhcp_timer_coarse+0x18>)
  40316e:	f64e 2060 	movw	r0, #60000	; 0xea60
  403172:	4b03      	ldr	r3, [pc, #12]	; (403180 <dhcp_timer_coarse+0x1c>)
  403174:	4798      	blx	r3
  403176:	bd08      	pop	{r3, pc}
  403178:	00401e91 	.word	0x00401e91
  40317c:	00403165 	.word	0x00403165
  403180:	00402ff5 	.word	0x00402ff5

00403184 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
  403184:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
  403186:	4b04      	ldr	r3, [pc, #16]	; (403198 <arp_timer+0x14>)
  403188:	4798      	blx	r3
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  40318a:	2200      	movs	r2, #0
  40318c:	4903      	ldr	r1, [pc, #12]	; (40319c <arp_timer+0x18>)
  40318e:	f241 3088 	movw	r0, #5000	; 0x1388
  403192:	4b03      	ldr	r3, [pc, #12]	; (4031a0 <arp_timer+0x1c>)
  403194:	4798      	blx	r3
  403196:	bd08      	pop	{r3, pc}
  403198:	00406c65 	.word	0x00406c65
  40319c:	00403185 	.word	0x00403185
  4031a0:	00402ff5 	.word	0x00402ff5

004031a4 <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
  4031a4:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
  4031a6:	4b04      	ldr	r3, [pc, #16]	; (4031b8 <ip_reass_timer+0x14>)
  4031a8:	4798      	blx	r3
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  4031aa:	2200      	movs	r2, #0
  4031ac:	4903      	ldr	r1, [pc, #12]	; (4031bc <ip_reass_timer+0x18>)
  4031ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4031b2:	4b03      	ldr	r3, [pc, #12]	; (4031c0 <ip_reass_timer+0x1c>)
  4031b4:	4798      	blx	r3
  4031b6:	bd08      	pop	{r3, pc}
  4031b8:	00402af1 	.word	0x00402af1
  4031bc:	004031a5 	.word	0x004031a5
  4031c0:	00402ff5 	.word	0x00402ff5

004031c4 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  4031c4:	4b0a      	ldr	r3, [pc, #40]	; (4031f0 <mem_init+0x2c>)
  4031c6:	f023 0303 	bic.w	r3, r3, #3
  4031ca:	4a0a      	ldr	r2, [pc, #40]	; (4031f4 <mem_init+0x30>)
  4031cc:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  4031ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4031d2:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
  4031d4:	2200      	movs	r2, #0
  4031d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
  4031d8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  4031da:	185a      	adds	r2, r3, r1
  4031dc:	4806      	ldr	r0, [pc, #24]	; (4031f8 <mem_init+0x34>)
  4031de:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
  4031e0:	2001      	movs	r0, #1
  4031e2:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  4031e4:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  4031e6:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
  4031e8:	4a04      	ldr	r2, [pc, #16]	; (4031fc <mem_init+0x38>)
  4031ea:	6013      	str	r3, [r2, #0]
  4031ec:	4770      	bx	lr
  4031ee:	bf00      	nop
  4031f0:	2040387b 	.word	0x2040387b
  4031f4:	204009bc 	.word	0x204009bc
  4031f8:	204009b8 	.word	0x204009b8
  4031fc:	204009b4 	.word	0x204009b4

00403200 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  403200:	2800      	cmp	r0, #0
  403202:	d03f      	beq.n	403284 <mem_free+0x84>
  403204:	4603      	mov	r3, r0
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  403206:	4a20      	ldr	r2, [pc, #128]	; (403288 <mem_free+0x88>)
  403208:	6812      	ldr	r2, [r2, #0]
  40320a:	4290      	cmp	r0, r2
  40320c:	d33a      	bcc.n	403284 <mem_free+0x84>
  40320e:	491f      	ldr	r1, [pc, #124]	; (40328c <mem_free+0x8c>)
  403210:	6808      	ldr	r0, [r1, #0]
  403212:	4283      	cmp	r3, r0
  403214:	d236      	bcs.n	403284 <mem_free+0x84>
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
  403216:	b470      	push	{r4, r5, r6}
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  403218:	f1a3 0108 	sub.w	r1, r3, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
  40321c:	2400      	movs	r4, #0
  40321e:	f803 4c04 	strb.w	r4, [r3, #-4]

  if (mem < lfree) {
  403222:	4c1b      	ldr	r4, [pc, #108]	; (403290 <mem_free+0x90>)
  403224:	6824      	ldr	r4, [r4, #0]
  403226:	42a1      	cmp	r1, r4
  403228:	d201      	bcs.n	40322e <mem_free+0x2e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
  40322a:	4c19      	ldr	r4, [pc, #100]	; (403290 <mem_free+0x90>)
  40322c:	6021      	str	r1, [r4, #0]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
  40322e:	f833 5c08 	ldrh.w	r5, [r3, #-8]
  403232:	1954      	adds	r4, r2, r5
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  403234:	42a1      	cmp	r1, r4
  403236:	d010      	beq.n	40325a <mem_free+0x5a>
  403238:	7926      	ldrb	r6, [r4, #4]
  40323a:	b976      	cbnz	r6, 40325a <mem_free+0x5a>
  40323c:	42a0      	cmp	r0, r4
  40323e:	d00c      	beq.n	40325a <mem_free+0x5a>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
  403240:	4813      	ldr	r0, [pc, #76]	; (403290 <mem_free+0x90>)
  403242:	6800      	ldr	r0, [r0, #0]
  403244:	4284      	cmp	r4, r0
  403246:	d101      	bne.n	40324c <mem_free+0x4c>
      lfree = mem;
  403248:	4811      	ldr	r0, [pc, #68]	; (403290 <mem_free+0x90>)
  40324a:	6001      	str	r1, [r0, #0]
    }
    mem->next = nmem->next;
  40324c:	5b50      	ldrh	r0, [r2, r5]
  40324e:	f823 0c08 	strh.w	r0, [r3, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
  403252:	5b50      	ldrh	r0, [r2, r5]
  403254:	4410      	add	r0, r2
  403256:	1a8c      	subs	r4, r1, r2
  403258:	8044      	strh	r4, [r0, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
  40325a:	f833 0c06 	ldrh.w	r0, [r3, #-6]
  40325e:	1814      	adds	r4, r2, r0
  if (pmem != mem && pmem->used == 0) {
  403260:	42a1      	cmp	r1, r4
  403262:	d00e      	beq.n	403282 <mem_free+0x82>
  403264:	7925      	ldrb	r5, [r4, #4]
  403266:	b965      	cbnz	r5, 403282 <mem_free+0x82>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
  403268:	4d09      	ldr	r5, [pc, #36]	; (403290 <mem_free+0x90>)
  40326a:	682d      	ldr	r5, [r5, #0]
  40326c:	42a9      	cmp	r1, r5
  40326e:	d101      	bne.n	403274 <mem_free+0x74>
      lfree = pmem;
  403270:	4907      	ldr	r1, [pc, #28]	; (403290 <mem_free+0x90>)
  403272:	600c      	str	r4, [r1, #0]
    }
    pmem->next = mem->next;
  403274:	f833 1c08 	ldrh.w	r1, [r3, #-8]
  403278:	5211      	strh	r1, [r2, r0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
  40327a:	f833 3c08 	ldrh.w	r3, [r3, #-8]
  40327e:	441a      	add	r2, r3
  403280:	8050      	strh	r0, [r2, #2]
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
  403282:	bc70      	pop	{r4, r5, r6}
  403284:	4770      	bx	lr
  403286:	bf00      	nop
  403288:	204009bc 	.word	0x204009bc
  40328c:	204009b8 	.word	0x204009b8
  403290:	204009b4 	.word	0x204009b4

00403294 <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  403294:	3103      	adds	r1, #3
  403296:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  40329a:	400b      	ands	r3, r1

  if(newsize < MIN_SIZE_ALIGNED) {
  40329c:	2b0b      	cmp	r3, #11
  40329e:	d903      	bls.n	4032a8 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  4032a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4032a4:	d901      	bls.n	4032aa <mem_trim+0x16>
  4032a6:	e051      	b.n	40334c <mem_trim+0xb8>
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);

  if(newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  4032a8:	230c      	movs	r3, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  4032aa:	4a2b      	ldr	r2, [pc, #172]	; (403358 <mem_trim+0xc4>)
  4032ac:	6812      	ldr	r2, [r2, #0]
  4032ae:	4282      	cmp	r2, r0
  4032b0:	d850      	bhi.n	403354 <mem_trim+0xc0>
  4032b2:	492a      	ldr	r1, [pc, #168]	; (40335c <mem_trim+0xc8>)
  4032b4:	6809      	ldr	r1, [r1, #0]
  4032b6:	4288      	cmp	r0, r1
  4032b8:	d24c      	bcs.n	403354 <mem_trim+0xc0>
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
  4032ba:	b4f0      	push	{r4, r5, r6, r7}
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
  4032bc:	f1a0 0408 	sub.w	r4, r0, #8
  4032c0:	1aa4      	subs	r4, r4, r2
  4032c2:	b2a4      	uxth	r4, r4

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  4032c4:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  4032c8:	f1a5 0108 	sub.w	r1, r5, #8
  4032cc:	1b09      	subs	r1, r1, r4
  4032ce:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
  4032d0:	4299      	cmp	r1, r3
  4032d2:	d33d      	bcc.n	403350 <mem_trim+0xbc>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
  4032d4:	d03d      	beq.n	403352 <mem_trim+0xbe>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
  4032d6:	1956      	adds	r6, r2, r5
  if(mem2->used == 0) {
  4032d8:	7937      	ldrb	r7, [r6, #4]
  4032da:	b9cf      	cbnz	r7, 403310 <mem_trim+0x7c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  4032dc:	5b55      	ldrh	r5, [r2, r5]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  4032de:	f104 0108 	add.w	r1, r4, #8
  4032e2:	440b      	add	r3, r1
  4032e4:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
  4032e6:	491e      	ldr	r1, [pc, #120]	; (403360 <mem_trim+0xcc>)
  4032e8:	6809      	ldr	r1, [r1, #0]
  4032ea:	428e      	cmp	r6, r1
  4032ec:	d102      	bne.n	4032f4 <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
  4032ee:	18d1      	adds	r1, r2, r3
  4032f0:	4e1b      	ldr	r6, [pc, #108]	; (403360 <mem_trim+0xcc>)
  4032f2:	6031      	str	r1, [r6, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
  4032f4:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
  4032f6:	2600      	movs	r6, #0
  4032f8:	710e      	strb	r6, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
  4032fa:	52d5      	strh	r5, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
  4032fc:	804c      	strh	r4, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
  4032fe:	f820 3c08 	strh.w	r3, [r0, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  403302:	5ad1      	ldrh	r1, [r2, r3]
  403304:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  403308:	d023      	beq.n	403352 <mem_trim+0xbe>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  40330a:	440a      	add	r2, r1
  40330c:	8053      	strh	r3, [r2, #2]
  40330e:	e020      	b.n	403352 <mem_trim+0xbe>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  403310:	f103 0514 	add.w	r5, r3, #20
  403314:	428d      	cmp	r5, r1
  403316:	d81c      	bhi.n	403352 <mem_trim+0xbe>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  403318:	f104 0108 	add.w	r1, r4, #8
  40331c:	440b      	add	r3, r1
  40331e:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
  403320:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
  403322:	4d0f      	ldr	r5, [pc, #60]	; (403360 <mem_trim+0xcc>)
  403324:	682d      	ldr	r5, [r5, #0]
  403326:	42a9      	cmp	r1, r5
  403328:	d201      	bcs.n	40332e <mem_trim+0x9a>
      lfree = mem2;
  40332a:	4d0d      	ldr	r5, [pc, #52]	; (403360 <mem_trim+0xcc>)
  40332c:	6029      	str	r1, [r5, #0]
    }
    mem2->used = 0;
  40332e:	2500      	movs	r5, #0
  403330:	710d      	strb	r5, [r1, #4]
    mem2->next = mem->next;
  403332:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  403336:	52d5      	strh	r5, [r2, r3]
    mem2->prev = ptr;
  403338:	804c      	strh	r4, [r1, #2]
    mem->next = ptr2;
  40333a:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
  40333e:	5ad1      	ldrh	r1, [r2, r3]
  403340:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  403344:	d005      	beq.n	403352 <mem_trim+0xbe>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  403346:	440a      	add	r2, r1
  403348:	8053      	strh	r3, [r2, #2]
  40334a:	e002      	b.n	403352 <mem_trim+0xbe>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
  40334c:	2000      	movs	r0, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
  40334e:	4770      	bx	lr

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
    /* not supported */
    return NULL;
  403350:	2000      	movs	r0, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
  403352:	bcf0      	pop	{r4, r5, r6, r7}
  403354:	4770      	bx	lr
  403356:	bf00      	nop
  403358:	204009bc 	.word	0x204009bc
  40335c:	204009b8 	.word	0x204009b8
  403360:	204009b4 	.word	0x204009b4

00403364 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  403364:	2800      	cmp	r0, #0
  403366:	d059      	beq.n	40341c <mem_malloc+0xb8>
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
  403368:	b4f0      	push	{r4, r5, r6, r7}
  40336a:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  40336c:	3303      	adds	r3, #3
  40336e:	f64f 74fc 	movw	r4, #65532	; 0xfffc
  403372:	401c      	ands	r4, r3

  if(size < MIN_SIZE_ALIGNED) {
  403374:	2c0b      	cmp	r4, #11
  403376:	d903      	bls.n	403380 <mem_malloc+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
  403378:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40337c:	d901      	bls.n	403382 <mem_malloc+0x1e>
  40337e:	e04f      	b.n	403420 <mem_malloc+0xbc>
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);

  if(size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  403380:	240c      	movs	r4, #12
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  403382:	4b2a      	ldr	r3, [pc, #168]	; (40342c <mem_malloc+0xc8>)
  403384:	6819      	ldr	r1, [r3, #0]
  403386:	4b2a      	ldr	r3, [pc, #168]	; (403430 <mem_malloc+0xcc>)
  403388:	681b      	ldr	r3, [r3, #0]
  40338a:	1a5b      	subs	r3, r3, r1
  40338c:	b29b      	uxth	r3, r3
  40338e:	f5c4 5580 	rsb	r5, r4, #4096	; 0x1000
  403392:	42ab      	cmp	r3, r5
  403394:	da46      	bge.n	403424 <mem_malloc+0xc0>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  403396:	4626      	mov	r6, r4
    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
  403398:	18c8      	adds	r0, r1, r3
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  40339a:	7902      	ldrb	r2, [r0, #4]
  40339c:	2a00      	cmp	r2, #0
  40339e:	d138      	bne.n	403412 <mem_malloc+0xae>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  4033a0:	5aca      	ldrh	r2, [r1, r3]
  4033a2:	3a08      	subs	r2, #8
  4033a4:	1ad2      	subs	r2, r2, r3
  4033a6:	4637      	mov	r7, r6
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  4033a8:	42a2      	cmp	r2, r4
  4033aa:	d332      	bcc.n	403412 <mem_malloc+0xae>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  4033ac:	3714      	adds	r7, #20
  4033ae:	42ba      	cmp	r2, r7
  4033b0:	d313      	bcc.n	4033da <mem_malloc+0x76>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  4033b2:	f104 0208 	add.w	r2, r4, #8
  4033b6:	441a      	add	r2, r3
  4033b8:	b292      	uxth	r2, r2
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
  4033ba:	188c      	adds	r4, r1, r2
          mem2->used = 0;
  4033bc:	2500      	movs	r5, #0
  4033be:	7125      	strb	r5, [r4, #4]
          mem2->next = mem->next;
  4033c0:	8805      	ldrh	r5, [r0, #0]
  4033c2:	528d      	strh	r5, [r1, r2]
          mem2->prev = ptr;
  4033c4:	8063      	strh	r3, [r4, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
  4033c6:	8002      	strh	r2, [r0, #0]
          mem->used = 1;
  4033c8:	2301      	movs	r3, #1
  4033ca:	7103      	strb	r3, [r0, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
  4033cc:	5a8b      	ldrh	r3, [r1, r2]
  4033ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4033d2:	d004      	beq.n	4033de <mem_malloc+0x7a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  4033d4:	440b      	add	r3, r1
  4033d6:	805a      	strh	r2, [r3, #2]
  4033d8:	e001      	b.n	4033de <mem_malloc+0x7a>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  4033da:	2301      	movs	r3, #1
  4033dc:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
  4033de:	4b14      	ldr	r3, [pc, #80]	; (403430 <mem_malloc+0xcc>)
  4033e0:	681b      	ldr	r3, [r3, #0]
  4033e2:	4298      	cmp	r0, r3
  4033e4:	d113      	bne.n	40340e <mem_malloc+0xaa>
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
  4033e6:	791a      	ldrb	r2, [r3, #4]
  4033e8:	b162      	cbz	r2, 403404 <mem_malloc+0xa0>
  4033ea:	4a12      	ldr	r2, [pc, #72]	; (403434 <mem_malloc+0xd0>)
  4033ec:	6811      	ldr	r1, [r2, #0]
  4033ee:	428b      	cmp	r3, r1
  4033f0:	d00b      	beq.n	40340a <mem_malloc+0xa6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
  4033f2:	4a0e      	ldr	r2, [pc, #56]	; (40342c <mem_malloc+0xc8>)
  4033f4:	6814      	ldr	r4, [r2, #0]
  4033f6:	881b      	ldrh	r3, [r3, #0]
  4033f8:	4423      	add	r3, r4
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
  4033fa:	791a      	ldrb	r2, [r3, #4]
  4033fc:	b122      	cbz	r2, 403408 <mem_malloc+0xa4>
  4033fe:	428b      	cmp	r3, r1
  403400:	d1f9      	bne.n	4033f6 <mem_malloc+0x92>
  403402:	e002      	b.n	40340a <mem_malloc+0xa6>
  403404:	4619      	mov	r1, r3
  403406:	e000      	b.n	40340a <mem_malloc+0xa6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
  403408:	4619      	mov	r1, r3
          }
          lfree = cur;
  40340a:	4b09      	ldr	r3, [pc, #36]	; (403430 <mem_malloc+0xcc>)
  40340c:	6019      	str	r1, [r3, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
  40340e:	3008      	adds	r0, #8
  403410:	e009      	b.n	403426 <mem_malloc+0xc2>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
  403412:	8803      	ldrh	r3, [r0, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  403414:	42ab      	cmp	r3, r5
  403416:	dbbf      	blt.n	403398 <mem_malloc+0x34>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  403418:	2000      	movs	r0, #0
  40341a:	e004      	b.n	403426 <mem_malloc+0xc2>
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
    return NULL;
  40341c:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
  40341e:	4770      	bx	lr
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
    return NULL;
  403420:	2000      	movs	r0, #0
  403422:	e000      	b.n	403426 <mem_malloc+0xc2>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  403424:	2000      	movs	r0, #0
}
  403426:	bcf0      	pop	{r4, r5, r6, r7}
  403428:	4770      	bx	lr
  40342a:	bf00      	nop
  40342c:	204009bc 	.word	0x204009bc
  403430:	204009b4 	.word	0x204009b4
  403434:	204009b8 	.word	0x204009b8

00403438 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  403438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
  40343c:	4d17      	ldr	r5, [pc, #92]	; (40349c <memp_init+0x64>)
  40343e:	f025 0503 	bic.w	r5, r5, #3
  403442:	4b17      	ldr	r3, [pc, #92]	; (4034a0 <memp_init+0x68>)
  403444:	1f1c      	subs	r4, r3, #4
  403446:	4f17      	ldr	r7, [pc, #92]	; (4034a4 <memp_init+0x6c>)
  403448:	4e17      	ldr	r6, [pc, #92]	; (4034a8 <memp_init+0x70>)
  40344a:	f103 0c1c 	add.w	ip, r3, #28
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
  40344e:	f04f 0800 	mov.w	r8, #0
  403452:	3404      	adds	r4, #4
  403454:	46a6      	mov	lr, r4
  403456:	f8c4 8000 	str.w	r8, [r4]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  40345a:	f837 0f02 	ldrh.w	r0, [r7, #2]!
  40345e:	b1b8      	cbz	r0, 403490 <memp_init+0x58>
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  403460:	f8b6 9000 	ldrh.w	r9, [r6]
  403464:	462b      	mov	r3, r5
  403466:	2200      	movs	r2, #0
  403468:	4611      	mov	r1, r2
  40346a:	e000      	b.n	40346e <memp_init+0x36>
  40346c:	4653      	mov	r3, sl
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
  40346e:	6019      	str	r1, [r3, #0]
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  403470:	eb03 0a09 	add.w	sl, r3, r9
  403474:	3201      	adds	r2, #1
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
  403476:	4619      	mov	r1, r3
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  403478:	b293      	uxth	r3, r2
  40347a:	4298      	cmp	r0, r3
  40347c:	d8f6      	bhi.n	40346c <memp_init+0x34>
  40347e:	3801      	subs	r0, #1
  403480:	b280      	uxth	r0, r0
  403482:	fb00 9309 	mla	r3, r0, r9, r9
  403486:	fb09 5000 	mla	r0, r9, r0, r5
  40348a:	f8ce 0000 	str.w	r0, [lr]
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  40348e:	441d      	add	r5, r3
  403490:	3602      	adds	r6, #2

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
  403492:	45a4      	cmp	ip, r4
  403494:	d1dd      	bne.n	403452 <memp_init+0x1a>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  403496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40349a:	bf00      	nop
  40349c:	204009c3 	.word	0x204009c3
  4034a0:	204024a0 	.word	0x204024a0
  4034a4:	0040e79e 	.word	0x0040e79e
  4034a8:	0040e7b0 	.word	0x0040e7b0

004034ac <memp_malloc>:
#endif
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  4034ac:	2807      	cmp	r0, #7
  4034ae:	d900      	bls.n	4034b2 <memp_malloc+0x6>
  4034b0:	e7fe      	b.n	4034b0 <memp_malloc+0x4>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  4034b2:	4b05      	ldr	r3, [pc, #20]	; (4034c8 <memp_malloc+0x1c>)
  4034b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  
  if (memp != NULL) {
  4034b8:	b11b      	cbz	r3, 4034c2 <memp_malloc+0x16>
    memp_tab[type] = memp->next;
  4034ba:	6819      	ldr	r1, [r3, #0]
  4034bc:	4a02      	ldr	r2, [pc, #8]	; (4034c8 <memp_malloc+0x1c>)
  4034be:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
  4034c2:	4618      	mov	r0, r3
  4034c4:	4770      	bx	lr
  4034c6:	bf00      	nop
  4034c8:	204024a0 	.word	0x204024a0

004034cc <memp_free>:
memp_free(memp_t type, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  4034cc:	460b      	mov	r3, r1
  4034ce:	b129      	cbz	r1, 4034dc <memp_free+0x10>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  4034d0:	4a03      	ldr	r2, [pc, #12]	; (4034e0 <memp_free+0x14>)
  4034d2:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  4034d6:	6019      	str	r1, [r3, #0]
  memp_tab[type] = memp;
  4034d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  4034dc:	4770      	bx	lr
  4034de:	bf00      	nop
  4034e0:	204024a0 	.word	0x204024a0

004034e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  4034e4:	4770      	bx	lr
  4034e6:	bf00      	nop

004034e8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
  4034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4034ea:	4604      	mov	r4, r0
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
  4034ec:	b311      	cbz	r1, 403534 <netif_set_ipaddr+0x4c>
  4034ee:	460d      	mov	r5, r1
  4034f0:	680a      	ldr	r2, [r1, #0]
  4034f2:	6843      	ldr	r3, [r0, #4]
  4034f4:	429a      	cmp	r2, r3
  4034f6:	d020      	beq.n	40353a <netif_set_ipaddr+0x52>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
  4034f8:	4b11      	ldr	r3, [pc, #68]	; (403540 <netif_set_ipaddr+0x58>)
  4034fa:	6818      	ldr	r0, [r3, #0]
    while (pcb != NULL) {
  4034fc:	b158      	cbz	r0, 403516 <netif_set_ipaddr+0x2e>
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  4034fe:	4f11      	ldr	r7, [pc, #68]	; (403544 <netif_set_ipaddr+0x5c>)
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
  403500:	6802      	ldr	r2, [r0, #0]
  403502:	6863      	ldr	r3, [r4, #4]
  403504:	429a      	cmp	r2, r3
  403506:	d103      	bne.n	403510 <netif_set_ipaddr+0x28>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
  403508:	68c6      	ldr	r6, [r0, #12]
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  40350a:	47b8      	blx	r7
        pcb = next;
  40350c:	4630      	mov	r0, r6
  40350e:	e000      	b.n	403512 <netif_set_ipaddr+0x2a>
      } else {
        pcb = pcb->next;
  403510:	68c0      	ldr	r0, [r0, #12]
  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
  403512:	2800      	cmp	r0, #0
  403514:	d1f4      	bne.n	403500 <netif_set_ipaddr+0x18>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  403516:	4b0c      	ldr	r3, [pc, #48]	; (403548 <netif_set_ipaddr+0x60>)
  403518:	681b      	ldr	r3, [r3, #0]
  40351a:	b173      	cbz	r3, 40353a <netif_set_ipaddr+0x52>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  40351c:	b133      	cbz	r3, 40352c <netif_set_ipaddr+0x44>
  40351e:	681a      	ldr	r2, [r3, #0]
  403520:	b122      	cbz	r2, 40352c <netif_set_ipaddr+0x44>
  403522:	6861      	ldr	r1, [r4, #4]
  403524:	428a      	cmp	r2, r1
  403526:	d101      	bne.n	40352c <netif_set_ipaddr+0x44>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
  403528:	682a      	ldr	r2, [r5, #0]
  40352a:	601a      	str	r2, [r3, #0]
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  40352c:	68db      	ldr	r3, [r3, #12]
  40352e:	2b00      	cmp	r3, #0
  403530:	d1f4      	bne.n	40351c <netif_set_ipaddr+0x34>
  403532:	e002      	b.n	40353a <netif_set_ipaddr+0x52>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  403534:	2300      	movs	r3, #0
  403536:	6063      	str	r3, [r4, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
  403538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  40353a:	682b      	ldr	r3, [r5, #0]
  40353c:	e7fb      	b.n	403536 <netif_set_ipaddr+0x4e>
  40353e:	bf00      	nop
  403540:	2040489c 	.word	0x2040489c
  403544:	00404401 	.word	0x00404401
  403548:	204048a4 	.word	0x204048a4

0040354c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
  40354c:	b570      	push	{r4, r5, r6, lr}
  40354e:	4604      	mov	r4, r0
  403550:	4616      	mov	r6, r2
  403552:	461d      	mov	r5, r3
  netif_set_ipaddr(netif, ipaddr);
  403554:	4b06      	ldr	r3, [pc, #24]	; (403570 <netif_set_addr+0x24>)
  403556:	4798      	blx	r3
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  403558:	b10e      	cbz	r6, 40355e <netif_set_addr+0x12>
  40355a:	6833      	ldr	r3, [r6, #0]
  40355c:	e000      	b.n	403560 <netif_set_addr+0x14>
  40355e:	2300      	movs	r3, #0
  403560:	60a3      	str	r3, [r4, #8]
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
  ip_addr_set(&(netif->gw), gw);
  403562:	b10d      	cbz	r5, 403568 <netif_set_addr+0x1c>
  403564:	682b      	ldr	r3, [r5, #0]
  403566:	e000      	b.n	40356a <netif_set_addr+0x1e>
  403568:	2300      	movs	r3, #0
  40356a:	60e3      	str	r3, [r4, #12]
  40356c:	bd70      	pop	{r4, r5, r6, pc}
  40356e:	bf00      	nop
  403570:	004034e9 	.word	0x004034e9

00403574 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
  403574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403576:	4604      	mov	r4, r0

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
  403578:	2500      	movs	r5, #0
  40357a:	6045      	str	r5, [r0, #4]
  ip_addr_set_zero(&netif->netmask);
  40357c:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero(&netif->gw);
  40357e:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
  403580:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
  403584:	6245      	str	r5, [r0, #36]	; 0x24
#if LWIP_AUTOIP
  /* netif not under AutoIP control by default */
  netif->autoip = NULL;
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  403586:	61c5      	str	r5, [r0, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  403588:	9d06      	ldr	r5, [sp, #24]
  40358a:	6205      	str	r5, [r0, #32]
  netif->num = netif_num++;
  40358c:	4e0a      	ldr	r6, [pc, #40]	; (4035b8 <netif_add+0x44>)
  40358e:	7835      	ldrb	r5, [r6, #0]
  403590:	1c6f      	adds	r7, r5, #1
  403592:	7037      	strb	r7, [r6, #0]
  403594:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  netif->input = input;
  403598:	9d08      	ldr	r5, [sp, #32]
  40359a:	6105      	str	r5, [r0, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
  40359c:	4d07      	ldr	r5, [pc, #28]	; (4035bc <netif_add+0x48>)
  40359e:	47a8      	blx	r5

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  4035a0:	4620      	mov	r0, r4
  4035a2:	9b07      	ldr	r3, [sp, #28]
  4035a4:	4798      	blx	r3
  4035a6:	b928      	cbnz	r0, 4035b4 <netif_add+0x40>
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
  4035a8:	4b05      	ldr	r3, [pc, #20]	; (4035c0 <netif_add+0x4c>)
  4035aa:	681a      	ldr	r2, [r3, #0]
  4035ac:	6022      	str	r2, [r4, #0]
  netif_list = netif;
  4035ae:	601c      	str	r4, [r3, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  4035b0:	4620      	mov	r0, r4
  4035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  netif_set_addr(netif, ipaddr, netmask, gw);

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
    return NULL;
  4035b4:	2000      	movs	r0, #0
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
}
  4035b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4035b8:	204024c0 	.word	0x204024c0
  4035bc:	0040354d 	.word	0x0040354d
  4035c0:	2040488c 	.word	0x2040488c

004035c4 <netif_set_gw>:
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
  ip_addr_set(&(netif->gw), gw);
  4035c4:	b109      	cbz	r1, 4035ca <netif_set_gw+0x6>
  4035c6:	680b      	ldr	r3, [r1, #0]
  4035c8:	e000      	b.n	4035cc <netif_set_gw+0x8>
  4035ca:	2300      	movs	r3, #0
  4035cc:	60c3      	str	r3, [r0, #12]
  4035ce:	4770      	bx	lr

004035d0 <netif_set_netmask>:
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  4035d0:	b109      	cbz	r1, 4035d6 <netif_set_netmask+0x6>
  4035d2:	680b      	ldr	r3, [r1, #0]
  4035d4:	e000      	b.n	4035d8 <netif_set_netmask+0x8>
  4035d6:	2300      	movs	r3, #0
  4035d8:	6083      	str	r3, [r0, #8]
  4035da:	4770      	bx	lr

004035dc <netif_set_default>:
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  4035dc:	4b01      	ldr	r3, [pc, #4]	; (4035e4 <netif_set_default+0x8>)
  4035de:	6018      	str	r0, [r3, #0]
  4035e0:	4770      	bx	lr
  4035e2:	bf00      	nop
  4035e4:	20404890 	.word	0x20404890

004035e8 <netif_set_up>:
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
  4035e8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4035ec:	f013 0f01 	tst.w	r3, #1
  4035f0:	d113      	bne.n	40361a <netif_set_up+0x32>
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  4035f2:	b510      	push	{r4, lr}
  4035f4:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_UP)) {
    netif->flags |= NETIF_FLAG_UP;
  4035f6:	f043 0301 	orr.w	r3, r3, #1
  4035fa:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
  4035fe:	69c3      	ldr	r3, [r0, #28]
  403600:	b103      	cbz	r3, 403604 <netif_set_up+0x1c>
  403602:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
  403604:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  403608:	f003 0330 	and.w	r3, r3, #48	; 0x30
  40360c:	2b30      	cmp	r3, #48	; 0x30
  40360e:	d103      	bne.n	403618 <netif_set_up+0x30>
        etharp_gratuitous(netif);
  403610:	1d21      	adds	r1, r4, #4
  403612:	4620      	mov	r0, r4
  403614:	4b01      	ldr	r3, [pc, #4]	; (40361c <netif_set_up+0x34>)
  403616:	4798      	blx	r3
  403618:	bd10      	pop	{r4, pc}
  40361a:	4770      	bx	lr
  40361c:	00406cd5 	.word	0x00406cd5

00403620 <netif_set_down>:
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
  403620:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  403624:	f013 0f01 	tst.w	r3, #1
  403628:	d00f      	beq.n	40364a <netif_set_down+0x2a>
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
  40362a:	b510      	push	{r4, lr}
  40362c:	4604      	mov	r4, r0
  if (netif->flags & NETIF_FLAG_UP) {
    netif->flags &= ~NETIF_FLAG_UP;
  40362e:	f023 0201 	bic.w	r2, r3, #1
  403632:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  403636:	f013 0f20 	tst.w	r3, #32
  40363a:	d001      	beq.n	403640 <netif_set_down+0x20>
      etharp_cleanup_netif(netif);
  40363c:	4b03      	ldr	r3, [pc, #12]	; (40364c <netif_set_down+0x2c>)
  40363e:	4798      	blx	r3
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
  403640:	69e3      	ldr	r3, [r4, #28]
  403642:	b10b      	cbz	r3, 403648 <netif_set_down+0x28>
  403644:	4620      	mov	r0, r4
  403646:	4798      	blx	r3
  403648:	bd10      	pop	{r4, pc}
  40364a:	4770      	bx	lr
  40364c:	00406ca9 	.word	0x00406ca9

00403650 <netif_set_status_callback>:
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  if (netif) {
  403650:	b100      	cbz	r0, 403654 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
  403652:	61c1      	str	r1, [r0, #28]
  403654:	4770      	bx	lr
  403656:	bf00      	nop

00403658 <pbuf_header>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
  403658:	b359      	cbz	r1, 4036b2 <pbuf_header+0x5a>
  40365a:	460b      	mov	r3, r1
  40365c:	b348      	cbz	r0, 4036b2 <pbuf_header+0x5a>
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  40365e:	b410      	push	{r4}
  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }
 
  if (header_size_increment < 0){
  403660:	2900      	cmp	r1, #0
  403662:	da05      	bge.n	403670 <pbuf_header+0x18>
    increment_magnitude = -header_size_increment;
  403664:	424c      	negs	r4, r1
  403666:	b2a4      	uxth	r4, r4
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  403668:	8942      	ldrh	r2, [r0, #10]
  40366a:	42a2      	cmp	r2, r4
  40366c:	d201      	bcs.n	403672 <pbuf_header+0x1a>
  40366e:	e7fe      	b.n	40366e <pbuf_header+0x16>
  } else {
    increment_magnitude = header_size_increment;
  403670:	b28c      	uxth	r4, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  403672:	7b01      	ldrb	r1, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
  403674:	6842      	ldr	r2, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  403676:	b109      	cbz	r1, 40367c <pbuf_header+0x24>
  403678:	2903      	cmp	r1, #3
  40367a:	d106      	bne.n	40368a <pbuf_header+0x32>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  40367c:	1ad2      	subs	r2, r2, r3
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  40367e:	f100 0110 	add.w	r1, r0, #16
  403682:	428a      	cmp	r2, r1
  403684:	d317      	bcc.n	4036b6 <pbuf_header+0x5e>
  payload = p->payload;

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  403686:	6042      	str	r2, [r0, #4]
  403688:	e00a      	b.n	4036a0 <pbuf_header+0x48>
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  40368a:	3901      	subs	r1, #1
  40368c:	b289      	uxth	r1, r1
  40368e:	2901      	cmp	r1, #1
  403690:	d813      	bhi.n	4036ba <pbuf_header+0x62>
  403692:	2b00      	cmp	r3, #0
  403694:	da11      	bge.n	4036ba <pbuf_header+0x62>
  403696:	8941      	ldrh	r1, [r0, #10]
  403698:	42a1      	cmp	r1, r4
  40369a:	d310      	bcc.n	4036be <pbuf_header+0x66>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  40369c:	1ad2      	subs	r2, r2, r3
  40369e:	6042      	str	r2, [r0, #4]
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  4036a0:	b29b      	uxth	r3, r3
  4036a2:	8942      	ldrh	r2, [r0, #10]
  4036a4:	441a      	add	r2, r3
  4036a6:	8142      	strh	r2, [r0, #10]
  p->tot_len += header_size_increment;
  4036a8:	8902      	ldrh	r2, [r0, #8]
  4036aa:	4413      	add	r3, r2
  4036ac:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  4036ae:	2000      	movs	r0, #0
  4036b0:	e006      	b.n	4036c0 <pbuf_header+0x68>
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  4036b2:	2000      	movs	r0, #0

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
  4036b4:	4770      	bx	lr
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
  4036b6:	2001      	movs	r0, #1
  4036b8:	e002      	b.n	4036c0 <pbuf_header+0x68>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
  4036ba:	2001      	movs	r0, #1
  4036bc:	e000      	b.n	4036c0 <pbuf_header+0x68>
  4036be:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
  4036c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4036c4:	4770      	bx	lr
  4036c6:	bf00      	nop

004036c8 <pbuf_free>:
{
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  4036c8:	b328      	cbz	r0, 403716 <pbuf_free+0x4e>
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  4036ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4036ce:	4601      	mov	r1, r0
  4036d0:	2400      	movs	r4, #0
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
          memp_free(MEMP_PBUF, p);
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  4036d2:	4d13      	ldr	r5, [pc, #76]	; (403720 <pbuf_free+0x58>)
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
          memp_free(MEMP_PBUF_POOL, p);
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
          memp_free(MEMP_PBUF, p);
  4036d4:	f04f 0806 	mov.w	r8, #6
  4036d8:	4e12      	ldr	r6, [pc, #72]	; (403724 <pbuf_free+0x5c>)
  4036da:	e013      	b.n	403704 <pbuf_free+0x3c>
    ref = --(p->ref);
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  4036dc:	680f      	ldr	r7, [r1, #0]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  4036de:	7b0b      	ldrb	r3, [r1, #12]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  4036e0:	2b03      	cmp	r3, #3
  4036e2:	d102      	bne.n	4036ea <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
  4036e4:	2007      	movs	r0, #7
  4036e6:	47b0      	blx	r6
  4036e8:	e008      	b.n	4036fc <pbuf_free+0x34>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  4036ea:	3b01      	subs	r3, #1
  4036ec:	b29b      	uxth	r3, r3
  4036ee:	2b01      	cmp	r3, #1
  4036f0:	d802      	bhi.n	4036f8 <pbuf_free+0x30>
          memp_free(MEMP_PBUF, p);
  4036f2:	4640      	mov	r0, r8
  4036f4:	47b0      	blx	r6
  4036f6:	e001      	b.n	4036fc <pbuf_free+0x34>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  4036f8:	4608      	mov	r0, r1
  4036fa:	47a8      	blx	r5
        }
      }
      count++;
  4036fc:	3401      	adds	r4, #1
  4036fe:	b2e4      	uxtb	r4, r4
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  403700:	b15f      	cbz	r7, 40371a <pbuf_free+0x52>
          mem_free(p);
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
  403702:	4639      	mov	r1, r7
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  403704:	89cb      	ldrh	r3, [r1, #14]
  403706:	3b01      	subs	r3, #1
  403708:	b29b      	uxth	r3, r3
  40370a:	81cb      	strh	r3, [r1, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  40370c:	2b00      	cmp	r3, #0
  40370e:	d0e5      	beq.n	4036dc <pbuf_free+0x14>
  403710:	4620      	mov	r0, r4
  403712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (p == NULL) {
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  403716:	2000      	movs	r0, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
  403718:	4770      	bx	lr
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
        }
      }
      count++;
  40371a:	4620      	mov	r0, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
  40371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403720:	00403201 	.word	0x00403201
  403724:	004034cd 	.word	0x004034cd

00403728 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  403728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  40372c:	2803      	cmp	r0, #3
  40372e:	f200 8091 	bhi.w	403854 <pbuf_alloc+0x12c>
  403732:	e8df f000 	tbb	[pc, r0]
  403736:	0208      	.short	0x0208
  403738:	0604      	.short	0x0604
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    break;
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
  40373a:	2622      	movs	r6, #34	; 0x22
  40373c:	e004      	b.n	403748 <pbuf_alloc+0x20>
    break;
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
  40373e:	260e      	movs	r6, #14
    break;
  403740:	e002      	b.n	403748 <pbuf_alloc+0x20>
  case PBUF_RAW:
    offset = 0;
  403742:	2600      	movs	r6, #0
    break;
  403744:	e000      	b.n	403748 <pbuf_alloc+0x20>

  /* determine header offset */
  switch (layer) {
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  403746:	2636      	movs	r6, #54	; 0x36
  403748:	4617      	mov	r7, r2
  40374a:	4688      	mov	r8, r1
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  }

  switch (type) {
  40374c:	2a03      	cmp	r2, #3
  40374e:	f200 8084 	bhi.w	40385a <pbuf_alloc+0x132>
  403752:	e8df f002 	tbb	[pc, r2]
  403756:	6b51      	.short	0x6b51
  403758:	026b      	.short	0x026b
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  40375a:	2007      	movs	r0, #7
  40375c:	4b43      	ldr	r3, [pc, #268]	; (40386c <pbuf_alloc+0x144>)
  40375e:	4798      	blx	r3
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  403760:	4605      	mov	r5, r0
  403762:	b920      	cbnz	r0, 40376e <pbuf_alloc+0x46>
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
  403764:	2201      	movs	r2, #1
  403766:	4b42      	ldr	r3, [pc, #264]	; (403870 <pbuf_alloc+0x148>)
  403768:	701a      	strb	r2, [r3, #0]
  40376a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
  40376e:	2303      	movs	r3, #3
  403770:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
  403772:	2300      	movs	r3, #0
  403774:	6003      	str	r3, [r0, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  403776:	1983      	adds	r3, r0, r6
  403778:	3313      	adds	r3, #19
  40377a:	f023 0303 	bic.w	r3, r3, #3
  40377e:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  403780:	f8a0 8008 	strh.w	r8, [r0, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  403784:	3603      	adds	r6, #3
  403786:	f026 0603 	bic.w	r6, r6, #3
  40378a:	f5c6 66c0 	rsb	r6, r6, #1536	; 0x600
  40378e:	4546      	cmp	r6, r8
  403790:	bfa8      	it	ge
  403792:	4646      	movge	r6, r8
  403794:	8146      	strh	r6, [r0, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  403796:	2301      	movs	r3, #1
  403798:	81c3      	strh	r3, [r0, #14]
    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
  40379a:	b2b4      	uxth	r4, r6
  40379c:	ebc4 0408 	rsb	r4, r4, r8
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  4037a0:	2c00      	cmp	r4, #0
  4037a2:	dd50      	ble.n	403846 <pbuf_alloc+0x11e>
  4037a4:	4681      	mov	r9, r0
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  4037a6:	2707      	movs	r7, #7
  4037a8:	4e30      	ldr	r6, [pc, #192]	; (40386c <pbuf_alloc+0x144>)
        /* free chain so far allocated */
        pbuf_free(p);
        /* bail out unsuccesfully */
        return NULL;
      }
      q->type = type;
  4037aa:	f04f 0803 	mov.w	r8, #3
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  4037ae:	4638      	mov	r0, r7
  4037b0:	47b0      	blx	r6
      if (q == NULL) {
  4037b2:	b940      	cbnz	r0, 4037c6 <pbuf_alloc+0x9e>
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
  4037b4:	2201      	movs	r2, #1
  4037b6:	4b2e      	ldr	r3, [pc, #184]	; (403870 <pbuf_alloc+0x148>)
  4037b8:	701a      	strb	r2, [r3, #0]
    while (rem_len > 0) {
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
      if (q == NULL) {
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
  4037ba:	4628      	mov	r0, r5
  4037bc:	4b2d      	ldr	r3, [pc, #180]	; (403874 <pbuf_alloc+0x14c>)
  4037be:	4798      	blx	r3
        /* bail out unsuccesfully */
        return NULL;
  4037c0:	2000      	movs	r0, #0
  4037c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
      q->type = type;
  4037c6:	f880 800c 	strb.w	r8, [r0, #12]
      q->flags = 0;
  4037ca:	2200      	movs	r2, #0
  4037cc:	7342      	strb	r2, [r0, #13]
      q->next = NULL;
  4037ce:	6002      	str	r2, [r0, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  4037d0:	f8c9 0000 	str.w	r0, [r9]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
  4037d4:	8104      	strh	r4, [r0, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  4037d6:	b2a2      	uxth	r2, r4
  4037d8:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
  4037dc:	bfa8      	it	ge
  4037de:	f44f 62c0 	movge.w	r2, #1536	; 0x600
  4037e2:	8142      	strh	r2, [r0, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  4037e4:	f100 0110 	add.w	r1, r0, #16
  4037e8:	6041      	str	r1, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  4037ea:	2101      	movs	r1, #1
  4037ec:	81c1      	strh	r1, [r0, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  4037ee:	1aa4      	subs	r4, r4, r2
      /* remember this pbuf for linkage in next iteration */
      r = q;
  4037f0:	4681      	mov	r9, r0
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  4037f2:	2c00      	cmp	r4, #0
  4037f4:	dcdb      	bgt.n	4037ae <pbuf_alloc+0x86>
  4037f6:	e026      	b.n	403846 <pbuf_alloc+0x11e>
    /*r->next = NULL;*/

    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
  4037f8:	f106 0013 	add.w	r0, r6, #19
  4037fc:	f020 0003 	bic.w	r0, r0, #3
  403800:	1ccb      	adds	r3, r1, #3
  403802:	f023 0303 	bic.w	r3, r3, #3
  403806:	4418      	add	r0, r3
  403808:	b280      	uxth	r0, r0
  40380a:	4b1b      	ldr	r3, [pc, #108]	; (403878 <pbuf_alloc+0x150>)
  40380c:	4798      	blx	r3
    if (p == NULL) {
  40380e:	4605      	mov	r5, r0
  403810:	b330      	cbz	r0, 403860 <pbuf_alloc+0x138>
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  403812:	4406      	add	r6, r0
  403814:	3613      	adds	r6, #19
  403816:	f026 0603 	bic.w	r6, r6, #3
  40381a:	6046      	str	r6, [r0, #4]
    p->len = p->tot_len = length;
  40381c:	f8a0 8008 	strh.w	r8, [r0, #8]
  403820:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  403824:	2300      	movs	r3, #0
  403826:	6003      	str	r3, [r0, #0]
    p->type = type;
  403828:	7303      	strb	r3, [r0, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  40382a:	e00c      	b.n	403846 <pbuf_alloc+0x11e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  40382c:	2006      	movs	r0, #6
  40382e:	4b0f      	ldr	r3, [pc, #60]	; (40386c <pbuf_alloc+0x144>)
  403830:	4798      	blx	r3
    if (p == NULL) {
  403832:	4605      	mov	r5, r0
  403834:	b1b8      	cbz	r0, 403866 <pbuf_alloc+0x13e>
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  403836:	2300      	movs	r3, #0
  403838:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
  40383a:	f8a0 8008 	strh.w	r8, [r0, #8]
  40383e:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  403842:	6003      	str	r3, [r0, #0]
    p->type = type;
  403844:	7307      	strb	r7, [r0, #12]
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
  403846:	2301      	movs	r3, #1
  403848:	81eb      	strh	r3, [r5, #14]
  /* set flags */
  p->flags = 0;
  40384a:	2300      	movs	r3, #0
  40384c:	736b      	strb	r3, [r5, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  40384e:	4628      	mov	r0, r5
  403850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  case PBUF_RAW:
    offset = 0;
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  403854:	2000      	movs	r0, #0
  403856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p->next = NULL;
    p->type = type;
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  40385a:	2000      	movs	r0, #0
  40385c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    if (p == NULL) {
      return NULL;
  403860:	2000      	movs	r0, #0
  403862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
    if (p == NULL) {
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  403866:	2000      	movs	r0, #0
  p->ref = 1;
  /* set flags */
  p->flags = 0;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
}
  403868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40386c:	004034ad 	.word	0x004034ad
  403870:	20404894 	.word	0x20404894
  403874:	004036c9 	.word	0x004036c9
  403878:	00403365 	.word	0x00403365

0040387c <pbuf_realloc>:
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  40387c:	8902      	ldrh	r2, [r0, #8]
  40387e:	428a      	cmp	r2, r1
  403880:	d926      	bls.n	4038d0 <pbuf_realloc+0x54>
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  403882:	b538      	push	{r3, r4, r5, lr}
  403884:	4604      	mov	r4, r0

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  403886:	8943      	ldrh	r3, [r0, #10]
  403888:	4299      	cmp	r1, r3
  40388a:	d90b      	bls.n	4038a4 <pbuf_realloc+0x28>
  40388c:	460d      	mov	r5, r1
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  40388e:	1aeb      	subs	r3, r5, r3
  403890:	b29d      	uxth	r5, r3
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
  403892:	8923      	ldrh	r3, [r4, #8]
  403894:	1a9b      	subs	r3, r3, r2
  403896:	440b      	add	r3, r1
  403898:	8123      	strh	r3, [r4, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  40389a:	6824      	ldr	r4, [r4, #0]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  40389c:	8963      	ldrh	r3, [r4, #10]
  40389e:	42ab      	cmp	r3, r5
  4038a0:	d3f5      	bcc.n	40388e <pbuf_realloc+0x12>
  4038a2:	e000      	b.n	4038a6 <pbuf_realloc+0x2a>
  4038a4:	460d      	mov	r5, r1
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
  4038a6:	7b22      	ldrb	r2, [r4, #12]
  4038a8:	b94a      	cbnz	r2, 4038be <pbuf_realloc+0x42>
  4038aa:	429d      	cmp	r5, r3
  4038ac:	d007      	beq.n	4038be <pbuf_realloc+0x42>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  4038ae:	6863      	ldr	r3, [r4, #4]
  4038b0:	1b1b      	subs	r3, r3, r4
  4038b2:	18e9      	adds	r1, r5, r3
  4038b4:	b289      	uxth	r1, r1
  4038b6:	4620      	mov	r0, r4
  4038b8:	4b06      	ldr	r3, [pc, #24]	; (4038d4 <pbuf_realloc+0x58>)
  4038ba:	4798      	blx	r3
  4038bc:	4604      	mov	r4, r0
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  4038be:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
  4038c0:	8125      	strh	r5, [r4, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  4038c2:	6820      	ldr	r0, [r4, #0]
  4038c4:	b108      	cbz	r0, 4038ca <pbuf_realloc+0x4e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  4038c6:	4b04      	ldr	r3, [pc, #16]	; (4038d8 <pbuf_realloc+0x5c>)
  4038c8:	4798      	blx	r3
  }
  /* q is last packet in chain */
  q->next = NULL;
  4038ca:	2300      	movs	r3, #0
  4038cc:	6023      	str	r3, [r4, #0]
  4038ce:	bd38      	pop	{r3, r4, r5, pc}
  4038d0:	4770      	bx	lr
  4038d2:	bf00      	nop
  4038d4:	00403295 	.word	0x00403295
  4038d8:	004036c9 	.word	0x004036c9

004038dc <pbuf_clen>:
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
  4038dc:	4603      	mov	r3, r0
  4038de:	b130      	cbz	r0, 4038ee <pbuf_clen+0x12>
  4038e0:	2000      	movs	r0, #0
    ++len;
  4038e2:	3001      	adds	r0, #1
  4038e4:	b2c0      	uxtb	r0, r0
    p = p->next;
  4038e6:	681b      	ldr	r3, [r3, #0]
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
  4038e8:	2b00      	cmp	r3, #0
  4038ea:	d1fa      	bne.n	4038e2 <pbuf_clen+0x6>
  4038ec:	4770      	bx	lr
u8_t
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  4038ee:	2000      	movs	r0, #0
  while (p != NULL) {
    ++len;
    p = p->next;
  }
  return len;
}
  4038f0:	4770      	bx	lr
  4038f2:	bf00      	nop

004038f4 <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  4038f4:	b110      	cbz	r0, 4038fc <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  4038f6:	89c3      	ldrh	r3, [r0, #14]
  4038f8:	3301      	adds	r3, #1
  4038fa:	81c3      	strh	r3, [r0, #14]
  4038fc:	4770      	bx	lr
  4038fe:	bf00      	nop

00403900 <pbuf_cat>:
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  403900:	b128      	cbz	r0, 40390e <pbuf_cat+0xe>
  403902:	4603      	mov	r3, r0
  403904:	b119      	cbz	r1, 40390e <pbuf_cat+0xe>
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  403906:	b410      	push	{r4}

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  403908:	6802      	ldr	r2, [r0, #0]
  40390a:	b912      	cbnz	r2, 403912 <pbuf_cat+0x12>
  40390c:	e009      	b.n	403922 <pbuf_cat+0x22>
  40390e:	e7fe      	b.n	40390e <pbuf_cat+0xe>
  403910:	4602      	mov	r2, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  403912:	891c      	ldrh	r4, [r3, #8]
  403914:	8908      	ldrh	r0, [r1, #8]
  403916:	4420      	add	r0, r4
  403918:	8118      	strh	r0, [r3, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  40391a:	6810      	ldr	r0, [r2, #0]
  40391c:	4613      	mov	r3, r2
  40391e:	2800      	cmp	r0, #0
  403920:	d1f6      	bne.n	403910 <pbuf_cat+0x10>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  403922:	8918      	ldrh	r0, [r3, #8]
  403924:	890a      	ldrh	r2, [r1, #8]
  403926:	4402      	add	r2, r0
  403928:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  40392a:	6019      	str	r1, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  40392c:	f85d 4b04 	ldr.w	r4, [sp], #4
  403930:	4770      	bx	lr
  403932:	bf00      	nop

00403934 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  403934:	b510      	push	{r4, lr}
  403936:	460c      	mov	r4, r1
  pbuf_cat(h, t);
  403938:	4b02      	ldr	r3, [pc, #8]	; (403944 <pbuf_chain+0x10>)
  40393a:	4798      	blx	r3
  /* t is now referenced by h */
  pbuf_ref(t);
  40393c:	4620      	mov	r0, r4
  40393e:	4b02      	ldr	r3, [pc, #8]	; (403948 <pbuf_chain+0x14>)
  403940:	4798      	blx	r3
  403942:	bd10      	pop	{r4, pc}
  403944:	00403901 	.word	0x00403901
  403948:	004038f5 	.word	0x004038f5

0040394c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
  40394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  403950:	b130      	cbz	r0, 403960 <pbuf_copy+0x14>
  403952:	460d      	mov	r5, r1
  403954:	4604      	mov	r4, r0
  403956:	b119      	cbz	r1, 403960 <pbuf_copy+0x14>
  403958:	8902      	ldrh	r2, [r0, #8]
  40395a:	890b      	ldrh	r3, [r1, #8]
  40395c:	429a      	cmp	r2, r3
  40395e:	d200      	bcs.n	403962 <pbuf_copy+0x16>
  403960:	e7fe      	b.n	403960 <pbuf_copy+0x14>
  403962:	f04f 0a00 	mov.w	sl, #0
  403966:	4657      	mov	r7, sl
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  403968:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4039f4 <pbuf_copy+0xa8>
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
  40396c:	46d0      	mov	r8, sl

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  40396e:	8963      	ldrh	r3, [r4, #10]
  403970:	896a      	ldrh	r2, [r5, #10]
  403972:	1bd8      	subs	r0, r3, r7
  403974:	ebca 0102 	rsb	r1, sl, r2
  403978:	4288      	cmp	r0, r1
  40397a:	db01      	blt.n	403980 <pbuf_copy+0x34>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  40397c:	b28e      	uxth	r6, r1
  40397e:	e001      	b.n	403984 <pbuf_copy+0x38>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  403980:	1bdb      	subs	r3, r3, r7
  403982:	b29e      	uxth	r6, r3
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  403984:	6860      	ldr	r0, [r4, #4]
  403986:	6869      	ldr	r1, [r5, #4]
  403988:	4632      	mov	r2, r6
  40398a:	4451      	add	r1, sl
  40398c:	4438      	add	r0, r7
  40398e:	47c8      	blx	r9
    offset_to += len;
  403990:	4437      	add	r7, r6
  403992:	b2bf      	uxth	r7, r7
    offset_from += len;
  403994:	4456      	add	r6, sl
  403996:	fa1f fa86 	uxth.w	sl, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
  40399a:	896b      	ldrh	r3, [r5, #10]
  40399c:	4553      	cmp	r3, sl
  40399e:	d801      	bhi.n	4039a4 <pbuf_copy+0x58>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
  4039a0:	682d      	ldr	r5, [r5, #0]
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
  4039a2:	46c2      	mov	sl, r8
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
  4039a4:	8963      	ldrh	r3, [r4, #10]
  4039a6:	42bb      	cmp	r3, r7
  4039a8:	d104      	bne.n	4039b4 <pbuf_copy+0x68>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
  4039aa:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  4039ac:	b90c      	cbnz	r4, 4039b2 <pbuf_copy+0x66>
  4039ae:	b105      	cbz	r5, 4039b2 <pbuf_copy+0x66>
  4039b0:	e7fe      	b.n	4039b0 <pbuf_copy+0x64>
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
  4039b2:	4647      	mov	r7, r8
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  4039b4:	b165      	cbz	r5, 4039d0 <pbuf_copy+0x84>
  4039b6:	896a      	ldrh	r2, [r5, #10]
  4039b8:	892b      	ldrh	r3, [r5, #8]
  4039ba:	429a      	cmp	r2, r3
  4039bc:	d10a      	bne.n	4039d4 <pbuf_copy+0x88>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  4039be:	682b      	ldr	r3, [r5, #0]
  4039c0:	b143      	cbz	r3, 4039d4 <pbuf_copy+0x88>
  4039c2:	e7fe      	b.n	4039c2 <pbuf_copy+0x76>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  4039c4:	6823      	ldr	r3, [r4, #0]
  4039c6:	b103      	cbz	r3, 4039ca <pbuf_copy+0x7e>
  4039c8:	e7fe      	b.n	4039c8 <pbuf_copy+0x7c>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  4039ca:	2d00      	cmp	r5, #0
  4039cc:	d1cf      	bne.n	40396e <pbuf_copy+0x22>
  4039ce:	e00d      	b.n	4039ec <pbuf_copy+0xa0>
    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  4039d0:	b914      	cbnz	r4, 4039d8 <pbuf_copy+0x8c>
  4039d2:	e00b      	b.n	4039ec <pbuf_copy+0xa0>
  4039d4:	b92c      	cbnz	r4, 4039e2 <pbuf_copy+0x96>
  4039d6:	e7ca      	b.n	40396e <pbuf_copy+0x22>
  4039d8:	8962      	ldrh	r2, [r4, #10]
  4039da:	8923      	ldrh	r3, [r4, #8]
  4039dc:	429a      	cmp	r2, r3
  4039de:	d0f1      	beq.n	4039c4 <pbuf_copy+0x78>
  4039e0:	e004      	b.n	4039ec <pbuf_copy+0xa0>
  4039e2:	8962      	ldrh	r2, [r4, #10]
  4039e4:	8923      	ldrh	r3, [r4, #8]
  4039e6:	429a      	cmp	r2, r3
  4039e8:	d1c1      	bne.n	40396e <pbuf_copy+0x22>
  4039ea:	e7eb      	b.n	4039c4 <pbuf_copy+0x78>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
  4039ec:	2000      	movs	r0, #0
  4039ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4039f2:	bf00      	nop
  4039f4:	00407f29 	.word	0x00407f29

004039f8 <pbuf_copy_partial>:
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  4039f8:	b900      	cbnz	r0, 4039fc <pbuf_copy_partial+0x4>
  4039fa:	e7fe      	b.n	4039fa <pbuf_copy_partial+0x2>
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  4039fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a00:	4688      	mov	r8, r1
  403a02:	4693      	mov	fp, r2
  403a04:	4606      	mov	r6, r0
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  403a06:	b901      	cbnz	r1, 403a0a <pbuf_copy_partial+0x12>
  403a08:	e7fe      	b.n	403a08 <pbuf_copy_partial+0x10>
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  403a0a:	b34a      	cbz	r2, 403a60 <pbuf_copy_partial+0x68>
  403a0c:	2500      	movs	r5, #0
  403a0e:	462f      	mov	r7, r5
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  403a10:	f8df a054 	ldr.w	sl, [pc, #84]	; 403a68 <pbuf_copy_partial+0x70>
      copied_total += buf_copy_len;
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
  403a14:	46a9      	mov	r9, r5
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
    if ((offset != 0) && (offset >= p->len)) {
  403a16:	b12b      	cbz	r3, 403a24 <pbuf_copy_partial+0x2c>
  403a18:	8972      	ldrh	r2, [r6, #10]
  403a1a:	429a      	cmp	r2, r3
  403a1c:	d802      	bhi.n	403a24 <pbuf_copy_partial+0x2c>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  403a1e:	1a9b      	subs	r3, r3, r2
  403a20:	b29b      	uxth	r3, r3
  403a22:	e014      	b.n	403a4e <pbuf_copy_partial+0x56>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  403a24:	8974      	ldrh	r4, [r6, #10]
  403a26:	1ae4      	subs	r4, r4, r3
  403a28:	b2a4      	uxth	r4, r4
  403a2a:	455c      	cmp	r4, fp
  403a2c:	bf28      	it	cs
  403a2e:	465c      	movcs	r4, fp
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  403a30:	6871      	ldr	r1, [r6, #4]
  403a32:	4622      	mov	r2, r4
  403a34:	4419      	add	r1, r3
  403a36:	eb08 0007 	add.w	r0, r8, r7
  403a3a:	47d0      	blx	sl
      copied_total += buf_copy_len;
  403a3c:	4425      	add	r5, r4
  403a3e:	b2ad      	uxth	r5, r5
      left += buf_copy_len;
  403a40:	4427      	add	r7, r4
  403a42:	b2bf      	uxth	r7, r7
      len -= buf_copy_len;
  403a44:	ebc4 040b 	rsb	r4, r4, fp
  403a48:	fa1f fb84 	uxth.w	fp, r4
      offset = 0;
  403a4c:	464b      	mov	r3, r9
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  403a4e:	6836      	ldr	r6, [r6, #0]
  403a50:	f1bb 0f00 	cmp.w	fp, #0
  403a54:	d001      	beq.n	403a5a <pbuf_copy_partial+0x62>
  403a56:	2e00      	cmp	r6, #0
  403a58:	d1dd      	bne.n	403a16 <pbuf_copy_partial+0x1e>
  403a5a:	4628      	mov	r0, r5
  403a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a60:	2000      	movs	r0, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
  403a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a66:	bf00      	nop
  403a68:	00407f29 	.word	0x00407f29

00403a6c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  403a6c:	b4f0      	push	{r4, r5, r6, r7}
  403a6e:	4b14      	ldr	r3, [pc, #80]	; (403ac0 <tcp_new_port+0x54>)
  403a70:	8818      	ldrh	r0, [r3, #0]
  403a72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  403a76:	f64f 76ff 	movw	r6, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  403a7a:	f44f 4540 	mov.w	r5, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  403a7e:	4c11      	ldr	r4, [pc, #68]	; (403ac4 <tcp_new_port+0x58>)
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  403a80:	42b0      	cmp	r0, r6
  403a82:	d002      	beq.n	403a8a <tcp_new_port+0x1e>
  403a84:	3001      	adds	r0, #1
  403a86:	b280      	uxth	r0, r0
  403a88:	e000      	b.n	403a8c <tcp_new_port+0x20>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  403a8a:	4628      	mov	r0, r5
  403a8c:	2200      	movs	r2, #0
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  403a8e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
  403a92:	6809      	ldr	r1, [r1, #0]
  403a94:	e00b      	b.n	403aae <tcp_new_port+0x42>
      if (pcb->local_port == tcp_port) {
  403a96:	8b4f      	ldrh	r7, [r1, #26]
  403a98:	4287      	cmp	r7, r0
  403a9a:	d107      	bne.n	403aac <tcp_new_port+0x40>
  403a9c:	3b01      	subs	r3, #1
  403a9e:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  403aa0:	2b00      	cmp	r3, #0
  403aa2:	d1ed      	bne.n	403a80 <tcp_new_port+0x14>
  403aa4:	4a06      	ldr	r2, [pc, #24]	; (403ac0 <tcp_new_port+0x54>)
  403aa6:	8010      	strh	r0, [r2, #0]
          return 0;
  403aa8:	4618      	mov	r0, r3
  403aaa:	e007      	b.n	403abc <tcp_new_port+0x50>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  403aac:	68c9      	ldr	r1, [r1, #12]
  403aae:	2900      	cmp	r1, #0
  403ab0:	d1f1      	bne.n	403a96 <tcp_new_port+0x2a>
  403ab2:	3201      	adds	r2, #1
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  403ab4:	2a04      	cmp	r2, #4
  403ab6:	d1ea      	bne.n	403a8e <tcp_new_port+0x22>
  403ab8:	4b01      	ldr	r3, [pc, #4]	; (403ac0 <tcp_new_port+0x54>)
  403aba:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
  403abc:	bcf0      	pop	{r4, r5, r6, r7}
  403abe:	4770      	bx	lr
  403ac0:	20400010 	.word	0x20400010
  403ac4:	0040e7c0 	.word	0x0040e7c0

00403ac8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  403ac8:	4770      	bx	lr
  403aca:	bf00      	nop

00403acc <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  403acc:	b4f0      	push	{r4, r5, r6, r7}
  403ace:	4601      	mov	r1, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  403ad0:	6a86      	ldr	r6, [r0, #40]	; 0x28
  403ad2:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
  403ad4:	19aa      	adds	r2, r5, r6

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  403ad6:	6b04      	ldr	r4, [r0, #48]	; 0x30
  403ad8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
  403ada:	f240 50b4 	movw	r0, #1460	; 0x5b4
  403ade:	4283      	cmp	r3, r0
  403ae0:	bf88      	it	hi
  403ae2:	4603      	movhi	r3, r0
  403ae4:	1b10      	subs	r0, r2, r4
  403ae6:	1ac3      	subs	r3, r0, r3
  403ae8:	2b00      	cmp	r3, #0
  403aea:	db01      	blt.n	403af0 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  403aec:	85cd      	strh	r5, [r1, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  403aee:	e009      	b.n	403b04 <tcp_update_rcv_ann_wnd+0x38>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  403af0:	1b33      	subs	r3, r6, r4
  403af2:	2b00      	cmp	r3, #0
  403af4:	dd03      	ble.n	403afe <tcp_update_rcv_ann_wnd+0x32>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  403af6:	2300      	movs	r3, #0
  403af8:	85cb      	strh	r3, [r1, #46]	; 0x2e
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
    }
    return 0;
  403afa:	4618      	mov	r0, r3
  403afc:	e002      	b.n	403b04 <tcp_update_rcv_ann_wnd+0x38>
      pcb->rcv_ann_wnd = 0;
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
  403afe:	1ba4      	subs	r4, r4, r6
  403b00:	85cc      	strh	r4, [r1, #46]	; 0x2e
    }
    return 0;
  403b02:	2000      	movs	r0, #0
  }
}
  403b04:	bcf0      	pop	{r4, r5, r6, r7}
  403b06:	4770      	bx	lr

00403b08 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  403b08:	b510      	push	{r4, lr}
  403b0a:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
  403b0c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  403b0e:	4419      	add	r1, r3
  403b10:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND) {
  403b12:	f640 3368 	movw	r3, #2920	; 0xb68
  403b16:	4299      	cmp	r1, r3
  403b18:	d801      	bhi.n	403b1e <tcp_recved+0x16>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
  403b1a:	8581      	strh	r1, [r0, #44]	; 0x2c
  403b1c:	e002      	b.n	403b24 <tcp_recved+0x1c>
  if (pcb->rcv_wnd > TCP_WND) {
    pcb->rcv_wnd = TCP_WND;
  403b1e:	f640 3368 	movw	r3, #2920	; 0xb68
  403b22:	8583      	strh	r3, [r0, #44]	; 0x2c
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  403b24:	4620      	mov	r0, r4
  403b26:	4b07      	ldr	r3, [pc, #28]	; (403b44 <tcp_recved+0x3c>)
  403b28:	4798      	blx	r3

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  403b2a:	f240 23d9 	movw	r3, #729	; 0x2d9
  403b2e:	4298      	cmp	r0, r3
  403b30:	dd06      	ble.n	403b40 <tcp_recved+0x38>
    tcp_ack_now(pcb);
  403b32:	7fa3      	ldrb	r3, [r4, #30]
  403b34:	f043 0302 	orr.w	r3, r3, #2
  403b38:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  403b3a:	4620      	mov	r0, r4
  403b3c:	4b02      	ldr	r3, [pc, #8]	; (403b48 <tcp_recved+0x40>)
  403b3e:	4798      	blx	r3
  403b40:	bd10      	pop	{r4, pc}
  403b42:	bf00      	nop
  403b44:	00403acd 	.word	0x00403acd
  403b48:	004060d1 	.word	0x004060d1

00403b4c <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
  403b4c:	b150      	cbz	r0, 403b64 <tcp_seg_free+0x18>
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  403b4e:	b510      	push	{r4, lr}
  403b50:	4604      	mov	r4, r0
  if (seg != NULL) {
    if (seg->p != NULL) {
  403b52:	6840      	ldr	r0, [r0, #4]
  403b54:	b108      	cbz	r0, 403b5a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
  403b56:	4b04      	ldr	r3, [pc, #16]	; (403b68 <tcp_seg_free+0x1c>)
  403b58:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  403b5a:	4621      	mov	r1, r4
  403b5c:	2003      	movs	r0, #3
  403b5e:	4b03      	ldr	r3, [pc, #12]	; (403b6c <tcp_seg_free+0x20>)
  403b60:	4798      	blx	r3
  403b62:	bd10      	pop	{r4, pc}
  403b64:	4770      	bx	lr
  403b66:	bf00      	nop
  403b68:	004036c9 	.word	0x004036c9
  403b6c:	004034cd 	.word	0x004034cd

00403b70 <tcp_segs_free>:
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
  403b70:	b148      	cbz	r0, 403b86 <tcp_segs_free+0x16>
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  403b72:	b538      	push	{r3, r4, r5, lr}
  403b74:	4603      	mov	r3, r0
  while (seg != NULL) {
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
  403b76:	4d04      	ldr	r5, [pc, #16]	; (403b88 <tcp_segs_free+0x18>)
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
    struct tcp_seg *next = seg->next;
  403b78:	681c      	ldr	r4, [r3, #0]
    tcp_seg_free(seg);
  403b7a:	4618      	mov	r0, r3
  403b7c:	47a8      	blx	r5
    seg = next;
  403b7e:	4623      	mov	r3, r4
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
  403b80:	2c00      	cmp	r4, #0
  403b82:	d1f9      	bne.n	403b78 <tcp_segs_free+0x8>
  403b84:	bd38      	pop	{r3, r4, r5, pc}
  403b86:	4770      	bx	lr
  403b88:	00403b4d 	.word	0x00403b4d

00403b8c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  403b8c:	b538      	push	{r3, r4, r5, lr}
  403b8e:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  403b90:	2003      	movs	r0, #3
  403b92:	4b08      	ldr	r3, [pc, #32]	; (403bb4 <tcp_seg_copy+0x28>)
  403b94:	4798      	blx	r3
  if (cseg == NULL) {
  403b96:	4604      	mov	r4, r0
  403b98:	b150      	cbz	r0, 403bb0 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  403b9a:	6828      	ldr	r0, [r5, #0]
  403b9c:	6869      	ldr	r1, [r5, #4]
  403b9e:	68aa      	ldr	r2, [r5, #8]
  403ba0:	68eb      	ldr	r3, [r5, #12]
  403ba2:	6020      	str	r0, [r4, #0]
  403ba4:	6061      	str	r1, [r4, #4]
  403ba6:	60a2      	str	r2, [r4, #8]
  403ba8:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
  403baa:	6860      	ldr	r0, [r4, #4]
  403bac:	4b02      	ldr	r3, [pc, #8]	; (403bb8 <tcp_seg_copy+0x2c>)
  403bae:	4798      	blx	r3
  return cseg;
}
  403bb0:	4620      	mov	r0, r4
  403bb2:	bd38      	pop	{r3, r4, r5, pc}
  403bb4:	004034ad 	.word	0x004034ad
  403bb8:	004038f5 	.word	0x004038f5

00403bbc <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
  403bbc:	6101      	str	r1, [r0, #16]
  403bbe:	4770      	bx	lr

00403bc0 <tcp_recv>:
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
  403bc0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  403bc4:	4770      	bx	lr
  403bc6:	bf00      	nop

00403bc8 <tcp_sent>:
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
  403bc8:	67c1      	str	r1, [r0, #124]	; 0x7c
  403bca:	4770      	bx	lr

00403bcc <tcp_err>:
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
  403bcc:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  403bd0:	4770      	bx	lr
  403bd2:	bf00      	nop

00403bd4 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
  403bd4:	7e03      	ldrb	r3, [r0, #24]
     pcb->state != TIME_WAIT &&
  403bd6:	2b0a      	cmp	r3, #10
  403bd8:	d01a      	beq.n	403c10 <tcp_pcb_purge+0x3c>
  403bda:	2b01      	cmp	r3, #1
  403bdc:	d918      	bls.n	403c10 <tcp_pcb_purge+0x3c>
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  403bde:	b570      	push	{r4, r5, r6, lr}
  403be0:	4604      	mov	r4, r0
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
  403be2:	6f80      	ldr	r0, [r0, #120]	; 0x78
  403be4:	b118      	cbz	r0, 403bee <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  403be6:	4b0b      	ldr	r3, [pc, #44]	; (403c14 <tcp_pcb_purge+0x40>)
  403be8:	4798      	blx	r3
      pcb->refused_data = NULL;
  403bea:	2300      	movs	r3, #0
  403bec:	67a3      	str	r3, [r4, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  403bee:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403bf0:	4e09      	ldr	r6, [pc, #36]	; (403c18 <tcp_pcb_purge+0x44>)
  403bf2:	47b0      	blx	r6
    pcb->ooseq = NULL;
  403bf4:	2500      	movs	r5, #0
  403bf6:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  403bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403bfc:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  403bfe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  403c00:	47b0      	blx	r6
    tcp_segs_free(pcb->unacked);
  403c02:	6f20      	ldr	r0, [r4, #112]	; 0x70
  403c04:	47b0      	blx	r6
    pcb->unacked = pcb->unsent = NULL;
  403c06:	66e5      	str	r5, [r4, #108]	; 0x6c
  403c08:	6725      	str	r5, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  403c0a:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  403c0e:	bd70      	pop	{r4, r5, r6, pc}
  403c10:	4770      	bx	lr
  403c12:	bf00      	nop
  403c14:	004036c9 	.word	0x004036c9
  403c18:	00403b71 	.word	0x00403b71

00403c1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  403c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c20:	b083      	sub	sp, #12
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
  403c22:	4ab1      	ldr	r2, [pc, #708]	; (403ee8 <tcp_slowtmr+0x2cc>)
  403c24:	6813      	ldr	r3, [r2, #0]
  403c26:	3301      	adds	r3, #1
  403c28:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
  403c2a:	4ab0      	ldr	r2, [pc, #704]	; (403eec <tcp_slowtmr+0x2d0>)
  403c2c:	7813      	ldrb	r3, [r2, #0]
  403c2e:	3301      	adds	r3, #1
  403c30:	7013      	strb	r3, [r2, #0]
  while (pcb != NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
  403c32:	4615      	mov	r5, r2
      /* We check if we should poll the connection. */
      ++prev->polltmr;
      if (prev->polltmr >= prev->pollinterval) {
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  403c34:	4fae      	ldr	r7, [pc, #696]	; (403ef0 <tcp_slowtmr+0x2d4>)

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
  403c36:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 403f24 <tcp_slowtmr+0x308>
  ++tcp_timer_ctr;

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  pcb = tcp_active_pcbs;
  403c3a:	4bae      	ldr	r3, [pc, #696]	; (403ef4 <tcp_slowtmr+0x2d8>)
  403c3c:	681c      	ldr	r4, [r3, #0]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  403c3e:	2c00      	cmp	r4, #0
  403c40:	f000 8179 	beq.w	403f36 <tcp_slowtmr+0x31a>
  403c44:	2600      	movs	r6, #0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
  403c46:	782b      	ldrb	r3, [r5, #0]
  403c48:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  403c4c:	429a      	cmp	r2, r3
  403c4e:	d101      	bne.n	403c54 <tcp_slowtmr+0x38>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  403c50:	68e4      	ldr	r4, [r4, #12]
      continue;
  403c52:	e16d      	b.n	403f30 <tcp_slowtmr+0x314>
    }
    pcb->last_timer = tcp_timer_ctr;
  403c54:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb_remove = 0;
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  403c58:	7e22      	ldrb	r2, [r4, #24]
  403c5a:	2a02      	cmp	r2, #2
  403c5c:	d105      	bne.n	403c6a <tcp_slowtmr+0x4e>
  403c5e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  403c62:	2b06      	cmp	r3, #6
  403c64:	f040 8189 	bne.w	403f7a <tcp_slowtmr+0x35e>
  403c68:	e0a7      	b.n	403dba <tcp_slowtmr+0x19e>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  403c6a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  403c6e:	2b0c      	cmp	r3, #12
  403c70:	d053      	beq.n	403d1a <tcp_slowtmr+0xfe>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  403c72:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
  403c76:	b1c9      	cbz	r1, 403cac <tcp_slowtmr+0x90>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
  403c78:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
  403c7c:	3301      	adds	r3, #1
  403c7e:	b2db      	uxtb	r3, r3
  403c80:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  403c84:	4a9c      	ldr	r2, [pc, #624]	; (403ef8 <tcp_slowtmr+0x2dc>)
  403c86:	440a      	add	r2, r1
  403c88:	f812 2c01 	ldrb.w	r2, [r2, #-1]
  403c8c:	429a      	cmp	r2, r3
  403c8e:	d847      	bhi.n	403d20 <tcp_slowtmr+0x104>
          pcb->persist_cnt = 0;
  403c90:	2300      	movs	r3, #0
  403c92:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  403c96:	2906      	cmp	r1, #6
  403c98:	d802      	bhi.n	403ca0 <tcp_slowtmr+0x84>
            pcb->persist_backoff++;
  403c9a:	3101      	adds	r1, #1
  403c9c:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
          }
          tcp_zero_window_probe(pcb);
  403ca0:	4620      	mov	r0, r4
  403ca2:	4b96      	ldr	r3, [pc, #600]	; (403efc <tcp_slowtmr+0x2e0>)
  403ca4:	4798      	blx	r3
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
  403ca6:	f04f 0800 	mov.w	r8, #0
  403caa:	e041      	b.n	403d30 <tcp_slowtmr+0x114>
          }
          tcp_zero_window_probe(pcb);
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
  403cac:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
  403cb0:	2900      	cmp	r1, #0
  403cb2:	db01      	blt.n	403cb8 <tcp_slowtmr+0x9c>
          ++pcb->rtime;
  403cb4:	3101      	adds	r1, #1
  403cb6:	86a1      	strh	r1, [r4, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  403cb8:	6f21      	ldr	r1, [r4, #112]	; 0x70
  403cba:	b3a1      	cbz	r1, 403d26 <tcp_slowtmr+0x10a>
  403cbc:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
  403cc0:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
  403cc4:	4288      	cmp	r0, r1
  403cc6:	db31      	blt.n	403d2c <tcp_slowtmr+0x110>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  403cc8:	2a02      	cmp	r2, #2
  403cca:	d00b      	beq.n	403ce4 <tcp_slowtmr+0xc8>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
  403ccc:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  403cd0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  403cd4:	eb02 02e1 	add.w	r2, r2, r1, asr #3
  403cd8:	4989      	ldr	r1, [pc, #548]	; (403f00 <tcp_slowtmr+0x2e4>)
  403cda:	5ccb      	ldrb	r3, [r1, r3]
  403cdc:	fa02 f303 	lsl.w	r3, r2, r3
  403ce0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  403ce4:	2300      	movs	r3, #0
  403ce6:	86a3      	strh	r3, [r4, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
  403ce8:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
  403cec:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  403cf0:	4293      	cmp	r3, r2
  403cf2:	bf28      	it	cs
  403cf4:	4613      	movcs	r3, r2
  403cf6:	085b      	lsrs	r3, r3, #1
  403cf8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          if (pcb->ssthresh < (pcb->mss << 1)) {
  403cfc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
  403cfe:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
  403d02:	da02      	bge.n	403d0a <tcp_slowtmr+0xee>
            pcb->ssthresh = (pcb->mss << 1);
  403d04:	0053      	lsls	r3, r2, #1
  403d06:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  403d0a:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  403d0e:	4620      	mov	r0, r4
  403d10:	4b7c      	ldr	r3, [pc, #496]	; (403f04 <tcp_slowtmr+0x2e8>)
  403d12:	4798      	blx	r3
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
  403d14:	f04f 0800 	mov.w	r8, #0
  403d18:	e00a      	b.n	403d30 <tcp_slowtmr+0x114>
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
      ++pcb_remove;
  403d1a:	f04f 0801 	mov.w	r8, #1
  403d1e:	e007      	b.n	403d30 <tcp_slowtmr+0x114>
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
  403d20:	f04f 0800 	mov.w	r8, #0
  403d24:	e004      	b.n	403d30 <tcp_slowtmr+0x114>
  403d26:	f04f 0800 	mov.w	r8, #0
  403d2a:	e001      	b.n	403d30 <tcp_slowtmr+0x114>
  403d2c:	f04f 0800 	mov.w	r8, #0
          tcp_rexmit_rto(pcb);
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  403d30:	7e23      	ldrb	r3, [r4, #24]
  403d32:	2b06      	cmp	r3, #6
  403d34:	d110      	bne.n	403d58 <tcp_slowtmr+0x13c>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  403d36:	7fa3      	ldrb	r3, [r4, #30]
  403d38:	f013 0f10 	tst.w	r3, #16
  403d3c:	f000 8121 	beq.w	403f82 <tcp_slowtmr+0x366>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  403d40:	4b69      	ldr	r3, [pc, #420]	; (403ee8 <tcp_slowtmr+0x2cc>)
  403d42:	681b      	ldr	r3, [r3, #0]
  403d44:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403d46:	1a9b      	subs	r3, r3, r2
  403d48:	2b28      	cmp	r3, #40	; 0x28
  403d4a:	f240 811a 	bls.w	403f82 <tcp_slowtmr+0x366>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  403d4e:	f108 0801 	add.w	r8, r8, #1
  403d52:	fa5f f888 	uxtb.w	r8, r8
  403d56:	e114      	b.n	403f82 <tcp_slowtmr+0x366>
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  403d58:	7a22      	ldrb	r2, [r4, #8]
  403d5a:	f012 0f08 	tst.w	r2, #8
  403d5e:	d031      	beq.n	403dc4 <tcp_slowtmr+0x1a8>
  403d60:	2b04      	cmp	r3, #4
  403d62:	d001      	beq.n	403d68 <tcp_slowtmr+0x14c>
  403d64:	2b07      	cmp	r3, #7
  403d66:	d130      	bne.n	403dca <tcp_slowtmr+0x1ae>
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
  403d68:	4b5f      	ldr	r3, [pc, #380]	; (403ee8 <tcp_slowtmr+0x2cc>)
  403d6a:	681a      	ldr	r2, [r3, #0]
  403d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d6e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  403d70:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
  403d74:	4b64      	ldr	r3, [pc, #400]	; (403f08 <tcp_slowtmr+0x2ec>)
  403d76:	4403      	add	r3, r0
  403d78:	fbab 1303 	umull	r1, r3, fp, r3
  403d7c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  403d80:	d906      	bls.n	403d90 <tcp_slowtmr+0x174>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
  403d82:	f108 0801 	add.w	r8, r8, #1
  403d86:	fa5f f888 	uxtb.w	r8, r8
        ++pcb_reset;
  403d8a:	f04f 0901 	mov.w	r9, #1
  403d8e:	e026      	b.n	403dde <tcp_slowtmr+0x1c2>
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  403d90:	f894 1096 	ldrb.w	r1, [r4, #150]	; 0x96
  403d94:	4b5d      	ldr	r3, [pc, #372]	; (403f0c <tcp_slowtmr+0x2f0>)
  403d96:	fb03 0301 	mla	r3, r3, r1, r0
  403d9a:	fbab 1303 	umull	r1, r3, fp, r3
  403d9e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  403da2:	d915      	bls.n	403dd0 <tcp_slowtmr+0x1b4>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
              / TCP_SLOW_INTERVAL)
      {
        tcp_keepalive(pcb);
  403da4:	4620      	mov	r0, r4
  403da6:	4b5a      	ldr	r3, [pc, #360]	; (403f10 <tcp_slowtmr+0x2f4>)
  403da8:	4798      	blx	r3
        pcb->keep_cnt_sent++;
  403daa:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  403dae:	3301      	adds	r3, #1
  403db0:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
  403db4:	f04f 0900 	mov.w	r9, #0
  403db8:	e011      	b.n	403dde <tcp_slowtmr+0x1c2>
  403dba:	f04f 0900 	mov.w	r9, #0
  403dbe:	f04f 0801 	mov.w	r8, #1
  403dc2:	e00c      	b.n	403dde <tcp_slowtmr+0x1c2>
  403dc4:	f04f 0900 	mov.w	r9, #0
  403dc8:	e009      	b.n	403dde <tcp_slowtmr+0x1c2>
  403dca:	f04f 0900 	mov.w	r9, #0
  403dce:	e006      	b.n	403dde <tcp_slowtmr+0x1c2>
  403dd0:	f04f 0900 	mov.w	r9, #0
  403dd4:	e003      	b.n	403dde <tcp_slowtmr+0x1c2>
  403dd6:	f04f 0900 	mov.w	r9, #0

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  403dda:	f04f 0801 	mov.w	r8, #1

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  403dde:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403de0:	b910      	cbnz	r0, 403de8 <tcp_slowtmr+0x1cc>
  403de2:	e010      	b.n	403e06 <tcp_slowtmr+0x1ea>
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
  403de4:	f04f 0900 	mov.w	r9, #0
    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  403de8:	4b3f      	ldr	r3, [pc, #252]	; (403ee8 <tcp_slowtmr+0x2cc>)

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  403dea:	681b      	ldr	r3, [r3, #0]
  403dec:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403dee:	1a9a      	subs	r2, r3, r2
  403df0:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  403df4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  403df8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  403dfc:	d303      	bcc.n	403e06 <tcp_slowtmr+0x1ea>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
  403dfe:	4b45      	ldr	r3, [pc, #276]	; (403f14 <tcp_slowtmr+0x2f8>)
  403e00:	4798      	blx	r3
      pcb->ooseq = NULL;
  403e02:	2300      	movs	r3, #0
  403e04:	6763      	str	r3, [r4, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  403e06:	7e23      	ldrb	r3, [r4, #24]
  403e08:	2b03      	cmp	r3, #3
  403e0a:	d10a      	bne.n	403e22 <tcp_slowtmr+0x206>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  403e0c:	4b36      	ldr	r3, [pc, #216]	; (403ee8 <tcp_slowtmr+0x2cc>)
  403e0e:	681b      	ldr	r3, [r3, #0]
  403e10:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403e12:	1a9b      	subs	r3, r3, r2
  403e14:	2b28      	cmp	r3, #40	; 0x28
  403e16:	d910      	bls.n	403e3a <tcp_slowtmr+0x21e>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  403e18:	f108 0801 	add.w	r8, r8, #1
  403e1c:	fa5f f888 	uxtb.w	r8, r8
  403e20:	e00b      	b.n	403e3a <tcp_slowtmr+0x21e>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  403e22:	2b09      	cmp	r3, #9
  403e24:	d109      	bne.n	403e3a <tcp_slowtmr+0x21e>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  403e26:	4b30      	ldr	r3, [pc, #192]	; (403ee8 <tcp_slowtmr+0x2cc>)
  403e28:	681b      	ldr	r3, [r3, #0]
  403e2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403e2c:	1a9b      	subs	r3, r3, r2
  403e2e:	2bf0      	cmp	r3, #240	; 0xf0
  403e30:	d903      	bls.n	403e3a <tcp_slowtmr+0x21e>
        ++pcb_remove;
  403e32:	f108 0801 	add.w	r8, r8, #1
  403e36:	fa5f f888 	uxtb.w	r8, r8
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  403e3a:	f1b8 0f00 	cmp.w	r8, #0
  403e3e:	d030      	beq.n	403ea2 <tcp_slowtmr+0x286>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
  403e40:	4620      	mov	r0, r4
  403e42:	4b35      	ldr	r3, [pc, #212]	; (403f18 <tcp_slowtmr+0x2fc>)
  403e44:	4798      	blx	r3
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  403e46:	b116      	cbz	r6, 403e4e <tcp_slowtmr+0x232>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
  403e48:	68e3      	ldr	r3, [r4, #12]
  403e4a:	60f3      	str	r3, [r6, #12]
  403e4c:	e002      	b.n	403e54 <tcp_slowtmr+0x238>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
  403e4e:	68e3      	ldr	r3, [r4, #12]
  403e50:	4a28      	ldr	r2, [pc, #160]	; (403ef4 <tcp_slowtmr+0x2d8>)
  403e52:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
  403e54:	f1b9 0f00 	cmp.w	r9, #0
  403e58:	d00a      	beq.n	403e70 <tcp_slowtmr+0x254>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  403e5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403e5c:	6d20      	ldr	r0, [r4, #80]	; 0x50
  403e5e:	8ba3      	ldrh	r3, [r4, #28]
  403e60:	9301      	str	r3, [sp, #4]
  403e62:	8b63      	ldrh	r3, [r4, #26]
  403e64:	9300      	str	r3, [sp, #0]
  403e66:	1d23      	adds	r3, r4, #4
  403e68:	4622      	mov	r2, r4
  403e6a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 403f28 <tcp_slowtmr+0x30c>
  403e6e:	47c0      	blx	r8
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
  403e70:	f8d4 808c 	ldr.w	r8, [r4, #140]	; 0x8c
      err_arg = pcb->callback_arg;
  403e74:	f8d4 a010 	ldr.w	sl, [r4, #16]
      pcb2 = pcb;
      pcb = pcb->next;
  403e78:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  403e7c:	4621      	mov	r1, r4
  403e7e:	2001      	movs	r0, #1
  403e80:	4b26      	ldr	r3, [pc, #152]	; (403f1c <tcp_slowtmr+0x300>)
  403e82:	4798      	blx	r3

      tcp_active_pcbs_changed = 0;
  403e84:	2300      	movs	r3, #0
  403e86:	703b      	strb	r3, [r7, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
  403e88:	f1b8 0f00 	cmp.w	r8, #0
  403e8c:	d027      	beq.n	403ede <tcp_slowtmr+0x2c2>
  403e8e:	f06f 0109 	mvn.w	r1, #9
  403e92:	4650      	mov	r0, sl
  403e94:	47c0      	blx	r8
      if (tcp_active_pcbs_changed) {
  403e96:	783b      	ldrb	r3, [r7, #0]
  403e98:	2b00      	cmp	r3, #0
  403e9a:	f47f aece 	bne.w	403c3a <tcp_slowtmr+0x1e>
      }

      err_fn = pcb->errf;
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
  403e9e:	464c      	mov	r4, r9
  403ea0:	e046      	b.n	403f30 <tcp_slowtmr+0x314>
        goto tcp_slowtmr_start;
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
  403ea2:	f8d4 800c 	ldr.w	r8, [r4, #12]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  403ea6:	7fe3      	ldrb	r3, [r4, #31]
  403ea8:	3301      	adds	r3, #1
  403eaa:	b2db      	uxtb	r3, r3
  403eac:	77e3      	strb	r3, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
  403eae:	f894 2020 	ldrb.w	r2, [r4, #32]
  403eb2:	429a      	cmp	r2, r3
  403eb4:	d815      	bhi.n	403ee2 <tcp_slowtmr+0x2c6>
        prev->polltmr = 0;
  403eb6:	2300      	movs	r3, #0
  403eb8:	77e3      	strb	r3, [r4, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  403eba:	703b      	strb	r3, [r7, #0]
        TCP_EVENT_POLL(prev, err);
  403ebc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  403ec0:	b13b      	cbz	r3, 403ed2 <tcp_slowtmr+0x2b6>
  403ec2:	4621      	mov	r1, r4
  403ec4:	6920      	ldr	r0, [r4, #16]
  403ec6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  403ec8:	783b      	ldrb	r3, [r7, #0]
  403eca:	2b00      	cmp	r3, #0
  403ecc:	f47f aeb5 	bne.w	403c3a <tcp_slowtmr+0x1e>
          goto tcp_slowtmr_start;
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  403ed0:	bb60      	cbnz	r0, 403f2c <tcp_slowtmr+0x310>
          tcp_output(prev);
  403ed2:	4620      	mov	r0, r4
  403ed4:	4b12      	ldr	r3, [pc, #72]	; (403f20 <tcp_slowtmr+0x304>)
  403ed6:	4798      	blx	r3
  403ed8:	4626      	mov	r6, r4
        goto tcp_slowtmr_start;
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
  403eda:	4644      	mov	r4, r8
  403edc:	e028      	b.n	403f30 <tcp_slowtmr+0x314>
      }

      err_fn = pcb->errf;
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
  403ede:	464c      	mov	r4, r9
  403ee0:	e026      	b.n	403f30 <tcp_slowtmr+0x314>
  403ee2:	4626      	mov	r6, r4
        goto tcp_slowtmr_start;
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
  403ee4:	4644      	mov	r4, r8
  403ee6:	e023      	b.n	403f30 <tcp_slowtmr+0x314>
  403ee8:	204048a0 	.word	0x204048a0
  403eec:	204024c2 	.word	0x204024c2
  403ef0:	20404898 	.word	0x20404898
  403ef4:	2040489c 	.word	0x2040489c
  403ef8:	0040e7e0 	.word	0x0040e7e0
  403efc:	00406585 	.word	0x00406585
  403f00:	0040e7d0 	.word	0x0040e7d0
  403f04:	00406429 	.word	0x00406429
  403f08:	000a4cb8 	.word	0x000a4cb8
  403f0c:	000124f8 	.word	0x000124f8
  403f10:	00406519 	.word	0x00406519
  403f14:	00403b71 	.word	0x00403b71
  403f18:	00403bd5 	.word	0x00403bd5
  403f1c:	004034cd 	.word	0x004034cd
  403f20:	004060d1 	.word	0x004060d1
  403f24:	10624dd3 	.word	0x10624dd3
  403f28:	00406385 	.word	0x00406385
  403f2c:	4626      	mov	r6, r4
  403f2e:	4644      	mov	r4, r8
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  403f30:	2c00      	cmp	r4, #0
  403f32:	f47f ae88 	bne.w	403c46 <tcp_slowtmr+0x2a>
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  403f36:	4b18      	ldr	r3, [pc, #96]	; (403f98 <tcp_slowtmr+0x37c>)
  403f38:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
  403f3a:	b34c      	cbz	r4, 403f90 <tcp_slowtmr+0x374>
  403f3c:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  403f3e:	4e17      	ldr	r6, [pc, #92]	; (403f9c <tcp_slowtmr+0x380>)


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  403f40:	f8df 8060 	ldr.w	r8, [pc, #96]	; 403fa4 <tcp_slowtmr+0x388>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
      }
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
  403f44:	4f16      	ldr	r7, [pc, #88]	; (403fa0 <tcp_slowtmr+0x384>)
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  403f46:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403f48:	6833      	ldr	r3, [r6, #0]
  403f4a:	1a9b      	subs	r3, r3, r2
  403f4c:	2bf0      	cmp	r3, #240	; 0xf0
  403f4e:	d90f      	bls.n	403f70 <tcp_slowtmr+0x354>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  403f50:	4620      	mov	r0, r4
  403f52:	47c0      	blx	r8
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  403f54:	b115      	cbz	r5, 403f5c <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
  403f56:	68e3      	ldr	r3, [r4, #12]
  403f58:	60eb      	str	r3, [r5, #12]
  403f5a:	e002      	b.n	403f62 <tcp_slowtmr+0x346>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
  403f5c:	68e2      	ldr	r2, [r4, #12]
  403f5e:	4b0e      	ldr	r3, [pc, #56]	; (403f98 <tcp_slowtmr+0x37c>)
  403f60:	601a      	str	r2, [r3, #0]
      }
      pcb2 = pcb;
      pcb = pcb->next;
  403f62:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  403f66:	4621      	mov	r1, r4
  403f68:	2001      	movs	r0, #1
  403f6a:	47b8      	blx	r7
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
      }
      pcb2 = pcb;
      pcb = pcb->next;
  403f6c:	464c      	mov	r4, r9
  403f6e:	e001      	b.n	403f74 <tcp_slowtmr+0x358>
      memp_free(MEMP_TCP_PCB, pcb2);
    } else {
      prev = pcb;
      pcb = pcb->next;
  403f70:	4625      	mov	r5, r4
  403f72:	68e4      	ldr	r4, [r4, #12]

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
  403f74:	2c00      	cmp	r4, #0
  403f76:	d1e6      	bne.n	403f46 <tcp_slowtmr+0x32a>
  403f78:	e00a      	b.n	403f90 <tcp_slowtmr+0x374>

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  403f7a:	2b0c      	cmp	r3, #12
  403f7c:	f47f ae79 	bne.w	403c72 <tcp_slowtmr+0x56>
  403f80:	e729      	b.n	403dd6 <tcp_slowtmr+0x1ba>

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  403f82:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403f84:	2800      	cmp	r0, #0
  403f86:	f47f af2d 	bne.w	403de4 <tcp_slowtmr+0x1c8>
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
  403f8a:	f04f 0900 	mov.w	r9, #0
  403f8e:	e754      	b.n	403e3a <tcp_slowtmr+0x21e>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
  403f90:	b003      	add	sp, #12
  403f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f96:	bf00      	nop
  403f98:	204048b0 	.word	0x204048b0
  403f9c:	204048a0 	.word	0x204048a0
  403fa0:	004034cd 	.word	0x004034cd
  403fa4:	00403bd5 	.word	0x00403bd5

00403fa8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  403fa8:	b510      	push	{r4, lr}
  403faa:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
  403fac:	6802      	ldr	r2, [r0, #0]
  403fae:	428a      	cmp	r2, r1
  403fb0:	d102      	bne.n	403fb8 <tcp_pcb_remove+0x10>
  403fb2:	68d3      	ldr	r3, [r2, #12]
  403fb4:	6003      	str	r3, [r0, #0]
  403fb6:	e016      	b.n	403fe6 <tcp_pcb_remove+0x3e>
  403fb8:	4b16      	ldr	r3, [pc, #88]	; (404014 <tcp_pcb_remove+0x6c>)
  403fba:	601a      	str	r2, [r3, #0]
  403fbc:	b19a      	cbz	r2, 403fe6 <tcp_pcb_remove+0x3e>
  403fbe:	68d3      	ldr	r3, [r2, #12]
  403fc0:	4299      	cmp	r1, r3
  403fc2:	d10b      	bne.n	403fdc <tcp_pcb_remove+0x34>
  403fc4:	e005      	b.n	403fd2 <tcp_pcb_remove+0x2a>
  403fc6:	68da      	ldr	r2, [r3, #12]
  403fc8:	4294      	cmp	r4, r2
  403fca:	d106      	bne.n	403fda <tcp_pcb_remove+0x32>
  403fcc:	4a11      	ldr	r2, [pc, #68]	; (404014 <tcp_pcb_remove+0x6c>)
  403fce:	6013      	str	r3, [r2, #0]
  403fd0:	e000      	b.n	403fd4 <tcp_pcb_remove+0x2c>
  403fd2:	4613      	mov	r3, r2
  403fd4:	68e2      	ldr	r2, [r4, #12]
  403fd6:	60da      	str	r2, [r3, #12]
  403fd8:	e005      	b.n	403fe6 <tcp_pcb_remove+0x3e>
  403fda:	4613      	mov	r3, r2
  403fdc:	2b00      	cmp	r3, #0
  403fde:	d1f2      	bne.n	403fc6 <tcp_pcb_remove+0x1e>
  403fe0:	2200      	movs	r2, #0
  403fe2:	4b0c      	ldr	r3, [pc, #48]	; (404014 <tcp_pcb_remove+0x6c>)
  403fe4:	601a      	str	r2, [r3, #0]
  403fe6:	2300      	movs	r3, #0
  403fe8:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
  403fea:	4620      	mov	r0, r4
  403fec:	4b0a      	ldr	r3, [pc, #40]	; (404018 <tcp_pcb_remove+0x70>)
  403fee:	4798      	blx	r3
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  403ff0:	7e23      	ldrb	r3, [r4, #24]
  403ff2:	2b0a      	cmp	r3, #10
  403ff4:	d00b      	beq.n	40400e <tcp_pcb_remove+0x66>
  403ff6:	2b01      	cmp	r3, #1
  403ff8:	d009      	beq.n	40400e <tcp_pcb_remove+0x66>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
  403ffa:	7fa3      	ldrb	r3, [r4, #30]

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
  403ffc:	f013 0f01 	tst.w	r3, #1
  404000:	d005      	beq.n	40400e <tcp_pcb_remove+0x66>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
  404002:	f043 0302 	orr.w	r3, r3, #2
  404006:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  404008:	4620      	mov	r0, r4
  40400a:	4b04      	ldr	r3, [pc, #16]	; (40401c <tcp_pcb_remove+0x74>)
  40400c:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  40400e:	2300      	movs	r3, #0
  404010:	7623      	strb	r3, [r4, #24]
  404012:	bd10      	pop	{r4, pc}
  404014:	204048a8 	.word	0x204048a8
  404018:	00403bd5 	.word	0x00403bd5
  40401c:	004060d1 	.word	0x004060d1

00404020 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  404020:	b530      	push	{r4, r5, lr}
  404022:	b083      	sub	sp, #12
  404024:	4604      	mov	r4, r0
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  404026:	2900      	cmp	r1, #0
  404028:	f000 80b0 	beq.w	40418c <tcp_close_shutdown+0x16c>
  40402c:	7e03      	ldrb	r3, [r0, #24]
  40402e:	2b04      	cmp	r3, #4
  404030:	d002      	beq.n	404038 <tcp_close_shutdown+0x18>
  404032:	2b07      	cmp	r3, #7
  404034:	f040 80aa 	bne.w	40418c <tcp_close_shutdown+0x16c>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  404038:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  40403a:	b92b      	cbnz	r3, 404048 <tcp_close_shutdown+0x28>
  40403c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  40403e:	f640 3368 	movw	r3, #2920	; 0xb68
  404042:	429a      	cmp	r2, r3
  404044:	f000 80a2 	beq.w	40418c <tcp_close_shutdown+0x16c>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  404048:	8ba3      	ldrh	r3, [r4, #28]
  40404a:	9301      	str	r3, [sp, #4]
  40404c:	8b63      	ldrh	r3, [r4, #26]
  40404e:	9300      	str	r3, [sp, #0]
  404050:	1d23      	adds	r3, r4, #4
  404052:	4622      	mov	r2, r4
  404054:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  404056:	6d20      	ldr	r0, [r4, #80]	; 0x50
  404058:	4d59      	ldr	r5, [pc, #356]	; (4041c0 <tcp_close_shutdown+0x1a0>)
  40405a:	47a8      	blx	r5
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  40405c:	4620      	mov	r0, r4
  40405e:	4b59      	ldr	r3, [pc, #356]	; (4041c4 <tcp_close_shutdown+0x1a4>)
  404060:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  404062:	4b59      	ldr	r3, [pc, #356]	; (4041c8 <tcp_close_shutdown+0x1a8>)
  404064:	681a      	ldr	r2, [r3, #0]
  404066:	4294      	cmp	r4, r2
  404068:	d102      	bne.n	404070 <tcp_close_shutdown+0x50>
  40406a:	68e2      	ldr	r2, [r4, #12]
  40406c:	601a      	str	r2, [r3, #0]
  40406e:	e016      	b.n	40409e <tcp_close_shutdown+0x7e>
  404070:	4b56      	ldr	r3, [pc, #344]	; (4041cc <tcp_close_shutdown+0x1ac>)
  404072:	601a      	str	r2, [r3, #0]
  404074:	b19a      	cbz	r2, 40409e <tcp_close_shutdown+0x7e>
  404076:	68d3      	ldr	r3, [r2, #12]
  404078:	429c      	cmp	r4, r3
  40407a:	d10b      	bne.n	404094 <tcp_close_shutdown+0x74>
  40407c:	e005      	b.n	40408a <tcp_close_shutdown+0x6a>
  40407e:	68da      	ldr	r2, [r3, #12]
  404080:	4294      	cmp	r4, r2
  404082:	d106      	bne.n	404092 <tcp_close_shutdown+0x72>
  404084:	4a51      	ldr	r2, [pc, #324]	; (4041cc <tcp_close_shutdown+0x1ac>)
  404086:	6013      	str	r3, [r2, #0]
  404088:	e000      	b.n	40408c <tcp_close_shutdown+0x6c>
  40408a:	4613      	mov	r3, r2
  40408c:	68e2      	ldr	r2, [r4, #12]
  40408e:	60da      	str	r2, [r3, #12]
  404090:	e005      	b.n	40409e <tcp_close_shutdown+0x7e>
  404092:	4613      	mov	r3, r2
  404094:	2b00      	cmp	r3, #0
  404096:	d1f2      	bne.n	40407e <tcp_close_shutdown+0x5e>
  404098:	2200      	movs	r2, #0
  40409a:	4b4c      	ldr	r3, [pc, #304]	; (4041cc <tcp_close_shutdown+0x1ac>)
  40409c:	601a      	str	r2, [r3, #0]
  40409e:	2300      	movs	r3, #0
  4040a0:	60e3      	str	r3, [r4, #12]
  4040a2:	2201      	movs	r2, #1
  4040a4:	4b4a      	ldr	r3, [pc, #296]	; (4041d0 <tcp_close_shutdown+0x1b0>)
  4040a6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
  4040a8:	7e23      	ldrb	r3, [r4, #24]
  4040aa:	2b04      	cmp	r3, #4
  4040ac:	d109      	bne.n	4040c2 <tcp_close_shutdown+0xa2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  4040ae:	230a      	movs	r3, #10
  4040b0:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  4040b2:	4b48      	ldr	r3, [pc, #288]	; (4041d4 <tcp_close_shutdown+0x1b4>)
  4040b4:	681a      	ldr	r2, [r3, #0]
  4040b6:	60e2      	str	r2, [r4, #12]
  4040b8:	601c      	str	r4, [r3, #0]
  4040ba:	4b47      	ldr	r3, [pc, #284]	; (4041d8 <tcp_close_shutdown+0x1b8>)
  4040bc:	4798      	blx	r3
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
      }
      return ERR_OK;
  4040be:	2000      	movs	r0, #0
  4040c0:	e07b      	b.n	4041ba <tcp_close_shutdown+0x19a>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
  4040c2:	4621      	mov	r1, r4
  4040c4:	2001      	movs	r0, #1
  4040c6:	4b45      	ldr	r3, [pc, #276]	; (4041dc <tcp_close_shutdown+0x1bc>)
  4040c8:	4798      	blx	r3
      }
      return ERR_OK;
  4040ca:	2000      	movs	r0, #0
  4040cc:	e075      	b.n	4041ba <tcp_close_shutdown+0x19a>
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
    if (pcb->local_port != 0) {
  4040ce:	8b63      	ldrh	r3, [r4, #26]
  4040d0:	b1fb      	cbz	r3, 404112 <tcp_close_shutdown+0xf2>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  4040d2:	4b43      	ldr	r3, [pc, #268]	; (4041e0 <tcp_close_shutdown+0x1c0>)
  4040d4:	681a      	ldr	r2, [r3, #0]
  4040d6:	4294      	cmp	r4, r2
  4040d8:	d102      	bne.n	4040e0 <tcp_close_shutdown+0xc0>
  4040da:	68e2      	ldr	r2, [r4, #12]
  4040dc:	601a      	str	r2, [r3, #0]
  4040de:	e016      	b.n	40410e <tcp_close_shutdown+0xee>
  4040e0:	4b3a      	ldr	r3, [pc, #232]	; (4041cc <tcp_close_shutdown+0x1ac>)
  4040e2:	601a      	str	r2, [r3, #0]
  4040e4:	b19a      	cbz	r2, 40410e <tcp_close_shutdown+0xee>
  4040e6:	68d3      	ldr	r3, [r2, #12]
  4040e8:	429c      	cmp	r4, r3
  4040ea:	d10b      	bne.n	404104 <tcp_close_shutdown+0xe4>
  4040ec:	e005      	b.n	4040fa <tcp_close_shutdown+0xda>
  4040ee:	68da      	ldr	r2, [r3, #12]
  4040f0:	4294      	cmp	r4, r2
  4040f2:	d106      	bne.n	404102 <tcp_close_shutdown+0xe2>
  4040f4:	4a35      	ldr	r2, [pc, #212]	; (4041cc <tcp_close_shutdown+0x1ac>)
  4040f6:	6013      	str	r3, [r2, #0]
  4040f8:	e000      	b.n	4040fc <tcp_close_shutdown+0xdc>
  4040fa:	4613      	mov	r3, r2
  4040fc:	68e2      	ldr	r2, [r4, #12]
  4040fe:	60da      	str	r2, [r3, #12]
  404100:	e005      	b.n	40410e <tcp_close_shutdown+0xee>
  404102:	4613      	mov	r3, r2
  404104:	2b00      	cmp	r3, #0
  404106:	d1f2      	bne.n	4040ee <tcp_close_shutdown+0xce>
  404108:	2200      	movs	r2, #0
  40410a:	4b30      	ldr	r3, [pc, #192]	; (4041cc <tcp_close_shutdown+0x1ac>)
  40410c:	601a      	str	r2, [r3, #0]
  40410e:	2300      	movs	r3, #0
  404110:	60e3      	str	r3, [r4, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  404112:	4621      	mov	r1, r4
  404114:	2001      	movs	r0, #1
  404116:	4b31      	ldr	r3, [pc, #196]	; (4041dc <tcp_close_shutdown+0x1bc>)
  404118:	4798      	blx	r3
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
  40411a:	2300      	movs	r3, #0
    if (pcb->local_port != 0) {
      TCP_RMV(&tcp_bound_pcbs, pcb);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    pcb = NULL;
    break;
  40411c:	e04c      	b.n	4041b8 <tcp_close_shutdown+0x198>
  case LISTEN:
    err = ERR_OK;
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  40411e:	4621      	mov	r1, r4
  404120:	4830      	ldr	r0, [pc, #192]	; (4041e4 <tcp_close_shutdown+0x1c4>)
  404122:	4b31      	ldr	r3, [pc, #196]	; (4041e8 <tcp_close_shutdown+0x1c8>)
  404124:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  404126:	4621      	mov	r1, r4
  404128:	2002      	movs	r0, #2
  40412a:	4b2c      	ldr	r3, [pc, #176]	; (4041dc <tcp_close_shutdown+0x1bc>)
  40412c:	4798      	blx	r3
    }
    memp_free(MEMP_TCP_PCB, pcb);
    pcb = NULL;
    break;
  case LISTEN:
    err = ERR_OK;
  40412e:	2300      	movs	r3, #0
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    pcb = NULL;
    break;
  404130:	e042      	b.n	4041b8 <tcp_close_shutdown+0x198>
  case SYN_SENT:
    err = ERR_OK;
    TCP_PCB_REMOVE_ACTIVE(pcb);
  404132:	4621      	mov	r1, r4
  404134:	4824      	ldr	r0, [pc, #144]	; (4041c8 <tcp_close_shutdown+0x1a8>)
  404136:	4b2c      	ldr	r3, [pc, #176]	; (4041e8 <tcp_close_shutdown+0x1c8>)
  404138:	4798      	blx	r3
  40413a:	2001      	movs	r0, #1
  40413c:	4b24      	ldr	r3, [pc, #144]	; (4041d0 <tcp_close_shutdown+0x1b0>)
  40413e:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
  404140:	4621      	mov	r1, r4
  404142:	4b26      	ldr	r3, [pc, #152]	; (4041dc <tcp_close_shutdown+0x1bc>)
  404144:	4798      	blx	r3
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    pcb = NULL;
    break;
  case SYN_SENT:
    err = ERR_OK;
  404146:	2300      	movs	r3, #0
    TCP_PCB_REMOVE_ACTIVE(pcb);
    memp_free(MEMP_TCP_PCB, pcb);
    pcb = NULL;
    snmp_inc_tcpattemptfails();
    break;
  404148:	e036      	b.n	4041b8 <tcp_close_shutdown+0x198>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  40414a:	4620      	mov	r0, r4
  40414c:	4b27      	ldr	r3, [pc, #156]	; (4041ec <tcp_close_shutdown+0x1cc>)
  40414e:	4798      	blx	r3
    if (err == ERR_OK) {
  404150:	4603      	mov	r3, r0
  404152:	bb88      	cbnz	r0, 4041b8 <tcp_close_shutdown+0x198>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
  404154:	2305      	movs	r3, #5
  404156:	7623      	strb	r3, [r4, #24]
  404158:	e00e      	b.n	404178 <tcp_close_shutdown+0x158>
    }
    break;
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  40415a:	4620      	mov	r0, r4
  40415c:	4b23      	ldr	r3, [pc, #140]	; (4041ec <tcp_close_shutdown+0x1cc>)
  40415e:	4798      	blx	r3
    if (err == ERR_OK) {
  404160:	4603      	mov	r3, r0
  404162:	bb48      	cbnz	r0, 4041b8 <tcp_close_shutdown+0x198>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
  404164:	2305      	movs	r3, #5
  404166:	7623      	strb	r3, [r4, #24]
  404168:	e006      	b.n	404178 <tcp_close_shutdown+0x158>
    }
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  40416a:	4620      	mov	r0, r4
  40416c:	4b1f      	ldr	r3, [pc, #124]	; (4041ec <tcp_close_shutdown+0x1cc>)
  40416e:	4798      	blx	r3
    if (err == ERR_OK) {
  404170:	4603      	mov	r3, r0
  404172:	bb08      	cbnz	r0, 4041b8 <tcp_close_shutdown+0x198>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
  404174:	2309      	movs	r3, #9
  404176:	7623      	strb	r3, [r4, #24]
    err = ERR_OK;
    pcb = NULL;
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
  404178:	b124      	cbz	r4, 404184 <tcp_close_shutdown+0x164>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
  40417a:	4620      	mov	r0, r4
  40417c:	4b1c      	ldr	r3, [pc, #112]	; (4041f0 <tcp_close_shutdown+0x1d0>)
  40417e:	4798      	blx	r3
  404180:	2000      	movs	r0, #0
  404182:	e01a      	b.n	4041ba <tcp_close_shutdown+0x19a>
  404184:	2000      	movs	r0, #0
  404186:	e018      	b.n	4041ba <tcp_close_shutdown+0x19a>
      pcb->state = LAST_ACK;
    }
    break;
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
  404188:	2000      	movs	r0, #0
  40418a:	e016      	b.n	4041ba <tcp_close_shutdown+0x19a>
      }
      return ERR_OK;
    }
  }

  switch (pcb->state) {
  40418c:	7e23      	ldrb	r3, [r4, #24]
  40418e:	2b07      	cmp	r3, #7
  404190:	d8fa      	bhi.n	404188 <tcp_close_shutdown+0x168>
  404192:	a201      	add	r2, pc, #4	; (adr r2, 404198 <tcp_close_shutdown+0x178>)
  404194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404198:	004040cf 	.word	0x004040cf
  40419c:	0040411f 	.word	0x0040411f
  4041a0:	00404133 	.word	0x00404133
  4041a4:	0040414b 	.word	0x0040414b
  4041a8:	0040415b 	.word	0x0040415b
  4041ac:	00404189 	.word	0x00404189
  4041b0:	00404189 	.word	0x00404189
  4041b4:	0040416b 	.word	0x0040416b
      pcb->state = LAST_ACK;
    }
    break;
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
  4041b8:	4618      	mov	r0, r3
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
  }
  return err;
}
  4041ba:	b003      	add	sp, #12
  4041bc:	bd30      	pop	{r4, r5, pc}
  4041be:	bf00      	nop
  4041c0:	00406385 	.word	0x00406385
  4041c4:	00403bd5 	.word	0x00403bd5
  4041c8:	2040489c 	.word	0x2040489c
  4041cc:	204048a8 	.word	0x204048a8
  4041d0:	20404898 	.word	0x20404898
  4041d4:	204048b0 	.word	0x204048b0
  4041d8:	00403075 	.word	0x00403075
  4041dc:	004034cd 	.word	0x004034cd
  4041e0:	204048ac 	.word	0x204048ac
  4041e4:	204048a4 	.word	0x204048a4
  4041e8:	00403fa9 	.word	0x00403fa9
  4041ec:	00406009 	.word	0x00406009
  4041f0:	004060d1 	.word	0x004060d1

004041f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  4041f4:	b508      	push	{r3, lr}
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
  4041f6:	7e03      	ldrb	r3, [r0, #24]
  4041f8:	2b01      	cmp	r3, #1
  4041fa:	d003      	beq.n	404204 <tcp_close+0x10>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  4041fc:	7f83      	ldrb	r3, [r0, #30]
  4041fe:	f043 0310 	orr.w	r3, r3, #16
  404202:	7783      	strb	r3, [r0, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  404204:	2101      	movs	r1, #1
  404206:	4b01      	ldr	r3, [pc, #4]	; (40420c <tcp_close+0x18>)
  404208:	4798      	blx	r3
}
  40420a:	bd08      	pop	{r3, pc}
  40420c:	00404021 	.word	0x00404021

00404210 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  404210:	b510      	push	{r4, lr}
  404212:	4608      	mov	r0, r1
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  404214:	b142      	cbz	r2, 404228 <tcp_recv_null+0x18>
  404216:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
  404218:	8911      	ldrh	r1, [r2, #8]
  40421a:	4b06      	ldr	r3, [pc, #24]	; (404234 <tcp_recv_null+0x24>)
  40421c:	4798      	blx	r3
    pbuf_free(p);
  40421e:	4620      	mov	r0, r4
  404220:	4b05      	ldr	r3, [pc, #20]	; (404238 <tcp_recv_null+0x28>)
  404222:	4798      	blx	r3
  } else if (err == ERR_OK) {
    return tcp_close(pcb);
  }
  return ERR_OK;
  404224:	2000      	movs	r0, #0
  404226:	bd10      	pop	{r4, pc}
{
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
    tcp_recved(pcb, p->tot_len);
    pbuf_free(p);
  } else if (err == ERR_OK) {
  404228:	b913      	cbnz	r3, 404230 <tcp_recv_null+0x20>
    return tcp_close(pcb);
  40422a:	4b04      	ldr	r3, [pc, #16]	; (40423c <tcp_recv_null+0x2c>)
  40422c:	4798      	blx	r3
  40422e:	bd10      	pop	{r4, pc}
  }
  return ERR_OK;
  404230:	2000      	movs	r0, #0
}
  404232:	bd10      	pop	{r4, pc}
  404234:	00403b09 	.word	0x00403b09
  404238:	004036c9 	.word	0x004036c9
  40423c:	004041f5 	.word	0x004041f5

00404240 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  404240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404242:	4604      	mov	r4, r0
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
  404244:	6f85      	ldr	r5, [r0, #120]	; 0x78
  404246:	7b6f      	ldrb	r7, [r5, #13]
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
  pcb->refused_data = NULL;
  404248:	2300      	movs	r3, #0
  40424a:	6783      	str	r3, [r0, #120]	; 0x78
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  40424c:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
  404250:	b126      	cbz	r6, 40425c <tcp_process_refused_data+0x1c>
  404252:	462a      	mov	r2, r5
  404254:	4601      	mov	r1, r0
  404256:	6900      	ldr	r0, [r0, #16]
  404258:	47b0      	blx	r6
  40425a:	e005      	b.n	404268 <tcp_process_refused_data+0x28>
  40425c:	2300      	movs	r3, #0
  40425e:	462a      	mov	r2, r5
  404260:	4601      	mov	r1, r0
  404262:	4618      	mov	r0, r3
  404264:	4e14      	ldr	r6, [pc, #80]	; (4042b8 <tcp_process_refused_data+0x78>)
  404266:	47b0      	blx	r6
  if (err == ERR_OK) {
  404268:	b9c0      	cbnz	r0, 40429c <tcp_process_refused_data+0x5c>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
  40426a:	f017 0f20 	tst.w	r7, #32
  40426e:	d01b      	beq.n	4042a8 <tcp_process_refused_data+0x68>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
  404270:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  404272:	f640 3268 	movw	r2, #2920	; 0xb68
  404276:	4293      	cmp	r3, r2
  404278:	d001      	beq.n	40427e <tcp_process_refused_data+0x3e>
        pcb->rcv_wnd++;
  40427a:	3301      	adds	r3, #1
  40427c:	85a3      	strh	r3, [r4, #44]	; 0x2c
      }
      TCP_EVENT_CLOSED(pcb, err);
  40427e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
  404282:	b19d      	cbz	r5, 4042ac <tcp_process_refused_data+0x6c>
  404284:	2300      	movs	r3, #0
  404286:	461a      	mov	r2, r3
  404288:	4621      	mov	r1, r4
  40428a:	6920      	ldr	r0, [r4, #16]
  40428c:	47a8      	blx	r5
    return ERR_ABRT;
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
  }
  return ERR_OK;
  40428e:	f110 0f0a 	cmn.w	r0, #10
  404292:	bf0c      	ite	eq
  404294:	f06f 0009 	mvneq.w	r0, #9
  404298:	2000      	movne	r0, #0
  40429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TCP_EVENT_CLOSED(pcb, err);
      if (err == ERR_ABRT) {
        return ERR_ABRT;
      }
    }
  } else if (err == ERR_ABRT) {
  40429c:	f110 0f0a 	cmn.w	r0, #10
  4042a0:	d006      	beq.n	4042b0 <tcp_process_refused_data+0x70>
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
  4042a2:	67a5      	str	r5, [r4, #120]	; 0x78
  }
  return ERR_OK;
  4042a4:	2000      	movs	r0, #0
  4042a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042a8:	2000      	movs	r0, #0
  4042aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042ac:	2000      	movs	r0, #0
  4042ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (err == ERR_ABRT) {
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
  4042b0:	f06f 0009 	mvn.w	r0, #9
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
  }
  return ERR_OK;
}
  4042b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042b6:	bf00      	nop
  4042b8:	00404211 	.word	0x00404211

004042bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  4042bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  4042c0:	4a18      	ldr	r2, [pc, #96]	; (404324 <tcp_fasttmr+0x68>)
  4042c2:	7813      	ldrb	r3, [r2, #0]
  4042c4:	3301      	adds	r3, #1
  4042c6:	7013      	strb	r3, [r2, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  4042c8:	4f17      	ldr	r7, [pc, #92]	; (404328 <tcp_fasttmr+0x6c>)

  while(pcb != NULL) {
    if (pcb->last_timer != tcp_timer_ctr) {
  4042ca:	4615      	mov	r5, r2
      pcb->last_timer = tcp_timer_ctr;
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
        tcp_output(pcb);
  4042cc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 404334 <tcp_fasttmr+0x78>

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
  4042d0:	4e16      	ldr	r6, [pc, #88]	; (40432c <tcp_fasttmr+0x70>)
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  4042d2:	683c      	ldr	r4, [r7, #0]

  while(pcb != NULL) {
  4042d4:	e01c      	b.n	404310 <tcp_fasttmr+0x54>
  4042d6:	e7fe      	b.n	4042d6 <tcp_fasttmr+0x1a>
    if (pcb->last_timer != tcp_timer_ctr) {
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  4042d8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  4042dc:	7fa3      	ldrb	r3, [r4, #30]
  4042de:	f013 0f01 	tst.w	r3, #1
  4042e2:	d008      	beq.n	4042f6 <tcp_fasttmr+0x3a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  4042e4:	f043 0302 	orr.w	r3, r3, #2
  4042e8:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
  4042ea:	4620      	mov	r0, r4
  4042ec:	47c0      	blx	r8
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  4042ee:	7fa3      	ldrb	r3, [r4, #30]
  4042f0:	f023 0303 	bic.w	r3, r3, #3
  4042f4:	77a3      	strb	r3, [r4, #30]
      }

      next = pcb->next;
  4042f6:	f8d4 900c 	ldr.w	r9, [r4, #12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  4042fa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  4042fc:	b13b      	cbz	r3, 40430e <tcp_fasttmr+0x52>
        tcp_active_pcbs_changed = 0;
  4042fe:	2300      	movs	r3, #0
  404300:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
  404302:	4620      	mov	r0, r4
  404304:	4b0a      	ldr	r3, [pc, #40]	; (404330 <tcp_fasttmr+0x74>)
  404306:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  404308:	7833      	ldrb	r3, [r6, #0]
  40430a:	2b00      	cmp	r3, #0
  40430c:	d1e1      	bne.n	4042d2 <tcp_fasttmr+0x16>
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  40430e:	464c      	mov	r4, r9
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while(pcb != NULL) {
  404310:	b12c      	cbz	r4, 40431e <tcp_fasttmr+0x62>
    if (pcb->last_timer != tcp_timer_ctr) {
  404312:	782b      	ldrb	r3, [r5, #0]
  404314:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  404318:	429a      	cmp	r2, r3
  40431a:	d1dd      	bne.n	4042d8 <tcp_fasttmr+0x1c>
  40431c:	e7db      	b.n	4042d6 <tcp_fasttmr+0x1a>
  40431e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404322:	bf00      	nop
  404324:	204024c2 	.word	0x204024c2
  404328:	2040489c 	.word	0x2040489c
  40432c:	20404898 	.word	0x20404898
  404330:	00404241 	.word	0x00404241
  404334:	004060d1 	.word	0x004060d1

00404338 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  404338:	b508      	push	{r3, lr}
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  40433a:	4b06      	ldr	r3, [pc, #24]	; (404354 <tcp_tmr+0x1c>)
  40433c:	4798      	blx	r3

  if (++tcp_timer & 1) {
  40433e:	4a06      	ldr	r2, [pc, #24]	; (404358 <tcp_tmr+0x20>)
  404340:	7813      	ldrb	r3, [r2, #0]
  404342:	3301      	adds	r3, #1
  404344:	b2db      	uxtb	r3, r3
  404346:	7013      	strb	r3, [r2, #0]
  404348:	f013 0f01 	tst.w	r3, #1
  40434c:	d001      	beq.n	404352 <tcp_tmr+0x1a>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  40434e:	4b03      	ldr	r3, [pc, #12]	; (40435c <tcp_tmr+0x24>)
  404350:	4798      	blx	r3
  404352:	bd08      	pop	{r3, pc}
  404354:	004042bd 	.word	0x004042bd
  404358:	204024c1 	.word	0x204024c1
  40435c:	00403c1d 	.word	0x00403c1d

00404360 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  404360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404364:	b083      	sub	sp, #12
  404366:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  404368:	7e03      	ldrb	r3, [r0, #24]
  40436a:	2b0a      	cmp	r3, #10
  40436c:	d108      	bne.n	404380 <tcp_abandon+0x20>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  40436e:	4601      	mov	r1, r0
  404370:	481c      	ldr	r0, [pc, #112]	; (4043e4 <tcp_abandon+0x84>)
  404372:	4b1d      	ldr	r3, [pc, #116]	; (4043e8 <tcp_abandon+0x88>)
  404374:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  404376:	4621      	mov	r1, r4
  404378:	2001      	movs	r0, #1
  40437a:	4b1c      	ldr	r3, [pc, #112]	; (4043ec <tcp_abandon+0x8c>)
  40437c:	4798      	blx	r3
  40437e:	e02e      	b.n	4043de <tcp_abandon+0x7e>
  404380:	460e      	mov	r6, r1
  } else {
    seqno = pcb->snd_nxt;
  404382:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
  404386:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
#if LWIP_CALLBACK_API
    errf = pcb->errf;
  40438a:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
  40438e:	6907      	ldr	r7, [r0, #16]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  404390:	4601      	mov	r1, r0
  404392:	4817      	ldr	r0, [pc, #92]	; (4043f0 <tcp_abandon+0x90>)
  404394:	4b14      	ldr	r3, [pc, #80]	; (4043e8 <tcp_abandon+0x88>)
  404396:	4798      	blx	r3
  404398:	2201      	movs	r2, #1
  40439a:	4b16      	ldr	r3, [pc, #88]	; (4043f4 <tcp_abandon+0x94>)
  40439c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
  40439e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  4043a0:	b108      	cbz	r0, 4043a6 <tcp_abandon+0x46>
      tcp_segs_free(pcb->unacked);
  4043a2:	4b15      	ldr	r3, [pc, #84]	; (4043f8 <tcp_abandon+0x98>)
  4043a4:	4798      	blx	r3
    }
    if (pcb->unsent != NULL) {
  4043a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  4043a8:	b108      	cbz	r0, 4043ae <tcp_abandon+0x4e>
      tcp_segs_free(pcb->unsent);
  4043aa:	4b13      	ldr	r3, [pc, #76]	; (4043f8 <tcp_abandon+0x98>)
  4043ac:	4798      	blx	r3
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
  4043ae:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4043b0:	b108      	cbz	r0, 4043b6 <tcp_abandon+0x56>
      tcp_segs_free(pcb->ooseq);
  4043b2:	4b11      	ldr	r3, [pc, #68]	; (4043f8 <tcp_abandon+0x98>)
  4043b4:	4798      	blx	r3
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (reset) {
  4043b6:	b14e      	cbz	r6, 4043cc <tcp_abandon+0x6c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
  4043b8:	8ba3      	ldrh	r3, [r4, #28]
  4043ba:	9301      	str	r3, [sp, #4]
  4043bc:	8b63      	ldrh	r3, [r4, #26]
  4043be:	9300      	str	r3, [sp, #0]
  4043c0:	1d23      	adds	r3, r4, #4
  4043c2:	4622      	mov	r2, r4
  4043c4:	4649      	mov	r1, r9
  4043c6:	4640      	mov	r0, r8
  4043c8:	4e0c      	ldr	r6, [pc, #48]	; (4043fc <tcp_abandon+0x9c>)
  4043ca:	47b0      	blx	r6
    }
    memp_free(MEMP_TCP_PCB, pcb);
  4043cc:	4621      	mov	r1, r4
  4043ce:	2001      	movs	r0, #1
  4043d0:	4b06      	ldr	r3, [pc, #24]	; (4043ec <tcp_abandon+0x8c>)
  4043d2:	4798      	blx	r3
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  4043d4:	b11d      	cbz	r5, 4043de <tcp_abandon+0x7e>
  4043d6:	f06f 0109 	mvn.w	r1, #9
  4043da:	4638      	mov	r0, r7
  4043dc:	47a8      	blx	r5
  }
}
  4043de:	b003      	add	sp, #12
  4043e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4043e4:	204048b0 	.word	0x204048b0
  4043e8:	00403fa9 	.word	0x00403fa9
  4043ec:	004034cd 	.word	0x004034cd
  4043f0:	2040489c 	.word	0x2040489c
  4043f4:	20404898 	.word	0x20404898
  4043f8:	00403b71 	.word	0x00403b71
  4043fc:	00406385 	.word	0x00406385

00404400 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  404400:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
  404402:	2101      	movs	r1, #1
  404404:	4b01      	ldr	r3, [pc, #4]	; (40440c <tcp_abort+0xc>)
  404406:	4798      	blx	r3
  404408:	bd08      	pop	{r3, pc}
  40440a:	bf00      	nop
  40440c:	00404361 	.word	0x00404361

00404410 <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  404410:	4a03      	ldr	r2, [pc, #12]	; (404420 <tcp_next_iss+0x10>)
  404412:	6810      	ldr	r0, [r2, #0]
  404414:	4b03      	ldr	r3, [pc, #12]	; (404424 <tcp_next_iss+0x14>)
  404416:	681b      	ldr	r3, [r3, #0]
  404418:	4418      	add	r0, r3
  40441a:	6010      	str	r0, [r2, #0]
  return iss;
}
  40441c:	4770      	bx	lr
  40441e:	bf00      	nop
  404420:	2040000c 	.word	0x2040000c
  404424:	204048a0 	.word	0x204048a0

00404428 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  404428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40442a:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  40442c:	2001      	movs	r0, #1
  40442e:	4b3a      	ldr	r3, [pc, #232]	; (404518 <tcp_alloc+0xf0>)
  404430:	4798      	blx	r3
  if (pcb == NULL) {
  404432:	4604      	mov	r4, r0
  404434:	2800      	cmp	r0, #0
  404436:	d135      	bne.n	4044a4 <tcp_alloc+0x7c>
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  404438:	4b38      	ldr	r3, [pc, #224]	; (40451c <tcp_alloc+0xf4>)
  40443a:	681b      	ldr	r3, [r3, #0]
  40443c:	b173      	cbz	r3, 40445c <tcp_alloc+0x34>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40443e:	4a38      	ldr	r2, [pc, #224]	; (404520 <tcp_alloc+0xf8>)
  404440:	6814      	ldr	r4, [r2, #0]
  404442:	4601      	mov	r1, r0
  404444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  404446:	1aa2      	subs	r2, r4, r2
  404448:	428a      	cmp	r2, r1
  40444a:	d301      	bcc.n	404450 <tcp_alloc+0x28>
      inactivity = tcp_ticks - pcb->tmr;
  40444c:	4611      	mov	r1, r2

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40444e:	4618      	mov	r0, r3
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  404450:	68db      	ldr	r3, [r3, #12]
  404452:	2b00      	cmp	r3, #0
  404454:	d1f6      	bne.n	404444 <tcp_alloc+0x1c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
  404456:	b108      	cbz	r0, 40445c <tcp_alloc+0x34>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  404458:	4b32      	ldr	r3, [pc, #200]	; (404524 <tcp_alloc+0xfc>)
  40445a:	4798      	blx	r3
  if (pcb == NULL) {
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  40445c:	2001      	movs	r0, #1
  40445e:	4b2e      	ldr	r3, [pc, #184]	; (404518 <tcp_alloc+0xf0>)
  404460:	4798      	blx	r3
    if (pcb == NULL) {
  404462:	4604      	mov	r4, r0
  404464:	b9f0      	cbnz	r0, 4044a4 <tcp_alloc+0x7c>
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  404466:	4b30      	ldr	r3, [pc, #192]	; (404528 <tcp_alloc+0x100>)
  404468:	681b      	ldr	r3, [r3, #0]
  40446a:	b1ab      	cbz	r3, 404498 <tcp_alloc+0x70>
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40446c:	4a2c      	ldr	r2, [pc, #176]	; (404520 <tcp_alloc+0xf8>)
  40446e:	6817      	ldr	r7, [r2, #0]
  404470:	4606      	mov	r6, r0
  404472:	217f      	movs	r1, #127	; 0x7f
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
  404474:	7e5a      	ldrb	r2, [r3, #25]
  404476:	428a      	cmp	r2, r1
  404478:	d808      	bhi.n	40448c <tcp_alloc+0x64>
  40447a:	4295      	cmp	r5, r2
  40447c:	d306      	bcc.n	40448c <tcp_alloc+0x64>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40447e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  404480:	1b3c      	subs	r4, r7, r4
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
  404482:	42b4      	cmp	r4, r6
  404484:	d302      	bcc.n	40448c <tcp_alloc+0x64>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
  404486:	4611      	mov	r1, r2
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
  404488:	4626      	mov	r6, r4
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
  40448a:	4618      	mov	r0, r3
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40448c:	68db      	ldr	r3, [r3, #12]
  40448e:	2b00      	cmp	r3, #0
  404490:	d1f0      	bne.n	404474 <tcp_alloc+0x4c>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
  404492:	b108      	cbz	r0, 404498 <tcp_alloc+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  404494:	4b23      	ldr	r3, [pc, #140]	; (404524 <tcp_alloc+0xfc>)
  404496:	4798      	blx	r3
    if (pcb == NULL) {
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  404498:	2001      	movs	r0, #1
  40449a:	4b1f      	ldr	r3, [pc, #124]	; (404518 <tcp_alloc+0xf0>)
  40449c:	4798      	blx	r3
    if (pcb != NULL) {
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
  40449e:	4604      	mov	r4, r0
  4044a0:	2800      	cmp	r0, #0
  4044a2:	d037      	beq.n	404514 <tcp_alloc+0xec>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  4044a4:	2298      	movs	r2, #152	; 0x98
  4044a6:	2100      	movs	r1, #0
  4044a8:	4620      	mov	r0, r4
  4044aa:	4b20      	ldr	r3, [pc, #128]	; (40452c <tcp_alloc+0x104>)
  4044ac:	4798      	blx	r3
    pcb->prio = prio;
  4044ae:	7665      	strb	r5, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
  4044b0:	f640 3368 	movw	r3, #2920	; 0xb68
  4044b4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->snd_queuelen = 0;
  4044b8:	2500      	movs	r5, #0
  4044ba:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    pcb->rcv_wnd = TCP_WND;
  4044be:	85a3      	strh	r3, [r4, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
  4044c0:	85e3      	strh	r3, [r4, #46]	; 0x2e
    pcb->tos = 0;
  4044c2:	7265      	strb	r5, [r4, #9]
    pcb->ttl = TCP_TTL;
  4044c4:	23ff      	movs	r3, #255	; 0xff
  4044c6:	72a3      	strb	r3, [r4, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  4044c8:	f44f 7306 	mov.w	r3, #536	; 0x218
  4044cc:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  4044ce:	2306      	movs	r3, #6
  4044d0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sa = 0;
  4044d4:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  4044d8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
  4044dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4044e0:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
  4044e2:	2301      	movs	r3, #1
  4044e4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    iss = tcp_next_iss();
  4044e8:	4b11      	ldr	r3, [pc, #68]	; (404530 <tcp_alloc+0x108>)
  4044ea:	4798      	blx	r3
    pcb->snd_wl2 = iss;
  4044ec:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->snd_nxt = iss;
  4044ee:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
  4044f0:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;   
  4044f2:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
  4044f4:	4b0a      	ldr	r3, [pc, #40]	; (404520 <tcp_alloc+0xf8>)
  4044f6:	681b      	ldr	r3, [r3, #0]
  4044f8:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  4044fa:	4b0e      	ldr	r3, [pc, #56]	; (404534 <tcp_alloc+0x10c>)
  4044fc:	781b      	ldrb	r3, [r3, #0]
  4044fe:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb->polltmr = 0;
  404502:	77e5      	strb	r5, [r4, #31]

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  404504:	4b0c      	ldr	r3, [pc, #48]	; (404538 <tcp_alloc+0x110>)
  404506:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  40450a:	4b0c      	ldr	r3, [pc, #48]	; (40453c <tcp_alloc+0x114>)
  40450c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
  404510:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
  }
  return pcb;
}
  404514:	4620      	mov	r0, r4
  404516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404518:	004034ad 	.word	0x004034ad
  40451c:	204048b0 	.word	0x204048b0
  404520:	204048a0 	.word	0x204048a0
  404524:	00404401 	.word	0x00404401
  404528:	2040489c 	.word	0x2040489c
  40452c:	0040805d 	.word	0x0040805d
  404530:	00404411 	.word	0x00404411
  404534:	204024c2 	.word	0x204024c2
  404538:	00404211 	.word	0x00404211
  40453c:	006ddd00 	.word	0x006ddd00

00404540 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  404540:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
  404542:	2040      	movs	r0, #64	; 0x40
  404544:	4b01      	ldr	r3, [pc, #4]	; (40454c <tcp_new+0xc>)
  404546:	4798      	blx	r3
}
  404548:	bd08      	pop	{r3, pc}
  40454a:	bf00      	nop
  40454c:	00404429 	.word	0x00404429

00404550 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
  404550:	b510      	push	{r4, lr}
  404552:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  404554:	4608      	mov	r0, r1
  404556:	4b06      	ldr	r3, [pc, #24]	; (404570 <tcp_eff_send_mss+0x20>)
  404558:	4798      	blx	r3
  if ((outif != NULL) && (outif->mtu != 0)) {
  40455a:	b130      	cbz	r0, 40456a <tcp_eff_send_mss+0x1a>
  40455c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  40455e:	b123      	cbz	r3, 40456a <tcp_eff_send_mss+0x1a>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  404560:	3b28      	subs	r3, #40	; 0x28
  404562:	b29b      	uxth	r3, r3
  404564:	429c      	cmp	r4, r3
  404566:	bf28      	it	cs
  404568:	461c      	movcs	r4, r3
  }
  return sendmss;
}
  40456a:	4620      	mov	r0, r4
  40456c:	bd10      	pop	{r4, pc}
  40456e:	bf00      	nop
  404570:	00402559 	.word	0x00402559

00404574 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  404574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  404576:	7e04      	ldrb	r4, [r0, #24]
  404578:	b104      	cbz	r4, 40457c <tcp_connect+0x8>
  40457a:	e7fe      	b.n	40457a <tcp_connect+0x6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
  40457c:	2900      	cmp	r1, #0
  40457e:	d06b      	beq.n	404658 <tcp_connect+0xe4>
  404580:	461f      	mov	r7, r3
  404582:	460d      	mov	r5, r1
  404584:	4604      	mov	r4, r0
    pcb->remote_ip = *ipaddr;
  404586:	680b      	ldr	r3, [r1, #0]
  404588:	6043      	str	r3, [r0, #4]
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
  40458a:	8382      	strh	r2, [r0, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
  40458c:	b108      	cbz	r0, 404592 <tcp_connect+0x1e>
  40458e:	6803      	ldr	r3, [r0, #0]
  404590:	b933      	cbnz	r3, 4045a0 <tcp_connect+0x2c>
    /* no local IP address set, yet. */
    struct netif *netif = ip_route(&(pcb->remote_ip));
  404592:	1d20      	adds	r0, r4, #4
  404594:	4b35      	ldr	r3, [pc, #212]	; (40466c <tcp_connect+0xf8>)
  404596:	4798      	blx	r3
    if (netif == NULL) {
  404598:	2800      	cmp	r0, #0
  40459a:	d060      	beq.n	40465e <tcp_connect+0xea>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
    }
    /* Use the netif's IP address as local address. */
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  40459c:	6843      	ldr	r3, [r0, #4]
  40459e:	6023      	str	r3, [r4, #0]
  }

  old_local_port = pcb->local_port;
  4045a0:	8b66      	ldrh	r6, [r4, #26]
  if (pcb->local_port == 0) {
  4045a2:	b926      	cbnz	r6, 4045ae <tcp_connect+0x3a>
    pcb->local_port = tcp_new_port();
  4045a4:	4b32      	ldr	r3, [pc, #200]	; (404670 <tcp_connect+0xfc>)
  4045a6:	4798      	blx	r3
  4045a8:	8360      	strh	r0, [r4, #26]
    if (pcb->local_port == 0) {
  4045aa:	2800      	cmp	r0, #0
  4045ac:	d05a      	beq.n	404664 <tcp_connect+0xf0>
        }
      }
    }
  }
#endif /* SO_REUSE */
  iss = tcp_next_iss();
  4045ae:	4b31      	ldr	r3, [pc, #196]	; (404674 <tcp_connect+0x100>)
  4045b0:	4798      	blx	r3
  pcb->rcv_nxt = 0;
  4045b2:	2200      	movs	r2, #0
  4045b4:	62a2      	str	r2, [r4, #40]	; 0x28
  pcb->snd_nxt = iss;
  4045b6:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
  4045b8:	1e43      	subs	r3, r0, #1
  4045ba:	64a3      	str	r3, [r4, #72]	; 0x48
  pcb->snd_lbb = iss - 1;
  4045bc:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->rcv_wnd = TCP_WND;
  4045be:	f640 3368 	movw	r3, #2920	; 0xb68
  4045c2:	85a3      	strh	r3, [r4, #44]	; 0x2c
  pcb->rcv_ann_wnd = TCP_WND;
  4045c4:	85e3      	strh	r3, [r4, #46]	; 0x2e
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  4045c6:	6322      	str	r2, [r4, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  4045c8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  4045cc:	f44f 7006 	mov.w	r0, #536	; 0x218
  4045d0:	86e0      	strh	r0, [r4, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, ipaddr);
  4045d2:	4629      	mov	r1, r5
  4045d4:	4b28      	ldr	r3, [pc, #160]	; (404678 <tcp_connect+0x104>)
  4045d6:	4798      	blx	r3
  4045d8:	86e0      	strh	r0, [r4, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  4045da:	2301      	movs	r3, #1
  4045dc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  pcb->ssthresh = pcb->mss * 10;
  4045e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4045e4:	fa00 f303 	lsl.w	r3, r0, r3
  4045e8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  4045ec:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  4045f0:	2102      	movs	r1, #2
  4045f2:	4620      	mov	r0, r4
  4045f4:	4b21      	ldr	r3, [pc, #132]	; (40467c <tcp_connect+0x108>)
  4045f6:	4798      	blx	r3
  if (ret == ERR_OK) {
  4045f8:	2800      	cmp	r0, #0
  4045fa:	d136      	bne.n	40466a <tcp_connect+0xf6>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  4045fc:	2302      	movs	r3, #2
  4045fe:	7623      	strb	r3, [r4, #24]
    if (old_local_port != 0) {
  404600:	b1e6      	cbz	r6, 40463c <tcp_connect+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  404602:	4b1f      	ldr	r3, [pc, #124]	; (404680 <tcp_connect+0x10c>)
  404604:	681b      	ldr	r3, [r3, #0]
  404606:	429c      	cmp	r4, r3
  404608:	d103      	bne.n	404612 <tcp_connect+0x9e>
  40460a:	68e2      	ldr	r2, [r4, #12]
  40460c:	4b1c      	ldr	r3, [pc, #112]	; (404680 <tcp_connect+0x10c>)
  40460e:	601a      	str	r2, [r3, #0]
  404610:	e014      	b.n	40463c <tcp_connect+0xc8>
  404612:	4a1c      	ldr	r2, [pc, #112]	; (404684 <tcp_connect+0x110>)
  404614:	6013      	str	r3, [r2, #0]
  404616:	b18b      	cbz	r3, 40463c <tcp_connect+0xc8>
  404618:	68da      	ldr	r2, [r3, #12]
  40461a:	4294      	cmp	r4, r2
  40461c:	d10a      	bne.n	404634 <tcp_connect+0xc0>
  40461e:	e005      	b.n	40462c <tcp_connect+0xb8>
  404620:	68d3      	ldr	r3, [r2, #12]
  404622:	429c      	cmp	r4, r3
  404624:	d105      	bne.n	404632 <tcp_connect+0xbe>
  404626:	4b17      	ldr	r3, [pc, #92]	; (404684 <tcp_connect+0x110>)
  404628:	601a      	str	r2, [r3, #0]
  40462a:	4613      	mov	r3, r2
  40462c:	68e2      	ldr	r2, [r4, #12]
  40462e:	60da      	str	r2, [r3, #12]
  404630:	e004      	b.n	40463c <tcp_connect+0xc8>
  404632:	461a      	mov	r2, r3
  404634:	2a00      	cmp	r2, #0
  404636:	d1f3      	bne.n	404620 <tcp_connect+0xac>
  404638:	4b12      	ldr	r3, [pc, #72]	; (404684 <tcp_connect+0x110>)
  40463a:	601a      	str	r2, [r3, #0]
    }
    TCP_REG_ACTIVE(pcb);
  40463c:	4b12      	ldr	r3, [pc, #72]	; (404688 <tcp_connect+0x114>)
  40463e:	681a      	ldr	r2, [r3, #0]
  404640:	60e2      	str	r2, [r4, #12]
  404642:	601c      	str	r4, [r3, #0]
  404644:	4b11      	ldr	r3, [pc, #68]	; (40468c <tcp_connect+0x118>)
  404646:	4798      	blx	r3
  404648:	2201      	movs	r2, #1
  40464a:	4b11      	ldr	r3, [pc, #68]	; (404690 <tcp_connect+0x11c>)
  40464c:	701a      	strb	r2, [r3, #0]
    snmp_inc_tcpactiveopens();

    tcp_output(pcb);
  40464e:	4620      	mov	r0, r4
  404650:	4b10      	ldr	r3, [pc, #64]	; (404694 <tcp_connect+0x120>)
  404652:	4798      	blx	r3
  }
  return ret;
  404654:	2000      	movs	r0, #0
  404656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    pcb->remote_ip = *ipaddr;
  } else {
    return ERR_VAL;
  404658:	f06f 0005 	mvn.w	r0, #5
  40465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* no local IP address set, yet. */
    struct netif *netif = ip_route(&(pcb->remote_ip));
    if (netif == NULL) {
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  40465e:	f06f 0003 	mvn.w	r0, #3
  404662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  old_local_port = pcb->local_port;
  if (pcb->local_port == 0) {
    pcb->local_port = tcp_new_port();
    if (pcb->local_port == 0) {
      return ERR_BUF;
  404664:	f06f 0001 	mvn.w	r0, #1
  404668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    snmp_inc_tcpactiveopens();

    tcp_output(pcb);
  }
  return ret;
}
  40466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40466c:	00402559 	.word	0x00402559
  404670:	00403a6d 	.word	0x00403a6d
  404674:	00404411 	.word	0x00404411
  404678:	00404551 	.word	0x00404551
  40467c:	00405f31 	.word	0x00405f31
  404680:	204048ac 	.word	0x204048ac
  404684:	204048a8 	.word	0x204048a8
  404688:	2040489c 	.word	0x2040489c
  40468c:	00403075 	.word	0x00403075
  404690:	20404898 	.word	0x20404898
  404694:	004060d1 	.word	0x004060d1

00404698 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  404698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40469a:	4605      	mov	r5, r0
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  40469c:	4b21      	ldr	r3, [pc, #132]	; (404724 <tcp_parseopt+0x8c>)
  40469e:	681c      	ldr	r4, [r3, #0]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  4046a0:	89a0      	ldrh	r0, [r4, #12]
  4046a2:	4b21      	ldr	r3, [pc, #132]	; (404728 <tcp_parseopt+0x90>)
  4046a4:	4798      	blx	r3
  4046a6:	f3c0 300f 	ubfx	r0, r0, #12, #16
  4046aa:	2805      	cmp	r0, #5
  4046ac:	d938      	bls.n	404720 <tcp_parseopt+0x88>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
  4046ae:	4b1d      	ldr	r3, [pc, #116]	; (404724 <tcp_parseopt+0x8c>)
  4046b0:	681b      	ldr	r3, [r3, #0]
  4046b2:	8998      	ldrh	r0, [r3, #12]
  4046b4:	4b1c      	ldr	r3, [pc, #112]	; (404728 <tcp_parseopt+0x90>)
  4046b6:	4798      	blx	r3
  4046b8:	0b00      	lsrs	r0, r0, #12
  4046ba:	3805      	subs	r0, #5
  4046bc:	0080      	lsls	r0, r0, #2
  4046be:	b280      	uxth	r0, r0
    for (c = 0; c < max_c; ) {
  4046c0:	b370      	cbz	r0, 404720 <tcp_parseopt+0x88>
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  4046c2:	f104 0214 	add.w	r2, r4, #20
  4046c6:	2300      	movs	r3, #0
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  4046c8:	f240 57b3 	movw	r7, #1459	; 0x5b3
  4046cc:	f240 56b4 	movw	r6, #1460	; 0x5b4

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
      opt = opts[c];
  4046d0:	461c      	mov	r4, r3
      switch (opt) {
  4046d2:	5cd1      	ldrb	r1, [r2, r3]
  4046d4:	2901      	cmp	r1, #1
  4046d6:	d003      	beq.n	4046e0 <tcp_parseopt+0x48>
  4046d8:	b311      	cbz	r1, 404720 <tcp_parseopt+0x88>
  4046da:	2902      	cmp	r1, #2
  4046dc:	d003      	beq.n	4046e6 <tcp_parseopt+0x4e>
  4046de:	e018      	b.n	404712 <tcp_parseopt+0x7a>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
  4046e0:	3301      	adds	r3, #1
  4046e2:	b29b      	uxth	r3, r3
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
  4046e4:	e01a      	b.n	40471c <tcp_parseopt+0x84>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
  4046e6:	18d1      	adds	r1, r2, r3
  4046e8:	7849      	ldrb	r1, [r1, #1]
  4046ea:	2904      	cmp	r1, #4
  4046ec:	d118      	bne.n	404720 <tcp_parseopt+0x88>
  4046ee:	1d19      	adds	r1, r3, #4
  4046f0:	4281      	cmp	r1, r0
  4046f2:	dc15      	bgt.n	404720 <tcp_parseopt+0x88>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
  4046f4:	4414      	add	r4, r2
  4046f6:	f894 e002 	ldrb.w	lr, [r4, #2]
  4046fa:	78e1      	ldrb	r1, [r4, #3]
  4046fc:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  404700:	1e4c      	subs	r4, r1, #1
  404702:	b2a4      	uxth	r4, r4
  404704:	42bc      	cmp	r4, r7
  404706:	bf88      	it	hi
  404708:	4631      	movhi	r1, r6
  40470a:	86e9      	strh	r1, [r5, #54]	; 0x36
        /* Advance to next option */
        c += 0x04;
  40470c:	3304      	adds	r3, #4
  40470e:	b29b      	uxth	r3, r3
        break;
  404710:	e004      	b.n	40471c <tcp_parseopt+0x84>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
  404712:	4414      	add	r4, r2
  404714:	7861      	ldrb	r1, [r4, #1]
  404716:	b119      	cbz	r1, 404720 <tcp_parseopt+0x88>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  404718:	440b      	add	r3, r1
  40471a:	b29b      	uxth	r3, r3
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
  40471c:	4283      	cmp	r3, r0
  40471e:	d3d7      	bcc.n	4046d0 <tcp_parseopt+0x38>
  404720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404722:	bf00      	nop
  404724:	204024c4 	.word	0x204024c4
  404728:	004010a1 	.word	0x004010a1

0040472c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  40472c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404730:	4605      	mov	r5, r0
  404732:	4689      	mov	r9, r1
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  404734:	68c3      	ldr	r3, [r0, #12]
  404736:	8998      	ldrh	r0, [r3, #12]
  404738:	4b2a      	ldr	r3, [pc, #168]	; (4047e4 <tcp_oos_insert_segment+0xb8>)
  40473a:	4798      	blx	r3
  40473c:	f010 0f01 	tst.w	r0, #1
  404740:	d111      	bne.n	404766 <tcp_oos_insert_segment+0x3a>
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  404742:	f1b9 0f00 	cmp.w	r9, #0
  404746:	d04b      	beq.n	4047e0 <tcp_oos_insert_segment+0xb4>
           TCP_SEQ_GEQ((seqno + cseg->len),
  404748:	f8d9 100c 	ldr.w	r1, [r9, #12]
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  40474c:	892b      	ldrh	r3, [r5, #8]
           TCP_SEQ_GEQ((seqno + cseg->len),
  40474e:	684a      	ldr	r2, [r1, #4]
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  404750:	1a9a      	subs	r2, r3, r2
           TCP_SEQ_GEQ((seqno + cseg->len),
  404752:	4b25      	ldr	r3, [pc, #148]	; (4047e8 <tcp_oos_insert_segment+0xbc>)
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  404754:	681b      	ldr	r3, [r3, #0]
  404756:	4413      	add	r3, r2
  404758:	f8b9 2008 	ldrh.w	r2, [r9, #8]
  40475c:	1a9b      	subs	r3, r3, r2
  40475e:	2b00      	cmp	r3, #0
  404760:	da08      	bge.n	404774 <tcp_oos_insert_segment+0x48>
  404762:	464c      	mov	r4, r9
  404764:	e032      	b.n	4047cc <tcp_oos_insert_segment+0xa0>
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  404766:	4648      	mov	r0, r9
  404768:	4b20      	ldr	r3, [pc, #128]	; (4047ec <tcp_oos_insert_segment+0xc0>)
  40476a:	4798      	blx	r3
    next = NULL;
  40476c:	2400      	movs	r4, #0
  40476e:	e02a      	b.n	4047c6 <tcp_oos_insert_segment+0x9a>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
  404770:	46a1      	mov	r9, r4
  404772:	e003      	b.n	40477c <tcp_oos_insert_segment+0x50>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  404774:	4f1b      	ldr	r7, [pc, #108]	; (4047e4 <tcp_oos_insert_segment+0xb8>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  404776:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4047f8 <tcp_oos_insert_segment+0xcc>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
  40477a:	4e1d      	ldr	r6, [pc, #116]	; (4047f0 <tcp_oos_insert_segment+0xc4>)
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  40477c:	8988      	ldrh	r0, [r1, #12]
  40477e:	47b8      	blx	r7
  404780:	f010 0f01 	tst.w	r0, #1
  404784:	d008      	beq.n	404798 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  404786:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  40478a:	f8ba 400c 	ldrh.w	r4, [sl, #12]
  40478e:	2001      	movs	r0, #1
  404790:	47c0      	blx	r8
  404792:	4320      	orrs	r0, r4
  404794:	f8aa 000c 	strh.w	r0, [sl, #12]
      }
      old_seg = next;
      next = next->next;
  404798:	f8d9 4000 	ldr.w	r4, [r9]
      tcp_seg_free(old_seg);
  40479c:	4648      	mov	r0, r9
  40479e:	47b0      	blx	r6
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  4047a0:	b1f4      	cbz	r4, 4047e0 <tcp_oos_insert_segment+0xb4>
           TCP_SEQ_GEQ((seqno + cseg->len),
  4047a2:	68e1      	ldr	r1, [r4, #12]
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  4047a4:	892b      	ldrh	r3, [r5, #8]
           TCP_SEQ_GEQ((seqno + cseg->len),
  4047a6:	684a      	ldr	r2, [r1, #4]
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  4047a8:	1a9b      	subs	r3, r3, r2
           TCP_SEQ_GEQ((seqno + cseg->len),
  4047aa:	4a0f      	ldr	r2, [pc, #60]	; (4047e8 <tcp_oos_insert_segment+0xbc>)
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  4047ac:	6812      	ldr	r2, [r2, #0]
  4047ae:	4413      	add	r3, r2
  4047b0:	8922      	ldrh	r2, [r4, #8]
  4047b2:	1a9b      	subs	r3, r3, r2
  4047b4:	2b00      	cmp	r3, #0
  4047b6:	dadb      	bge.n	404770 <tcp_oos_insert_segment+0x44>
  4047b8:	e008      	b.n	4047cc <tcp_oos_insert_segment+0xa0>
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  4047ba:	1a52      	subs	r2, r2, r1
  4047bc:	b291      	uxth	r1, r2
  4047be:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
  4047c0:	6868      	ldr	r0, [r5, #4]
  4047c2:	4b0c      	ldr	r3, [pc, #48]	; (4047f4 <tcp_oos_insert_segment+0xc8>)
  4047c4:	4798      	blx	r3
    }
  }
  cseg->next = next;
  4047c6:	602c      	str	r4, [r5, #0]
}
  4047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  4047cc:	4b06      	ldr	r3, [pc, #24]	; (4047e8 <tcp_oos_insert_segment+0xbc>)
  4047ce:	6819      	ldr	r1, [r3, #0]
  4047d0:	68e3      	ldr	r3, [r4, #12]
  4047d2:	685a      	ldr	r2, [r3, #4]
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
  4047d4:	892b      	ldrh	r3, [r5, #8]
  4047d6:	1a9b      	subs	r3, r3, r2
  4047d8:	440b      	add	r3, r1
  4047da:	2b00      	cmp	r3, #0
  4047dc:	dced      	bgt.n	4047ba <tcp_oos_insert_segment+0x8e>
  4047de:	e7f2      	b.n	4047c6 <tcp_oos_insert_segment+0x9a>
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
    next = NULL;
  4047e0:	2400      	movs	r4, #0
  4047e2:	e7f0      	b.n	4047c6 <tcp_oos_insert_segment+0x9a>
  4047e4:	004010a1 	.word	0x004010a1
  4047e8:	204024c8 	.word	0x204024c8
  4047ec:	00403b71 	.word	0x00403b71
  4047f0:	00403b4d 	.word	0x00403b4d
  4047f4:	0040387d 	.word	0x0040387d
  4047f8:	00401095 	.word	0x00401095

004047fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  4047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404800:	4604      	mov	r4, r0
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
  404802:	4b98      	ldr	r3, [pc, #608]	; (404a64 <tcp_receive+0x268>)
  404804:	781b      	ldrb	r3, [r3, #0]
  404806:	f013 0f10 	tst.w	r3, #16
  40480a:	f000 8185 	beq.w	404b18 <tcp_receive+0x31c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  40480e:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  404812:	6d80      	ldr	r0, [r0, #88]	; 0x58

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  404814:	6d62      	ldr	r2, [r4, #84]	; 0x54
  404816:	4b94      	ldr	r3, [pc, #592]	; (404a68 <tcp_receive+0x26c>)
  404818:	681b      	ldr	r3, [r3, #0]
  40481a:	1ad1      	subs	r1, r2, r3
  40481c:	2900      	cmp	r1, #0
  40481e:	db0f      	blt.n	404840 <tcp_receive+0x44>
  404820:	429a      	cmp	r2, r3
  404822:	d104      	bne.n	40482e <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  404824:	4a91      	ldr	r2, [pc, #580]	; (404a6c <tcp_receive+0x270>)
  404826:	6812      	ldr	r2, [r2, #0]
  404828:	1a82      	subs	r2, r0, r2
  40482a:	2a00      	cmp	r2, #0
  40482c:	db08      	blt.n	404840 <tcp_receive+0x44>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  40482e:	4a8f      	ldr	r2, [pc, #572]	; (404a6c <tcp_receive+0x270>)
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  404830:	6812      	ldr	r2, [r2, #0]
  404832:	4290      	cmp	r0, r2
  404834:	d126      	bne.n	404884 <tcp_receive+0x88>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  404836:	4a8e      	ldr	r2, [pc, #568]	; (404a70 <tcp_receive+0x274>)
  404838:	6812      	ldr	r2, [r2, #0]
  40483a:	89d2      	ldrh	r2, [r2, #14]
  40483c:	42aa      	cmp	r2, r5
  40483e:	d921      	bls.n	404884 <tcp_receive+0x88>
      pcb->snd_wnd = tcphdr->wnd;
  404840:	4a8b      	ldr	r2, [pc, #556]	; (404a70 <tcp_receive+0x274>)
  404842:	6812      	ldr	r2, [r2, #0]
  404844:	89d1      	ldrh	r1, [r2, #14]
  404846:	b28e      	uxth	r6, r1
  404848:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
  40484c:	89d2      	ldrh	r2, [r2, #14]
  40484e:	b291      	uxth	r1, r2
  404850:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
  404854:	428f      	cmp	r7, r1
        pcb->snd_wnd_max = tcphdr->wnd;
  404856:	bf38      	it	cc
  404858:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  40485c:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  40485e:	4b83      	ldr	r3, [pc, #524]	; (404a6c <tcp_receive+0x270>)
  404860:	681b      	ldr	r3, [r3, #0]
  404862:	65a3      	str	r3, [r4, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  404864:	b946      	cbnz	r6, 404878 <tcp_receive+0x7c>
        if (pcb->persist_backoff == 0) {
  404866:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  40486a:	b95b      	cbnz	r3, 404884 <tcp_receive+0x88>
          /* start persist timer */
          pcb->persist_cnt = 0;
  40486c:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
  404870:	2301      	movs	r3, #1
  404872:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  404876:	e005      	b.n	404884 <tcp_receive+0x88>
        }
      } else if (pcb->persist_backoff > 0) {
  404878:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  40487c:	b113      	cbz	r3, 404884 <tcp_receive+0x88>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  40487e:	2300      	movs	r3, #0
  404880:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  404884:	4b79      	ldr	r3, [pc, #484]	; (404a6c <tcp_receive+0x270>)
  404886:	681a      	ldr	r2, [r3, #0]
  404888:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40488a:	1ad1      	subs	r1, r2, r3
  40488c:	2900      	cmp	r1, #0
  40488e:	dc37      	bgt.n	404900 <tcp_receive+0x104>
      pcb->acked = 0;
  404890:	2100      	movs	r1, #0
  404892:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
      /* Clause 2 */
      if (tcplen == 0) {
  404896:	4977      	ldr	r1, [pc, #476]	; (404a74 <tcp_receive+0x278>)
  404898:	8809      	ldrh	r1, [r1, #0]
  40489a:	2900      	cmp	r1, #0
  40489c:	f040 83ef 	bne.w	40507e <tcp_receive+0x882>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
  4048a0:	4428      	add	r0, r5
  4048a2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
  4048a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
  4048a8:	4429      	add	r1, r5
  4048aa:	4288      	cmp	r0, r1
  4048ac:	f040 83e7 	bne.w	40507e <tcp_receive+0x882>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  4048b0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
  4048b2:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  4048b6:	f040 83e2 	bne.w	40507e <tcp_receive+0x882>
  4048ba:	429a      	cmp	r2, r3
  4048bc:	f040 83df 	bne.w	40507e <tcp_receive+0x882>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  4048c0:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
  4048c4:	1c53      	adds	r3, r2, #1
  4048c6:	b2db      	uxtb	r3, r3
  4048c8:	429a      	cmp	r2, r3
                ++pcb->dupacks;
  4048ca:	bf38      	it	cc
  4048cc:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  4048d0:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  4048d4:	2b03      	cmp	r3, #3
  4048d6:	d909      	bls.n	4048ec <tcp_receive+0xf0>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  4048d8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  4048dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  4048de:	4413      	add	r3, r2
  4048e0:	b29b      	uxth	r3, r3
  4048e2:	429a      	cmp	r2, r3
  4048e4:	d207      	bcs.n	4048f6 <tcp_receive+0xfa>
                  pcb->cwnd += pcb->mss;
  4048e6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  4048ea:	e004      	b.n	4048f6 <tcp_receive+0xfa>
                }
              } else if (pcb->dupacks == 3) {
  4048ec:	2b03      	cmp	r3, #3
  4048ee:	d102      	bne.n	4048f6 <tcp_receive+0xfa>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  4048f0:	4620      	mov	r0, r4
  4048f2:	4b61      	ldr	r3, [pc, #388]	; (404a78 <tcp_receive+0x27c>)
  4048f4:	4798      	blx	r3
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  4048f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4048f8:	2b00      	cmp	r3, #0
  4048fa:	f040 80c7 	bne.w	404a8c <tcp_receive+0x290>
  4048fe:	e0e4      	b.n	404aca <tcp_receive+0x2ce>
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
  404900:	2901      	cmp	r1, #1
  404902:	f100 8088 	bmi.w	404a16 <tcp_receive+0x21a>
  404906:	6d21      	ldr	r1, [r4, #80]	; 0x50
  404908:	1a51      	subs	r1, r2, r1
  40490a:	2900      	cmp	r1, #0
  40490c:	f300 8083 	bgt.w	404a16 <tcp_receive+0x21a>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  404910:	7fa1      	ldrb	r1, [r4, #30]
  404912:	f011 0f04 	tst.w	r1, #4
  404916:	d006      	beq.n	404926 <tcp_receive+0x12a>
        pcb->flags &= ~TF_INFR;
  404918:	f021 0104 	bic.w	r1, r1, #4
  40491c:	77a1      	strb	r1, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
  40491e:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
  404922:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  404926:	2000      	movs	r0, #0
  404928:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  40492c:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
  404930:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
  404934:	eb01 01e5 	add.w	r1, r1, r5, asr #3
  404938:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
  40493c:	1ad3      	subs	r3, r2, r3
  40493e:	b29b      	uxth	r3, r3
  404940:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64

      pcb->snd_buf += pcb->acked;
  404944:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
  404948:	440b      	add	r3, r1
  40494a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  40494e:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
      pcb->lastack = ackno;
  404952:	64a2      	str	r2, [r4, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  404954:	7e23      	ldrb	r3, [r4, #24]
  404956:	2b03      	cmp	r3, #3
  404958:	d918      	bls.n	40498c <tcp_receive+0x190>
        if (pcb->cwnd < pcb->ssthresh) {
  40495a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  40495e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
  404962:	4293      	cmp	r3, r2
  404964:	d907      	bls.n	404976 <tcp_receive+0x17a>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  404966:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  404968:	4413      	add	r3, r2
  40496a:	b29b      	uxth	r3, r3
  40496c:	429a      	cmp	r2, r3
  40496e:	d20d      	bcs.n	40498c <tcp_receive+0x190>
            pcb->cwnd += pcb->mss;
  404970:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  404974:	e00a      	b.n	40498c <tcp_receive+0x190>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  404976:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  404978:	fb03 f303 	mul.w	r3, r3, r3
  40497c:	fb93 f3f2 	sdiv	r3, r3, r2
  404980:	4413      	add	r3, r2
  404982:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
  404984:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
  404986:	bf38      	it	cc
  404988:	f8a4 304c 	strhcc.w	r3, [r4, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  40498c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40498e:	b9fb      	cbnz	r3, 4049d0 <tcp_receive+0x1d4>
  404990:	e038      	b.n	404a04 <tcp_receive+0x208>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  404992:	6f25      	ldr	r5, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
  404994:	682b      	ldr	r3, [r5, #0]
  404996:	6723      	str	r3, [r4, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  404998:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  40499c:	b153      	cbz	r3, 4049b4 <tcp_receive+0x1b8>
  40499e:	68eb      	ldr	r3, [r5, #12]
  4049a0:	8998      	ldrh	r0, [r3, #12]
  4049a2:	47b0      	blx	r6
  4049a4:	f010 0f01 	tst.w	r0, #1
  4049a8:	d004      	beq.n	4049b4 <tcp_receive+0x1b8>
          pcb->acked--;
  4049aa:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  4049ae:	3b01      	subs	r3, #1
  4049b0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
  4049b4:	6868      	ldr	r0, [r5, #4]
  4049b6:	4b31      	ldr	r3, [pc, #196]	; (404a7c <tcp_receive+0x280>)
  4049b8:	4798      	blx	r3
  4049ba:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  4049be:	1a18      	subs	r0, r3, r0
  4049c0:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
  4049c4:	4628      	mov	r0, r5
  4049c6:	4b2e      	ldr	r3, [pc, #184]	; (404a80 <tcp_receive+0x284>)
  4049c8:	4798      	blx	r3
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  4049ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4049cc:	b923      	cbnz	r3, 4049d8 <tcp_receive+0x1dc>
  4049ce:	e019      	b.n	404a04 <tcp_receive+0x208>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  4049d0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 404a88 <tcp_receive+0x28c>
  4049d4:	4e2b      	ldr	r6, [pc, #172]	; (404a84 <tcp_receive+0x288>)
  4049d6:	4f25      	ldr	r7, [pc, #148]	; (404a6c <tcp_receive+0x270>)
  4049d8:	68db      	ldr	r3, [r3, #12]
  4049da:	6858      	ldr	r0, [r3, #4]
  4049dc:	47c0      	blx	r8
  4049de:	4605      	mov	r5, r0
  4049e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4049e2:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  4049e6:	68db      	ldr	r3, [r3, #12]
  4049e8:	8998      	ldrh	r0, [r3, #12]
  4049ea:	47b0      	blx	r6
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  4049ec:	f010 0003 	ands.w	r0, r0, #3
  4049f0:	bf18      	it	ne
  4049f2:	2001      	movne	r0, #1
  4049f4:	4481      	add	r9, r0
  4049f6:	683b      	ldr	r3, [r7, #0]
  4049f8:	1aed      	subs	r5, r5, r3
  4049fa:	444d      	add	r5, r9
  4049fc:	2d00      	cmp	r5, #0
  4049fe:	ddc8      	ble.n	404992 <tcp_receive+0x196>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  404a00:	6f23      	ldr	r3, [r4, #112]	; 0x70
  404a02:	b91b      	cbnz	r3, 404a0c <tcp_receive+0x210>
        pcb->rtime = -1;
  404a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404a08:	86a3      	strh	r3, [r4, #52]	; 0x34
  404a0a:	e001      	b.n	404a10 <tcp_receive+0x214>
      else
        pcb->rtime = 0;
  404a0c:	2300      	movs	r3, #0
  404a0e:	86a3      	strh	r3, [r4, #52]	; 0x34

      pcb->polltmr = 0;
  404a10:	2300      	movs	r3, #0
  404a12:	77e3      	strb	r3, [r4, #31]
  404a14:	e76f      	b.n	4048f6 <tcp_receive+0xfa>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
  404a16:	2300      	movs	r3, #0
  404a18:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  404a1c:	e76b      	b.n	4048f6 <tcp_receive+0xfa>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  404a1e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
  404a20:	682b      	ldr	r3, [r5, #0]
  404a22:	66e3      	str	r3, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  404a24:	b90b      	cbnz	r3, 404a2a <tcp_receive+0x22e>
        pcb->unsent_oversize = 0;
  404a26:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  404a2a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  404a2e:	b153      	cbz	r3, 404a46 <tcp_receive+0x24a>
  404a30:	68eb      	ldr	r3, [r5, #12]
  404a32:	8998      	ldrh	r0, [r3, #12]
  404a34:	47b8      	blx	r7
  404a36:	f010 0f01 	tst.w	r0, #1
  404a3a:	d004      	beq.n	404a46 <tcp_receive+0x24a>
        pcb->acked--;
  404a3c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  404a40:	3b01      	subs	r3, #1
  404a42:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
  404a46:	6868      	ldr	r0, [r5, #4]
  404a48:	4b0c      	ldr	r3, [pc, #48]	; (404a7c <tcp_receive+0x280>)
  404a4a:	4798      	blx	r3
  404a4c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  404a50:	1a18      	subs	r0, r3, r0
  404a52:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
  404a56:	4628      	mov	r0, r5
  404a58:	4b09      	ldr	r3, [pc, #36]	; (404a80 <tcp_receive+0x284>)
  404a5a:	4798      	blx	r3
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  404a5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  404a5e:	b9cb      	cbnz	r3, 404a94 <tcp_receive+0x298>
  404a60:	e033      	b.n	404aca <tcp_receive+0x2ce>
  404a62:	bf00      	nop
  404a64:	204024d4 	.word	0x204024d4
  404a68:	204024c8 	.word	0x204024c8
  404a6c:	204024d0 	.word	0x204024d0
  404a70:	204024c4 	.word	0x204024c4
  404a74:	204024cc 	.word	0x204024cc
  404a78:	004064b9 	.word	0x004064b9
  404a7c:	004038dd 	.word	0x004038dd
  404a80:	00403b4d 	.word	0x00403b4d
  404a84:	004010a1 	.word	0x004010a1
  404a88:	004010c5 	.word	0x004010c5
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  404a8c:	4ea2      	ldr	r6, [pc, #648]	; (404d18 <tcp_receive+0x51c>)
  404a8e:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 404d40 <tcp_receive+0x544>
  404a92:	4fa2      	ldr	r7, [pc, #648]	; (404d1c <tcp_receive+0x520>)
  404a94:	6835      	ldr	r5, [r6, #0]
  404a96:	68db      	ldr	r3, [r3, #12]
  404a98:	6858      	ldr	r0, [r3, #4]
  404a9a:	47c0      	blx	r8
  404a9c:	4682      	mov	sl, r0
  404a9e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  404aa0:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  404aa4:	68db      	ldr	r3, [r3, #12]
  404aa6:	8998      	ldrh	r0, [r3, #12]
  404aa8:	47b8      	blx	r7
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  404aaa:	ebca 0505 	rsb	r5, sl, r5
  404aae:	f010 0003 	ands.w	r0, r0, #3
  404ab2:	bf18      	it	ne
  404ab4:	2001      	movne	r0, #1
  404ab6:	4481      	add	r9, r0
  404ab8:	ebc9 0505 	rsb	r5, r9, r5
  404abc:	2d00      	cmp	r5, #0
  404abe:	db04      	blt.n	404aca <tcp_receive+0x2ce>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  404ac0:	6833      	ldr	r3, [r6, #0]
  404ac2:	6d22      	ldr	r2, [r4, #80]	; 0x50
  404ac4:	1a9b      	subs	r3, r3, r2
  404ac6:	2b00      	cmp	r3, #0
  404ac8:	dda9      	ble.n	404a1e <tcp_receive+0x222>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  404aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404acc:	b323      	cbz	r3, 404b18 <tcp_receive+0x31c>
  404ace:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  404ad0:	4991      	ldr	r1, [pc, #580]	; (404d18 <tcp_receive+0x51c>)
  404ad2:	6809      	ldr	r1, [r1, #0]
  404ad4:	1a52      	subs	r2, r2, r1
  404ad6:	2a00      	cmp	r2, #0
  404ad8:	da1e      	bge.n	404b18 <tcp_receive+0x31c>

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  404ada:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  404ade:	4a90      	ldr	r2, [pc, #576]	; (404d20 <tcp_receive+0x524>)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  404ae0:	6812      	ldr	r2, [r2, #0]
  404ae2:	1ad2      	subs	r2, r2, r3
  404ae4:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
  404ae8:	b292      	uxth	r2, r2
  404aea:	b213      	sxth	r3, r2
      pcb->sa += m;
  404aec:	4411      	add	r1, r2
  404aee:	b209      	sxth	r1, r1
  404af0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (m < 0) {
  404af4:	2b00      	cmp	r3, #0
  404af6:	da01      	bge.n	404afc <tcp_receive+0x300>
        m = -m;
  404af8:	4252      	negs	r2, r2
  404afa:	b213      	sxth	r3, r2
      }
      m = m - (pcb->sv >> 2);
  404afc:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
      pcb->sv += m;
  404b00:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
  404b04:	4413      	add	r3, r2
  404b06:	b29b      	uxth	r3, r3
  404b08:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  404b0c:	eb03 03e1 	add.w	r3, r3, r1, asr #3
  404b10:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
  404b14:	2300      	movs	r3, #0
  404b16:	63a3      	str	r3, [r4, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  404b18:	4b82      	ldr	r3, [pc, #520]	; (404d24 <tcp_receive+0x528>)
  404b1a:	881b      	ldrh	r3, [r3, #0]
  404b1c:	2b00      	cmp	r3, #0
  404b1e:	f000 829c 	beq.w	40505a <tcp_receive+0x85e>
  404b22:	7e22      	ldrb	r2, [r4, #24]
  404b24:	2a06      	cmp	r2, #6
  404b26:	f200 8298 	bhi.w	40505a <tcp_receive+0x85e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
  404b2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  404b2c:	4a7e      	ldr	r2, [pc, #504]	; (404d28 <tcp_receive+0x52c>)
  404b2e:	6812      	ldr	r2, [r2, #0]
  404b30:	1a8d      	subs	r5, r1, r2
  404b32:	2d01      	cmp	r5, #1
  404b34:	d42e      	bmi.n	404b94 <tcp_receive+0x398>
  404b36:	1c48      	adds	r0, r1, #1
  404b38:	1a80      	subs	r0, r0, r2
  404b3a:	1ac3      	subs	r3, r0, r3
  404b3c:	2b00      	cmp	r3, #0
  404b3e:	dc29      	bgt.n	404b94 <tcp_receive+0x398>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
  404b40:	462b      	mov	r3, r5
      p = inseg.p;
  404b42:	4a7a      	ldr	r2, [pc, #488]	; (404d2c <tcp_receive+0x530>)
  404b44:	6850      	ldr	r0, [r2, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
  404b46:	8942      	ldrh	r2, [r0, #10]
  404b48:	4295      	cmp	r5, r2
  404b4a:	dd0f      	ble.n	404b6c <tcp_receive+0x370>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  404b4c:	8901      	ldrh	r1, [r0, #8]
  404b4e:	1b49      	subs	r1, r1, r5
  404b50:	b289      	uxth	r1, r1
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
  404b52:	2500      	movs	r5, #0
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
          off -= p->len;
  404b54:	1a9b      	subs	r3, r3, r2
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  404b56:	8101      	strh	r1, [r0, #8]
          p->len = 0;
  404b58:	8145      	strh	r5, [r0, #10]
          p = p->next;
  404b5a:	6800      	ldr	r0, [r0, #0]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
  404b5c:	8942      	ldrh	r2, [r0, #10]
  404b5e:	429a      	cmp	r2, r3
  404b60:	dbf8      	blt.n	404b54 <tcp_receive+0x358>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
  404b62:	4259      	negs	r1, r3
  404b64:	b209      	sxth	r1, r1
  404b66:	4b72      	ldr	r3, [pc, #456]	; (404d30 <tcp_receive+0x534>)
  404b68:	4798      	blx	r3
  404b6a:	e003      	b.n	404b74 <tcp_receive+0x378>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
  404b6c:	4269      	negs	r1, r5
  404b6e:	b209      	sxth	r1, r1
  404b70:	4b6f      	ldr	r3, [pc, #444]	; (404d30 <tcp_receive+0x534>)
  404b72:	4798      	blx	r3
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  404b74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  404b76:	496d      	ldr	r1, [pc, #436]	; (404d2c <tcp_receive+0x530>)
  404b78:	486b      	ldr	r0, [pc, #428]	; (404d28 <tcp_receive+0x52c>)
  404b7a:	6805      	ldr	r5, [r0, #0]
  404b7c:	890b      	ldrh	r3, [r1, #8]
  404b7e:	442b      	add	r3, r5
  404b80:	1a9b      	subs	r3, r3, r2
  404b82:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  404b84:	68cb      	ldr	r3, [r1, #12]
  404b86:	6002      	str	r2, [r0, #0]
  404b88:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  404b8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  404b8c:	1a53      	subs	r3, r2, r1
  404b8e:	2b00      	cmp	r3, #0
  404b90:	da08      	bge.n	404ba4 <tcp_receive+0x3a8>
  404b92:	e25d      	b.n	405050 <tcp_receive+0x854>
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
  404b94:	1a53      	subs	r3, r2, r1
  404b96:	2b00      	cmp	r3, #0
  404b98:	da04      	bge.n	404ba4 <tcp_receive+0x3a8>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  404b9a:	7fa3      	ldrb	r3, [r4, #30]
  404b9c:	f043 0302 	orr.w	r3, r3, #2
  404ba0:	77a3      	strb	r3, [r4, #30]
  404ba2:	e255      	b.n	405050 <tcp_receive+0x854>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  404ba4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  404ba6:	f1c3 0301 	rsb	r3, r3, #1
  404baa:	4413      	add	r3, r2
  404bac:	1a5b      	subs	r3, r3, r1
  404bae:	2b00      	cmp	r3, #0
  404bb0:	f300 824e 	bgt.w	405050 <tcp_receive+0x854>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  404bb4:	428a      	cmp	r2, r1
  404bb6:	f040 8169 	bne.w	404e8c <tcp_receive+0x690>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  404bba:	4b5c      	ldr	r3, [pc, #368]	; (404d2c <tcp_receive+0x530>)
  404bbc:	891d      	ldrh	r5, [r3, #8]
  404bbe:	68db      	ldr	r3, [r3, #12]
  404bc0:	8998      	ldrh	r0, [r3, #12]
  404bc2:	4b56      	ldr	r3, [pc, #344]	; (404d1c <tcp_receive+0x520>)
  404bc4:	4798      	blx	r3
  404bc6:	f010 0003 	ands.w	r0, r0, #3
  404bca:	bf18      	it	ne
  404bcc:	2001      	movne	r0, #1
  404bce:	182b      	adds	r3, r5, r0
  404bd0:	b29b      	uxth	r3, r3
  404bd2:	4a54      	ldr	r2, [pc, #336]	; (404d24 <tcp_receive+0x528>)
  404bd4:	8013      	strh	r3, [r2, #0]

        if (tcplen > pcb->rcv_wnd) {
  404bd6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  404bd8:	429a      	cmp	r2, r3
  404bda:	d235      	bcs.n	404c48 <tcp_receive+0x44c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  404bdc:	4b53      	ldr	r3, [pc, #332]	; (404d2c <tcp_receive+0x530>)
  404bde:	68db      	ldr	r3, [r3, #12]
  404be0:	8998      	ldrh	r0, [r3, #12]
  404be2:	4b4e      	ldr	r3, [pc, #312]	; (404d1c <tcp_receive+0x520>)
  404be4:	4798      	blx	r3
  404be6:	f010 0f01 	tst.w	r0, #1
  404bea:	d00d      	beq.n	404c08 <tcp_receive+0x40c>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
  404bec:	4b4f      	ldr	r3, [pc, #316]	; (404d2c <tcp_receive+0x530>)
  404bee:	68de      	ldr	r6, [r3, #12]
  404bf0:	89b5      	ldrh	r5, [r6, #12]
  404bf2:	4628      	mov	r0, r5
  404bf4:	4b49      	ldr	r3, [pc, #292]	; (404d1c <tcp_receive+0x520>)
  404bf6:	4798      	blx	r3
  404bf8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  404bfc:	4b4d      	ldr	r3, [pc, #308]	; (404d34 <tcp_receive+0x538>)
  404bfe:	4798      	blx	r3
  404c00:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  404c04:	4328      	orrs	r0, r5
  404c06:	81b0      	strh	r0, [r6, #12]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
  404c08:	4b48      	ldr	r3, [pc, #288]	; (404d2c <tcp_receive+0x530>)
  404c0a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  404c0c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  404c0e:	68db      	ldr	r3, [r3, #12]
  404c10:	8998      	ldrh	r0, [r3, #12]
  404c12:	4b42      	ldr	r3, [pc, #264]	; (404d1c <tcp_receive+0x520>)
  404c14:	4798      	blx	r3
  404c16:	f000 0002 	and.w	r0, r0, #2
  404c1a:	b283      	uxth	r3, r0
  404c1c:	b11b      	cbz	r3, 404c26 <tcp_receive+0x42a>
            inseg.len -= 1;
  404c1e:	4a43      	ldr	r2, [pc, #268]	; (404d2c <tcp_receive+0x530>)
  404c20:	8913      	ldrh	r3, [r2, #8]
  404c22:	3b01      	subs	r3, #1
  404c24:	8113      	strh	r3, [r2, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  404c26:	4d41      	ldr	r5, [pc, #260]	; (404d2c <tcp_receive+0x530>)
  404c28:	8929      	ldrh	r1, [r5, #8]
  404c2a:	6868      	ldr	r0, [r5, #4]
  404c2c:	4b42      	ldr	r3, [pc, #264]	; (404d38 <tcp_receive+0x53c>)
  404c2e:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
  404c30:	892e      	ldrh	r6, [r5, #8]
  404c32:	68eb      	ldr	r3, [r5, #12]
  404c34:	8998      	ldrh	r0, [r3, #12]
  404c36:	4b39      	ldr	r3, [pc, #228]	; (404d1c <tcp_receive+0x520>)
  404c38:	4798      	blx	r3
  404c3a:	f010 0003 	ands.w	r0, r0, #3
  404c3e:	bf18      	it	ne
  404c40:	2001      	movne	r0, #1
  404c42:	4430      	add	r0, r6
  404c44:	4b37      	ldr	r3, [pc, #220]	; (404d24 <tcp_receive+0x528>)
  404c46:	8018      	strh	r0, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  404c48:	6f63      	ldr	r3, [r4, #116]	; 0x74
  404c4a:	2b00      	cmp	r3, #0
  404c4c:	f000 809b 	beq.w	404d86 <tcp_receive+0x58a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  404c50:	4b36      	ldr	r3, [pc, #216]	; (404d2c <tcp_receive+0x530>)
  404c52:	68db      	ldr	r3, [r3, #12]
  404c54:	8998      	ldrh	r0, [r3, #12]
  404c56:	4b31      	ldr	r3, [pc, #196]	; (404d1c <tcp_receive+0x520>)
  404c58:	4798      	blx	r3
  404c5a:	f010 0f01 	tst.w	r0, #1
  404c5e:	d00b      	beq.n	404c78 <tcp_receive+0x47c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  404c60:	6f60      	ldr	r0, [r4, #116]	; 0x74
  404c62:	2800      	cmp	r0, #0
  404c64:	f000 808f 	beq.w	404d86 <tcp_receive+0x58a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
  404c68:	4d34      	ldr	r5, [pc, #208]	; (404d3c <tcp_receive+0x540>)
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
  404c6a:	6803      	ldr	r3, [r0, #0]
  404c6c:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  404c6e:	47a8      	blx	r5
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  404c70:	6f60      	ldr	r0, [r4, #116]	; 0x74
  404c72:	2800      	cmp	r0, #0
  404c74:	d1f9      	bne.n	404c6a <tcp_receive+0x46e>
  404c76:	e086      	b.n	404d86 <tcp_receive+0x58a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
  404c78:	f8d4 9074 	ldr.w	r9, [r4, #116]	; 0x74
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  404c7c:	f1b9 0f00 	cmp.w	r9, #0
  404c80:	f000 8201 	beq.w	405086 <tcp_receive+0x88a>
                   TCP_SEQ_GEQ(seqno + tcplen,
  404c84:	f8d9 100c 	ldr.w	r1, [r9, #12]
  404c88:	4b26      	ldr	r3, [pc, #152]	; (404d24 <tcp_receive+0x528>)
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  404c8a:	881b      	ldrh	r3, [r3, #0]
                   TCP_SEQ_GEQ(seqno + tcplen,
  404c8c:	684a      	ldr	r2, [r1, #4]
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  404c8e:	1a9a      	subs	r2, r3, r2
                   TCP_SEQ_GEQ(seqno + tcplen,
  404c90:	4b25      	ldr	r3, [pc, #148]	; (404d28 <tcp_receive+0x52c>)
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  404c92:	681b      	ldr	r3, [r3, #0]
  404c94:	4413      	add	r3, r2
  404c96:	f8b9 2008 	ldrh.w	r2, [r9, #8]
  404c9a:	1a9b      	subs	r3, r3, r2
  404c9c:	2b00      	cmp	r3, #0
  404c9e:	f2c0 81f4 	blt.w	40508a <tcp_receive+0x88e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  404ca2:	4e1e      	ldr	r6, [pc, #120]	; (404d1c <tcp_receive+0x520>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  404ca4:	4f21      	ldr	r7, [pc, #132]	; (404d2c <tcp_receive+0x530>)
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  404ca6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 404d34 <tcp_receive+0x538>
  404caa:	e000      	b.n	404cae <tcp_receive+0x4b2>
                tcplen = TCP_TCPLEN(&inseg);
              }
              prev = next;
              next = next->next;
  404cac:	46a9      	mov	r9, r5
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  404cae:	8988      	ldrh	r0, [r1, #12]
  404cb0:	47b0      	blx	r6
  404cb2:	f010 0f01 	tst.w	r0, #1
  404cb6:	d01a      	beq.n	404cee <tcp_receive+0x4f2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  404cb8:	68fb      	ldr	r3, [r7, #12]
  404cba:	8998      	ldrh	r0, [r3, #12]
  404cbc:	47b0      	blx	r6
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  404cbe:	f000 0002 	and.w	r0, r0, #2
  404cc2:	b283      	uxth	r3, r0
  404cc4:	b99b      	cbnz	r3, 404cee <tcp_receive+0x4f2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  404cc6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  404cca:	f8ba 500c 	ldrh.w	r5, [sl, #12]
  404cce:	2001      	movs	r0, #1
  404cd0:	47c0      	blx	r8
  404cd2:	4328      	orrs	r0, r5
  404cd4:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
  404cd8:	893d      	ldrh	r5, [r7, #8]
  404cda:	68fb      	ldr	r3, [r7, #12]
  404cdc:	8998      	ldrh	r0, [r3, #12]
  404cde:	47b0      	blx	r6
  404ce0:	f010 0003 	ands.w	r0, r0, #3
  404ce4:	bf18      	it	ne
  404ce6:	2001      	movne	r0, #1
  404ce8:	4428      	add	r0, r5
  404cea:	4b0e      	ldr	r3, [pc, #56]	; (404d24 <tcp_receive+0x528>)
  404cec:	8018      	strh	r0, [r3, #0]
              }
              prev = next;
              next = next->next;
  404cee:	f8d9 5000 	ldr.w	r5, [r9]
              tcp_seg_free(prev);
  404cf2:	4648      	mov	r0, r9
  404cf4:	4b11      	ldr	r3, [pc, #68]	; (404d3c <tcp_receive+0x540>)
  404cf6:	4798      	blx	r3
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  404cf8:	2d00      	cmp	r5, #0
  404cfa:	f000 81c4 	beq.w	405086 <tcp_receive+0x88a>
                   TCP_SEQ_GEQ(seqno + tcplen,
  404cfe:	68e9      	ldr	r1, [r5, #12]
  404d00:	4b08      	ldr	r3, [pc, #32]	; (404d24 <tcp_receive+0x528>)
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  404d02:	881b      	ldrh	r3, [r3, #0]
                   TCP_SEQ_GEQ(seqno + tcplen,
  404d04:	684a      	ldr	r2, [r1, #4]
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  404d06:	1a9a      	subs	r2, r3, r2
                   TCP_SEQ_GEQ(seqno + tcplen,
  404d08:	4b07      	ldr	r3, [pc, #28]	; (404d28 <tcp_receive+0x52c>)
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  404d0a:	681b      	ldr	r3, [r3, #0]
  404d0c:	4413      	add	r3, r2
  404d0e:	892a      	ldrh	r2, [r5, #8]
  404d10:	1a9b      	subs	r3, r3, r2
  404d12:	2b00      	cmp	r3, #0
  404d14:	daca      	bge.n	404cac <tcp_receive+0x4b0>
  404d16:	e1b9      	b.n	40508c <tcp_receive+0x890>
  404d18:	204024d0 	.word	0x204024d0
  404d1c:	004010a1 	.word	0x004010a1
  404d20:	204048a0 	.word	0x204048a0
  404d24:	204024cc 	.word	0x204024cc
  404d28:	204024c8 	.word	0x204024c8
  404d2c:	204024dc 	.word	0x204024dc
  404d30:	00403659 	.word	0x00403659
  404d34:	00401095 	.word	0x00401095
  404d38:	0040387d 	.word	0x0040387d
  404d3c:	00403b4d 	.word	0x00403b4d
  404d40:	004010c5 	.word	0x004010c5
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  404d44:	4b85      	ldr	r3, [pc, #532]	; (404f5c <tcp_receive+0x760>)
  404d46:	1a52      	subs	r2, r2, r1
  404d48:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  404d4a:	68db      	ldr	r3, [r3, #12]
  404d4c:	8998      	ldrh	r0, [r3, #12]
  404d4e:	4b84      	ldr	r3, [pc, #528]	; (404f60 <tcp_receive+0x764>)
  404d50:	4798      	blx	r3
  404d52:	f000 0002 	and.w	r0, r0, #2
  404d56:	b283      	uxth	r3, r0
  404d58:	b11b      	cbz	r3, 404d62 <tcp_receive+0x566>
                inseg.len -= 1;
  404d5a:	4a80      	ldr	r2, [pc, #512]	; (404f5c <tcp_receive+0x760>)
  404d5c:	8913      	ldrh	r3, [r2, #8]
  404d5e:	3b01      	subs	r3, #1
  404d60:	8113      	strh	r3, [r2, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  404d62:	4e7e      	ldr	r6, [pc, #504]	; (404f5c <tcp_receive+0x760>)
  404d64:	8931      	ldrh	r1, [r6, #8]
  404d66:	6870      	ldr	r0, [r6, #4]
  404d68:	4b7e      	ldr	r3, [pc, #504]	; (404f64 <tcp_receive+0x768>)
  404d6a:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
  404d6c:	8937      	ldrh	r7, [r6, #8]
  404d6e:	68f3      	ldr	r3, [r6, #12]
  404d70:	8998      	ldrh	r0, [r3, #12]
  404d72:	4b7b      	ldr	r3, [pc, #492]	; (404f60 <tcp_receive+0x764>)
  404d74:	4798      	blx	r3
  404d76:	f010 0003 	ands.w	r0, r0, #3
  404d7a:	bf18      	it	ne
  404d7c:	2001      	movne	r0, #1
  404d7e:	4438      	add	r0, r7
  404d80:	4b79      	ldr	r3, [pc, #484]	; (404f68 <tcp_receive+0x76c>)
  404d82:	8018      	strh	r0, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  404d84:	6765      	str	r5, [r4, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  404d86:	4b78      	ldr	r3, [pc, #480]	; (404f68 <tcp_receive+0x76c>)
  404d88:	8819      	ldrh	r1, [r3, #0]
  404d8a:	4b78      	ldr	r3, [pc, #480]	; (404f6c <tcp_receive+0x770>)
  404d8c:	681a      	ldr	r2, [r3, #0]
  404d8e:	440a      	add	r2, r1
  404d90:	62a2      	str	r2, [r4, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
  404d92:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  404d94:	1a5b      	subs	r3, r3, r1
  404d96:	85a3      	strh	r3, [r4, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  404d98:	4620      	mov	r0, r4
  404d9a:	4b75      	ldr	r3, [pc, #468]	; (404f70 <tcp_receive+0x774>)
  404d9c:	4798      	blx	r3
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  404d9e:	4b6f      	ldr	r3, [pc, #444]	; (404f5c <tcp_receive+0x760>)
  404da0:	685b      	ldr	r3, [r3, #4]
  404da2:	891a      	ldrh	r2, [r3, #8]
  404da4:	b122      	cbz	r2, 404db0 <tcp_receive+0x5b4>
          recv_data = inseg.p;
  404da6:	4a73      	ldr	r2, [pc, #460]	; (404f74 <tcp_receive+0x778>)
  404da8:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  404daa:	2200      	movs	r2, #0
  404dac:	4b6b      	ldr	r3, [pc, #428]	; (404f5c <tcp_receive+0x760>)
  404dae:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  404db0:	4b6a      	ldr	r3, [pc, #424]	; (404f5c <tcp_receive+0x760>)
  404db2:	68db      	ldr	r3, [r3, #12]
  404db4:	8998      	ldrh	r0, [r3, #12]
  404db6:	4b6a      	ldr	r3, [pc, #424]	; (404f60 <tcp_receive+0x764>)
  404db8:	4798      	blx	r3
  404dba:	f010 0f01 	tst.w	r0, #1
  404dbe:	d004      	beq.n	404dca <tcp_receive+0x5ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  404dc0:	4a6d      	ldr	r2, [pc, #436]	; (404f78 <tcp_receive+0x77c>)
  404dc2:	7813      	ldrb	r3, [r2, #0]
  404dc4:	f043 0320 	orr.w	r3, r3, #32
  404dc8:	7013      	strb	r3, [r2, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  404dca:	6f65      	ldr	r5, [r4, #116]	; 0x74
  404dcc:	2d00      	cmp	r5, #0
  404dce:	d04d      	beq.n	404e6c <tcp_receive+0x670>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  404dd0:	68eb      	ldr	r3, [r5, #12]
  404dd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  404dd4:	6859      	ldr	r1, [r3, #4]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  404dd6:	4291      	cmp	r1, r2
  404dd8:	d148      	bne.n	404e6c <tcp_receive+0x670>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;
  404dda:	f8df 9190 	ldr.w	r9, [pc, #400]	; 404f6c <tcp_receive+0x770>

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  404dde:	4f60      	ldr	r7, [pc, #384]	; (404f60 <tcp_receive+0x764>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);

          tcp_update_rcv_ann_wnd(pcb);
  404de0:	f8df 818c 	ldr.w	r8, [pc, #396]	; 404f70 <tcp_receive+0x774>
           are now in sequence. */
        while (pcb->ooseq != NULL &&
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;
  404de4:	f8c9 2000 	str.w	r2, [r9]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  404de8:	892e      	ldrh	r6, [r5, #8]
  404dea:	8998      	ldrh	r0, [r3, #12]
  404dec:	47b8      	blx	r7
  404dee:	f010 0003 	ands.w	r0, r0, #3
  404df2:	bf18      	it	ne
  404df4:	2001      	movne	r0, #1
  404df6:	4406      	add	r6, r0
  404df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  404dfa:	441e      	add	r6, r3
  404dfc:	62a6      	str	r6, [r4, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  404dfe:	892e      	ldrh	r6, [r5, #8]
  404e00:	68eb      	ldr	r3, [r5, #12]
  404e02:	8998      	ldrh	r0, [r3, #12]
  404e04:	47b8      	blx	r7
  404e06:	f010 0003 	ands.w	r0, r0, #3
  404e0a:	bf18      	it	ne
  404e0c:	2001      	movne	r0, #1
  404e0e:	4406      	add	r6, r0
  404e10:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  404e12:	1b9b      	subs	r3, r3, r6
  404e14:	85a3      	strh	r3, [r4, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  404e16:	4620      	mov	r0, r4
  404e18:	47c0      	blx	r8

          if (cseg->p->tot_len > 0) {
  404e1a:	6869      	ldr	r1, [r5, #4]
  404e1c:	890b      	ldrh	r3, [r1, #8]
  404e1e:	b14b      	cbz	r3, 404e34 <tcp_receive+0x638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
  404e20:	4b54      	ldr	r3, [pc, #336]	; (404f74 <tcp_receive+0x778>)
  404e22:	6818      	ldr	r0, [r3, #0]
  404e24:	b110      	cbz	r0, 404e2c <tcp_receive+0x630>
              pbuf_cat(recv_data, cseg->p);
  404e26:	4b55      	ldr	r3, [pc, #340]	; (404f7c <tcp_receive+0x780>)
  404e28:	4798      	blx	r3
  404e2a:	e001      	b.n	404e30 <tcp_receive+0x634>
            } else {
              recv_data = cseg->p;
  404e2c:	4b51      	ldr	r3, [pc, #324]	; (404f74 <tcp_receive+0x778>)
  404e2e:	6019      	str	r1, [r3, #0]
            }
            cseg->p = NULL;
  404e30:	2300      	movs	r3, #0
  404e32:	606b      	str	r3, [r5, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  404e34:	68eb      	ldr	r3, [r5, #12]
  404e36:	8998      	ldrh	r0, [r3, #12]
  404e38:	47b8      	blx	r7
  404e3a:	f010 0f01 	tst.w	r0, #1
  404e3e:	d009      	beq.n	404e54 <tcp_receive+0x658>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  404e40:	4a4d      	ldr	r2, [pc, #308]	; (404f78 <tcp_receive+0x77c>)
  404e42:	7813      	ldrb	r3, [r2, #0]
  404e44:	f043 0320 	orr.w	r3, r3, #32
  404e48:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  404e4a:	7e23      	ldrb	r3, [r4, #24]
  404e4c:	2b04      	cmp	r3, #4
  404e4e:	d101      	bne.n	404e54 <tcp_receive+0x658>
              pcb->state = CLOSE_WAIT;
  404e50:	2307      	movs	r3, #7
  404e52:	7623      	strb	r3, [r4, #24]
            } 
          }

          pcb->ooseq = cseg->next;
  404e54:	682b      	ldr	r3, [r5, #0]
  404e56:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
  404e58:	4628      	mov	r0, r5
  404e5a:	4b49      	ldr	r3, [pc, #292]	; (404f80 <tcp_receive+0x784>)
  404e5c:	4798      	blx	r3
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  404e5e:	6f65      	ldr	r5, [r4, #116]	; 0x74
  404e60:	b125      	cbz	r5, 404e6c <tcp_receive+0x670>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  404e62:	68eb      	ldr	r3, [r5, #12]
  404e64:	685a      	ldr	r2, [r3, #4]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  404e66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  404e68:	428a      	cmp	r2, r1
  404e6a:	d0bb      	beq.n	404de4 <tcp_receive+0x5e8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  404e6c:	7fa3      	ldrb	r3, [r4, #30]
  404e6e:	f013 0f01 	tst.w	r3, #1
  404e72:	d006      	beq.n	404e82 <tcp_receive+0x686>
  404e74:	f023 0301 	bic.w	r3, r3, #1
  404e78:	f043 0302 	orr.w	r3, r3, #2
  404e7c:	77a3      	strb	r3, [r4, #30]
  404e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e82:	f043 0301 	orr.w	r3, r3, #1
  404e86:	77a3      	strb	r3, [r4, #30]
  404e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  404e8c:	4620      	mov	r0, r4
  404e8e:	4b3d      	ldr	r3, [pc, #244]	; (404f84 <tcp_receive+0x788>)
  404e90:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  404e92:	6f66      	ldr	r6, [r4, #116]	; 0x74
  404e94:	b15e      	cbz	r6, 404eae <tcp_receive+0x6b2>
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
  404e96:	68f1      	ldr	r1, [r6, #12]
  404e98:	684a      	ldr	r2, [r1, #4]
  404e9a:	4b34      	ldr	r3, [pc, #208]	; (404f6c <tcp_receive+0x770>)
  404e9c:	6818      	ldr	r0, [r3, #0]
  404e9e:	4282      	cmp	r2, r0
  404ea0:	d00b      	beq.n	404eba <tcp_receive+0x6be>
  404ea2:	2700      	movs	r7, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  404ea4:	f100 3eff 	add.w	lr, r0, #4294967295
  404ea8:	f100 0c01 	add.w	ip, r0, #1
  404eac:	e01e      	b.n	404eec <tcp_receive+0x6f0>
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
          pcb->ooseq = tcp_seg_copy(&inseg);
  404eae:	482b      	ldr	r0, [pc, #172]	; (404f5c <tcp_receive+0x760>)
  404eb0:	4b35      	ldr	r3, [pc, #212]	; (404f88 <tcp_receive+0x78c>)
  404eb2:	4798      	blx	r3
  404eb4:	6760      	str	r0, [r4, #116]	; 0x74
  404eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
  404eba:	4635      	mov	r5, r6
  404ebc:	2600      	movs	r6, #0
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  404ebe:	4b27      	ldr	r3, [pc, #156]	; (404f5c <tcp_receive+0x760>)
  404ec0:	891a      	ldrh	r2, [r3, #8]
  404ec2:	892b      	ldrh	r3, [r5, #8]
  404ec4:	429a      	cmp	r2, r3
  404ec6:	f240 80f5 	bls.w	4050b4 <tcp_receive+0x8b8>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  404eca:	4824      	ldr	r0, [pc, #144]	; (404f5c <tcp_receive+0x760>)
  404ecc:	4b2e      	ldr	r3, [pc, #184]	; (404f88 <tcp_receive+0x78c>)
  404ece:	4798      	blx	r3
                if (cseg != NULL) {
  404ed0:	4603      	mov	r3, r0
  404ed2:	2800      	cmp	r0, #0
  404ed4:	f000 80ee 	beq.w	4050b4 <tcp_receive+0x8b8>
                  if (prev != NULL) {
  404ed8:	b10e      	cbz	r6, 404ede <tcp_receive+0x6e2>
                    prev->next = cseg;
  404eda:	6030      	str	r0, [r6, #0]
  404edc:	e000      	b.n	404ee0 <tcp_receive+0x6e4>
                  } else {
                    pcb->ooseq = cseg;
  404ede:	6760      	str	r0, [r4, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  404ee0:	4629      	mov	r1, r5
  404ee2:	4618      	mov	r0, r3
  404ee4:	4b29      	ldr	r3, [pc, #164]	; (404f8c <tcp_receive+0x790>)
  404ee6:	4798      	blx	r3
  404ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  404eec:	b977      	cbnz	r7, 404f0c <tcp_receive+0x710>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  404eee:	1a83      	subs	r3, r0, r2
  404ef0:	2b00      	cmp	r3, #0
  404ef2:	da4d      	bge.n	404f90 <tcp_receive+0x794>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  404ef4:	4819      	ldr	r0, [pc, #100]	; (404f5c <tcp_receive+0x760>)
  404ef6:	4b24      	ldr	r3, [pc, #144]	; (404f88 <tcp_receive+0x78c>)
  404ef8:	4798      	blx	r3
                  if (cseg != NULL) {
  404efa:	2800      	cmp	r0, #0
  404efc:	f000 80da 	beq.w	4050b4 <tcp_receive+0x8b8>
                    pcb->ooseq = cseg;
  404f00:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  404f02:	4631      	mov	r1, r6
  404f04:	4b21      	ldr	r3, [pc, #132]	; (404f8c <tcp_receive+0x790>)
  404f06:	4798      	blx	r3
  404f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  404f0c:	68fb      	ldr	r3, [r7, #12]
  404f0e:	685b      	ldr	r3, [r3, #4]
  404f10:	ebc3 030e 	rsb	r3, r3, lr
  404f14:	2b00      	cmp	r3, #0
  404f16:	db3b      	blt.n	404f90 <tcp_receive+0x794>
  404f18:	ebc2 030c 	rsb	r3, r2, ip
  404f1c:	2b00      	cmp	r3, #0
  404f1e:	dc37      	bgt.n	404f90 <tcp_receive+0x794>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  404f20:	480e      	ldr	r0, [pc, #56]	; (404f5c <tcp_receive+0x760>)
  404f22:	4b19      	ldr	r3, [pc, #100]	; (404f88 <tcp_receive+0x78c>)
  404f24:	4798      	blx	r3
                  if (cseg != NULL) {
  404f26:	4604      	mov	r4, r0
  404f28:	2800      	cmp	r0, #0
  404f2a:	f000 80c3 	beq.w	4050b4 <tcp_receive+0x8b8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  404f2e:	68fb      	ldr	r3, [r7, #12]
  404f30:	6859      	ldr	r1, [r3, #4]
  404f32:	4b0e      	ldr	r3, [pc, #56]	; (404f6c <tcp_receive+0x770>)
  404f34:	681b      	ldr	r3, [r3, #0]
  404f36:	893a      	ldrh	r2, [r7, #8]
  404f38:	1ad2      	subs	r2, r2, r3
  404f3a:	440a      	add	r2, r1
  404f3c:	2a00      	cmp	r2, #0
  404f3e:	dd05      	ble.n	404f4c <tcp_receive+0x750>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  404f40:	1a5b      	subs	r3, r3, r1
  404f42:	b299      	uxth	r1, r3
  404f44:	8139      	strh	r1, [r7, #8]
                      pbuf_realloc(prev->p, prev->len);
  404f46:	6878      	ldr	r0, [r7, #4]
  404f48:	4b06      	ldr	r3, [pc, #24]	; (404f64 <tcp_receive+0x768>)
  404f4a:	4798      	blx	r3
                    }
                    prev->next = cseg;
  404f4c:	603c      	str	r4, [r7, #0]
                    tcp_oos_insert_segment(cseg, next);
  404f4e:	4631      	mov	r1, r6
  404f50:	4620      	mov	r0, r4
  404f52:	4b0e      	ldr	r3, [pc, #56]	; (404f8c <tcp_receive+0x790>)
  404f54:	4798      	blx	r3
  404f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f5a:	bf00      	nop
  404f5c:	204024dc 	.word	0x204024dc
  404f60:	004010a1 	.word	0x004010a1
  404f64:	0040387d 	.word	0x0040387d
  404f68:	204024cc 	.word	0x204024cc
  404f6c:	204024c8 	.word	0x204024c8
  404f70:	00403acd 	.word	0x00403acd
  404f74:	204024d8 	.word	0x204024d8
  404f78:	204024d5 	.word	0x204024d5
  404f7c:	00403901 	.word	0x00403901
  404f80:	00403b4d 	.word	0x00403b4d
  404f84:	00406059 	.word	0x00406059
  404f88:	00403b8d 	.word	0x00403b8d
  404f8c:	0040472d 	.word	0x0040472d
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  404f90:	6835      	ldr	r5, [r6, #0]
  404f92:	2d00      	cmp	r5, #0
  404f94:	f040 8086 	bne.w	4050a4 <tcp_receive+0x8a8>
  404f98:	1a82      	subs	r2, r0, r2
  404f9a:	2a00      	cmp	r2, #0
  404f9c:	f340 808a 	ble.w	4050b4 <tcp_receive+0x8b8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  404fa0:	8988      	ldrh	r0, [r1, #12]
  404fa2:	4b45      	ldr	r3, [pc, #276]	; (4050b8 <tcp_receive+0x8bc>)
  404fa4:	4798      	blx	r3
  404fa6:	f010 0f01 	tst.w	r0, #1
  404faa:	f040 8083 	bne.w	4050b4 <tcp_receive+0x8b8>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  404fae:	4843      	ldr	r0, [pc, #268]	; (4050bc <tcp_receive+0x8c0>)
  404fb0:	4b43      	ldr	r3, [pc, #268]	; (4050c0 <tcp_receive+0x8c4>)
  404fb2:	4798      	blx	r3
  404fb4:	6030      	str	r0, [r6, #0]
                if (next->next != NULL) {
  404fb6:	2800      	cmp	r0, #0
  404fb8:	d07c      	beq.n	4050b4 <tcp_receive+0x8b8>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  404fba:	68f3      	ldr	r3, [r6, #12]
  404fbc:	6859      	ldr	r1, [r3, #4]
  404fbe:	4b41      	ldr	r3, [pc, #260]	; (4050c4 <tcp_receive+0x8c8>)
  404fc0:	681b      	ldr	r3, [r3, #0]
  404fc2:	8932      	ldrh	r2, [r6, #8]
  404fc4:	1ad2      	subs	r2, r2, r3
  404fc6:	440a      	add	r2, r1
  404fc8:	2a00      	cmp	r2, #0
  404fca:	dd05      	ble.n	404fd8 <tcp_receive+0x7dc>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  404fcc:	1a5b      	subs	r3, r3, r1
  404fce:	b299      	uxth	r1, r3
  404fd0:	8131      	strh	r1, [r6, #8]
                    pbuf_realloc(next->p, next->len);
  404fd2:	6870      	ldr	r0, [r6, #4]
  404fd4:	4b3c      	ldr	r3, [pc, #240]	; (4050c8 <tcp_receive+0x8cc>)
  404fd6:	4798      	blx	r3
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
  404fd8:	4b3c      	ldr	r3, [pc, #240]	; (4050cc <tcp_receive+0x8d0>)
  404fda:	881a      	ldrh	r2, [r3, #0]
  404fdc:	4b39      	ldr	r3, [pc, #228]	; (4050c4 <tcp_receive+0x8c8>)
  404fde:	681b      	ldr	r3, [r3, #0]
  404fe0:	441a      	add	r2, r3
  404fe2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
  404fe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  404fe6:	440b      	add	r3, r1
  404fe8:	429a      	cmp	r2, r3
  404fea:	d963      	bls.n	4050b4 <tcp_receive+0x8b8>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  404fec:	6833      	ldr	r3, [r6, #0]
  404fee:	68db      	ldr	r3, [r3, #12]
  404ff0:	8998      	ldrh	r0, [r3, #12]
  404ff2:	4b31      	ldr	r3, [pc, #196]	; (4050b8 <tcp_receive+0x8bc>)
  404ff4:	4798      	blx	r3
  404ff6:	f010 0f01 	tst.w	r0, #1
  404ffa:	d00d      	beq.n	405018 <tcp_receive+0x81c>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
  404ffc:	6833      	ldr	r3, [r6, #0]
  404ffe:	68df      	ldr	r7, [r3, #12]
  405000:	89bd      	ldrh	r5, [r7, #12]
  405002:	4628      	mov	r0, r5
  405004:	4b2c      	ldr	r3, [pc, #176]	; (4050b8 <tcp_receive+0x8bc>)
  405006:	4798      	blx	r3
  405008:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  40500c:	4b30      	ldr	r3, [pc, #192]	; (4050d0 <tcp_receive+0x8d4>)
  40500e:	4798      	blx	r3
  405010:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  405014:	4328      	orrs	r0, r5
  405016:	81b8      	strh	r0, [r7, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
  405018:	6832      	ldr	r2, [r6, #0]
  40501a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  40501c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  40501e:	440b      	add	r3, r1
  405020:	4928      	ldr	r1, [pc, #160]	; (4050c4 <tcp_receive+0x8c8>)
  405022:	6809      	ldr	r1, [r1, #0]
  405024:	1a5b      	subs	r3, r3, r1
  405026:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  405028:	6833      	ldr	r3, [r6, #0]
  40502a:	8919      	ldrh	r1, [r3, #8]
  40502c:	6858      	ldr	r0, [r3, #4]
  40502e:	4b26      	ldr	r3, [pc, #152]	; (4050c8 <tcp_receive+0x8cc>)
  405030:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
  405032:	6833      	ldr	r3, [r6, #0]
  405034:	891c      	ldrh	r4, [r3, #8]
  405036:	68db      	ldr	r3, [r3, #12]
  405038:	8998      	ldrh	r0, [r3, #12]
  40503a:	4b1f      	ldr	r3, [pc, #124]	; (4050b8 <tcp_receive+0x8bc>)
  40503c:	4798      	blx	r3
  40503e:	f010 0003 	ands.w	r0, r0, #3
  405042:	bf18      	it	ne
  405044:	2001      	movne	r0, #1
  405046:	4420      	add	r0, r4
  405048:	4b20      	ldr	r3, [pc, #128]	; (4050cc <tcp_receive+0x8d0>)
  40504a:	8018      	strh	r0, [r3, #0]
  40504c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
  405050:	4620      	mov	r0, r4
  405052:	4b20      	ldr	r3, [pc, #128]	; (4050d4 <tcp_receive+0x8d8>)
  405054:	4798      	blx	r3
  405056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
  40505a:	4b1a      	ldr	r3, [pc, #104]	; (4050c4 <tcp_receive+0x8c8>)
  40505c:	681b      	ldr	r3, [r3, #0]
  40505e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  405060:	1a99      	subs	r1, r3, r2
  405062:	2900      	cmp	r1, #0
  405064:	db05      	blt.n	405072 <tcp_receive+0x876>
  405066:	3301      	adds	r3, #1
  405068:	1a9b      	subs	r3, r3, r2
  40506a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  40506c:	1a9b      	subs	r3, r3, r2
  40506e:	2b00      	cmp	r3, #0
  405070:	dd20      	ble.n	4050b4 <tcp_receive+0x8b8>
      tcp_ack_now(pcb);
  405072:	7fa3      	ldrb	r3, [r4, #30]
  405074:	f043 0302 	orr.w	r3, r3, #2
  405078:	77a3      	strb	r3, [r4, #30]
    }
  }
}
  40507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
  40507e:	2300      	movs	r3, #0
  405080:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  405084:	e437      	b.n	4048f6 <tcp_receive+0xfa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
                tcplen = TCP_TCPLEN(&inseg);
              }
              prev = next;
              next = next->next;
  405086:	2500      	movs	r5, #0
  405088:	e67c      	b.n	404d84 <tcp_receive+0x588>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
  40508a:	464d      	mov	r5, r9
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
  40508c:	4b0d      	ldr	r3, [pc, #52]	; (4050c4 <tcp_receive+0x8c8>)
  40508e:	6819      	ldr	r1, [r3, #0]
  405090:	68eb      	ldr	r3, [r5, #12]
  405092:	685a      	ldr	r2, [r3, #4]
  405094:	4b0d      	ldr	r3, [pc, #52]	; (4050cc <tcp_receive+0x8d0>)
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  405096:	881b      	ldrh	r3, [r3, #0]
  405098:	1a9b      	subs	r3, r3, r2
  40509a:	440b      	add	r3, r1
  40509c:	2b00      	cmp	r3, #0
  40509e:	f73f ae51 	bgt.w	404d44 <tcp_receive+0x548>
  4050a2:	e66f      	b.n	404d84 <tcp_receive+0x588>
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
  4050a4:	68e9      	ldr	r1, [r5, #12]
  4050a6:	684a      	ldr	r2, [r1, #4]
  4050a8:	4637      	mov	r7, r6
  4050aa:	4282      	cmp	r2, r0
  4050ac:	f43f af07 	beq.w	404ebe <tcp_receive+0x6c2>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  4050b0:	462e      	mov	r6, r5
  4050b2:	e71b      	b.n	404eec <tcp_receive+0x6f0>
  4050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4050b8:	004010a1 	.word	0x004010a1
  4050bc:	204024dc 	.word	0x204024dc
  4050c0:	00403b8d 	.word	0x00403b8d
  4050c4:	204024c8 	.word	0x204024c8
  4050c8:	0040387d 	.word	0x0040387d
  4050cc:	204024cc 	.word	0x204024cc
  4050d0:	00401095 	.word	0x00401095
  4050d4:	00406059 	.word	0x00406059

004050d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  4050d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4050dc:	b083      	sub	sp, #12
  4050de:	4604      	mov	r4, r0
  4050e0:	460d      	mov	r5, r1
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
  4050e2:	6843      	ldr	r3, [r0, #4]
  4050e4:	7819      	ldrb	r1, [r3, #0]
  4050e6:	f001 010f 	and.w	r1, r1, #15
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  4050ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4050ee:	4a89      	ldr	r2, [pc, #548]	; (405314 <tcp_input+0x23c>)
  4050f0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  4050f2:	0089      	lsls	r1, r1, #2
  4050f4:	4249      	negs	r1, r1
  4050f6:	4b88      	ldr	r3, [pc, #544]	; (405318 <tcp_input+0x240>)
  4050f8:	4798      	blx	r3
  4050fa:	2800      	cmp	r0, #0
  4050fc:	f040 84a8 	bne.w	405a50 <tcp_input+0x978>
  405100:	8923      	ldrh	r3, [r4, #8]
  405102:	2b13      	cmp	r3, #19
  405104:	f240 84a4 	bls.w	405a50 <tcp_input+0x978>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  405108:	4629      	mov	r1, r5
  40510a:	4b84      	ldr	r3, [pc, #528]	; (40531c <tcp_input+0x244>)
  40510c:	6818      	ldr	r0, [r3, #0]
  40510e:	4b84      	ldr	r3, [pc, #528]	; (405320 <tcp_input+0x248>)
  405110:	4798      	blx	r3
  405112:	2800      	cmp	r0, #0
  405114:	f040 849c 	bne.w	405a50 <tcp_input+0x978>
      ip_addr_ismulticast(&current_iphdr_dest)) {
  405118:	4b80      	ldr	r3, [pc, #512]	; (40531c <tcp_input+0x244>)
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  40511a:	681b      	ldr	r3, [r3, #0]
  40511c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  405120:	2be0      	cmp	r3, #224	; 0xe0
  405122:	f000 8495 	beq.w	405a50 <tcp_input+0x978>
    goto dropped;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  405126:	8923      	ldrh	r3, [r4, #8]
  405128:	9300      	str	r3, [sp, #0]
  40512a:	2306      	movs	r3, #6
  40512c:	4a7b      	ldr	r2, [pc, #492]	; (40531c <tcp_input+0x244>)
  40512e:	497d      	ldr	r1, [pc, #500]	; (405324 <tcp_input+0x24c>)
  405130:	4620      	mov	r0, r4
  405132:	4d7d      	ldr	r5, [pc, #500]	; (405328 <tcp_input+0x250>)
  405134:	47a8      	blx	r5
  405136:	2800      	cmp	r0, #0
  405138:	f040 848a 	bne.w	405a50 <tcp_input+0x978>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  40513c:	4b75      	ldr	r3, [pc, #468]	; (405314 <tcp_input+0x23c>)
  40513e:	681b      	ldr	r3, [r3, #0]
  405140:	8998      	ldrh	r0, [r3, #12]
  405142:	4b7a      	ldr	r3, [pc, #488]	; (40532c <tcp_input+0x254>)
  405144:	4798      	blx	r3
  if(pbuf_header(p, -(hdrlen * 4))){
  405146:	0b00      	lsrs	r0, r0, #12
  405148:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
  40514c:	0081      	lsls	r1, r0, #2
  40514e:	b209      	sxth	r1, r1
  405150:	4620      	mov	r0, r4
  405152:	4b71      	ldr	r3, [pc, #452]	; (405318 <tcp_input+0x240>)
  405154:	4798      	blx	r3
  405156:	2800      	cmp	r0, #0
  405158:	f040 847a 	bne.w	405a50 <tcp_input+0x978>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  40515c:	4d6d      	ldr	r5, [pc, #436]	; (405314 <tcp_input+0x23c>)
  40515e:	682f      	ldr	r7, [r5, #0]
  405160:	8838      	ldrh	r0, [r7, #0]
  405162:	4e72      	ldr	r6, [pc, #456]	; (40532c <tcp_input+0x254>)
  405164:	47b0      	blx	r6
  405166:	8038      	strh	r0, [r7, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  405168:	682f      	ldr	r7, [r5, #0]
  40516a:	8878      	ldrh	r0, [r7, #2]
  40516c:	47b0      	blx	r6
  40516e:	8078      	strh	r0, [r7, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  405170:	682f      	ldr	r7, [r5, #0]
  405172:	6878      	ldr	r0, [r7, #4]
  405174:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 40535c <tcp_input+0x284>
  405178:	47c0      	blx	r8
  40517a:	6078      	str	r0, [r7, #4]
  40517c:	4b6c      	ldr	r3, [pc, #432]	; (405330 <tcp_input+0x258>)
  40517e:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  405180:	682f      	ldr	r7, [r5, #0]
  405182:	68b8      	ldr	r0, [r7, #8]
  405184:	47c0      	blx	r8
  405186:	60b8      	str	r0, [r7, #8]
  405188:	4b6a      	ldr	r3, [pc, #424]	; (405334 <tcp_input+0x25c>)
  40518a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
  40518c:	682f      	ldr	r7, [r5, #0]
  40518e:	89f8      	ldrh	r0, [r7, #14]
  405190:	47b0      	blx	r6
  405192:	81f8      	strh	r0, [r7, #14]

  flags = TCPH_FLAGS(tcphdr);
  405194:	682b      	ldr	r3, [r5, #0]
  405196:	8998      	ldrh	r0, [r3, #12]
  405198:	47b0      	blx	r6
  40519a:	fa5f fe80 	uxtb.w	lr, r0
  40519e:	f00e 023f 	and.w	r2, lr, #63	; 0x3f
  4051a2:	4b65      	ldr	r3, [pc, #404]	; (405338 <tcp_input+0x260>)
  4051a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  4051a6:	f01e 0103 	ands.w	r1, lr, #3
  4051aa:	bf18      	it	ne
  4051ac:	2101      	movne	r1, #1
  4051ae:	8923      	ldrh	r3, [r4, #8]
  4051b0:	4419      	add	r1, r3
  4051b2:	b289      	uxth	r1, r1
  4051b4:	4b61      	ldr	r3, [pc, #388]	; (40533c <tcp_input+0x264>)
  4051b6:	8019      	strh	r1, [r3, #0]
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  4051b8:	4b61      	ldr	r3, [pc, #388]	; (405340 <tcp_input+0x268>)
  4051ba:	6818      	ldr	r0, [r3, #0]
  4051bc:	b340      	cbz	r0, 405210 <tcp_input+0x138>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
  4051be:	682f      	ldr	r7, [r5, #0]
  4051c0:	883e      	ldrh	r6, [r7, #0]
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4051c2:	4b58      	ldr	r3, [pc, #352]	; (405324 <tcp_input+0x24c>)
  4051c4:	f8d3 c000 	ldr.w	ip, [r3]
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  4051c8:	4b54      	ldr	r3, [pc, #336]	; (40531c <tcp_input+0x244>)
  4051ca:	f8d3 8000 	ldr.w	r8, [r3]
  4051ce:	4605      	mov	r5, r0
  4051d0:	2200      	movs	r2, #0
  4051d2:	e000      	b.n	4051d6 <tcp_input+0xfe>
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  4051d4:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
  4051d6:	8bab      	ldrh	r3, [r5, #28]
  4051d8:	42b3      	cmp	r3, r6
  4051da:	d111      	bne.n	405200 <tcp_input+0x128>
  4051dc:	f8b5 901a 	ldrh.w	r9, [r5, #26]
  4051e0:	887b      	ldrh	r3, [r7, #2]
  4051e2:	4599      	cmp	r9, r3
  4051e4:	d10c      	bne.n	405200 <tcp_input+0x128>
       pcb->local_port == tcphdr->dest &&
  4051e6:	686b      	ldr	r3, [r5, #4]
  4051e8:	4563      	cmp	r3, ip
  4051ea:	d109      	bne.n	405200 <tcp_input+0x128>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4051ec:	682b      	ldr	r3, [r5, #0]
  4051ee:	4543      	cmp	r3, r8
  4051f0:	d106      	bne.n	405200 <tcp_input+0x128>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
  4051f2:	b152      	cbz	r2, 40520a <tcp_input+0x132>
        prev->next = pcb->next;
  4051f4:	68eb      	ldr	r3, [r5, #12]
  4051f6:	60d3      	str	r3, [r2, #12]
        pcb->next = tcp_active_pcbs;
  4051f8:	60e8      	str	r0, [r5, #12]
        tcp_active_pcbs = pcb;
  4051fa:	4b51      	ldr	r3, [pc, #324]	; (405340 <tcp_input+0x268>)
  4051fc:	601d      	str	r5, [r3, #0]
  4051fe:	e004      	b.n	40520a <tcp_input+0x132>
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  405200:	68eb      	ldr	r3, [r5, #12]
  405202:	462a      	mov	r2, r5
  405204:	2b00      	cmp	r3, #0
  405206:	d1e5      	bne.n	4051d4 <tcp_input+0xfc>
  405208:	e002      	b.n	405210 <tcp_input+0x138>
      break;
    }
    prev = pcb;
  }

  if (pcb == NULL) {
  40520a:	2d00      	cmp	r5, #0
  40520c:	f040 80f8 	bne.w	405400 <tcp_input+0x328>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  405210:	4b4c      	ldr	r3, [pc, #304]	; (405344 <tcp_input+0x26c>)
  405212:	6818      	ldr	r0, [r3, #0]
  405214:	2800      	cmp	r0, #0
  405216:	d041      	beq.n	40529c <tcp_input+0x1c4>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  405218:	4b3e      	ldr	r3, [pc, #248]	; (405314 <tcp_input+0x23c>)
  40521a:	681e      	ldr	r6, [r3, #0]
  40521c:	8832      	ldrh	r2, [r6, #0]
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  40521e:	4b41      	ldr	r3, [pc, #260]	; (405324 <tcp_input+0x24c>)
  405220:	f8d3 c000 	ldr.w	ip, [r3]
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  405224:	4b3d      	ldr	r3, [pc, #244]	; (40531c <tcp_input+0x244>)
  405226:	681f      	ldr	r7, [r3, #0]
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  405228:	8b83      	ldrh	r3, [r0, #28]
  40522a:	4293      	cmp	r3, r2
  40522c:	d133      	bne.n	405296 <tcp_input+0x1be>
         pcb->local_port == tcphdr->dest &&
  40522e:	8b43      	ldrh	r3, [r0, #26]
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  405230:	8875      	ldrh	r5, [r6, #2]
  405232:	429d      	cmp	r5, r3
  405234:	d12f      	bne.n	405296 <tcp_input+0x1be>
         pcb->local_port == tcphdr->dest &&
  405236:	6845      	ldr	r5, [r0, #4]
  405238:	4565      	cmp	r5, ip
  40523a:	d12c      	bne.n	405296 <tcp_input+0x1be>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  40523c:	6805      	ldr	r5, [r0, #0]
  40523e:	42bd      	cmp	r5, r7
  405240:	d129      	bne.n	405296 <tcp_input+0x1be>
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
  405242:	f01e 0f04 	tst.w	lr, #4
  405246:	d122      	bne.n	40528e <tcp_input+0x1b6>
    return ERR_OK;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  405248:	f01e 0f02 	tst.w	lr, #2
  40524c:	d012      	beq.n	405274 <tcp_input+0x19c>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
  40524e:	4d38      	ldr	r5, [pc, #224]	; (405330 <tcp_input+0x258>)
  405250:	682e      	ldr	r6, [r5, #0]
  405252:	6a85      	ldr	r5, [r0, #40]	; 0x28
  405254:	1b75      	subs	r5, r6, r5
  405256:	d413      	bmi.n	405280 <tcp_input+0x1a8>
  405258:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
  40525a:	1bed      	subs	r5, r5, r7
  40525c:	2d00      	cmp	r5, #0
  40525e:	dc0f      	bgt.n	405280 <tcp_input+0x1a8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  405260:	9201      	str	r2, [sp, #4]
  405262:	9300      	str	r3, [sp, #0]
  405264:	4b2f      	ldr	r3, [pc, #188]	; (405324 <tcp_input+0x24c>)
  405266:	4a2d      	ldr	r2, [pc, #180]	; (40531c <tcp_input+0x244>)
  405268:	4431      	add	r1, r6
  40526a:	4832      	ldr	r0, [pc, #200]	; (405334 <tcp_input+0x25c>)
  40526c:	6800      	ldr	r0, [r0, #0]
  40526e:	4d36      	ldr	r5, [pc, #216]	; (405348 <tcp_input+0x270>)
  405270:	47a8      	blx	r5
  405272:	e00c      	b.n	40528e <tcp_input+0x1b6>
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
    }
  } else if (flags & TCP_FIN) {
  405274:	f01e 0f01 	tst.w	lr, #1
  405278:	d002      	beq.n	405280 <tcp_input+0x1a8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  40527a:	4b34      	ldr	r3, [pc, #208]	; (40534c <tcp_input+0x274>)
  40527c:	681b      	ldr	r3, [r3, #0]
  40527e:	6243      	str	r3, [r0, #36]	; 0x24
  }

  if ((tcplen > 0))  {
  405280:	b129      	cbz	r1, 40528e <tcp_input+0x1b6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  405282:	7f83      	ldrb	r3, [r0, #30]
  405284:	f043 0302 	orr.w	r3, r3, #2
  405288:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
  40528a:	4b31      	ldr	r3, [pc, #196]	; (405350 <tcp_input+0x278>)
  40528c:	4798      	blx	r3
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
        pbuf_free(p);
  40528e:	4620      	mov	r0, r4
  405290:	4b30      	ldr	r3, [pc, #192]	; (405354 <tcp_input+0x27c>)
  405292:	4798      	blx	r3
        return;
  405294:	e3fe      	b.n	405a94 <tcp_input+0x9bc>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  405296:	68c0      	ldr	r0, [r0, #12]
  405298:	2800      	cmp	r0, #0
  40529a:	d1c5      	bne.n	405228 <tcp_input+0x150>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  40529c:	4b2e      	ldr	r3, [pc, #184]	; (405358 <tcp_input+0x280>)
  40529e:	f8d3 c000 	ldr.w	ip, [r3]
  4052a2:	f1bc 0f00 	cmp.w	ip, #0
  4052a6:	f000 83b5 	beq.w	405a14 <tcp_input+0x93c>
      if (lpcb->local_port == tcphdr->dest) {
  4052aa:	4b1a      	ldr	r3, [pc, #104]	; (405314 <tcp_input+0x23c>)
  4052ac:	681f      	ldr	r7, [r3, #0]
  4052ae:	8878      	ldrh	r0, [r7, #2]
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  4052b0:	4b1a      	ldr	r3, [pc, #104]	; (40531c <tcp_input+0x244>)
  4052b2:	681e      	ldr	r6, [r3, #0]
  4052b4:	4665      	mov	r5, ip
  4052b6:	2200      	movs	r2, #0
  4052b8:	e000      	b.n	4052bc <tcp_input+0x1e4>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4052ba:	461d      	mov	r5, r3
      if (lpcb->local_port == tcphdr->dest) {
  4052bc:	8b6b      	ldrh	r3, [r5, #26]
  4052be:	4283      	cmp	r3, r0
  4052c0:	d104      	bne.n	4052cc <tcp_input+0x1f4>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  4052c2:	682b      	ldr	r3, [r5, #0]
  4052c4:	42b3      	cmp	r3, r6
  4052c6:	d006      	beq.n	4052d6 <tcp_input+0x1fe>
            ip_addr_isany(&(lpcb->local_ip))) {
  4052c8:	b12d      	cbz	r5, 4052d6 <tcp_input+0x1fe>
  4052ca:	b123      	cbz	r3, 4052d6 <tcp_input+0x1fe>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4052cc:	68eb      	ldr	r3, [r5, #12]
  4052ce:	462a      	mov	r2, r5
  4052d0:	2b00      	cmp	r3, #0
  4052d2:	d1f2      	bne.n	4052ba <tcp_input+0x1e2>
  4052d4:	e39e      	b.n	405a14 <tcp_input+0x93c>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  4052d6:	2d00      	cmp	r5, #0
  4052d8:	f000 839c 	beq.w	405a14 <tcp_input+0x93c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  4052dc:	b12a      	cbz	r2, 4052ea <tcp_input+0x212>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  4052de:	68eb      	ldr	r3, [r5, #12]
  4052e0:	60d3      	str	r3, [r2, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  4052e2:	f8c5 c00c 	str.w	ip, [r5, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  4052e6:	4b1c      	ldr	r3, [pc, #112]	; (405358 <tcp_input+0x280>)
  4052e8:	601d      	str	r5, [r3, #0]
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
  4052ea:	f01e 0f04 	tst.w	lr, #4
  4052ee:	f040 8083 	bne.w	4053f8 <tcp_input+0x320>
    return ERR_OK;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  4052f2:	f01e 0f10 	tst.w	lr, #16
  4052f6:	d033      	beq.n	405360 <tcp_input+0x288>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  4052f8:	4b0d      	ldr	r3, [pc, #52]	; (405330 <tcp_input+0x258>)
  4052fa:	6818      	ldr	r0, [r3, #0]
  4052fc:	883b      	ldrh	r3, [r7, #0]
  4052fe:	9301      	str	r3, [sp, #4]
  405300:	887b      	ldrh	r3, [r7, #2]
  405302:	9300      	str	r3, [sp, #0]
  405304:	4b07      	ldr	r3, [pc, #28]	; (405324 <tcp_input+0x24c>)
  405306:	4a05      	ldr	r2, [pc, #20]	; (40531c <tcp_input+0x244>)
  405308:	4401      	add	r1, r0
  40530a:	480a      	ldr	r0, [pc, #40]	; (405334 <tcp_input+0x25c>)
  40530c:	6800      	ldr	r0, [r0, #0]
  40530e:	4d0e      	ldr	r5, [pc, #56]	; (405348 <tcp_input+0x270>)
  405310:	47a8      	blx	r5
  405312:	e071      	b.n	4053f8 <tcp_input+0x320>
  405314:	204024c4 	.word	0x204024c4
  405318:	00403659 	.word	0x00403659
  40531c:	20403870 	.word	0x20403870
  405320:	004028b5 	.word	0x004028b5
  405324:	20403868 	.word	0x20403868
  405328:	00402461 	.word	0x00402461
  40532c:	004010a1 	.word	0x004010a1
  405330:	204024c8 	.word	0x204024c8
  405334:	204024d0 	.word	0x204024d0
  405338:	204024d4 	.word	0x204024d4
  40533c:	204024cc 	.word	0x204024cc
  405340:	2040489c 	.word	0x2040489c
  405344:	204048b0 	.word	0x204048b0
  405348:	00406385 	.word	0x00406385
  40534c:	204048a0 	.word	0x204048a0
  405350:	004060d1 	.word	0x004060d1
  405354:	004036c9 	.word	0x004036c9
  405358:	204048a4 	.word	0x204048a4
  40535c:	004010c5 	.word	0x004010c5
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
  405360:	f01e 0f02 	tst.w	lr, #2
  405364:	d048      	beq.n	4053f8 <tcp_input+0x320>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
  405366:	7e68      	ldrb	r0, [r5, #25]
  405368:	4b91      	ldr	r3, [pc, #580]	; (4055b0 <tcp_input+0x4d8>)
  40536a:	4798      	blx	r3
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
  40536c:	4606      	mov	r6, r0
  40536e:	2800      	cmp	r0, #0
  405370:	d042      	beq.n	4053f8 <tcp_input+0x320>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
  405372:	4b90      	ldr	r3, [pc, #576]	; (4055b4 <tcp_input+0x4dc>)
  405374:	681b      	ldr	r3, [r3, #0]
  405376:	6003      	str	r3, [r0, #0]
    npcb->local_port = pcb->local_port;
  405378:	8b6b      	ldrh	r3, [r5, #26]
  40537a:	8343      	strh	r3, [r0, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
  40537c:	4b8e      	ldr	r3, [pc, #568]	; (4055b8 <tcp_input+0x4e0>)
  40537e:	681b      	ldr	r3, [r3, #0]
  405380:	6043      	str	r3, [r0, #4]
    npcb->remote_port = tcphdr->src;
  405382:	4b8e      	ldr	r3, [pc, #568]	; (4055bc <tcp_input+0x4e4>)
  405384:	681a      	ldr	r2, [r3, #0]
  405386:	8813      	ldrh	r3, [r2, #0]
  405388:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
  40538a:	2303      	movs	r3, #3
  40538c:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
  40538e:	4b8c      	ldr	r3, [pc, #560]	; (4055c0 <tcp_input+0x4e8>)
  405390:	681b      	ldr	r3, [r3, #0]
  405392:	1c59      	adds	r1, r3, #1
  405394:	6281      	str	r1, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  405396:	6301      	str	r1, [r0, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
  405398:	89d1      	ldrh	r1, [r2, #14]
  40539a:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
  40539e:	89d2      	ldrh	r2, [r2, #14]
  4053a0:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
  4053a4:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  4053a8:	3b01      	subs	r3, #1
  4053aa:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  4053ac:	692b      	ldr	r3, [r5, #16]
  4053ae:	6103      	str	r3, [r0, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
  4053b0:	696b      	ldr	r3, [r5, #20]
  4053b2:	6143      	str	r3, [r0, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  4053b4:	7a2b      	ldrb	r3, [r5, #8]
  4053b6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  4053ba:	7203      	strb	r3, [r0, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
  4053bc:	4b81      	ldr	r3, [pc, #516]	; (4055c4 <tcp_input+0x4ec>)
  4053be:	681a      	ldr	r2, [r3, #0]
  4053c0:	60c2      	str	r2, [r0, #12]
  4053c2:	6018      	str	r0, [r3, #0]
  4053c4:	4b80      	ldr	r3, [pc, #512]	; (4055c8 <tcp_input+0x4f0>)
  4053c6:	4798      	blx	r3
  4053c8:	2201      	movs	r2, #1
  4053ca:	4b80      	ldr	r3, [pc, #512]	; (4055cc <tcp_input+0x4f4>)
  4053cc:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
  4053ce:	4630      	mov	r0, r6
  4053d0:	4b7f      	ldr	r3, [pc, #508]	; (4055d0 <tcp_input+0x4f8>)
  4053d2:	4798      	blx	r3
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
  4053d4:	1d31      	adds	r1, r6, #4
  4053d6:	8ef0      	ldrh	r0, [r6, #54]	; 0x36
  4053d8:	4b7e      	ldr	r3, [pc, #504]	; (4055d4 <tcp_input+0x4fc>)
  4053da:	4798      	blx	r3
  4053dc:	86f0      	strh	r0, [r6, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  4053de:	2112      	movs	r1, #18
  4053e0:	4630      	mov	r0, r6
  4053e2:	4b7d      	ldr	r3, [pc, #500]	; (4055d8 <tcp_input+0x500>)
  4053e4:	4798      	blx	r3
    if (rc != ERR_OK) {
  4053e6:	b120      	cbz	r0, 4053f2 <tcp_input+0x31a>
      tcp_abandon(npcb, 0);
  4053e8:	2100      	movs	r1, #0
  4053ea:	4630      	mov	r0, r6
  4053ec:	4b7b      	ldr	r3, [pc, #492]	; (4055dc <tcp_input+0x504>)
  4053ee:	4798      	blx	r3
  4053f0:	e002      	b.n	4053f8 <tcp_input+0x320>
      return rc;
    }
    return tcp_output(npcb);
  4053f2:	4630      	mov	r0, r6
  4053f4:	4b7a      	ldr	r3, [pc, #488]	; (4055e0 <tcp_input+0x508>)
  4053f6:	4798      	blx	r3
        tcp_listen_pcbs.listen_pcbs = lpcb;
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
      pbuf_free(p);
  4053f8:	4620      	mov	r0, r4
  4053fa:	4b7a      	ldr	r3, [pc, #488]	; (4055e4 <tcp_input+0x50c>)
  4053fc:	4798      	blx	r3
      return;
  4053fe:	e349      	b.n	405a94 <tcp_input+0x9bc>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  405400:	4b79      	ldr	r3, [pc, #484]	; (4055e8 <tcp_input+0x510>)
  405402:	2200      	movs	r2, #0
  405404:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
  405406:	8921      	ldrh	r1, [r4, #8]
  405408:	8119      	strh	r1, [r3, #8]
    inseg.p = p;
  40540a:	605c      	str	r4, [r3, #4]
    inseg.tcphdr = tcphdr;
  40540c:	60df      	str	r7, [r3, #12]

    recv_data = NULL;
  40540e:	4b77      	ldr	r3, [pc, #476]	; (4055ec <tcp_input+0x514>)
  405410:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
  405412:	4b77      	ldr	r3, [pc, #476]	; (4055f0 <tcp_input+0x518>)
  405414:	701a      	strb	r2, [r3, #0]

    if (flags & TCP_PSH) {
  405416:	f01e 0f08 	tst.w	lr, #8
  40541a:	d003      	beq.n	405424 <tcp_input+0x34c>
      p->flags |= PBUF_FLAG_PUSH;
  40541c:	7b63      	ldrb	r3, [r4, #13]
  40541e:	f043 0301 	orr.w	r3, r3, #1
  405422:	7363      	strb	r3, [r4, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  405424:	6fab      	ldr	r3, [r5, #120]	; 0x78
  405426:	b16b      	cbz	r3, 405444 <tcp_input+0x36c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  405428:	4628      	mov	r0, r5
  40542a:	4b72      	ldr	r3, [pc, #456]	; (4055f4 <tcp_input+0x51c>)
  40542c:	4798      	blx	r3
  40542e:	f110 0f0a 	cmn.w	r0, #10
  405432:	f000 82e0 	beq.w	4059f6 <tcp_input+0x91e>
  405436:	6fab      	ldr	r3, [r5, #120]	; 0x78
  405438:	b123      	cbz	r3, 405444 <tcp_input+0x36c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  40543a:	4b6f      	ldr	r3, [pc, #444]	; (4055f8 <tcp_input+0x520>)
  40543c:	881b      	ldrh	r3, [r3, #0]
  40543e:	2b00      	cmp	r3, #0
  405440:	f040 82d9 	bne.w	4059f6 <tcp_input+0x91e>
        TCP_STATS_INC(tcp.drop);
        snmp_inc_tcpinerrs();
        goto aborted;
      }
    }
    tcp_input_pcb = pcb;
  405444:	4b6d      	ldr	r3, [pc, #436]	; (4055fc <tcp_input+0x524>)
  405446:	601d      	str	r5, [r3, #0]
  err_t err;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  405448:	4b6d      	ldr	r3, [pc, #436]	; (405600 <tcp_input+0x528>)
  40544a:	781b      	ldrb	r3, [r3, #0]
  40544c:	f013 0f04 	tst.w	r3, #4
  405450:	d023      	beq.n	40549a <tcp_input+0x3c2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  405452:	7e2b      	ldrb	r3, [r5, #24]
  405454:	2b02      	cmp	r3, #2
  405456:	d107      	bne.n	405468 <tcp_input+0x390>
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  405458:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  40545a:	4a6a      	ldr	r2, [pc, #424]	; (405604 <tcp_input+0x52c>)
  40545c:	6812      	ldr	r2, [r2, #0]
  40545e:	4293      	cmp	r3, r2
  405460:	bf14      	ite	ne
  405462:	2300      	movne	r3, #0
  405464:	2301      	moveq	r3, #1
  405466:	e00b      	b.n	405480 <tcp_input+0x3a8>
    if (pcb->state == SYN_SENT) {
      if (ackno == pcb->snd_nxt) {
        acceptable = 1;
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  405468:	4b55      	ldr	r3, [pc, #340]	; (4055c0 <tcp_input+0x4e8>)
  40546a:	681b      	ldr	r3, [r3, #0]
  40546c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  40546e:	1a9b      	subs	r3, r3, r2
  405470:	f100 8244 	bmi.w	4058fc <tcp_input+0x824>
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  405474:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  405476:	1a9b      	subs	r3, r3, r2
  405478:	2b00      	cmp	r3, #0
  40547a:	bfcc      	ite	gt
  40547c:	2300      	movgt	r3, #0
  40547e:	2301      	movle	r3, #1
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
      }
    }

    if (acceptable) {
  405480:	2b00      	cmp	r3, #0
  405482:	f000 823b 	beq.w	4058fc <tcp_input+0x824>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
  405486:	4a5a      	ldr	r2, [pc, #360]	; (4055f0 <tcp_input+0x518>)
  405488:	7813      	ldrb	r3, [r2, #0]
  40548a:	f043 0308 	orr.w	r3, r3, #8
  40548e:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
  405490:	7fab      	ldrb	r3, [r5, #30]
  405492:	f023 0301 	bic.w	r3, r3, #1
  405496:	77ab      	strb	r3, [r5, #30]
  405498:	e230      	b.n	4058fc <tcp_input+0x824>
       seqno, pcb->rcv_nxt));
      return ERR_OK;
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
  40549a:	f013 0f02 	tst.w	r3, #2
  40549e:	d009      	beq.n	4054b4 <tcp_input+0x3dc>
  4054a0:	7e2b      	ldrb	r3, [r5, #24]
  4054a2:	3b02      	subs	r3, #2
  4054a4:	b2db      	uxtb	r3, r3
  4054a6:	2b01      	cmp	r3, #1
  4054a8:	d904      	bls.n	4054b4 <tcp_input+0x3dc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  4054aa:	7fab      	ldrb	r3, [r5, #30]
  4054ac:	f043 0302 	orr.w	r3, r3, #2
  4054b0:	77ab      	strb	r3, [r5, #30]
  4054b2:	e223      	b.n	4058fc <tcp_input+0x824>
    return ERR_OK;
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
  4054b4:	7fab      	ldrb	r3, [r5, #30]
  4054b6:	f013 0f10 	tst.w	r3, #16
  4054ba:	f040 82cd 	bne.w	405a58 <tcp_input+0x980>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  4054be:	4b52      	ldr	r3, [pc, #328]	; (405608 <tcp_input+0x530>)
  4054c0:	681b      	ldr	r3, [r3, #0]
  4054c2:	626b      	str	r3, [r5, #36]	; 0x24
  4054c4:	e2c8      	b.n	405a58 <tcp_input+0x980>
  switch (pcb->state) {
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  4054c6:	4b4e      	ldr	r3, [pc, #312]	; (405600 <tcp_input+0x528>)
  4054c8:	781b      	ldrb	r3, [r3, #0]
  4054ca:	f003 0312 	and.w	r3, r3, #18
  4054ce:	2b12      	cmp	r3, #18
  4054d0:	d156      	bne.n	405580 <tcp_input+0x4a8>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
  4054d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  4054d4:	68db      	ldr	r3, [r3, #12]
  4054d6:	6858      	ldr	r0, [r3, #4]
  4054d8:	4b4c      	ldr	r3, [pc, #304]	; (40560c <tcp_input+0x534>)
  4054da:	4798      	blx	r3
  4054dc:	3001      	adds	r0, #1
  4054de:	4b49      	ldr	r3, [pc, #292]	; (405604 <tcp_input+0x52c>)
  4054e0:	681b      	ldr	r3, [r3, #0]
  4054e2:	4298      	cmp	r0, r3
  4054e4:	d14c      	bne.n	405580 <tcp_input+0x4a8>
      pcb->snd_buf++;
  4054e6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  4054ea:	3301      	adds	r3, #1
  4054ec:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
  4054f0:	4b33      	ldr	r3, [pc, #204]	; (4055c0 <tcp_input+0x4e8>)
  4054f2:	681b      	ldr	r3, [r3, #0]
  4054f4:	1c5a      	adds	r2, r3, #1
  4054f6:	62aa      	str	r2, [r5, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  4054f8:	632a      	str	r2, [r5, #48]	; 0x30
      pcb->lastack = ackno;
  4054fa:	64a8      	str	r0, [r5, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  4054fc:	4a2f      	ldr	r2, [pc, #188]	; (4055bc <tcp_input+0x4e4>)
  4054fe:	6812      	ldr	r2, [r2, #0]
  405500:	89d1      	ldrh	r1, [r2, #14]
  405502:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
  405506:	89d2      	ldrh	r2, [r2, #14]
  405508:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  40550c:	3b01      	subs	r3, #1
  40550e:	656b      	str	r3, [r5, #84]	; 0x54
      pcb->state = ESTABLISHED;
  405510:	2304      	movs	r3, #4
  405512:	762b      	strb	r3, [r5, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
  405514:	18e9      	adds	r1, r5, r3
  405516:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
  405518:	4b2e      	ldr	r3, [pc, #184]	; (4055d4 <tcp_input+0x4fc>)
  40551a:	4798      	blx	r3
  40551c:	86e8      	strh	r0, [r5, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
  40551e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  405522:	005b      	lsls	r3, r3, #1
  405524:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  405528:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
  40552c:	2b01      	cmp	r3, #1
  40552e:	d101      	bne.n	405534 <tcp_input+0x45c>
  405530:	0040      	lsls	r0, r0, #1
  405532:	b280      	uxth	r0, r0
  405534:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
  405538:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
  40553c:	3b01      	subs	r3, #1
  40553e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  405542:	6f28      	ldr	r0, [r5, #112]	; 0x70
      pcb->unacked = rseg->next;
  405544:	6803      	ldr	r3, [r0, #0]
  405546:	672b      	str	r3, [r5, #112]	; 0x70
      tcp_seg_free(rseg);
  405548:	4b31      	ldr	r3, [pc, #196]	; (405610 <tcp_input+0x538>)
  40554a:	4798      	blx	r3

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  40554c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40554e:	b91b      	cbnz	r3, 405558 <tcp_input+0x480>
        pcb->rtime = -1;
  405550:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405554:	86ab      	strh	r3, [r5, #52]	; 0x34
  405556:	e003      	b.n	405560 <tcp_input+0x488>
      else {
        pcb->rtime = 0;
  405558:	2300      	movs	r3, #0
  40555a:	86ab      	strh	r3, [r5, #52]	; 0x34
        pcb->nrtx = 0;
  40555c:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  405560:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  405564:	b13b      	cbz	r3, 405576 <tcp_input+0x49e>
  405566:	2200      	movs	r2, #0
  405568:	4629      	mov	r1, r5
  40556a:	6928      	ldr	r0, [r5, #16]
  40556c:	4798      	blx	r3
      if (err == ERR_ABRT) {
  40556e:	f110 0f0a 	cmn.w	r0, #10
  405572:	f000 8240 	beq.w	4059f6 <tcp_input+0x91e>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
  405576:	7fab      	ldrb	r3, [r5, #30]
  405578:	f043 0302 	orr.w	r3, r3, #2
  40557c:	77ab      	strb	r3, [r5, #30]
  40557e:	e1bd      	b.n	4058fc <tcp_input+0x824>
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
  405580:	4b1f      	ldr	r3, [pc, #124]	; (405600 <tcp_input+0x528>)
  405582:	781b      	ldrb	r3, [r3, #0]
  405584:	f013 0f10 	tst.w	r3, #16
  405588:	f000 81b8 	beq.w	4058fc <tcp_input+0x824>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
  40558c:	4b0b      	ldr	r3, [pc, #44]	; (4055bc <tcp_input+0x4e4>)
  40558e:	681b      	ldr	r3, [r3, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  405590:	4a19      	ldr	r2, [pc, #100]	; (4055f8 <tcp_input+0x520>)
  405592:	8810      	ldrh	r0, [r2, #0]
  405594:	4a0a      	ldr	r2, [pc, #40]	; (4055c0 <tcp_input+0x4e8>)
  405596:	6811      	ldr	r1, [r2, #0]
  405598:	881a      	ldrh	r2, [r3, #0]
  40559a:	9201      	str	r2, [sp, #4]
  40559c:	885b      	ldrh	r3, [r3, #2]
  40559e:	9300      	str	r3, [sp, #0]
  4055a0:	4b05      	ldr	r3, [pc, #20]	; (4055b8 <tcp_input+0x4e0>)
  4055a2:	4a04      	ldr	r2, [pc, #16]	; (4055b4 <tcp_input+0x4dc>)
  4055a4:	4401      	add	r1, r0
  4055a6:	4817      	ldr	r0, [pc, #92]	; (405604 <tcp_input+0x52c>)
  4055a8:	6800      	ldr	r0, [r0, #0]
  4055aa:	4c1a      	ldr	r4, [pc, #104]	; (405614 <tcp_input+0x53c>)
  4055ac:	47a0      	blx	r4
  4055ae:	e1a5      	b.n	4058fc <tcp_input+0x824>
  4055b0:	00404429 	.word	0x00404429
  4055b4:	20403870 	.word	0x20403870
  4055b8:	20403868 	.word	0x20403868
  4055bc:	204024c4 	.word	0x204024c4
  4055c0:	204024c8 	.word	0x204024c8
  4055c4:	2040489c 	.word	0x2040489c
  4055c8:	00403075 	.word	0x00403075
  4055cc:	20404898 	.word	0x20404898
  4055d0:	00404699 	.word	0x00404699
  4055d4:	00404551 	.word	0x00404551
  4055d8:	00405f31 	.word	0x00405f31
  4055dc:	00404361 	.word	0x00404361
  4055e0:	004060d1 	.word	0x004060d1
  4055e4:	004036c9 	.word	0x004036c9
  4055e8:	204024dc 	.word	0x204024dc
  4055ec:	204024d8 	.word	0x204024d8
  4055f0:	204024d5 	.word	0x204024d5
  4055f4:	00404241 	.word	0x00404241
  4055f8:	204024cc 	.word	0x204024cc
  4055fc:	204048b4 	.word	0x204048b4
  405600:	204024d4 	.word	0x204024d4
  405604:	204024d0 	.word	0x204024d0
  405608:	204048a0 	.word	0x204048a0
  40560c:	004010c5 	.word	0x004010c5
  405610:	00403b4d 	.word	0x00403b4d
  405614:	00406385 	.word	0x00406385
        tcphdr->dest, tcphdr->src);
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  405618:	4b93      	ldr	r3, [pc, #588]	; (405868 <tcp_input+0x790>)
  40561a:	781b      	ldrb	r3, [r3, #0]
  40561c:	f013 0f10 	tst.w	r3, #16
  405620:	d049      	beq.n	4056b6 <tcp_input+0x5de>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  405622:	4b92      	ldr	r3, [pc, #584]	; (40586c <tcp_input+0x794>)
  405624:	6818      	ldr	r0, [r3, #0]
  405626:	6cab      	ldr	r3, [r5, #72]	; 0x48
  405628:	43db      	mvns	r3, r3
  40562a:	42c3      	cmn	r3, r0
  40562c:	d433      	bmi.n	405696 <tcp_input+0x5be>
  40562e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  405630:	1ac3      	subs	r3, r0, r3
  405632:	2b00      	cmp	r3, #0
  405634:	dc2f      	bgt.n	405696 <tcp_input+0x5be>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
  405636:	2304      	movs	r3, #4
  405638:	762b      	strb	r3, [r5, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
  40563a:	696b      	ldr	r3, [r5, #20]
  40563c:	b143      	cbz	r3, 405650 <tcp_input+0x578>
  40563e:	2200      	movs	r2, #0
  405640:	4629      	mov	r1, r5
  405642:	6928      	ldr	r0, [r5, #16]
  405644:	4798      	blx	r3
        if (err != ERR_OK) {
  405646:	b138      	cbz	r0, 405658 <tcp_input+0x580>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  405648:	f110 0f0a 	cmn.w	r0, #10
  40564c:	f000 81d3 	beq.w	4059f6 <tcp_input+0x91e>
            tcp_abort(pcb);
  405650:	4628      	mov	r0, r5
  405652:	4b87      	ldr	r3, [pc, #540]	; (405870 <tcp_input+0x798>)
  405654:	4798      	blx	r3
  405656:	e1ce      	b.n	4059f6 <tcp_input+0x91e>
          }
          return ERR_ABRT;
        }
        old_cwnd = pcb->cwnd;
  405658:	f8b5 404c 	ldrh.w	r4, [r5, #76]	; 0x4c
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  40565c:	4628      	mov	r0, r5
  40565e:	4b85      	ldr	r3, [pc, #532]	; (405874 <tcp_input+0x79c>)
  405660:	4798      	blx	r3

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
  405662:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  405666:	b113      	cbz	r3, 40566e <tcp_input+0x596>
          pcb->acked--;
  405668:	3b01      	subs	r3, #1
  40566a:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  40566e:	2c01      	cmp	r4, #1
  405670:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
  405672:	bf04      	itt	eq
  405674:	005b      	lsleq	r3, r3, #1
  405676:	b29b      	uxtheq	r3, r3
  405678:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c

        if (recv_flags & TF_GOT_FIN) {
  40567c:	4b7e      	ldr	r3, [pc, #504]	; (405878 <tcp_input+0x7a0>)
  40567e:	781b      	ldrb	r3, [r3, #0]
  405680:	f013 0f20 	tst.w	r3, #32
  405684:	f000 813a 	beq.w	4058fc <tcp_input+0x824>
          tcp_ack_now(pcb);
  405688:	7fab      	ldrb	r3, [r5, #30]
  40568a:	f043 0302 	orr.w	r3, r3, #2
  40568e:	77ab      	strb	r3, [r5, #30]
          pcb->state = CLOSE_WAIT;
  405690:	2307      	movs	r3, #7
  405692:	762b      	strb	r3, [r5, #24]
  405694:	e132      	b.n	4058fc <tcp_input+0x824>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
                tcphdr->dest, tcphdr->src);
  405696:	4b79      	ldr	r3, [pc, #484]	; (40587c <tcp_input+0x7a4>)
  405698:	681b      	ldr	r3, [r3, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  40569a:	4a79      	ldr	r2, [pc, #484]	; (405880 <tcp_input+0x7a8>)
  40569c:	8814      	ldrh	r4, [r2, #0]
  40569e:	4a79      	ldr	r2, [pc, #484]	; (405884 <tcp_input+0x7ac>)
  4056a0:	6811      	ldr	r1, [r2, #0]
  4056a2:	881a      	ldrh	r2, [r3, #0]
  4056a4:	9201      	str	r2, [sp, #4]
  4056a6:	885b      	ldrh	r3, [r3, #2]
  4056a8:	9300      	str	r3, [sp, #0]
  4056aa:	4b77      	ldr	r3, [pc, #476]	; (405888 <tcp_input+0x7b0>)
  4056ac:	4a77      	ldr	r2, [pc, #476]	; (40588c <tcp_input+0x7b4>)
  4056ae:	4421      	add	r1, r4
  4056b0:	4c77      	ldr	r4, [pc, #476]	; (405890 <tcp_input+0x7b8>)
  4056b2:	47a0      	blx	r4
  4056b4:	e122      	b.n	4058fc <tcp_input+0x824>
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  4056b6:	f013 0f02 	tst.w	r3, #2
  4056ba:	f000 811f 	beq.w	4058fc <tcp_input+0x824>
  4056be:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4056c0:	3b01      	subs	r3, #1
  4056c2:	4a70      	ldr	r2, [pc, #448]	; (405884 <tcp_input+0x7ac>)
  4056c4:	6812      	ldr	r2, [r2, #0]
  4056c6:	4293      	cmp	r3, r2
  4056c8:	f040 8118 	bne.w	4058fc <tcp_input+0x824>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
  4056cc:	4628      	mov	r0, r5
  4056ce:	4b71      	ldr	r3, [pc, #452]	; (405894 <tcp_input+0x7bc>)
  4056d0:	4798      	blx	r3
  4056d2:	e113      	b.n	4058fc <tcp_input+0x824>
    }
    break;
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  4056d4:	4628      	mov	r0, r5
  4056d6:	4b67      	ldr	r3, [pc, #412]	; (405874 <tcp_input+0x79c>)
  4056d8:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  4056da:	4b67      	ldr	r3, [pc, #412]	; (405878 <tcp_input+0x7a0>)
  4056dc:	781b      	ldrb	r3, [r3, #0]
  4056de:	f013 0f20 	tst.w	r3, #32
  4056e2:	f000 810b 	beq.w	4058fc <tcp_input+0x824>
      tcp_ack_now(pcb);
  4056e6:	7fab      	ldrb	r3, [r5, #30]
  4056e8:	f043 0302 	orr.w	r3, r3, #2
  4056ec:	77ab      	strb	r3, [r5, #30]
      pcb->state = CLOSE_WAIT;
  4056ee:	2307      	movs	r3, #7
  4056f0:	762b      	strb	r3, [r5, #24]
  4056f2:	e103      	b.n	4058fc <tcp_input+0x824>
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
  4056f4:	4628      	mov	r0, r5
  4056f6:	4b5f      	ldr	r3, [pc, #380]	; (405874 <tcp_input+0x79c>)
  4056f8:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  4056fa:	4b5f      	ldr	r3, [pc, #380]	; (405878 <tcp_input+0x7a0>)
  4056fc:	781b      	ldrb	r3, [r3, #0]
  4056fe:	f013 0f20 	tst.w	r3, #32
  405702:	d041      	beq.n	405788 <tcp_input+0x6b0>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  405704:	4b58      	ldr	r3, [pc, #352]	; (405868 <tcp_input+0x790>)
  405706:	781b      	ldrb	r3, [r3, #0]
  405708:	f013 0f10 	tst.w	r3, #16
  40570c:	d035      	beq.n	40577a <tcp_input+0x6a2>
  40570e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405710:	4b56      	ldr	r3, [pc, #344]	; (40586c <tcp_input+0x794>)
  405712:	681b      	ldr	r3, [r3, #0]
  405714:	429a      	cmp	r2, r3
  405716:	d130      	bne.n	40577a <tcp_input+0x6a2>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  405718:	7fab      	ldrb	r3, [r5, #30]
  40571a:	f043 0302 	orr.w	r3, r3, #2
  40571e:	77ab      	strb	r3, [r5, #30]
        tcp_pcb_purge(pcb);
  405720:	4628      	mov	r0, r5
  405722:	4b5d      	ldr	r3, [pc, #372]	; (405898 <tcp_input+0x7c0>)
  405724:	4798      	blx	r3
        TCP_RMV_ACTIVE(pcb);
  405726:	4b5d      	ldr	r3, [pc, #372]	; (40589c <tcp_input+0x7c4>)
  405728:	681b      	ldr	r3, [r3, #0]
  40572a:	42ab      	cmp	r3, r5
  40572c:	d103      	bne.n	405736 <tcp_input+0x65e>
  40572e:	68ea      	ldr	r2, [r5, #12]
  405730:	4b5a      	ldr	r3, [pc, #360]	; (40589c <tcp_input+0x7c4>)
  405732:	601a      	str	r2, [r3, #0]
  405734:	e015      	b.n	405762 <tcp_input+0x68a>
  405736:	4a5a      	ldr	r2, [pc, #360]	; (4058a0 <tcp_input+0x7c8>)
  405738:	6013      	str	r3, [r2, #0]
  40573a:	2200      	movs	r2, #0
  40573c:	2001      	movs	r0, #1
  40573e:	e00a      	b.n	405756 <tcp_input+0x67e>
  405740:	68d9      	ldr	r1, [r3, #12]
  405742:	42a9      	cmp	r1, r5
  405744:	d105      	bne.n	405752 <tcp_input+0x67a>
  405746:	b10a      	cbz	r2, 40574c <tcp_input+0x674>
  405748:	4a55      	ldr	r2, [pc, #340]	; (4058a0 <tcp_input+0x7c8>)
  40574a:	6013      	str	r3, [r2, #0]
  40574c:	68ea      	ldr	r2, [r5, #12]
  40574e:	60da      	str	r2, [r3, #12]
  405750:	e007      	b.n	405762 <tcp_input+0x68a>
  405752:	4602      	mov	r2, r0
  405754:	460b      	mov	r3, r1
  405756:	2b00      	cmp	r3, #0
  405758:	d1f2      	bne.n	405740 <tcp_input+0x668>
  40575a:	b112      	cbz	r2, 405762 <tcp_input+0x68a>
  40575c:	2200      	movs	r2, #0
  40575e:	4b50      	ldr	r3, [pc, #320]	; (4058a0 <tcp_input+0x7c8>)
  405760:	601a      	str	r2, [r3, #0]
  405762:	2201      	movs	r2, #1
  405764:	4b4f      	ldr	r3, [pc, #316]	; (4058a4 <tcp_input+0x7cc>)
  405766:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
  405768:	230a      	movs	r3, #10
  40576a:	762b      	strb	r3, [r5, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  40576c:	4b4e      	ldr	r3, [pc, #312]	; (4058a8 <tcp_input+0x7d0>)
  40576e:	681a      	ldr	r2, [r3, #0]
  405770:	60ea      	str	r2, [r5, #12]
  405772:	601d      	str	r5, [r3, #0]
  405774:	4b4d      	ldr	r3, [pc, #308]	; (4058ac <tcp_input+0x7d4>)
  405776:	4798      	blx	r3
  405778:	e0c0      	b.n	4058fc <tcp_input+0x824>
      } else {
        tcp_ack_now(pcb);
  40577a:	7fab      	ldrb	r3, [r5, #30]
  40577c:	f043 0302 	orr.w	r3, r3, #2
  405780:	77ab      	strb	r3, [r5, #30]
        pcb->state = CLOSING;
  405782:	2308      	movs	r3, #8
  405784:	762b      	strb	r3, [r5, #24]
  405786:	e0b9      	b.n	4058fc <tcp_input+0x824>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  405788:	4b37      	ldr	r3, [pc, #220]	; (405868 <tcp_input+0x790>)
  40578a:	781b      	ldrb	r3, [r3, #0]
  40578c:	f013 0f10 	tst.w	r3, #16
  405790:	f000 80b4 	beq.w	4058fc <tcp_input+0x824>
  405794:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405796:	4b35      	ldr	r3, [pc, #212]	; (40586c <tcp_input+0x794>)
  405798:	681b      	ldr	r3, [r3, #0]
  40579a:	429a      	cmp	r2, r3
  40579c:	f040 80ae 	bne.w	4058fc <tcp_input+0x824>
      pcb->state = FIN_WAIT_2;
  4057a0:	2306      	movs	r3, #6
  4057a2:	762b      	strb	r3, [r5, #24]
  4057a4:	e0aa      	b.n	4058fc <tcp_input+0x824>
    }
    break;
  case FIN_WAIT_2:
    tcp_receive(pcb);
  4057a6:	4628      	mov	r0, r5
  4057a8:	4b32      	ldr	r3, [pc, #200]	; (405874 <tcp_input+0x79c>)
  4057aa:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  4057ac:	4b32      	ldr	r3, [pc, #200]	; (405878 <tcp_input+0x7a0>)
  4057ae:	781b      	ldrb	r3, [r3, #0]
  4057b0:	f013 0f20 	tst.w	r3, #32
  4057b4:	f000 80a2 	beq.w	4058fc <tcp_input+0x824>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  4057b8:	7fab      	ldrb	r3, [r5, #30]
  4057ba:	f043 0302 	orr.w	r3, r3, #2
  4057be:	77ab      	strb	r3, [r5, #30]
      tcp_pcb_purge(pcb);
  4057c0:	4628      	mov	r0, r5
  4057c2:	4b35      	ldr	r3, [pc, #212]	; (405898 <tcp_input+0x7c0>)
  4057c4:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  4057c6:	4b35      	ldr	r3, [pc, #212]	; (40589c <tcp_input+0x7c4>)
  4057c8:	681b      	ldr	r3, [r3, #0]
  4057ca:	42ab      	cmp	r3, r5
  4057cc:	d103      	bne.n	4057d6 <tcp_input+0x6fe>
  4057ce:	68ea      	ldr	r2, [r5, #12]
  4057d0:	4b32      	ldr	r3, [pc, #200]	; (40589c <tcp_input+0x7c4>)
  4057d2:	601a      	str	r2, [r3, #0]
  4057d4:	e015      	b.n	405802 <tcp_input+0x72a>
  4057d6:	4a32      	ldr	r2, [pc, #200]	; (4058a0 <tcp_input+0x7c8>)
  4057d8:	6013      	str	r3, [r2, #0]
  4057da:	2200      	movs	r2, #0
  4057dc:	2001      	movs	r0, #1
  4057de:	e00a      	b.n	4057f6 <tcp_input+0x71e>
  4057e0:	68d9      	ldr	r1, [r3, #12]
  4057e2:	42a9      	cmp	r1, r5
  4057e4:	d105      	bne.n	4057f2 <tcp_input+0x71a>
  4057e6:	b10a      	cbz	r2, 4057ec <tcp_input+0x714>
  4057e8:	4a2d      	ldr	r2, [pc, #180]	; (4058a0 <tcp_input+0x7c8>)
  4057ea:	6013      	str	r3, [r2, #0]
  4057ec:	68ea      	ldr	r2, [r5, #12]
  4057ee:	60da      	str	r2, [r3, #12]
  4057f0:	e007      	b.n	405802 <tcp_input+0x72a>
  4057f2:	4602      	mov	r2, r0
  4057f4:	460b      	mov	r3, r1
  4057f6:	2b00      	cmp	r3, #0
  4057f8:	d1f2      	bne.n	4057e0 <tcp_input+0x708>
  4057fa:	b112      	cbz	r2, 405802 <tcp_input+0x72a>
  4057fc:	2200      	movs	r2, #0
  4057fe:	4b28      	ldr	r3, [pc, #160]	; (4058a0 <tcp_input+0x7c8>)
  405800:	601a      	str	r2, [r3, #0]
  405802:	2201      	movs	r2, #1
  405804:	4b27      	ldr	r3, [pc, #156]	; (4058a4 <tcp_input+0x7cc>)
  405806:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  405808:	230a      	movs	r3, #10
  40580a:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  40580c:	4b26      	ldr	r3, [pc, #152]	; (4058a8 <tcp_input+0x7d0>)
  40580e:	681a      	ldr	r2, [r3, #0]
  405810:	60ea      	str	r2, [r5, #12]
  405812:	601d      	str	r5, [r3, #0]
  405814:	4b25      	ldr	r3, [pc, #148]	; (4058ac <tcp_input+0x7d4>)
  405816:	4798      	blx	r3
  405818:	e070      	b.n	4058fc <tcp_input+0x824>
    }
    break;
  case CLOSING:
    tcp_receive(pcb);
  40581a:	4628      	mov	r0, r5
  40581c:	4b15      	ldr	r3, [pc, #84]	; (405874 <tcp_input+0x79c>)
  40581e:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  405820:	4b11      	ldr	r3, [pc, #68]	; (405868 <tcp_input+0x790>)
  405822:	781b      	ldrb	r3, [r3, #0]
  405824:	f013 0f10 	tst.w	r3, #16
  405828:	d068      	beq.n	4058fc <tcp_input+0x824>
  40582a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40582c:	4b0f      	ldr	r3, [pc, #60]	; (40586c <tcp_input+0x794>)
  40582e:	681b      	ldr	r3, [r3, #0]
  405830:	429a      	cmp	r2, r3
  405832:	d163      	bne.n	4058fc <tcp_input+0x824>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  405834:	4628      	mov	r0, r5
  405836:	4b18      	ldr	r3, [pc, #96]	; (405898 <tcp_input+0x7c0>)
  405838:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  40583a:	4b18      	ldr	r3, [pc, #96]	; (40589c <tcp_input+0x7c4>)
  40583c:	681b      	ldr	r3, [r3, #0]
  40583e:	42ab      	cmp	r3, r5
  405840:	d103      	bne.n	40584a <tcp_input+0x772>
  405842:	68ea      	ldr	r2, [r5, #12]
  405844:	4b15      	ldr	r3, [pc, #84]	; (40589c <tcp_input+0x7c4>)
  405846:	601a      	str	r2, [r3, #0]
  405848:	e03a      	b.n	4058c0 <tcp_input+0x7e8>
  40584a:	4a15      	ldr	r2, [pc, #84]	; (4058a0 <tcp_input+0x7c8>)
  40584c:	6013      	str	r3, [r2, #0]
  40584e:	2200      	movs	r2, #0
  405850:	2001      	movs	r0, #1
  405852:	e02f      	b.n	4058b4 <tcp_input+0x7dc>
  405854:	68d9      	ldr	r1, [r3, #12]
  405856:	42a9      	cmp	r1, r5
  405858:	d12a      	bne.n	4058b0 <tcp_input+0x7d8>
  40585a:	b10a      	cbz	r2, 405860 <tcp_input+0x788>
  40585c:	4a10      	ldr	r2, [pc, #64]	; (4058a0 <tcp_input+0x7c8>)
  40585e:	6013      	str	r3, [r2, #0]
  405860:	68ea      	ldr	r2, [r5, #12]
  405862:	60da      	str	r2, [r3, #12]
  405864:	e02c      	b.n	4058c0 <tcp_input+0x7e8>
  405866:	bf00      	nop
  405868:	204024d4 	.word	0x204024d4
  40586c:	204024d0 	.word	0x204024d0
  405870:	00404401 	.word	0x00404401
  405874:	004047fd 	.word	0x004047fd
  405878:	204024d5 	.word	0x204024d5
  40587c:	204024c4 	.word	0x204024c4
  405880:	204024cc 	.word	0x204024cc
  405884:	204024c8 	.word	0x204024c8
  405888:	20403868 	.word	0x20403868
  40588c:	20403870 	.word	0x20403870
  405890:	00406385 	.word	0x00406385
  405894:	0040645d 	.word	0x0040645d
  405898:	00403bd5 	.word	0x00403bd5
  40589c:	2040489c 	.word	0x2040489c
  4058a0:	204048a8 	.word	0x204048a8
  4058a4:	20404898 	.word	0x20404898
  4058a8:	204048b0 	.word	0x204048b0
  4058ac:	00403075 	.word	0x00403075
  4058b0:	4602      	mov	r2, r0
  4058b2:	460b      	mov	r3, r1
  4058b4:	2b00      	cmp	r3, #0
  4058b6:	d1cd      	bne.n	405854 <tcp_input+0x77c>
  4058b8:	b112      	cbz	r2, 4058c0 <tcp_input+0x7e8>
  4058ba:	2200      	movs	r2, #0
  4058bc:	4b77      	ldr	r3, [pc, #476]	; (405a9c <tcp_input+0x9c4>)
  4058be:	601a      	str	r2, [r3, #0]
  4058c0:	2201      	movs	r2, #1
  4058c2:	4b77      	ldr	r3, [pc, #476]	; (405aa0 <tcp_input+0x9c8>)
  4058c4:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  4058c6:	230a      	movs	r3, #10
  4058c8:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  4058ca:	4b76      	ldr	r3, [pc, #472]	; (405aa4 <tcp_input+0x9cc>)
  4058cc:	681a      	ldr	r2, [r3, #0]
  4058ce:	60ea      	str	r2, [r5, #12]
  4058d0:	601d      	str	r5, [r3, #0]
  4058d2:	4b75      	ldr	r3, [pc, #468]	; (405aa8 <tcp_input+0x9d0>)
  4058d4:	4798      	blx	r3
  4058d6:	e011      	b.n	4058fc <tcp_input+0x824>
    }
    break;
  case LAST_ACK:
    tcp_receive(pcb);
  4058d8:	4628      	mov	r0, r5
  4058da:	4b74      	ldr	r3, [pc, #464]	; (405aac <tcp_input+0x9d4>)
  4058dc:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  4058de:	4b74      	ldr	r3, [pc, #464]	; (405ab0 <tcp_input+0x9d8>)
  4058e0:	781b      	ldrb	r3, [r3, #0]
  4058e2:	f013 0f10 	tst.w	r3, #16
  4058e6:	d009      	beq.n	4058fc <tcp_input+0x824>
  4058e8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4058ea:	4b72      	ldr	r3, [pc, #456]	; (405ab4 <tcp_input+0x9dc>)
  4058ec:	681b      	ldr	r3, [r3, #0]
  4058ee:	429a      	cmp	r2, r3
  4058f0:	d104      	bne.n	4058fc <tcp_input+0x824>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  4058f2:	4a71      	ldr	r2, [pc, #452]	; (405ab8 <tcp_input+0x9e0>)
  4058f4:	7813      	ldrb	r3, [r2, #0]
  4058f6:	f043 0310 	orr.w	r3, r3, #16
  4058fa:	7013      	strb	r3, [r2, #0]
    tcp_input_pcb = pcb;
    err = tcp_process(pcb);
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
      if (recv_flags & TF_RESET) {
  4058fc:	4b6e      	ldr	r3, [pc, #440]	; (405ab8 <tcp_input+0x9e0>)
  4058fe:	781b      	ldrb	r3, [r3, #0]
  405900:	f013 0f08 	tst.w	r3, #8
  405904:	d00f      	beq.n	405926 <tcp_input+0x84e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
  405906:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40590a:	b11b      	cbz	r3, 405914 <tcp_input+0x83c>
  40590c:	f06f 010a 	mvn.w	r1, #10
  405910:	6928      	ldr	r0, [r5, #16]
  405912:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  405914:	4629      	mov	r1, r5
  405916:	4869      	ldr	r0, [pc, #420]	; (405abc <tcp_input+0x9e4>)
  405918:	4b69      	ldr	r3, [pc, #420]	; (405ac0 <tcp_input+0x9e8>)
  40591a:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  40591c:	4629      	mov	r1, r5
  40591e:	2001      	movs	r0, #1
  405920:	4b68      	ldr	r3, [pc, #416]	; (405ac4 <tcp_input+0x9ec>)
  405922:	4798      	blx	r3
  405924:	e067      	b.n	4059f6 <tcp_input+0x91e>
      } else if (recv_flags & TF_CLOSED) {
  405926:	f013 0f10 	tst.w	r3, #16
  40592a:	d013      	beq.n	405954 <tcp_input+0x87c>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
  40592c:	7fab      	ldrb	r3, [r5, #30]
  40592e:	f013 0f10 	tst.w	r3, #16
  405932:	d106      	bne.n	405942 <tcp_input+0x86a>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
  405934:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  405938:	b11b      	cbz	r3, 405942 <tcp_input+0x86a>
  40593a:	f06f 010b 	mvn.w	r1, #11
  40593e:	6928      	ldr	r0, [r5, #16]
  405940:	4798      	blx	r3
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  405942:	4629      	mov	r1, r5
  405944:	485d      	ldr	r0, [pc, #372]	; (405abc <tcp_input+0x9e4>)
  405946:	4b5e      	ldr	r3, [pc, #376]	; (405ac0 <tcp_input+0x9e8>)
  405948:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  40594a:	4629      	mov	r1, r5
  40594c:	2001      	movs	r0, #1
  40594e:	4b5d      	ldr	r3, [pc, #372]	; (405ac4 <tcp_input+0x9ec>)
  405950:	4798      	blx	r3
  405952:	e050      	b.n	4059f6 <tcp_input+0x91e>
      } else {
        err = ERR_OK;
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
  405954:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
  405958:	b13a      	cbz	r2, 40596a <tcp_input+0x892>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
  40595a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
  40595c:	b12b      	cbz	r3, 40596a <tcp_input+0x892>
  40595e:	4629      	mov	r1, r5
  405960:	6928      	ldr	r0, [r5, #16]
  405962:	4798      	blx	r3
          if (err == ERR_ABRT) {
  405964:	f110 0f0a 	cmn.w	r0, #10
  405968:	d045      	beq.n	4059f6 <tcp_input+0x91e>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
  40596a:	4b57      	ldr	r3, [pc, #348]	; (405ac8 <tcp_input+0x9f0>)
  40596c:	681a      	ldr	r2, [r3, #0]
  40596e:	b1f2      	cbz	r2, 4059ae <tcp_input+0x8d6>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
  405970:	7fab      	ldrb	r3, [r5, #30]
  405972:	f013 0f10 	tst.w	r3, #16
  405976:	d006      	beq.n	405986 <tcp_input+0x8ae>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  405978:	4610      	mov	r0, r2
  40597a:	4b54      	ldr	r3, [pc, #336]	; (405acc <tcp_input+0x9f4>)
  40597c:	4798      	blx	r3
            tcp_abort(pcb);
  40597e:	4628      	mov	r0, r5
  405980:	4b53      	ldr	r3, [pc, #332]	; (405ad0 <tcp_input+0x9f8>)
  405982:	4798      	blx	r3
            goto aborted;
  405984:	e037      	b.n	4059f6 <tcp_input+0x91e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  405986:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  40598a:	b124      	cbz	r4, 405996 <tcp_input+0x8be>
  40598c:	2300      	movs	r3, #0
  40598e:	4629      	mov	r1, r5
  405990:	6928      	ldr	r0, [r5, #16]
  405992:	47a0      	blx	r4
  405994:	e004      	b.n	4059a0 <tcp_input+0x8c8>
  405996:	2300      	movs	r3, #0
  405998:	4629      	mov	r1, r5
  40599a:	4618      	mov	r0, r3
  40599c:	4c4d      	ldr	r4, [pc, #308]	; (405ad4 <tcp_input+0x9fc>)
  40599e:	47a0      	blx	r4
          if (err == ERR_ABRT) {
  4059a0:	f110 0f0a 	cmn.w	r0, #10
  4059a4:	d027      	beq.n	4059f6 <tcp_input+0x91e>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  4059a6:	b110      	cbz	r0, 4059ae <tcp_input+0x8d6>
            pcb->refused_data = recv_data;
  4059a8:	4b47      	ldr	r3, [pc, #284]	; (405ac8 <tcp_input+0x9f0>)
  4059aa:	681b      	ldr	r3, [r3, #0]
  4059ac:	67ab      	str	r3, [r5, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  4059ae:	4b42      	ldr	r3, [pc, #264]	; (405ab8 <tcp_input+0x9e0>)
  4059b0:	781b      	ldrb	r3, [r3, #0]
  4059b2:	f013 0f20 	tst.w	r3, #32
  4059b6:	d018      	beq.n	4059ea <tcp_input+0x912>
          if (pcb->refused_data != NULL) {
  4059b8:	6fab      	ldr	r3, [r5, #120]	; 0x78
  4059ba:	b123      	cbz	r3, 4059c6 <tcp_input+0x8ee>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  4059bc:	7b5a      	ldrb	r2, [r3, #13]
  4059be:	f042 0220 	orr.w	r2, r2, #32
  4059c2:	735a      	strb	r2, [r3, #13]
  4059c4:	e011      	b.n	4059ea <tcp_input+0x912>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
  4059c6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  4059c8:	f640 3268 	movw	r2, #2920	; 0xb68
  4059cc:	4293      	cmp	r3, r2
  4059ce:	d001      	beq.n	4059d4 <tcp_input+0x8fc>
              pcb->rcv_wnd++;
  4059d0:	3301      	adds	r3, #1
  4059d2:	85ab      	strh	r3, [r5, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  4059d4:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  4059d8:	b13c      	cbz	r4, 4059ea <tcp_input+0x912>
  4059da:	2300      	movs	r3, #0
  4059dc:	461a      	mov	r2, r3
  4059de:	4629      	mov	r1, r5
  4059e0:	6928      	ldr	r0, [r5, #16]
  4059e2:	47a0      	blx	r4
            if (err == ERR_ABRT) {
  4059e4:	f110 0f0a 	cmn.w	r0, #10
  4059e8:	d005      	beq.n	4059f6 <tcp_input+0x91e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  4059ea:	2200      	movs	r2, #0
  4059ec:	4b3a      	ldr	r3, [pc, #232]	; (405ad8 <tcp_input+0xa00>)
  4059ee:	601a      	str	r2, [r3, #0]
        /* Try to send something out. */
        tcp_output(pcb);
  4059f0:	4628      	mov	r0, r5
  4059f2:	4b3a      	ldr	r3, [pc, #232]	; (405adc <tcp_input+0xa04>)
  4059f4:	4798      	blx	r3
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
  4059f6:	2300      	movs	r3, #0
  4059f8:	4a37      	ldr	r2, [pc, #220]	; (405ad8 <tcp_input+0xa00>)
  4059fa:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
  4059fc:	4a32      	ldr	r2, [pc, #200]	; (405ac8 <tcp_input+0x9f0>)
  4059fe:	6013      	str	r3, [r2, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  405a00:	4b37      	ldr	r3, [pc, #220]	; (405ae0 <tcp_input+0xa08>)
  405a02:	6858      	ldr	r0, [r3, #4]
  405a04:	2800      	cmp	r0, #0
  405a06:	d045      	beq.n	405a94 <tcp_input+0x9bc>
    {
      pbuf_free(inseg.p);
  405a08:	4b30      	ldr	r3, [pc, #192]	; (405acc <tcp_input+0x9f4>)
  405a0a:	4798      	blx	r3
      inseg.p = NULL;
  405a0c:	2200      	movs	r2, #0
  405a0e:	4b34      	ldr	r3, [pc, #208]	; (405ae0 <tcp_input+0xa08>)
  405a10:	605a      	str	r2, [r3, #4]
  405a12:	e03f      	b.n	405a94 <tcp_input+0x9bc>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  405a14:	4b33      	ldr	r3, [pc, #204]	; (405ae4 <tcp_input+0xa0c>)
  405a16:	681b      	ldr	r3, [r3, #0]
  405a18:	8998      	ldrh	r0, [r3, #12]
  405a1a:	4b33      	ldr	r3, [pc, #204]	; (405ae8 <tcp_input+0xa10>)
  405a1c:	4798      	blx	r3
  405a1e:	f000 0004 	and.w	r0, r0, #4
  405a22:	b283      	uxth	r3, r0
  405a24:	b983      	cbnz	r3, 405a48 <tcp_input+0x970>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
  405a26:	4b2f      	ldr	r3, [pc, #188]	; (405ae4 <tcp_input+0xa0c>)
  405a28:	681b      	ldr	r3, [r3, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
  405a2a:	4a30      	ldr	r2, [pc, #192]	; (405aec <tcp_input+0xa14>)
  405a2c:	8810      	ldrh	r0, [r2, #0]
  405a2e:	4a30      	ldr	r2, [pc, #192]	; (405af0 <tcp_input+0xa18>)
  405a30:	6811      	ldr	r1, [r2, #0]
  405a32:	881a      	ldrh	r2, [r3, #0]
  405a34:	9201      	str	r2, [sp, #4]
  405a36:	885b      	ldrh	r3, [r3, #2]
  405a38:	9300      	str	r3, [sp, #0]
  405a3a:	4b2e      	ldr	r3, [pc, #184]	; (405af4 <tcp_input+0xa1c>)
  405a3c:	4a2e      	ldr	r2, [pc, #184]	; (405af8 <tcp_input+0xa20>)
  405a3e:	4401      	add	r1, r0
  405a40:	481c      	ldr	r0, [pc, #112]	; (405ab4 <tcp_input+0x9dc>)
  405a42:	6800      	ldr	r0, [r0, #0]
  405a44:	4d2d      	ldr	r5, [pc, #180]	; (405afc <tcp_input+0xa24>)
  405a46:	47a8      	blx	r5
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
  405a48:	4620      	mov	r0, r4
  405a4a:	4b20      	ldr	r3, [pc, #128]	; (405acc <tcp_input+0x9f4>)
  405a4c:	4798      	blx	r3
  405a4e:	e021      	b.n	405a94 <tcp_input+0x9bc>
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
  405a50:	4620      	mov	r0, r4
  405a52:	4b1e      	ldr	r3, [pc, #120]	; (405acc <tcp_input+0x9f4>)
  405a54:	4798      	blx	r3
  405a56:	e01d      	b.n	405a94 <tcp_input+0x9bc>
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  }
  pcb->keep_cnt_sent = 0;
  405a58:	2300      	movs	r3, #0
  405a5a:	f885 3096 	strb.w	r3, [r5, #150]	; 0x96

  tcp_parseopt(pcb);
  405a5e:	4628      	mov	r0, r5
  405a60:	4b27      	ldr	r3, [pc, #156]	; (405b00 <tcp_input+0xa28>)
  405a62:	4798      	blx	r3

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  405a64:	7e2b      	ldrb	r3, [r5, #24]
  405a66:	3b02      	subs	r3, #2
  405a68:	2b07      	cmp	r3, #7
  405a6a:	f63f af47 	bhi.w	4058fc <tcp_input+0x824>
  405a6e:	a201      	add	r2, pc, #4	; (adr r2, 405a74 <tcp_input+0x99c>)
  405a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405a74:	004054c7 	.word	0x004054c7
  405a78:	00405619 	.word	0x00405619
  405a7c:	004056d5 	.word	0x004056d5
  405a80:	004056f5 	.word	0x004056f5
  405a84:	004057a7 	.word	0x004057a7
  405a88:	004056d5 	.word	0x004056d5
  405a8c:	0040581b 	.word	0x0040581b
  405a90:	004058d9 	.word	0x004058d9
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
}
  405a94:	b003      	add	sp, #12
  405a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405a9a:	bf00      	nop
  405a9c:	204048a8 	.word	0x204048a8
  405aa0:	20404898 	.word	0x20404898
  405aa4:	204048b0 	.word	0x204048b0
  405aa8:	00403075 	.word	0x00403075
  405aac:	004047fd 	.word	0x004047fd
  405ab0:	204024d4 	.word	0x204024d4
  405ab4:	204024d0 	.word	0x204024d0
  405ab8:	204024d5 	.word	0x204024d5
  405abc:	2040489c 	.word	0x2040489c
  405ac0:	00403fa9 	.word	0x00403fa9
  405ac4:	004034cd 	.word	0x004034cd
  405ac8:	204024d8 	.word	0x204024d8
  405acc:	004036c9 	.word	0x004036c9
  405ad0:	00404401 	.word	0x00404401
  405ad4:	00404211 	.word	0x00404211
  405ad8:	204048b4 	.word	0x204048b4
  405adc:	004060d1 	.word	0x004060d1
  405ae0:	204024dc 	.word	0x204024dc
  405ae4:	204024c4 	.word	0x204024c4
  405ae8:	004010a1 	.word	0x004010a1
  405aec:	204024cc 	.word	0x204024cc
  405af0:	204024c8 	.word	0x204024c8
  405af4:	20403868 	.word	0x20403868
  405af8:	20403870 	.word	0x20403870
  405afc:	00406385 	.word	0x00406385
  405b00:	00404699 	.word	0x00404699

00405b04 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  405b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405b08:	4680      	mov	r8, r0
  405b0a:	460f      	mov	r7, r1
  405b0c:	4615      	mov	r5, r2
  405b0e:	4699      	mov	r9, r3
  405b10:	f89d 6020 	ldrb.w	r6, [sp, #32]
  405b14:	f006 0401 	and.w	r4, r6, #1
  405b18:	f006 0202 	and.w	r2, r6, #2
  405b1c:	b2d3      	uxtb	r3, r2
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  405b1e:	2b00      	cmp	r3, #0
  405b20:	bf18      	it	ne
  405b22:	230c      	movne	r3, #12
  405b24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  405b28:	b2dc      	uxtb	r4, r3

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  405b2a:	2003      	movs	r0, #3
  405b2c:	4b21      	ldr	r3, [pc, #132]	; (405bb4 <tcp_create_segment+0xb0>)
  405b2e:	4798      	blx	r3
  405b30:	b928      	cbnz	r0, 405b3e <tcp_create_segment+0x3a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  405b32:	4638      	mov	r0, r7
  405b34:	4b20      	ldr	r3, [pc, #128]	; (405bb8 <tcp_create_segment+0xb4>)
  405b36:	4798      	blx	r3
    return NULL;
  405b38:	2000      	movs	r0, #0
  405b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405b3e:	4682      	mov	sl, r0
  }
  seg->flags = optflags;
  405b40:	7286      	strb	r6, [r0, #10]
  seg->next = NULL;
  405b42:	2300      	movs	r3, #0
  405b44:	6003      	str	r3, [r0, #0]
  seg->p = p;
  405b46:	6047      	str	r7, [r0, #4]
  seg->len = p->tot_len - optlen;
  405b48:	893b      	ldrh	r3, [r7, #8]
  405b4a:	1b1b      	subs	r3, r3, r4
  405b4c:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  405b4e:	2114      	movs	r1, #20
  405b50:	4638      	mov	r0, r7
  405b52:	4b1a      	ldr	r3, [pc, #104]	; (405bbc <tcp_create_segment+0xb8>)
  405b54:	4798      	blx	r3
  405b56:	b128      	cbz	r0, 405b64 <tcp_create_segment+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
  405b58:	4650      	mov	r0, sl
  405b5a:	4b19      	ldr	r3, [pc, #100]	; (405bc0 <tcp_create_segment+0xbc>)
  405b5c:	4798      	blx	r3
    return NULL;
  405b5e:	2000      	movs	r0, #0
  405b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  405b64:	f8da 3004 	ldr.w	r3, [sl, #4]
  405b68:	685f      	ldr	r7, [r3, #4]
  405b6a:	f8ca 700c 	str.w	r7, [sl, #12]
  seg->tcphdr->src = htons(pcb->local_port);
  405b6e:	f8b8 001a 	ldrh.w	r0, [r8, #26]
  405b72:	4e14      	ldr	r6, [pc, #80]	; (405bc4 <tcp_create_segment+0xc0>)
  405b74:	47b0      	blx	r6
  405b76:	8038      	strh	r0, [r7, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
  405b78:	f8da 700c 	ldr.w	r7, [sl, #12]
  405b7c:	f8b8 001c 	ldrh.w	r0, [r8, #28]
  405b80:	47b0      	blx	r6
  405b82:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = htonl(seqno);
  405b84:	f8da 700c 	ldr.w	r7, [sl, #12]
  405b88:	4648      	mov	r0, r9
  405b8a:	4b0f      	ldr	r3, [pc, #60]	; (405bc8 <tcp_create_segment+0xc4>)
  405b8c:	4798      	blx	r3
  405b8e:	6078      	str	r0, [r7, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  405b90:	f8da 700c 	ldr.w	r7, [sl, #12]
  405b94:	08a4      	lsrs	r4, r4, #2
  405b96:	3405      	adds	r4, #5
  405b98:	ea45 3404 	orr.w	r4, r5, r4, lsl #12
  405b9c:	b2a0      	uxth	r0, r4
  405b9e:	47b0      	blx	r6
  405ba0:	81b8      	strh	r0, [r7, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  405ba2:	f8da 300c 	ldr.w	r3, [sl, #12]
  405ba6:	2200      	movs	r2, #0
  405ba8:	749a      	strb	r2, [r3, #18]
  405baa:	74da      	strb	r2, [r3, #19]
  return seg;
  405bac:	4650      	mov	r0, sl
} 
  405bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405bb2:	bf00      	nop
  405bb4:	004034ad 	.word	0x004034ad
  405bb8:	004036c9 	.word	0x004036c9
  405bbc:	00403659 	.word	0x00403659
  405bc0:	00403b4d 	.word	0x00403b4d
  405bc4:	00401095 	.word	0x00401095
  405bc8:	004010ad 	.word	0x004010ad

00405bcc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  405bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405bd0:	4606      	mov	r6, r0
  405bd2:	460c      	mov	r4, r1
  405bd4:	4699      	mov	r9, r3
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  405bd6:	3214      	adds	r2, #20
  405bd8:	4411      	add	r1, r2
  405bda:	2200      	movs	r2, #0
  405bdc:	b289      	uxth	r1, r1
  405bde:	2001      	movs	r0, #1
  405be0:	4b14      	ldr	r3, [pc, #80]	; (405c34 <tcp_output_alloc_header+0x68>)
  405be2:	4798      	blx	r3
  if (p != NULL) {
  405be4:	4680      	mov	r8, r0
  405be6:	b310      	cbz	r0, 405c2e <tcp_output_alloc_header+0x62>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  405be8:	6845      	ldr	r5, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
  405bea:	8b70      	ldrh	r0, [r6, #26]
  405bec:	4f12      	ldr	r7, [pc, #72]	; (405c38 <tcp_output_alloc_header+0x6c>)
  405bee:	47b8      	blx	r7
  405bf0:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = htons(pcb->remote_port);
  405bf2:	8bb0      	ldrh	r0, [r6, #28]
  405bf4:	47b8      	blx	r7
  405bf6:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
  405bf8:	f8c5 9004 	str.w	r9, [r5, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
  405bfc:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  405bfe:	4b0f      	ldr	r3, [pc, #60]	; (405c3c <tcp_output_alloc_header+0x70>)
  405c00:	4798      	blx	r3
  405c02:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  405c04:	08a0      	lsrs	r0, r4, #2
  405c06:	3005      	adds	r0, #5
  405c08:	0300      	lsls	r0, r0, #12
  405c0a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  405c0e:	f040 0010 	orr.w	r0, r0, #16
  405c12:	47b8      	blx	r7
  405c14:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  405c16:	8df0      	ldrh	r0, [r6, #46]	; 0x2e
  405c18:	47b8      	blx	r7
  405c1a:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
  405c1c:	2300      	movs	r3, #0
  405c1e:	742b      	strb	r3, [r5, #16]
  405c20:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
  405c22:	74ab      	strb	r3, [r5, #18]
  405c24:	74eb      	strb	r3, [r5, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  405c26:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
  405c28:	6ab2      	ldr	r2, [r6, #40]	; 0x28
  405c2a:	4413      	add	r3, r2
  405c2c:	6333      	str	r3, [r6, #48]	; 0x30
  }
  return p;
}
  405c2e:	4640      	mov	r0, r8
  405c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405c34:	00403729 	.word	0x00403729
  405c38:	00401095 	.word	0x00401095
  405c3c:	004010ad 	.word	0x004010ad

00405c40 <tcp_write>:
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
  405c40:	b901      	cbnz	r1, 405c44 <tcp_write+0x4>
  405c42:	e7fe      	b.n	405c42 <tcp_write+0x2>
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  405c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c48:	b08b      	sub	sp, #44	; 0x2c
  405c4a:	460d      	mov	r5, r1
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  405c4c:	7e04      	ldrb	r4, [r0, #24]
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
  405c4e:	1ea1      	subs	r1, r4, #2
  405c50:	b2c9      	uxtb	r1, r1
  405c52:	2902      	cmp	r1, #2
  405c54:	d902      	bls.n	405c5c <tcp_write+0x1c>
  405c56:	2c07      	cmp	r4, #7
  405c58:	f040 814e 	bne.w	405ef8 <tcp_write+0x2b8>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
  405c5c:	2a00      	cmp	r2, #0
  405c5e:	f000 8132 	beq.w	405ec6 <tcp_write+0x286>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  405c62:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
  405c66:	4291      	cmp	r1, r2
  405c68:	d206      	bcs.n	405c78 <tcp_write+0x38>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  405c6a:	7f83      	ldrb	r3, [r0, #30]
  405c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405c70:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  405c72:	f04f 30ff 	mov.w	r0, #4294967295
  405c76:	e147      	b.n	405f08 <tcp_write+0x2c8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  405c78:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
  405c7c:	2907      	cmp	r1, #7
  405c7e:	f240 8122 	bls.w	405ec6 <tcp_write+0x286>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  405c82:	7f83      	ldrb	r3, [r0, #30]
  405c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405c88:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  405c8a:	f04f 30ff 	mov.w	r0, #4294967295
  405c8e:	e13b      	b.n	405f08 <tcp_write+0x2c8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);
  405c90:	461e      	mov	r6, r3
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  405c92:	6833      	ldr	r3, [r6, #0]
  405c94:	2b00      	cmp	r3, #0
  405c96:	d1fb      	bne.n	405c90 <tcp_write+0x50>
  405c98:	9302      	str	r3, [sp, #8]
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  405c9a:	7ab2      	ldrb	r2, [r6, #10]
  405c9c:	f002 0001 	and.w	r0, r2, #1
  405ca0:	f002 0202 	and.w	r2, r2, #2
  405ca4:	b2d2      	uxtb	r2, r2
  405ca6:	2a00      	cmp	r2, #0
  405ca8:	bf14      	ite	ne
  405caa:	210c      	movne	r1, #12
  405cac:	2100      	moveq	r1, #0
    space = mss_local - (last_unsent->len + unsent_optlen);
  405cae:	8932      	ldrh	r2, [r6, #8]
  405cb0:	9b06      	ldr	r3, [sp, #24]
  405cb2:	1a9b      	subs	r3, r3, r2
  405cb4:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  405cb8:	1a59      	subs	r1, r3, r1
  405cba:	b289      	uxth	r1, r1
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  405cbc:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
    if (oversize > 0) {
  405cc0:	b14d      	cbz	r5, 405cd6 <tcp_write+0x96>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
  405cc2:	4657      	mov	r7, sl
  405cc4:	45aa      	cmp	sl, r5
  405cc6:	bf28      	it	cs
  405cc8:	462f      	movcs	r7, r5
      pos += oversize_used;
      oversize -= oversize_used;
  405cca:	1bed      	subs	r5, r5, r7
  405ccc:	b2ad      	uxth	r5, r5
      space -= oversize_used;
  405cce:	1bc9      	subs	r1, r1, r7
  405cd0:	b289      	uxth	r1, r1
  405cd2:	9603      	str	r6, [sp, #12]
  405cd4:	e002      	b.n	405cdc <tcp_write+0x9c>
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  405cd6:	9b02      	ldr	r3, [sp, #8]
  405cd8:	9303      	str	r3, [sp, #12]
  u16_t pos = 0; /* position in 'arg' data */
  405cda:	2700      	movs	r7, #0
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  405cdc:	2900      	cmp	r1, #0
  405cde:	bf18      	it	ne
  405ce0:	4557      	cmpne	r7, sl
  405ce2:	d229      	bcs.n	405d38 <tcp_write+0xf8>
  405ce4:	b342      	cbz	r2, 405d38 <tcp_write+0xf8>
      u16_t seglen = space < len - pos ? space : len - pos;
  405ce6:	ebc7 030a 	rsb	r3, r7, sl
  405cea:	428b      	cmp	r3, r1
  405cec:	bfa8      	it	ge
  405cee:	460b      	movge	r3, r1
  405cf0:	fa1f f983 	uxth.w	r9, r3
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  405cf4:	2200      	movs	r2, #0
  405cf6:	2003      	movs	r0, #3
  405cf8:	4b85      	ldr	r3, [pc, #532]	; (405f10 <tcp_write+0x2d0>)
  405cfa:	4798      	blx	r3
  if (p == NULL) {
  405cfc:	4680      	mov	r8, r0
  405cfe:	2800      	cmp	r0, #0
  405d00:	f000 80fd 	beq.w	405efe <tcp_write+0x2be>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
  405d04:	8945      	ldrh	r5, [r0, #10]
  405d06:	ebc9 0505 	rsb	r5, r9, r5
  405d0a:	b2ad      	uxth	r5, r5
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  405d0c:	f8a0 9008 	strh.w	r9, [r0, #8]
  405d10:	f8a0 900a 	strh.w	r9, [r0, #10]
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  405d14:	464a      	mov	r2, r9
  405d16:	9b05      	ldr	r3, [sp, #20]
  405d18:	19d9      	adds	r1, r3, r7
  405d1a:	6840      	ldr	r0, [r0, #4]
  405d1c:	4b7d      	ldr	r3, [pc, #500]	; (405f14 <tcp_write+0x2d4>)
  405d1e:	4798      	blx	r3
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
      }

      pos += seglen;
  405d20:	44b9      	add	r9, r7
  405d22:	fa1f f989 	uxth.w	r9, r9
      queuelen += pbuf_clen(concat_p);
  405d26:	4640      	mov	r0, r8
  405d28:	4b7b      	ldr	r3, [pc, #492]	; (405f18 <tcp_write+0x2d8>)
  405d2a:	4798      	blx	r3
  405d2c:	9b04      	ldr	r3, [sp, #16]
  405d2e:	4403      	add	r3, r0
  405d30:	b29b      	uxth	r3, r3
  405d32:	9304      	str	r3, [sp, #16]
  405d34:	9603      	str	r6, [sp, #12]
  405d36:	e002      	b.n	405d3e <tcp_write+0xfe>
  405d38:	46b9      	mov	r9, r7
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  405d3a:	f04f 0800 	mov.w	r8, #0
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  405d3e:	45ca      	cmp	sl, r9
  405d40:	d94b      	bls.n	405dda <tcp_write+0x19a>
  405d42:	2300      	movs	r3, #0
  405d44:	9302      	str	r3, [sp, #8]
  405d46:	9307      	str	r3, [sp, #28]
  405d48:	e001      	b.n	405d4e <tcp_write+0x10e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  405d4a:	9b03      	ldr	r3, [sp, #12]
  405d4c:	9307      	str	r3, [sp, #28]
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
    u16_t max_len = mss_local - optlen;
    u16_t seglen = left > max_len ? max_len : left;
  405d4e:	ebc9 0b0a 	rsb	fp, r9, sl
  405d52:	fa1f fb8b 	uxth.w	fp, fp
  405d56:	9906      	ldr	r1, [sp, #24]
  405d58:	458b      	cmp	fp, r1
  405d5a:	bf28      	it	cs
  405d5c:	468b      	movcs	fp, r1
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  405d5e:	2200      	movs	r2, #0
  405d60:	4610      	mov	r0, r2
  405d62:	4b6b      	ldr	r3, [pc, #428]	; (405f10 <tcp_write+0x2d0>)
  405d64:	4798      	blx	r3
  if (p == NULL) {
  405d66:	4605      	mov	r5, r0
  405d68:	2800      	cmp	r0, #0
  405d6a:	f000 8091 	beq.w	405e90 <tcp_write+0x250>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
  405d6e:	8943      	ldrh	r3, [r0, #10]
  405d70:	9308      	str	r3, [sp, #32]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  405d72:	f8a0 b008 	strh.w	fp, [r0, #8]
  405d76:	f8a0 b00a 	strh.w	fp, [r0, #10]
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  405d7a:	465a      	mov	r2, fp
  405d7c:	9b05      	ldr	r3, [sp, #20]
  405d7e:	eb03 0109 	add.w	r1, r3, r9
  405d82:	6840      	ldr	r0, [r0, #4]
  405d84:	4b63      	ldr	r3, [pc, #396]	; (405f14 <tcp_write+0x2d4>)
  405d86:	4798      	blx	r3
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
    }

    queuelen += pbuf_clen(p);
  405d88:	4628      	mov	r0, r5
  405d8a:	4b63      	ldr	r3, [pc, #396]	; (405f18 <tcp_write+0x2d8>)
  405d8c:	4798      	blx	r3
  405d8e:	9b04      	ldr	r3, [sp, #16]
  405d90:	4403      	add	r3, r0
  405d92:	b29b      	uxth	r3, r3
  405d94:	9304      	str	r3, [sp, #16]

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  405d96:	2b08      	cmp	r3, #8
  405d98:	d903      	bls.n	405da2 <tcp_write+0x162>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
  405d9a:	4628      	mov	r0, r5
  405d9c:	4b5f      	ldr	r3, [pc, #380]	; (405f1c <tcp_write+0x2dc>)
  405d9e:	4798      	blx	r3
      goto memerr;
  405da0:	e076      	b.n	405e90 <tcp_write+0x250>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  405da2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  405da4:	2200      	movs	r2, #0
  405da6:	9200      	str	r2, [sp, #0]
  405da8:	444b      	add	r3, r9
  405daa:	4629      	mov	r1, r5
  405dac:	4620      	mov	r0, r4
  405dae:	4d5c      	ldr	r5, [pc, #368]	; (405f20 <tcp_write+0x2e0>)
  405db0:	47a8      	blx	r5
  405db2:	9003      	str	r0, [sp, #12]
  405db4:	2800      	cmp	r0, #0
  405db6:	d06b      	beq.n	405e90 <tcp_write+0x250>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  405db8:	9b02      	ldr	r3, [sp, #8]
  405dba:	b113      	cbz	r3, 405dc2 <tcp_write+0x182>
      queue = seg;
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
  405dbc:	9a07      	ldr	r2, [sp, #28]
  405dbe:	6010      	str	r0, [r2, #0]
  405dc0:	e001      	b.n	405dc6 <tcp_write+0x186>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  405dc2:	9b03      	ldr	r3, [sp, #12]
  405dc4:	9302      	str	r3, [sp, #8]

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  405dc6:	44d9      	add	r9, fp
  405dc8:	fa1f f989 	uxth.w	r9, r9
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  405dcc:	45ca      	cmp	sl, r9
  405dce:	d8bc      	bhi.n	405d4a <tcp_write+0x10a>
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  if (p == NULL) {
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
  405dd0:	9b08      	ldr	r3, [sp, #32]
  405dd2:	ebcb 0503 	rsb	r5, fp, r3
  405dd6:	b2ad      	uxth	r5, r5
  405dd8:	e001      	b.n	405dde <tcp_write+0x19e>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  405dda:	2300      	movs	r3, #0
  405ddc:	9302      	str	r3, [sp, #8]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  405dde:	b337      	cbz	r7, 405e2e <tcp_write+0x1ee>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  405de0:	f8d6 9004 	ldr.w	r9, [r6, #4]
  405de4:	f1b9 0f00 	cmp.w	r9, #0
  405de8:	d102      	bne.n	405df0 <tcp_write+0x1b0>
  405dea:	e01d      	b.n	405e28 <tcp_write+0x1e8>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  405dec:	4699      	mov	r9, r3
  405dee:	e001      	b.n	405df4 <tcp_write+0x1b4>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
      p->tot_len += oversize_used;
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  405df0:	f8df b120 	ldr.w	fp, [pc, #288]	; 405f14 <tcp_write+0x2d4>
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
      p->tot_len += oversize_used;
  405df4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
  405df8:	443b      	add	r3, r7
  405dfa:	f8a9 3008 	strh.w	r3, [r9, #8]
      if (p->next == NULL) {
  405dfe:	f8d9 3000 	ldr.w	r3, [r9]
  405e02:	2b00      	cmp	r3, #0
  405e04:	d1f2      	bne.n	405dec <tcp_write+0x1ac>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  405e06:	f8b9 300a 	ldrh.w	r3, [r9, #10]
  405e0a:	f8d9 0004 	ldr.w	r0, [r9, #4]
  405e0e:	463a      	mov	r2, r7
  405e10:	9905      	ldr	r1, [sp, #20]
  405e12:	4418      	add	r0, r3
  405e14:	47d8      	blx	fp
        p->len += oversize_used;
  405e16:	f8b9 300a 	ldrh.w	r3, [r9, #10]
  405e1a:	443b      	add	r3, r7
  405e1c:	f8a9 300a 	strh.w	r3, [r9, #10]
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  405e20:	f8d9 3000 	ldr.w	r3, [r9]
  405e24:	2b00      	cmp	r3, #0
  405e26:	d1e1      	bne.n	405dec <tcp_write+0x1ac>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
  405e28:	8933      	ldrh	r3, [r6, #8]
  405e2a:	441f      	add	r7, r3
  405e2c:	8137      	strh	r7, [r6, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  405e2e:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
  405e32:	f1b8 0f00 	cmp.w	r8, #0
  405e36:	d008      	beq.n	405e4a <tcp_write+0x20a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  405e38:	4641      	mov	r1, r8
  405e3a:	6870      	ldr	r0, [r6, #4]
  405e3c:	4b39      	ldr	r3, [pc, #228]	; (405f24 <tcp_write+0x2e4>)
  405e3e:	4798      	blx	r3
    last_unsent->len += concat_p->tot_len;
  405e40:	8932      	ldrh	r2, [r6, #8]
  405e42:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  405e46:	4413      	add	r3, r2
  405e48:	8133      	strh	r3, [r6, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  405e4a:	b916      	cbnz	r6, 405e52 <tcp_write+0x212>
    pcb->unsent = queue;
  405e4c:	9b02      	ldr	r3, [sp, #8]
  405e4e:	66e3      	str	r3, [r4, #108]	; 0x6c
  405e50:	e001      	b.n	405e56 <tcp_write+0x216>
  } else {
    last_unsent->next = queue;
  405e52:	9b02      	ldr	r3, [sp, #8]
  405e54:	6033      	str	r3, [r6, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  405e56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  405e58:	4453      	add	r3, sl
  405e5a:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
  405e5c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  405e60:	ebca 0303 	rsb	r3, sl, r3
  405e64:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
  405e68:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  405e6c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  405e70:	9b03      	ldr	r3, [sp, #12]
  405e72:	b1fb      	cbz	r3, 405eb4 <tcp_write+0x274>
  405e74:	68dc      	ldr	r4, [r3, #12]
  405e76:	b1fc      	cbz	r4, 405eb8 <tcp_write+0x278>
  405e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405e7a:	f013 0f02 	tst.w	r3, #2
  405e7e:	d11d      	bne.n	405ebc <tcp_write+0x27c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  405e80:	89a5      	ldrh	r5, [r4, #12]
  405e82:	2008      	movs	r0, #8
  405e84:	4b28      	ldr	r3, [pc, #160]	; (405f28 <tcp_write+0x2e8>)
  405e86:	4798      	blx	r3
  405e88:	4328      	orrs	r0, r5
  405e8a:	81a0      	strh	r0, [r4, #12]
  }

  return ERR_OK;
  405e8c:	2000      	movs	r0, #0
  405e8e:	e03b      	b.n	405f08 <tcp_write+0x2c8>
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  405e90:	7fa3      	ldrb	r3, [r4, #30]
  405e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405e96:	77a3      	strb	r3, [r4, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
  405e98:	f1b8 0f00 	cmp.w	r8, #0
  405e9c:	d002      	beq.n	405ea4 <tcp_write+0x264>
    pbuf_free(concat_p);
  405e9e:	4640      	mov	r0, r8
  405ea0:	4b1e      	ldr	r3, [pc, #120]	; (405f1c <tcp_write+0x2dc>)
  405ea2:	4798      	blx	r3
  }
  if (queue != NULL) {
  405ea4:	9b02      	ldr	r3, [sp, #8]
  405ea6:	b15b      	cbz	r3, 405ec0 <tcp_write+0x280>
    tcp_segs_free(queue);
  405ea8:	4618      	mov	r0, r3
  405eaa:	4b20      	ldr	r3, [pc, #128]	; (405f2c <tcp_write+0x2ec>)
  405eac:	4798      	blx	r3
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  405eae:	f04f 30ff 	mov.w	r0, #4294967295
  405eb2:	e029      	b.n	405f08 <tcp_write+0x2c8>
  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
  405eb4:	2000      	movs	r0, #0
  405eb6:	e027      	b.n	405f08 <tcp_write+0x2c8>
  405eb8:	2000      	movs	r0, #0
  405eba:	e025      	b.n	405f08 <tcp_write+0x2c8>
  405ebc:	2000      	movs	r0, #0
  405ebe:	e023      	b.n	405f08 <tcp_write+0x2c8>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  405ec0:	f04f 30ff 	mov.w	r0, #4294967295
  405ec4:	e020      	b.n	405f08 <tcp_write+0x2c8>
  405ec6:	9505      	str	r5, [sp, #20]
  405ec8:	9309      	str	r3, [sp, #36]	; 0x24
  405eca:	4692      	mov	sl, r2
  405ecc:	4604      	mov	r4, r0
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
  405ece:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  405ed2:	085b      	lsrs	r3, r3, #1
  405ed4:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  405ed6:	4293      	cmp	r3, r2
  405ed8:	bf28      	it	cs
  405eda:	4613      	movcs	r3, r2
  405edc:	9306      	str	r3, [sp, #24]

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
  405ede:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
  405ee2:	9304      	str	r3, [sp, #16]
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  405ee4:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
  405ee6:	2e00      	cmp	r6, #0
  405ee8:	f47f aed3 	bne.w	405c92 <tcp_write+0x52>
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  405eec:	9603      	str	r6, [sp, #12]
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
  405eee:	2500      	movs	r5, #0
  u16_t oversize_used = 0;
  405ef0:	462f      	mov	r7, r5
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  u16_t pos = 0; /* position in 'arg' data */
  405ef2:	46a9      	mov	r9, r5
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  405ef4:	46a8      	mov	r8, r5
  405ef6:	e722      	b.n	405d3e <tcp_write+0xfe>
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  405ef8:	f06f 000c 	mvn.w	r0, #12
  405efc:	e004      	b.n	405f08 <tcp_write+0x2c8>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  405efe:	7fa3      	ldrb	r3, [r4, #30]
  405f00:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405f04:	77a3      	strb	r3, [r4, #30]
  405f06:	e7cd      	b.n	405ea4 <tcp_write+0x264>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
  405f08:	b00b      	add	sp, #44	; 0x2c
  405f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f0e:	bf00      	nop
  405f10:	00403729 	.word	0x00403729
  405f14:	00407f29 	.word	0x00407f29
  405f18:	004038dd 	.word	0x004038dd
  405f1c:	004036c9 	.word	0x004036c9
  405f20:	00405b05 	.word	0x00405b05
  405f24:	00403901 	.word	0x00403901
  405f28:	00401095 	.word	0x00401095
  405f2c:	00403b71 	.word	0x00403b71

00405f30 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  405f30:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
  405f34:	2b07      	cmp	r3, #7
  405f36:	d906      	bls.n	405f46 <tcp_enqueue_flags+0x16>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  405f38:	7f83      	ldrb	r3, [r0, #30]
  405f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405f3e:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  405f40:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
  405f44:	4770      	bx	lr
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  405f46:	b570      	push	{r4, r5, r6, lr}
  405f48:	b082      	sub	sp, #8
  405f4a:	f001 0302 	and.w	r3, r1, #2
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  405f4e:	1c1e      	adds	r6, r3, #0
  405f50:	bf18      	it	ne
  405f52:	2601      	movne	r6, #1
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  405f54:	2b00      	cmp	r3, #0
  405f56:	bf14      	ite	ne
  405f58:	2304      	movne	r3, #4
  405f5a:	2300      	moveq	r3, #0

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
  405f5c:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
  405f60:	2a00      	cmp	r2, #0
  405f62:	d046      	beq.n	405ff2 <tcp_enqueue_flags+0xc2>
  405f64:	460d      	mov	r5, r1
  405f66:	4604      	mov	r4, r0
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  405f68:	2200      	movs	r2, #0
  405f6a:	4619      	mov	r1, r3
  405f6c:	4610      	mov	r0, r2
  405f6e:	4b23      	ldr	r3, [pc, #140]	; (405ffc <tcp_enqueue_flags+0xcc>)
  405f70:	4798      	blx	r3
  405f72:	4601      	mov	r1, r0
  405f74:	b930      	cbnz	r0, 405f84 <tcp_enqueue_flags+0x54>
    pcb->flags |= TF_NAGLEMEMERR;
  405f76:	7fa3      	ldrb	r3, [r4, #30]
  405f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405f7c:	77a3      	strb	r3, [r4, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  405f7e:	f04f 30ff 	mov.w	r0, #4294967295
  405f82:	e038      	b.n	405ff6 <tcp_enqueue_flags+0xc6>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  405f84:	9600      	str	r6, [sp, #0]
  405f86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  405f88:	462a      	mov	r2, r5
  405f8a:	4620      	mov	r0, r4
  405f8c:	4e1c      	ldr	r6, [pc, #112]	; (406000 <tcp_enqueue_flags+0xd0>)
  405f8e:	47b0      	blx	r6
  405f90:	4601      	mov	r1, r0
  405f92:	b930      	cbnz	r0, 405fa2 <tcp_enqueue_flags+0x72>
    pcb->flags |= TF_NAGLEMEMERR;
  405f94:	7fa3      	ldrb	r3, [r4, #30]
  405f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405f9a:	77a3      	strb	r3, [r4, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  405f9c:	f04f 30ff 	mov.w	r0, #4294967295
  405fa0:	e029      	b.n	405ff6 <tcp_enqueue_flags+0xc6>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  405fa2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  405fa4:	b912      	cbnz	r2, 405fac <tcp_enqueue_flags+0x7c>
    pcb->unsent = seg;
  405fa6:	66e0      	str	r0, [r4, #108]	; 0x6c
  405fa8:	e004      	b.n	405fb4 <tcp_enqueue_flags+0x84>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  405faa:	461a      	mov	r2, r3
  405fac:	6813      	ldr	r3, [r2, #0]
  405fae:	2b00      	cmp	r3, #0
  405fb0:	d1fb      	bne.n	405faa <tcp_enqueue_flags+0x7a>
    useg->next = seg;
  405fb2:	6011      	str	r1, [r2, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  405fb4:	2300      	movs	r3, #0
  405fb6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  405fba:	f015 0f03 	tst.w	r5, #3
  405fbe:	d007      	beq.n	405fd0 <tcp_enqueue_flags+0xa0>
    pcb->snd_lbb++;
  405fc0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  405fc2:	3301      	adds	r3, #1
  405fc4:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
  405fc6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  405fca:	3b01      	subs	r3, #1
  405fcc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
  405fd0:	f015 0f01 	tst.w	r5, #1
  405fd4:	d003      	beq.n	405fde <tcp_enqueue_flags+0xae>
    pcb->flags |= TF_FIN;
  405fd6:	7fa3      	ldrb	r3, [r4, #30]
  405fd8:	f043 0320 	orr.w	r3, r3, #32
  405fdc:	77a3      	strb	r3, [r4, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  405fde:	6848      	ldr	r0, [r1, #4]
  405fe0:	4b08      	ldr	r3, [pc, #32]	; (406004 <tcp_enqueue_flags+0xd4>)
  405fe2:	4798      	blx	r3
  405fe4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  405fe8:	4418      	add	r0, r3
  405fea:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  405fee:	2000      	movs	r0, #0
  405ff0:	e001      	b.n	405ff6 <tcp_enqueue_flags+0xc6>
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  405ff2:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
  405ff6:	b002      	add	sp, #8
  405ff8:	bd70      	pop	{r4, r5, r6, pc}
  405ffa:	bf00      	nop
  405ffc:	00403729 	.word	0x00403729
  406000:	00405b05 	.word	0x00405b05
  406004:	004038dd 	.word	0x004038dd

00406008 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  406008:	b570      	push	{r4, r5, r6, lr}
  40600a:	4605      	mov	r5, r0
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  40600c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  40600e:	b90c      	cbnz	r4, 406014 <tcp_send_fin+0xc>
  406010:	e017      	b.n	406042 <tcp_send_fin+0x3a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);
  406012:	461c      	mov	r4, r3
tcp_send_fin(struct tcp_pcb *pcb)
{
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  406014:	6823      	ldr	r3, [r4, #0]
  406016:	2b00      	cmp	r3, #0
  406018:	d1fb      	bne.n	406012 <tcp_send_fin+0xa>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  40601a:	68e3      	ldr	r3, [r4, #12]
  40601c:	8998      	ldrh	r0, [r3, #12]
  40601e:	4b0b      	ldr	r3, [pc, #44]	; (40604c <tcp_send_fin+0x44>)
  406020:	4798      	blx	r3
  406022:	f010 0f07 	tst.w	r0, #7
  406026:	d10c      	bne.n	406042 <tcp_send_fin+0x3a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  406028:	68e6      	ldr	r6, [r4, #12]
  40602a:	89b4      	ldrh	r4, [r6, #12]
  40602c:	2001      	movs	r0, #1
  40602e:	4b08      	ldr	r3, [pc, #32]	; (406050 <tcp_send_fin+0x48>)
  406030:	4798      	blx	r3
  406032:	4320      	orrs	r0, r4
  406034:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
  406036:	7fab      	ldrb	r3, [r5, #30]
  406038:	f043 0320 	orr.w	r3, r3, #32
  40603c:	77ab      	strb	r3, [r5, #30]
      return ERR_OK;
  40603e:	2000      	movs	r0, #0
  406040:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  406042:	2101      	movs	r1, #1
  406044:	4628      	mov	r0, r5
  406046:	4b03      	ldr	r3, [pc, #12]	; (406054 <tcp_send_fin+0x4c>)
  406048:	4798      	blx	r3
}
  40604a:	bd70      	pop	{r4, r5, r6, pc}
  40604c:	004010a1 	.word	0x004010a1
  406050:	00401095 	.word	0x00401095
  406054:	00405f31 	.word	0x00405f31

00406058 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  406058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40605c:	b082      	sub	sp, #8
  40605e:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  406060:	6d00      	ldr	r0, [r0, #80]	; 0x50
  406062:	4b16      	ldr	r3, [pc, #88]	; (4060bc <tcp_send_empty_ack+0x64>)
  406064:	4798      	blx	r3
  406066:	4603      	mov	r3, r0
  406068:	2200      	movs	r2, #0
  40606a:	4611      	mov	r1, r2
  40606c:	4620      	mov	r0, r4
  40606e:	4d14      	ldr	r5, [pc, #80]	; (4060c0 <tcp_send_empty_ack+0x68>)
  406070:	47a8      	blx	r5
  if (p == NULL) {
  406072:	b1f0      	cbz	r0, 4060b2 <tcp_send_empty_ack+0x5a>
  406074:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  406076:	6847      	ldr	r7, [r0, #4]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  406078:	7fa3      	ldrb	r3, [r4, #30]
  40607a:	f023 0303 	bic.w	r3, r3, #3
  40607e:	77a3      	strb	r3, [r4, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
  406080:	1d26      	adds	r6, r4, #4
  406082:	8903      	ldrh	r3, [r0, #8]
  406084:	9300      	str	r3, [sp, #0]
  406086:	2306      	movs	r3, #6
  406088:	4632      	mov	r2, r6
  40608a:	4621      	mov	r1, r4
  40608c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4060cc <tcp_send_empty_ack+0x74>
  406090:	47c0      	blx	r8
  406092:	8238      	strh	r0, [r7, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  406094:	7aa3      	ldrb	r3, [r4, #10]
  406096:	2206      	movs	r2, #6
  406098:	9201      	str	r2, [sp, #4]
  40609a:	7a62      	ldrb	r2, [r4, #9]
  40609c:	9200      	str	r2, [sp, #0]
  40609e:	4632      	mov	r2, r6
  4060a0:	4621      	mov	r1, r4
  4060a2:	4628      	mov	r0, r5
  4060a4:	4c07      	ldr	r4, [pc, #28]	; (4060c4 <tcp_send_empty_ack+0x6c>)
  4060a6:	47a0      	blx	r4
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
  4060a8:	4628      	mov	r0, r5
  4060aa:	4b07      	ldr	r3, [pc, #28]	; (4060c8 <tcp_send_empty_ack+0x70>)
  4060ac:	4798      	blx	r3

  return ERR_OK;
  4060ae:	2000      	movs	r0, #0
  4060b0:	e001      	b.n	4060b6 <tcp_send_empty_ack+0x5e>
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  if (p == NULL) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  4060b2:	f06f 0001 	mvn.w	r0, #1
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);

  return ERR_OK;
}
  4060b6:	b002      	add	sp, #8
  4060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060bc:	004010ad 	.word	0x004010ad
  4060c0:	00405bcd 	.word	0x00405bcd
  4060c4:	00402875 	.word	0x00402875
  4060c8:	004036c9 	.word	0x004036c9
  4060cc:	00402461 	.word	0x00402461

004060d0 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  4060d0:	4ba0      	ldr	r3, [pc, #640]	; (406354 <tcp_output+0x284>)
  4060d2:	681b      	ldr	r3, [r3, #0]
  4060d4:	4283      	cmp	r3, r0
  4060d6:	f000 8131 	beq.w	40633c <tcp_output+0x26c>
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  4060da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4060de:	b085      	sub	sp, #20
  4060e0:	4605      	mov	r5, r0
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  4060e2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
  4060e6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  4060ea:	429a      	cmp	r2, r3
  4060ec:	bf28      	it	cs
  4060ee:	461a      	movcs	r2, r3
  4060f0:	4692      	mov	sl, r2

  seg = pcb->unsent;
  4060f2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  4060f4:	7f83      	ldrb	r3, [r0, #30]
  4060f6:	f013 0f02 	tst.w	r3, #2
  4060fa:	d00f      	beq.n	40611c <tcp_output+0x4c>
  4060fc:	b154      	cbz	r4, 406114 <tcp_output+0x44>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  4060fe:	68e3      	ldr	r3, [r4, #12]
  406100:	6858      	ldr	r0, [r3, #4]
  406102:	4b95      	ldr	r3, [pc, #596]	; (406358 <tcp_output+0x288>)
  406104:	4798      	blx	r3
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
  406106:	8923      	ldrh	r3, [r4, #8]
  406108:	6caa      	ldr	r2, [r5, #72]	; 0x48
  40610a:	1a9b      	subs	r3, r3, r2
  40610c:	4418      	add	r0, r3
  40610e:	4582      	cmp	sl, r0
  406110:	f080 8116 	bcs.w	406340 <tcp_output+0x270>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  406114:	4628      	mov	r0, r5
  406116:	4b91      	ldr	r3, [pc, #580]	; (40635c <tcp_output+0x28c>)
  406118:	4798      	blx	r3
  40611a:	e118      	b.n	40634e <tcp_output+0x27e>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  40611c:	f8d0 8070 	ldr.w	r8, [r0, #112]	; 0x70
  if (useg != NULL) {
  406120:	f1b8 0f00 	cmp.w	r8, #0
  406124:	d104      	bne.n	406130 <tcp_output+0x60>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  406126:	2c00      	cmp	r4, #0
  406128:	f040 80f0 	bne.w	40630c <tcp_output+0x23c>
  40612c:	e0fb      	b.n	406326 <tcp_output+0x256>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
  40612e:	4698      	mov	r8, r3
  406130:	f8d8 3000 	ldr.w	r3, [r8]
  406134:	2b00      	cmp	r3, #0
  406136:	d1fa      	bne.n	40612e <tcp_output+0x5e>
  406138:	e7f5      	b.n	406126 <tcp_output+0x56>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
  40613a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40613c:	b1b3      	cbz	r3, 40616c <tcp_output+0x9c>
  40613e:	7fab      	ldrb	r3, [r5, #30]
  406140:	f013 0f44 	tst.w	r3, #68	; 0x44
  406144:	d112      	bne.n	40616c <tcp_output+0x9c>
  406146:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  406148:	b12a      	cbz	r2, 406156 <tcp_output+0x86>
  40614a:	6811      	ldr	r1, [r2, #0]
  40614c:	b971      	cbnz	r1, 40616c <tcp_output+0x9c>
  40614e:	8911      	ldrh	r1, [r2, #8]
  406150:	8eea      	ldrh	r2, [r5, #54]	; 0x36
  406152:	4291      	cmp	r1, r2
  406154:	d20a      	bcs.n	40616c <tcp_output+0x9c>
  406156:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
  40615a:	b13a      	cbz	r2, 40616c <tcp_output+0x9c>
  40615c:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
  406160:	2a07      	cmp	r2, #7
  406162:	d803      	bhi.n	40616c <tcp_output+0x9c>
  406164:	f013 0fa0 	tst.w	r3, #160	; 0xa0
  406168:	f000 80dd 	beq.w	406326 <tcp_output+0x256>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
  40616c:	6823      	ldr	r3, [r4, #0]
  40616e:	66eb      	str	r3, [r5, #108]	; 0x6c

    if (pcb->state != SYN_SENT) {
  406170:	7e2b      	ldrb	r3, [r5, #24]
  406172:	2b02      	cmp	r3, #2
  406174:	d00c      	beq.n	406190 <tcp_output+0xc0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  406176:	f8d4 900c 	ldr.w	r9, [r4, #12]
  40617a:	f8b9 700c 	ldrh.w	r7, [r9, #12]
  40617e:	2010      	movs	r0, #16
  406180:	47d8      	blx	fp
  406182:	4338      	orrs	r0, r7
  406184:	f8a9 000c 	strh.w	r0, [r9, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  406188:	7fab      	ldrb	r3, [r5, #30]
  40618a:	f023 0303 	bic.w	r3, r3, #3
  40618e:	77ab      	strb	r3, [r5, #30]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
  406190:	68e7      	ldr	r7, [r4, #12]
  406192:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  406194:	4b72      	ldr	r3, [pc, #456]	; (406360 <tcp_output+0x290>)
  406196:	4798      	blx	r3
  406198:	60b8      	str	r0, [r7, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  40619a:	68e7      	ldr	r7, [r4, #12]
  40619c:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
  40619e:	47d8      	blx	fp
  4061a0:	81f8      	strh	r0, [r7, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  4061a2:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
  4061a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  4061a6:	4413      	add	r3, r2
  4061a8:	632b      	str	r3, [r5, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
  4061aa:	7aa3      	ldrb	r3, [r4, #10]
  4061ac:	f013 0f01 	tst.w	r3, #1
  4061b0:	d00a      	beq.n	4061c8 <tcp_output+0xf8>

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  4061b2:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
  4061b4:	1d29      	adds	r1, r5, #4
  4061b6:	f240 50b4 	movw	r0, #1460	; 0x5b4
  4061ba:	4b6a      	ldr	r3, [pc, #424]	; (406364 <tcp_output+0x294>)
  4061bc:	4798      	blx	r3
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  4061be:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
  4061c2:	4b67      	ldr	r3, [pc, #412]	; (406360 <tcp_output+0x290>)
  4061c4:	4798      	blx	r3
  4061c6:	6178      	str	r0, [r7, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
  4061c8:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
  4061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4061d0:	d101      	bne.n	4061d6 <tcp_output+0x106>
    pcb->rtime = 0;
  4061d2:	2300      	movs	r3, #0
  4061d4:	86ab      	strh	r3, [r5, #52]	; 0x34
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
  4061d6:	b10d      	cbz	r5, 4061dc <tcp_output+0x10c>
  4061d8:	682b      	ldr	r3, [r5, #0]
  4061da:	b933      	cbnz	r3, 4061ea <tcp_output+0x11a>
    netif = ip_route(&(pcb->remote_ip));
  4061dc:	1d28      	adds	r0, r5, #4
  4061de:	4b62      	ldr	r3, [pc, #392]	; (406368 <tcp_output+0x298>)
  4061e0:	4798      	blx	r3
    if (netif == NULL) {
  4061e2:	2800      	cmp	r0, #0
  4061e4:	d033      	beq.n	40624e <tcp_output+0x17e>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  4061e6:	6843      	ldr	r3, [r0, #4]
  4061e8:	602b      	str	r3, [r5, #0]
  }

  if (pcb->rttest == 0) {
  4061ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4061ec:	b933      	cbnz	r3, 4061fc <tcp_output+0x12c>
    pcb->rttest = tcp_ticks;
  4061ee:	4b5f      	ldr	r3, [pc, #380]	; (40636c <tcp_output+0x29c>)
  4061f0:	681b      	ldr	r3, [r3, #0]
  4061f2:	63ab      	str	r3, [r5, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
  4061f4:	68e3      	ldr	r3, [r4, #12]
  4061f6:	6858      	ldr	r0, [r3, #4]
  4061f8:	47b0      	blx	r6
  4061fa:	63e8      	str	r0, [r5, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  4061fc:	6862      	ldr	r2, [r4, #4]
  4061fe:	68e3      	ldr	r3, [r4, #12]
  406200:	6851      	ldr	r1, [r2, #4]
  406202:	1a5b      	subs	r3, r3, r1
  406204:	b29b      	uxth	r3, r3

  seg->p->len -= len;
  406206:	8951      	ldrh	r1, [r2, #10]
  406208:	1ac9      	subs	r1, r1, r3
  40620a:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
  40620c:	6861      	ldr	r1, [r4, #4]
  40620e:	890a      	ldrh	r2, [r1, #8]
  406210:	1ad3      	subs	r3, r2, r3
  406212:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
  406214:	6863      	ldr	r3, [r4, #4]
  406216:	68e2      	ldr	r2, [r4, #12]
  406218:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  40621a:	68e3      	ldr	r3, [r4, #12]
  40621c:	2200      	movs	r2, #0
  40621e:	741a      	strb	r2, [r3, #16]
  406220:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  406222:	68e7      	ldr	r7, [r4, #12]
  406224:	1d2a      	adds	r2, r5, #4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
  406226:	6860      	ldr	r0, [r4, #4]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  406228:	8903      	ldrh	r3, [r0, #8]
  40622a:	9300      	str	r3, [sp, #0]
  40622c:	2306      	movs	r3, #6
  40622e:	9203      	str	r2, [sp, #12]
  406230:	4629      	mov	r1, r5
  406232:	f8df 9148 	ldr.w	r9, [pc, #328]	; 40637c <tcp_output+0x2ac>
  406236:	47c8      	blx	r9
  406238:	8238      	strh	r0, [r7, #16]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  40623a:	7aab      	ldrb	r3, [r5, #10]
  40623c:	6860      	ldr	r0, [r4, #4]
  40623e:	2206      	movs	r2, #6
  406240:	9201      	str	r2, [sp, #4]
  406242:	7a6a      	ldrb	r2, [r5, #9]
  406244:	9200      	str	r2, [sp, #0]
  406246:	9a03      	ldr	r2, [sp, #12]
  406248:	4629      	mov	r1, r5
  40624a:	4f49      	ldr	r7, [pc, #292]	; (406370 <tcp_output+0x2a0>)
  40624c:	47b8      	blx	r7
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }

    tcp_output_segment(seg, pcb);
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  40624e:	68e3      	ldr	r3, [r4, #12]
  406250:	6858      	ldr	r0, [r3, #4]
  406252:	47b0      	blx	r6
  406254:	4607      	mov	r7, r0
  406256:	f8b4 9008 	ldrh.w	r9, [r4, #8]
  40625a:	68e3      	ldr	r3, [r4, #12]
  40625c:	8998      	ldrh	r0, [r3, #12]
  40625e:	4b45      	ldr	r3, [pc, #276]	; (406374 <tcp_output+0x2a4>)
  406260:	4798      	blx	r3
  406262:	f010 0003 	ands.w	r0, r0, #3
  406266:	bf18      	it	ne
  406268:	2001      	movne	r0, #1
  40626a:	4448      	add	r0, r9
  40626c:	4438      	add	r0, r7
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  40626e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  406270:	1a1b      	subs	r3, r3, r0
  406272:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
  406274:	bfb8      	it	lt
  406276:	6528      	strlt	r0, [r5, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  406278:	8927      	ldrh	r7, [r4, #8]
  40627a:	68e3      	ldr	r3, [r4, #12]
  40627c:	8998      	ldrh	r0, [r3, #12]
  40627e:	4b3d      	ldr	r3, [pc, #244]	; (406374 <tcp_output+0x2a4>)
  406280:	4798      	blx	r3
  406282:	f010 0003 	ands.w	r0, r0, #3
  406286:	bf18      	it	ne
  406288:	2001      	movne	r0, #1
  40628a:	42f8      	cmn	r0, r7
  40628c:	d038      	beq.n	406300 <tcp_output+0x230>
      seg->next = NULL;
  40628e:	2300      	movs	r3, #0
  406290:	6023      	str	r3, [r4, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  406292:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  406294:	b913      	cbnz	r3, 40629c <tcp_output+0x1cc>
        pcb->unacked = seg;
  406296:	672c      	str	r4, [r5, #112]	; 0x70
  406298:	46a0      	mov	r8, r4
  40629a:	e034      	b.n	406306 <tcp_output+0x236>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
  40629c:	68e3      	ldr	r3, [r4, #12]
  40629e:	6858      	ldr	r0, [r3, #4]
  4062a0:	47b0      	blx	r6
  4062a2:	4607      	mov	r7, r0
  4062a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4062a8:	6858      	ldr	r0, [r3, #4]
  4062aa:	47b0      	blx	r6
  4062ac:	1a38      	subs	r0, r7, r0
  4062ae:	2800      	cmp	r0, #0
  4062b0:	da22      	bge.n	4062f8 <tcp_output+0x228>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  4062b2:	f105 0970 	add.w	r9, r5, #112	; 0x70
          while (*cur_seg &&
  4062b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  4062b8:	b93b      	cbnz	r3, 4062ca <tcp_output+0x1fa>
  4062ba:	e017      	b.n	4062ec <tcp_output+0x21c>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  4062bc:	6824      	ldr	r4, [r4, #0]
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
  4062be:	6823      	ldr	r3, [r4, #0]
  4062c0:	b933      	cbnz	r3, 4062d0 <tcp_output+0x200>
  4062c2:	464b      	mov	r3, r9
  4062c4:	46a1      	mov	r9, r4
  4062c6:	461c      	mov	r4, r3
  4062c8:	e010      	b.n	4062ec <tcp_output+0x21c>
  4062ca:	4622      	mov	r2, r4
  4062cc:	464c      	mov	r4, r9
  4062ce:	4691      	mov	r9, r2
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  4062d0:	68db      	ldr	r3, [r3, #12]
  4062d2:	6858      	ldr	r0, [r3, #4]
  4062d4:	47b0      	blx	r6
  4062d6:	4607      	mov	r7, r0
  4062d8:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4062dc:	6858      	ldr	r0, [r3, #4]
  4062de:	47b0      	blx	r6
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
  4062e0:	1a38      	subs	r0, r7, r0
  4062e2:	2800      	cmp	r0, #0
  4062e4:	dbea      	blt.n	4062bc <tcp_output+0x1ec>
  4062e6:	464b      	mov	r3, r9
  4062e8:	46a1      	mov	r9, r4
  4062ea:	461c      	mov	r4, r3
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
  4062ec:	f8d9 3000 	ldr.w	r3, [r9]
  4062f0:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
  4062f2:	f8c9 4000 	str.w	r4, [r9]
  4062f6:	e006      	b.n	406306 <tcp_output+0x236>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  4062f8:	f8c8 4000 	str.w	r4, [r8]
  4062fc:	46a0      	mov	r8, r4
  4062fe:	e002      	b.n	406306 <tcp_output+0x236>
          useg = useg->next;
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  406300:	4620      	mov	r0, r4
  406302:	4b1d      	ldr	r3, [pc, #116]	; (406378 <tcp_output+0x2a8>)
  406304:	4798      	blx	r3
    }
    seg = pcb->unsent;
  406306:	6eec      	ldr	r4, [r5, #108]	; 0x6c
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  406308:	b91c      	cbnz	r4, 406312 <tcp_output+0x242>
  40630a:	e00e      	b.n	40632a <tcp_output+0x25a>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  40630c:	4e12      	ldr	r6, [pc, #72]	; (406358 <tcp_output+0x288>)
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;

    if (pcb->state != SYN_SENT) {
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  40630e:	f8df b070 	ldr.w	fp, [pc, #112]	; 406380 <tcp_output+0x2b0>
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  406312:	68e3      	ldr	r3, [r4, #12]
  406314:	6858      	ldr	r0, [r3, #4]
  406316:	47b0      	blx	r6
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  406318:	8923      	ldrh	r3, [r4, #8]
  40631a:	6caa      	ldr	r2, [r5, #72]	; 0x48
  40631c:	1a9b      	subs	r3, r3, r2
  40631e:	4418      	add	r0, r3
  406320:	4582      	cmp	sl, r0
  406322:	f4bf af0a 	bcs.w	40613a <tcp_output+0x6a>
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  406326:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  406328:	b913      	cbnz	r3, 406330 <tcp_output+0x260>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  40632a:	2300      	movs	r3, #0
  40632c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  406330:	7fab      	ldrb	r3, [r5, #30]
  406332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  406336:	77ab      	strb	r3, [r5, #30]
  return ERR_OK;
  406338:	2000      	movs	r0, #0
  40633a:	e008      	b.n	40634e <tcp_output+0x27e>
  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
  40633c:	2000      	movs	r0, #0
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
  40633e:	4770      	bx	lr
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  406340:	f8d5 8070 	ldr.w	r8, [r5, #112]	; 0x70
  if (useg != NULL) {
  406344:	f1b8 0f00 	cmp.w	r8, #0
  406348:	f47f aef2 	bne.w	406130 <tcp_output+0x60>
  40634c:	e7de      	b.n	40630c <tcp_output+0x23c>
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
  40634e:	b005      	add	sp, #20
  406350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406354:	204048b4 	.word	0x204048b4
  406358:	004010c5 	.word	0x004010c5
  40635c:	00406059 	.word	0x00406059
  406360:	004010ad 	.word	0x004010ad
  406364:	00404551 	.word	0x00404551
  406368:	00402559 	.word	0x00402559
  40636c:	204048a0 	.word	0x204048a0
  406370:	00402875 	.word	0x00402875
  406374:	004010a1 	.word	0x004010a1
  406378:	00403b4d 	.word	0x00403b4d
  40637c:	00402461 	.word	0x00402461
  406380:	00401095 	.word	0x00401095

00406384 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  406384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406388:	b083      	sub	sp, #12
  40638a:	4681      	mov	r9, r0
  40638c:	468a      	mov	sl, r1
  40638e:	4693      	mov	fp, r2
  406390:	4698      	mov	r8, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  406392:	2200      	movs	r2, #0
  406394:	2114      	movs	r1, #20
  406396:	2001      	movs	r0, #1
  406398:	4b1d      	ldr	r3, [pc, #116]	; (406410 <tcp_rst+0x8c>)
  40639a:	4798      	blx	r3
  if (p == NULL) {
  40639c:	2800      	cmp	r0, #0
  40639e:	d033      	beq.n	406408 <tcp_rst+0x84>
  4063a0:	4605      	mov	r5, r0
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  4063a2:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
  4063a4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
  4063a8:	4e1a      	ldr	r6, [pc, #104]	; (406414 <tcp_rst+0x90>)
  4063aa:	47b0      	blx	r6
  4063ac:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
  4063ae:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  4063b2:	47b0      	blx	r6
  4063b4:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
  4063b6:	4648      	mov	r0, r9
  4063b8:	4f17      	ldr	r7, [pc, #92]	; (406418 <tcp_rst+0x94>)
  4063ba:	47b8      	blx	r7
  4063bc:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
  4063be:	4650      	mov	r0, sl
  4063c0:	47b8      	blx	r7
  4063c2:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  4063c4:	f245 0014 	movw	r0, #20500	; 0x5014
  4063c8:	47b0      	blx	r6
  4063ca:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
  4063cc:	2600      	movs	r6, #0
  4063ce:	230b      	movs	r3, #11
  4063d0:	73a3      	strb	r3, [r4, #14]
  4063d2:	2368      	movs	r3, #104	; 0x68
  4063d4:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
  4063d6:	7426      	strb	r6, [r4, #16]
  4063d8:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
  4063da:	74a6      	strb	r6, [r4, #18]
  4063dc:	74e6      	strb	r6, [r4, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
  4063de:	892b      	ldrh	r3, [r5, #8]
  4063e0:	9300      	str	r3, [sp, #0]
  4063e2:	2306      	movs	r3, #6
  4063e4:	4642      	mov	r2, r8
  4063e6:	4659      	mov	r1, fp
  4063e8:	4628      	mov	r0, r5
  4063ea:	4f0c      	ldr	r7, [pc, #48]	; (40641c <tcp_rst+0x98>)
  4063ec:	47b8      	blx	r7
  4063ee:	8220      	strh	r0, [r4, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  4063f0:	2306      	movs	r3, #6
  4063f2:	9301      	str	r3, [sp, #4]
  4063f4:	9600      	str	r6, [sp, #0]
  4063f6:	23ff      	movs	r3, #255	; 0xff
  4063f8:	4642      	mov	r2, r8
  4063fa:	4659      	mov	r1, fp
  4063fc:	4628      	mov	r0, r5
  4063fe:	4c08      	ldr	r4, [pc, #32]	; (406420 <tcp_rst+0x9c>)
  406400:	47a0      	blx	r4
  pbuf_free(p);
  406402:	4628      	mov	r0, r5
  406404:	4b07      	ldr	r3, [pc, #28]	; (406424 <tcp_rst+0xa0>)
  406406:	4798      	blx	r3
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  406408:	b003      	add	sp, #12
  40640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40640e:	bf00      	nop
  406410:	00403729 	.word	0x00403729
  406414:	00401095 	.word	0x00401095
  406418:	004010ad 	.word	0x004010ad
  40641c:	00402461 	.word	0x00402461
  406420:	00402875 	.word	0x00402875
  406424:	004036c9 	.word	0x004036c9

00406428 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  406428:	6f02      	ldr	r2, [r0, #112]	; 0x70
  40642a:	b912      	cbnz	r2, 406432 <tcp_rexmit_rto+0xa>
  40642c:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  40642e:	461a      	mov	r2, r3
  406430:	e000      	b.n	406434 <tcp_rexmit_rto+0xc>
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  406432:	b508      	push	{r3, lr}
  if (pcb->unacked == NULL) {
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  406434:	6813      	ldr	r3, [r2, #0]
  406436:	2b00      	cmp	r3, #0
  406438:	d1f9      	bne.n	40642e <tcp_rexmit_rto+0x6>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  40643a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  40643c:	6013      	str	r3, [r2, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  40643e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  406440:	66c3      	str	r3, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  406442:	2200      	movs	r2, #0
  406444:	6702      	str	r2, [r0, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
  406446:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
  40644a:	3301      	adds	r3, #1
  40644c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  406450:	6382      	str	r2, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  406452:	4b01      	ldr	r3, [pc, #4]	; (406458 <tcp_rexmit_rto+0x30>)
  406454:	4798      	blx	r3
  406456:	bd08      	pop	{r3, pc}
  406458:	004060d1 	.word	0x004060d1

0040645c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  40645c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  406460:	6f07      	ldr	r7, [r0, #112]	; 0x70
  406462:	b32f      	cbz	r7, 4064b0 <tcp_rexmit+0x54>
  406464:	4680      	mov	r8, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
  406466:	683b      	ldr	r3, [r7, #0]
  406468:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  40646a:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  while (*cur_seg &&
  40646e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  406470:	b923      	cbnz	r3, 40647c <tcp_rexmit+0x20>
  406472:	e00e      	b.n	406492 <tcp_rexmit+0x36>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  406474:	682d      	ldr	r5, [r5, #0]
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
  406476:	682b      	ldr	r3, [r5, #0]
  406478:	b90b      	cbnz	r3, 40647e <tcp_rexmit+0x22>
  40647a:	e00a      	b.n	406492 <tcp_rexmit+0x36>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  40647c:	4e0d      	ldr	r6, [pc, #52]	; (4064b4 <tcp_rexmit+0x58>)
  40647e:	68db      	ldr	r3, [r3, #12]
  406480:	6858      	ldr	r0, [r3, #4]
  406482:	47b0      	blx	r6
  406484:	4604      	mov	r4, r0
  406486:	68fb      	ldr	r3, [r7, #12]
  406488:	6858      	ldr	r0, [r3, #4]
  40648a:	47b0      	blx	r6
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
  40648c:	1a20      	subs	r0, r4, r0
  40648e:	2800      	cmp	r0, #0
  406490:	dbf0      	blt.n	406474 <tcp_rexmit+0x18>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
  406492:	682b      	ldr	r3, [r5, #0]
  406494:	603b      	str	r3, [r7, #0]
  *cur_seg = seg;
  406496:	602f      	str	r7, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  406498:	683b      	ldr	r3, [r7, #0]
  40649a:	b90b      	cbnz	r3, 4064a0 <tcp_rexmit+0x44>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  40649c:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
  4064a0:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
  4064a4:	3301      	adds	r3, #1
  4064a6:	f888 3046 	strb.w	r3, [r8, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  4064aa:	2300      	movs	r3, #0
  4064ac:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  4064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064b4:	004010c5 	.word	0x004010c5

004064b8 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  4064b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4064ba:	b34b      	cbz	r3, 406510 <tcp_rexmit_fast+0x58>
  4064bc:	7f83      	ldrb	r3, [r0, #30]
  4064be:	f013 0f04 	tst.w	r3, #4
  4064c2:	d125      	bne.n	406510 <tcp_rexmit_fast+0x58>
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  4064c4:	b510      	push	{r4, lr}
  4064c6:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  4064c8:	4b12      	ldr	r3, [pc, #72]	; (406514 <tcp_rexmit_fast+0x5c>)
  4064ca:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
  4064cc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  4064d0:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
  4064d4:	4293      	cmp	r3, r2
  4064d6:	d903      	bls.n	4064e0 <tcp_rexmit_fast+0x28>
      pcb->ssthresh = pcb->snd_wnd / 2;
  4064d8:	0852      	lsrs	r2, r2, #1
  4064da:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
  4064de:	e002      	b.n	4064e6 <tcp_rexmit_fast+0x2e>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
  4064e0:	085b      	lsrs	r3, r3, #1
  4064e2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
  4064e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  4064e8:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  4064ec:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  4064f0:	da02      	bge.n	4064f8 <tcp_rexmit_fast+0x40>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
  4064f2:	005a      	lsls	r2, r3, #1
  4064f4:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  4064f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4064fc:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  406500:	4413      	add	r3, r2
  406502:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  406506:	7fa3      	ldrb	r3, [r4, #30]
  406508:	f043 0304 	orr.w	r3, r3, #4
  40650c:	77a3      	strb	r3, [r4, #30]
  40650e:	bd10      	pop	{r4, pc}
  406510:	4770      	bx	lr
  406512:	bf00      	nop
  406514:	0040645d 	.word	0x0040645d

00406518 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
  406518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40651c:	b082      	sub	sp, #8
  40651e:	4604      	mov	r4, r0
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  406520:	6d00      	ldr	r0, [r0, #80]	; 0x50
  406522:	3801      	subs	r0, #1
  406524:	4b12      	ldr	r3, [pc, #72]	; (406570 <tcp_keepalive+0x58>)
  406526:	4798      	blx	r3
  406528:	4603      	mov	r3, r0
  40652a:	2200      	movs	r2, #0
  40652c:	4611      	mov	r1, r2
  40652e:	4620      	mov	r0, r4
  406530:	4d10      	ldr	r5, [pc, #64]	; (406574 <tcp_keepalive+0x5c>)
  406532:	47a8      	blx	r5
  if(p == NULL) {
  406534:	b1c0      	cbz	r0, 406568 <tcp_keepalive+0x50>
  406536:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  406538:	6847      	ldr	r7, [r0, #4]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  40653a:	1d26      	adds	r6, r4, #4
  40653c:	8903      	ldrh	r3, [r0, #8]
  40653e:	9300      	str	r3, [sp, #0]
  406540:	2306      	movs	r3, #6
  406542:	4632      	mov	r2, r6
  406544:	4621      	mov	r1, r4
  406546:	f8df 8038 	ldr.w	r8, [pc, #56]	; 406580 <tcp_keepalive+0x68>
  40654a:	47c0      	blx	r8
  40654c:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  40654e:	7aa3      	ldrb	r3, [r4, #10]
  406550:	2206      	movs	r2, #6
  406552:	9201      	str	r2, [sp, #4]
  406554:	2200      	movs	r2, #0
  406556:	9200      	str	r2, [sp, #0]
  406558:	4632      	mov	r2, r6
  40655a:	4621      	mov	r1, r4
  40655c:	4628      	mov	r0, r5
  40655e:	4c06      	ldr	r4, [pc, #24]	; (406578 <tcp_keepalive+0x60>)
  406560:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  406562:	4628      	mov	r0, r5
  406564:	4b05      	ldr	r3, [pc, #20]	; (40657c <tcp_keepalive+0x64>)
  406566:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  406568:	b002      	add	sp, #8
  40656a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40656e:	bf00      	nop
  406570:	004010ad 	.word	0x004010ad
  406574:	00405bcd 	.word	0x00405bcd
  406578:	00402875 	.word	0x00402875
  40657c:	004036c9 	.word	0x004036c9
  406580:	00402461 	.word	0x00402461

00406584 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  406584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406588:	b082      	sub	sp, #8
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  40658a:	6f05      	ldr	r5, [r0, #112]	; 0x70

  if(seg == NULL) {
  40658c:	b915      	cbnz	r5, 406594 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
  40658e:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
  }
  if(seg == NULL) {
  406590:	2d00      	cmp	r5, #0
  406592:	d04f      	beq.n	406634 <tcp_zero_window_probe+0xb0>
  406594:	4604      	mov	r4, r0
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  406596:	68eb      	ldr	r3, [r5, #12]
  406598:	8998      	ldrh	r0, [r3, #12]
  40659a:	4b28      	ldr	r3, [pc, #160]	; (40663c <tcp_zero_window_probe+0xb8>)
  40659c:	4798      	blx	r3
  40659e:	f010 0f01 	tst.w	r0, #1
  4065a2:	d03d      	beq.n	406620 <tcp_zero_window_probe+0x9c>
  4065a4:	892b      	ldrh	r3, [r5, #8]
  4065a6:	b323      	cbz	r3, 4065f2 <tcp_zero_window_probe+0x6e>
  4065a8:	e03a      	b.n	406620 <tcp_zero_window_probe+0x9c>
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  4065aa:	1d25      	adds	r5, r4, #4
  4065ac:	8933      	ldrh	r3, [r6, #8]
  4065ae:	9300      	str	r3, [sp, #0]
  4065b0:	2306      	movs	r3, #6
  4065b2:	462a      	mov	r2, r5
  4065b4:	4621      	mov	r1, r4
  4065b6:	4630      	mov	r0, r6
  4065b8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 406654 <tcp_zero_window_probe+0xd0>
  4065bc:	47c0      	blx	r8
  4065be:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  4065c0:	7aa3      	ldrb	r3, [r4, #10]
  4065c2:	2206      	movs	r2, #6
  4065c4:	9201      	str	r2, [sp, #4]
  4065c6:	2200      	movs	r2, #0
  4065c8:	9200      	str	r2, [sp, #0]
  4065ca:	462a      	mov	r2, r5
  4065cc:	4621      	mov	r1, r4
  4065ce:	4630      	mov	r0, r6
  4065d0:	4c1b      	ldr	r4, [pc, #108]	; (406640 <tcp_zero_window_probe+0xbc>)
  4065d2:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  4065d4:	4630      	mov	r0, r6
  4065d6:	4b1b      	ldr	r3, [pc, #108]	; (406644 <tcp_zero_window_probe+0xc0>)
  4065d8:	4798      	blx	r3
  4065da:	e02b      	b.n	406634 <tcp_zero_window_probe+0xb0>
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  4065dc:	6877      	ldr	r7, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  4065de:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
  4065e2:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  4065e6:	2011      	movs	r0, #17
  4065e8:	4b17      	ldr	r3, [pc, #92]	; (406648 <tcp_zero_window_probe+0xc4>)
  4065ea:	4798      	blx	r3
  4065ec:	4328      	orrs	r0, r5
  4065ee:	81b8      	strh	r0, [r7, #12]
  4065f0:	e7db      	b.n	4065aa <tcp_zero_window_probe+0x26>

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  4065f2:	68eb      	ldr	r3, [r5, #12]
  4065f4:	685b      	ldr	r3, [r3, #4]
  4065f6:	2200      	movs	r2, #0
  4065f8:	4611      	mov	r1, r2
  4065fa:	4620      	mov	r0, r4
  4065fc:	4d13      	ldr	r5, [pc, #76]	; (40664c <tcp_zero_window_probe+0xc8>)
  4065fe:	47a8      	blx	r5
  if(p == NULL) {
  406600:	4606      	mov	r6, r0
  406602:	2800      	cmp	r0, #0
  406604:	d1ea      	bne.n	4065dc <tcp_zero_window_probe+0x58>
  406606:	e015      	b.n	406634 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  406608:	6877      	ldr	r7, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  40660a:	6868      	ldr	r0, [r5, #4]
  40660c:	8903      	ldrh	r3, [r0, #8]
  40660e:	892a      	ldrh	r2, [r5, #8]
  406610:	1a9b      	subs	r3, r3, r2
  406612:	b29b      	uxth	r3, r3
  406614:	2201      	movs	r2, #1
  406616:	f107 0114 	add.w	r1, r7, #20
  40661a:	4d0d      	ldr	r5, [pc, #52]	; (406650 <tcp_zero_window_probe+0xcc>)
  40661c:	47a8      	blx	r5
  40661e:	e7c4      	b.n	4065aa <tcp_zero_window_probe+0x26>

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  406620:	68eb      	ldr	r3, [r5, #12]
  406622:	685b      	ldr	r3, [r3, #4]
  406624:	2201      	movs	r2, #1
  406626:	2100      	movs	r1, #0
  406628:	4620      	mov	r0, r4
  40662a:	4e08      	ldr	r6, [pc, #32]	; (40664c <tcp_zero_window_probe+0xc8>)
  40662c:	47b0      	blx	r6
  if(p == NULL) {
  40662e:	4606      	mov	r6, r0
  406630:	2800      	cmp	r0, #0
  406632:	d1e9      	bne.n	406608 <tcp_zero_window_probe+0x84>
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  406634:	b002      	add	sp, #8
  406636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40663a:	bf00      	nop
  40663c:	004010a1 	.word	0x004010a1
  406640:	00402875 	.word	0x00402875
  406644:	004036c9 	.word	0x004036c9
  406648:	00401095 	.word	0x00401095
  40664c:	00405bcd 	.word	0x00405bcd
  406650:	004039f9 	.word	0x004039f9
  406654:	00402461 	.word	0x00402461

00406658 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  406658:	4770      	bx	lr
  40665a:	bf00      	nop

0040665c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  40665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406660:	b085      	sub	sp, #20
  406662:	4604      	mov	r4, r0
  406664:	4689      	mov	r9, r1

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
  406666:	6847      	ldr	r7, [r0, #4]
  406668:	7839      	ldrb	r1, [r7, #0]
  40666a:	f001 010f 	and.w	r1, r1, #15

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
  40666e:	8903      	ldrh	r3, [r0, #8]
  406670:	1c8a      	adds	r2, r1, #2
  406672:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
  406676:	db04      	blt.n	406682 <udp_input+0x26>
  406678:	0089      	lsls	r1, r1, #2
  40667a:	4249      	negs	r1, r1
  40667c:	4b6e      	ldr	r3, [pc, #440]	; (406838 <udp_input+0x1dc>)
  40667e:	4798      	blx	r3
  406680:	b118      	cbz	r0, 40668a <udp_input+0x2e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
  406682:	4620      	mov	r0, r4
  406684:	4b6d      	ldr	r3, [pc, #436]	; (40683c <udp_input+0x1e0>)
  406686:	4798      	blx	r3
    goto end;
  406688:	e0d2      	b.n	406830 <udp_input+0x1d4>
  }

  udphdr = (struct udp_hdr *)p->payload;
  40668a:	f8d4 a004 	ldr.w	sl, [r4, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
  40668e:	4649      	mov	r1, r9
  406690:	4b6b      	ldr	r3, [pc, #428]	; (406840 <udp_input+0x1e4>)
  406692:	6818      	ldr	r0, [r3, #0]
  406694:	4b6b      	ldr	r3, [pc, #428]	; (406844 <udp_input+0x1e8>)
  406696:	4798      	blx	r3
  406698:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
  40669a:	f8ba 0000 	ldrh.w	r0, [sl]
  40669e:	4e6a      	ldr	r6, [pc, #424]	; (406848 <udp_input+0x1ec>)
  4066a0:	47b0      	blx	r6
  4066a2:	4605      	mov	r5, r0
  dest = ntohs(udphdr->dest);
  4066a4:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  4066a8:	47b0      	blx	r6

#if LWIP_DHCP
  pcb = NULL;
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
  4066aa:	2844      	cmp	r0, #68	; 0x44
  4066ac:	d115      	bne.n	4066da <udp_input+0x7e>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
  4066ae:	2d43      	cmp	r5, #67	; 0x43
  4066b0:	d166      	bne.n	406780 <udp_input+0x124>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
  4066b2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  4066b6:	2b00      	cmp	r3, #0
  4066b8:	d062      	beq.n	406780 <udp_input+0x124>
  4066ba:	685b      	ldr	r3, [r3, #4]
  4066bc:	2b00      	cmp	r3, #0
  4066be:	d05f      	beq.n	406780 <udp_input+0x124>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
  4066c0:	f113 0f04 	cmn.w	r3, #4
  4066c4:	f000 80b2 	beq.w	40682c <udp_input+0x1d0>
  4066c8:	685a      	ldr	r2, [r3, #4]
  4066ca:	2a00      	cmp	r2, #0
  4066cc:	f000 80ae 	beq.w	40682c <udp_input+0x1d0>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
  4066d0:	495e      	ldr	r1, [pc, #376]	; (40684c <udp_input+0x1f0>)
    if (src == DHCP_SERVER_PORT) {
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
  4066d2:	6809      	ldr	r1, [r1, #0]
  4066d4:	428a      	cmp	r2, r1
  4066d6:	d153      	bne.n	406780 <udp_input+0x124>
  4066d8:	e0a8      	b.n	40682c <udp_input+0x1d0>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  4066da:	4b5d      	ldr	r3, [pc, #372]	; (406850 <udp_input+0x1f4>)
  4066dc:	f8d3 e000 	ldr.w	lr, [r3]
  4066e0:	f1be 0f00 	cmp.w	lr, #0
  4066e4:	d04c      	beq.n	406780 <udp_input+0x124>

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  4066e6:	4b56      	ldr	r3, [pc, #344]	; (406840 <udp_input+0x1e4>)
  4066e8:	f8d3 c000 	ldr.w	ip, [r3]
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
  4066ec:	4b57      	ldr	r3, [pc, #348]	; (40684c <udp_input+0x1f0>)
  4066ee:	f8d3 b000 	ldr.w	fp, [r3]
  4066f2:	4673      	mov	r3, lr
  4066f4:	2600      	movs	r6, #0
  4066f6:	4632      	mov	r2, r6
  4066f8:	9703      	str	r7, [sp, #12]
  4066fa:	4621      	mov	r1, r4
  4066fc:	4644      	mov	r4, r8
  4066fe:	46f0      	mov	r8, lr
  406700:	468e      	mov	lr, r1
  406702:	e000      	b.n	406706 <udp_input+0xaa>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  406704:	460b      	mov	r3, r1
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
  406706:	8a59      	ldrh	r1, [r3, #18]
  406708:	4281      	cmp	r1, r0
  40670a:	d12e      	bne.n	40676a <udp_input+0x10e>
        if (
  40670c:	2c00      	cmp	r4, #0
  40670e:	f040 8084 	bne.w	40681a <udp_input+0x1be>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  406712:	b163      	cbz	r3, 40672e <udp_input+0xd2>
  406714:	6819      	ldr	r1, [r3, #0]
  406716:	b151      	cbz	r1, 40672e <udp_input+0xd2>
  406718:	4561      	cmp	r1, ip
  40671a:	d126      	bne.n	40676a <udp_input+0x10e>
  40671c:	e007      	b.n	40672e <udp_input+0xd2>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
  40671e:	b131      	cbz	r1, 40672e <udp_input+0xd2>
  406720:	b12b      	cbz	r3, 40672e <udp_input+0xd2>
  406722:	ea8c 0701 	eor.w	r7, ip, r1
  406726:	f8d9 1008 	ldr.w	r1, [r9, #8]
  40672a:	420f      	tst	r7, r1
  40672c:	d11d      	bne.n	40676a <udp_input+0x10e>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
  40672e:	2e00      	cmp	r6, #0
  406730:	d178      	bne.n	406824 <udp_input+0x1c8>
  406732:	7c19      	ldrb	r1, [r3, #16]
  406734:	f001 0104 	and.w	r1, r1, #4
  406738:	b2c9      	uxtb	r1, r1
  40673a:	2900      	cmp	r1, #0
  40673c:	bf08      	it	eq
  40673e:	461e      	moveq	r6, r3
  406740:	e070      	b.n	406824 <udp_input+0x1c8>
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
  406742:	f113 0f04 	cmn.w	r3, #4
  406746:	d003      	beq.n	406750 <udp_input+0xf4>
          (ip_addr_isany(&pcb->remote_ip) ||
  406748:	6859      	ldr	r1, [r3, #4]
  40674a:	b109      	cbz	r1, 406750 <udp_input+0xf4>
  40674c:	4559      	cmp	r1, fp
  40674e:	d10c      	bne.n	40676a <udp_input+0x10e>
  406750:	9f03      	ldr	r7, [sp, #12]
  406752:	4671      	mov	r1, lr
  406754:	46c6      	mov	lr, r8
  406756:	46a0      	mov	r8, r4
  406758:	460c      	mov	r4, r1
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
  40675a:	b172      	cbz	r2, 40677a <udp_input+0x11e>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  40675c:	68d9      	ldr	r1, [r3, #12]
  40675e:	60d1      	str	r1, [r2, #12]
          pcb->next = udp_pcbs;
  406760:	f8c3 e00c 	str.w	lr, [r3, #12]
          udp_pcbs = pcb;
  406764:	4a3a      	ldr	r2, [pc, #232]	; (406850 <udp_input+0x1f4>)
  406766:	6013      	str	r3, [r2, #0]
  406768:	e007      	b.n	40677a <udp_input+0x11e>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40676a:	68d9      	ldr	r1, [r3, #12]
  40676c:	461a      	mov	r2, r3
  40676e:	2900      	cmp	r1, #0
  406770:	d1c8      	bne.n	406704 <udp_input+0xa8>
  406772:	9f03      	ldr	r7, [sp, #12]
  406774:	46a0      	mov	r8, r4
  406776:	4674      	mov	r4, lr
  406778:	e001      	b.n	40677e <udp_input+0x122>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
  40677a:	2b00      	cmp	r3, #0
  40677c:	d156      	bne.n	40682c <udp_input+0x1d0>
      pcb = uncon_pcb;
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  40677e:	b936      	cbnz	r6, 40678e <udp_input+0x132>
  406780:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406784:	4b2e      	ldr	r3, [pc, #184]	; (406840 <udp_input+0x1e4>)
  406786:	681b      	ldr	r3, [r3, #0]
  406788:	429a      	cmp	r2, r3
  40678a:	d142      	bne.n	406812 <udp_input+0x1b6>
  40678c:	2600      	movs	r6, #0
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
  40678e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  406792:	b16b      	cbz	r3, 4067b0 <udp_input+0x154>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  406794:	8923      	ldrh	r3, [r4, #8]
  406796:	9300      	str	r3, [sp, #0]
  406798:	2311      	movs	r3, #17
  40679a:	4a29      	ldr	r2, [pc, #164]	; (406840 <udp_input+0x1e4>)
  40679c:	492b      	ldr	r1, [pc, #172]	; (40684c <udp_input+0x1f0>)
  40679e:	4620      	mov	r0, r4
  4067a0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 406858 <udp_input+0x1fc>
  4067a4:	47c8      	blx	r9
  4067a6:	b118      	cbz	r0, 4067b0 <udp_input+0x154>
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
          UDP_STATS_INC(udp.drop);
          snmp_inc_udpinerrors();
          pbuf_free(p);
  4067a8:	4620      	mov	r0, r4
  4067aa:	4b24      	ldr	r3, [pc, #144]	; (40683c <udp_input+0x1e0>)
  4067ac:	4798      	blx	r3
          goto end;
  4067ae:	e03f      	b.n	406830 <udp_input+0x1d4>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
  4067b0:	f06f 0107 	mvn.w	r1, #7
  4067b4:	4620      	mov	r0, r4
  4067b6:	4b20      	ldr	r3, [pc, #128]	; (406838 <udp_input+0x1dc>)
  4067b8:	4798      	blx	r3
  4067ba:	b118      	cbz	r0, 4067c4 <udp_input+0x168>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
  4067bc:	4620      	mov	r0, r4
  4067be:	4b1f      	ldr	r3, [pc, #124]	; (40683c <udp_input+0x1e0>)
  4067c0:	4798      	blx	r3
      goto end;
  4067c2:	e035      	b.n	406830 <udp_input+0x1d4>
    }
    if (pcb != NULL) {
  4067c4:	b166      	cbz	r6, 4067e0 <udp_input+0x184>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  4067c6:	69b7      	ldr	r7, [r6, #24]
  4067c8:	b137      	cbz	r7, 4067d8 <udp_input+0x17c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  4067ca:	69f0      	ldr	r0, [r6, #28]
  4067cc:	9500      	str	r5, [sp, #0]
  4067ce:	4b1f      	ldr	r3, [pc, #124]	; (40684c <udp_input+0x1f0>)
  4067d0:	4622      	mov	r2, r4
  4067d2:	4631      	mov	r1, r6
  4067d4:	47b8      	blx	r7
  4067d6:	e02b      	b.n	406830 <udp_input+0x1d4>
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
  4067d8:	4620      	mov	r0, r4
  4067da:	4b18      	ldr	r3, [pc, #96]	; (40683c <udp_input+0x1e0>)
  4067dc:	4798      	blx	r3
        goto end;
  4067de:	e027      	b.n	406830 <udp_input+0x1d4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
  4067e0:	f1b8 0f00 	cmp.w	r8, #0
  4067e4:	d111      	bne.n	40680a <udp_input+0x1ae>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  4067e6:	4b16      	ldr	r3, [pc, #88]	; (406840 <udp_input+0x1e4>)
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
  4067e8:	681b      	ldr	r3, [r3, #0]
  4067ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4067ee:	2be0      	cmp	r3, #224	; 0xe0
  4067f0:	d00b      	beq.n	40680a <udp_input+0x1ae>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
  4067f2:	7839      	ldrb	r1, [r7, #0]
  4067f4:	f001 010f 	and.w	r1, r1, #15
  4067f8:	3102      	adds	r1, #2
  4067fa:	0089      	lsls	r1, r1, #2
  4067fc:	4620      	mov	r0, r4
  4067fe:	4b0e      	ldr	r3, [pc, #56]	; (406838 <udp_input+0x1dc>)
  406800:	4798      	blx	r3
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
  406802:	2103      	movs	r1, #3
  406804:	4620      	mov	r0, r4
  406806:	4b13      	ldr	r3, [pc, #76]	; (406854 <udp_input+0x1f8>)
  406808:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
  40680a:	4620      	mov	r0, r4
  40680c:	4b0b      	ldr	r3, [pc, #44]	; (40683c <udp_input+0x1e0>)
  40680e:	4798      	blx	r3
  406810:	e00e      	b.n	406830 <udp_input+0x1d4>
    }
  } else {
    pbuf_free(p);
  406812:	4620      	mov	r0, r4
  406814:	4b09      	ldr	r3, [pc, #36]	; (40683c <udp_input+0x1e0>)
  406816:	4798      	blx	r3
  }
end:
  PERF_STOP("udp_input");
}
  406818:	e00a      	b.n	406830 <udp_input+0x1d4>

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  40681a:	6819      	ldr	r1, [r3, #0]
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  40681c:	458c      	cmp	ip, r1
  40681e:	f47f af7e 	bne.w	40671e <udp_input+0xc2>
  406822:	e784      	b.n	40672e <udp_input+0xd2>
            uncon_pcb = pcb;
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
  406824:	8a99      	ldrh	r1, [r3, #20]
  406826:	42a9      	cmp	r1, r5
  406828:	d19f      	bne.n	40676a <udp_input+0x10e>
  40682a:	e78a      	b.n	406742 <udp_input+0xe6>
  40682c:	461e      	mov	r6, r3
  40682e:	e7ae      	b.n	40678e <udp_input+0x132>
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
  406830:	b005      	add	sp, #20
  406832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406836:	bf00      	nop
  406838:	00403659 	.word	0x00403659
  40683c:	004036c9 	.word	0x004036c9
  406840:	20403870 	.word	0x20403870
  406844:	004028b5 	.word	0x004028b5
  406848:	004010a1 	.word	0x004010a1
  40684c:	20403868 	.word	0x20403868
  406850:	204048b8 	.word	0x204048b8
  406854:	004023c5 	.word	0x004023c5
  406858:	00402461 	.word	0x00402461

0040685c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  40685c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40685e:	4b33      	ldr	r3, [pc, #204]	; (40692c <udp_bind+0xd0>)
  406860:	681b      	ldr	r3, [r3, #0]
  406862:	b1bb      	cbz	r3, 406894 <udp_bind+0x38>
  406864:	2600      	movs	r6, #0
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
  406866:	2701      	movs	r7, #1

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  406868:	4298      	cmp	r0, r3
  40686a:	d00e      	beq.n	40688a <udp_bind+0x2e>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
  40686c:	8a5c      	ldrh	r4, [r3, #18]
  40686e:	4294      	cmp	r4, r2
  406870:	d10c      	bne.n	40688c <udp_bind+0x30>
  406872:	2b00      	cmp	r3, #0
  406874:	d04b      	beq.n	40690e <udp_bind+0xb2>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
  406876:	681c      	ldr	r4, [r3, #0]
  406878:	2900      	cmp	r1, #0
  40687a:	d04b      	beq.n	406914 <udp_bind+0xb8>
  40687c:	2c00      	cmp	r4, #0
  40687e:	d049      	beq.n	406914 <udp_bind+0xb8>
           ip_addr_isany(ipaddr) ||
  406880:	680d      	ldr	r5, [r1, #0]
  406882:	42ac      	cmp	r4, r5
  406884:	d049      	beq.n	40691a <udp_bind+0xbe>
  406886:	b90d      	cbnz	r5, 40688c <udp_bind+0x30>
  406888:	e047      	b.n	40691a <udp_bind+0xbe>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
  40688a:	463e      	mov	r6, r7
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40688c:	68db      	ldr	r3, [r3, #12]
  40688e:	2b00      	cmp	r3, #0
  406890:	d1ea      	bne.n	406868 <udp_bind+0xc>
  406892:	e000      	b.n	406896 <udp_bind+0x3a>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  406894:	2600      	movs	r6, #0
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
  406896:	b109      	cbz	r1, 40689c <udp_bind+0x40>
  406898:	680b      	ldr	r3, [r1, #0]
  40689a:	e000      	b.n	40689e <udp_bind+0x42>
  40689c:	2300      	movs	r3, #0
  40689e:	6003      	str	r3, [r0, #0]

  /* no port specified? */
  if (port == 0) {
  4068a0:	2a00      	cmp	r2, #0
  4068a2:	d12c      	bne.n	4068fe <udp_bind+0xa2>
  4068a4:	4b22      	ldr	r3, [pc, #136]	; (406930 <udp_bind+0xd4>)
  4068a6:	8819      	ldrh	r1, [r3, #0]
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  4068a8:	4b20      	ldr	r3, [pc, #128]	; (40692c <udp_bind+0xd0>)
  4068aa:	681c      	ldr	r4, [r3, #0]
  4068ac:	f44f 4580 	mov.w	r5, #16384	; 0x4000
{
  u16_t n = 0;
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  4068b0:	f64f 77ff 	movw	r7, #65535	; 0xffff
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  4068b4:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
{
  u16_t n = 0;
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  4068b8:	42b9      	cmp	r1, r7
  4068ba:	d002      	beq.n	4068c2 <udp_bind+0x66>
  4068bc:	3101      	adds	r1, #1
  4068be:	b289      	uxth	r1, r1
  4068c0:	e000      	b.n	4068c4 <udp_bind+0x68>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  4068c2:	4671      	mov	r1, lr
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  4068c4:	b914      	cbnz	r4, 4068cc <udp_bind+0x70>
  4068c6:	4b1a      	ldr	r3, [pc, #104]	; (406930 <udp_bind+0xd4>)
  4068c8:	8019      	strh	r1, [r3, #0]
  4068ca:	e015      	b.n	4068f8 <udp_bind+0x9c>
    if (pcb->local_port == udp_port) {
  4068cc:	8a63      	ldrh	r3, [r4, #18]
  4068ce:	428b      	cmp	r3, r1
  4068d0:	d004      	beq.n	4068dc <udp_bind+0x80>
  4068d2:	4623      	mov	r3, r4
  4068d4:	e00b      	b.n	4068ee <udp_bind+0x92>
  4068d6:	8a5a      	ldrh	r2, [r3, #18]
  4068d8:	428a      	cmp	r2, r1
  4068da:	d108      	bne.n	4068ee <udp_bind+0x92>
  4068dc:	3d01      	subs	r5, #1
  4068de:	b2ad      	uxth	r5, r5
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  4068e0:	2d00      	cmp	r5, #0
  4068e2:	d1e9      	bne.n	4068b8 <udp_bind+0x5c>
  4068e4:	4b12      	ldr	r3, [pc, #72]	; (406930 <udp_bind+0xd4>)
  4068e6:	8019      	strh	r1, [r3, #0]
  if (port == 0) {
    port = udp_new_port();
    if (port == 0) {
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  4068e8:	f06f 0007 	mvn.w	r0, #7
  4068ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  4068ee:	68db      	ldr	r3, [r3, #12]
  4068f0:	2b00      	cmp	r3, #0
  4068f2:	d1f0      	bne.n	4068d6 <udp_bind+0x7a>
  4068f4:	4b0e      	ldr	r3, [pc, #56]	; (406930 <udp_bind+0xd4>)
  4068f6:	8019      	strh	r1, [r3, #0]
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
  4068f8:	4b0d      	ldr	r3, [pc, #52]	; (406930 <udp_bind+0xd4>)
  4068fa:	881a      	ldrh	r2, [r3, #0]
  ip_addr_set(&pcb->local_ip, ipaddr);

  /* no port specified? */
  if (port == 0) {
    port = udp_new_port();
    if (port == 0) {
  4068fc:	b182      	cbz	r2, 406920 <udp_bind+0xc4>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  }
  pcb->local_port = port;
  4068fe:	8242      	strh	r2, [r0, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  406900:	b98e      	cbnz	r6, 406926 <udp_bind+0xca>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  406902:	4b0a      	ldr	r3, [pc, #40]	; (40692c <udp_bind+0xd0>)
  406904:	681a      	ldr	r2, [r3, #0]
  406906:	60c2      	str	r2, [r0, #12]
    udp_pcbs = pcb;
  406908:	6018      	str	r0, [r3, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
  40690a:	2000      	movs	r0, #0
  40690c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ip_addr_isany(ipaddr) ||
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
  40690e:	f06f 0007 	mvn.w	r0, #7
  406912:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406914:	f06f 0007 	mvn.w	r0, #7
  406918:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40691a:	f06f 0007 	mvn.w	r0, #7
  40691e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (port == 0) {
    port = udp_new_port();
    if (port == 0) {
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  406920:	f06f 0007 	mvn.w	r0, #7
  406924:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
  406926:	2000      	movs	r0, #0
}
  406928:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40692a:	bf00      	nop
  40692c:	204048b8 	.word	0x204048b8
  406930:	20400012 	.word	0x20400012

00406934 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  406934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406938:	b085      	sub	sp, #20
  40693a:	4604      	mov	r4, r0
  40693c:	460f      	mov	r7, r1
  40693e:	4691      	mov	r9, r2
  406940:	469a      	mov	sl, r3
  406942:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  406946:	8a43      	ldrh	r3, [r0, #18]
  406948:	b92b      	cbnz	r3, 406956 <udp_sendto_if+0x22>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  40694a:	2200      	movs	r2, #0
  40694c:	4601      	mov	r1, r0
  40694e:	4b36      	ldr	r3, [pc, #216]	; (406a28 <udp_sendto_if+0xf4>)
  406950:	4798      	blx	r3
    if (err != ERR_OK) {
  406952:	2800      	cmp	r0, #0
  406954:	d15d      	bne.n	406a12 <udp_sendto_if+0xde>
      return err;
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  406956:	2108      	movs	r1, #8
  406958:	4638      	mov	r0, r7
  40695a:	4b34      	ldr	r3, [pc, #208]	; (406a2c <udp_sendto_if+0xf8>)
  40695c:	4798      	blx	r3
  40695e:	b168      	cbz	r0, 40697c <udp_sendto_if+0x48>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  406960:	2200      	movs	r2, #0
  406962:	2108      	movs	r1, #8
  406964:	2001      	movs	r0, #1
  406966:	4b32      	ldr	r3, [pc, #200]	; (406a30 <udp_sendto_if+0xfc>)
  406968:	4798      	blx	r3
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  40696a:	4606      	mov	r6, r0
  40696c:	2800      	cmp	r0, #0
  40696e:	d051      	beq.n	406a14 <udp_sendto_if+0xe0>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
    }
    if (p->tot_len != 0) {
  406970:	893b      	ldrh	r3, [r7, #8]
  406972:	b123      	cbz	r3, 40697e <udp_sendto_if+0x4a>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  406974:	4639      	mov	r1, r7
  406976:	4b2f      	ldr	r3, [pc, #188]	; (406a34 <udp_sendto_if+0x100>)
  406978:	4798      	blx	r3
  40697a:	e000      	b.n	40697e <udp_sendto_if+0x4a>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  40697c:	463e      	mov	r6, r7
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  40697e:	6875      	ldr	r5, [r6, #4]
  udphdr->src = htons(pcb->local_port);
  406980:	8a60      	ldrh	r0, [r4, #18]
  406982:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 406a3c <udp_sendto_if+0x108>
  406986:	47d8      	blx	fp
  406988:	8028      	strh	r0, [r5, #0]
  udphdr->dest = htons(dst_port);
  40698a:	4650      	mov	r0, sl
  40698c:	47d8      	blx	fp
  40698e:	8068      	strh	r0, [r5, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
  406990:	2300      	movs	r3, #0
  406992:	71ab      	strb	r3, [r5, #6]
  406994:	71eb      	strb	r3, [r5, #7]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
  406996:	46a2      	mov	sl, r4
  406998:	b10c      	cbz	r4, 40699e <udp_sendto_if+0x6a>
  40699a:	6823      	ldr	r3, [r4, #0]
  40699c:	b913      	cbnz	r3, 4069a4 <udp_sendto_if+0x70>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
  40699e:	f108 0a04 	add.w	sl, r8, #4
  4069a2:	e00b      	b.n	4069bc <udp_sendto_if+0x88>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
  4069a4:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4069a8:	4293      	cmp	r3, r2
  4069aa:	d007      	beq.n	4069bc <udp_sendto_if+0x88>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
  4069ac:	42be      	cmp	r6, r7
  4069ae:	d034      	beq.n	406a1a <udp_sendto_if+0xe6>
        /* free the header pbuf */
        pbuf_free(q);
  4069b0:	4630      	mov	r0, r6
  4069b2:	4b21      	ldr	r3, [pc, #132]	; (406a38 <udp_sendto_if+0x104>)
  4069b4:	4798      	blx	r3
        q = NULL;
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
  4069b6:	f06f 0005 	mvn.w	r0, #5
  4069ba:	e031      	b.n	406a20 <udp_sendto_if+0xec>
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
  4069bc:	8930      	ldrh	r0, [r6, #8]
  4069be:	4b1f      	ldr	r3, [pc, #124]	; (406a3c <udp_sendto_if+0x108>)
  4069c0:	4798      	blx	r3
  4069c2:	80a8      	strh	r0, [r5, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  4069c4:	7c23      	ldrb	r3, [r4, #16]
  4069c6:	f013 0f01 	tst.w	r3, #1
  4069ca:	d10e      	bne.n	4069ea <udp_sendto_if+0xb6>
        acc = udpchksum + (u16_t)~(chksum);
        udpchksum = FOLD_U32T(acc);
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
  4069cc:	8933      	ldrh	r3, [r6, #8]
  4069ce:	9300      	str	r3, [sp, #0]
  4069d0:	2311      	movs	r3, #17
  4069d2:	464a      	mov	r2, r9
  4069d4:	4651      	mov	r1, sl
  4069d6:	4630      	mov	r0, r6
  4069d8:	f8df b068 	ldr.w	fp, [pc, #104]	; 406a44 <udp_sendto_if+0x110>
  4069dc:	47d8      	blx	fp

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
        udpchksum = 0xffff;
      }
      udphdr->chksum = udpchksum;
  4069de:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4069e2:	2800      	cmp	r0, #0
  4069e4:	bf08      	it	eq
  4069e6:	4618      	moveq	r0, r3
  4069e8:	80e8      	strh	r0, [r5, #6]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
  4069ea:	7aa3      	ldrb	r3, [r4, #10]
  4069ec:	f8cd 8008 	str.w	r8, [sp, #8]
  4069f0:	2211      	movs	r2, #17
  4069f2:	9201      	str	r2, [sp, #4]
  4069f4:	7a62      	ldrb	r2, [r4, #9]
  4069f6:	9200      	str	r2, [sp, #0]
  4069f8:	464a      	mov	r2, r9
  4069fa:	4651      	mov	r1, sl
  4069fc:	4630      	mov	r0, r6
  4069fe:	4c10      	ldr	r4, [pc, #64]	; (406a40 <udp_sendto_if+0x10c>)
  406a00:	47a0      	blx	r4
  406a02:	4604      	mov	r4, r0
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  406a04:	42be      	cmp	r6, r7
  406a06:	d00b      	beq.n	406a20 <udp_sendto_if+0xec>
    /* free the header pbuf */
    pbuf_free(q);
  406a08:	4630      	mov	r0, r6
  406a0a:	4b0b      	ldr	r3, [pc, #44]	; (406a38 <udp_sendto_if+0x104>)
  406a0c:	4798      	blx	r3
    q = NULL;
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
  406a0e:	4620      	mov	r0, r4
  406a10:	e006      	b.n	406a20 <udp_sendto_if+0xec>
  406a12:	e005      	b.n	406a20 <udp_sendto_if+0xec>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  406a14:	f04f 30ff 	mov.w	r0, #4294967295
  406a18:	e002      	b.n	406a20 <udp_sendto_if+0xec>
        /* free the header pbuf */
        pbuf_free(q);
        q = NULL;
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
  406a1a:	f06f 0005 	mvn.w	r0, #5
  406a1e:	e7ff      	b.n	406a20 <udp_sendto_if+0xec>
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
}
  406a20:	b005      	add	sp, #20
  406a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a26:	bf00      	nop
  406a28:	0040685d 	.word	0x0040685d
  406a2c:	00403659 	.word	0x00403659
  406a30:	00403729 	.word	0x00403729
  406a34:	00403935 	.word	0x00403935
  406a38:	004036c9 	.word	0x004036c9
  406a3c:	00401095 	.word	0x00401095
  406a40:	00402781 	.word	0x00402781
  406a44:	00402461 	.word	0x00402461

00406a48 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  406a48:	b570      	push	{r4, r5, r6, lr}
  406a4a:	4604      	mov	r4, r0
  406a4c:	460d      	mov	r5, r1
  406a4e:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
  406a50:	8a43      	ldrh	r3, [r0, #18]
  406a52:	b923      	cbnz	r3, 406a5e <udp_connect+0x16>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  406a54:	2200      	movs	r2, #0
  406a56:	4601      	mov	r1, r0
  406a58:	4b11      	ldr	r3, [pc, #68]	; (406aa0 <udp_connect+0x58>)
  406a5a:	4798      	blx	r3
    if (err != ERR_OK) {
  406a5c:	b9d0      	cbnz	r0, 406a94 <udp_connect+0x4c>
      return err;
    }
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
  406a5e:	b10d      	cbz	r5, 406a64 <udp_connect+0x1c>
  406a60:	682b      	ldr	r3, [r5, #0]
  406a62:	e000      	b.n	406a66 <udp_connect+0x1e>
  406a64:	2300      	movs	r3, #0
  406a66:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
  406a68:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  406a6a:	7c23      	ldrb	r3, [r4, #16]
  406a6c:	f043 0304 	orr.w	r3, r3, #4
  406a70:	7423      	strb	r3, [r4, #16]
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  406a72:	4b0c      	ldr	r3, [pc, #48]	; (406aa4 <udp_connect+0x5c>)
  406a74:	681a      	ldr	r2, [r3, #0]
  406a76:	b142      	cbz	r2, 406a8a <udp_connect+0x42>
    if (pcb == ipcb) {
  406a78:	4294      	cmp	r4, r2
  406a7a:	d00c      	beq.n	406a96 <udp_connect+0x4e>
  406a7c:	4613      	mov	r3, r2
  406a7e:	e001      	b.n	406a84 <udp_connect+0x3c>
  406a80:	429c      	cmp	r4, r3
  406a82:	d00a      	beq.n	406a9a <udp_connect+0x52>
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  406a84:	68db      	ldr	r3, [r3, #12]
  406a86:	2b00      	cmp	r3, #0
  406a88:	d1fa      	bne.n	406a80 <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  406a8a:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
  406a8c:	4b05      	ldr	r3, [pc, #20]	; (406aa4 <udp_connect+0x5c>)
  406a8e:	601c      	str	r4, [r3, #0]
  return ERR_OK;
  406a90:	2000      	movs	r0, #0
  406a92:	bd70      	pop	{r4, r5, r6, pc}
  406a94:	bd70      	pop	{r4, r5, r6, pc}

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    if (pcb == ipcb) {
      /* already on the list, just return */
      return ERR_OK;
  406a96:	2000      	movs	r0, #0
  406a98:	bd70      	pop	{r4, r5, r6, pc}
  406a9a:	2000      	movs	r0, #0
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
  406a9c:	bd70      	pop	{r4, r5, r6, pc}
  406a9e:	bf00      	nop
  406aa0:	0040685d 	.word	0x0040685d
  406aa4:	204048b8 	.word	0x204048b8

00406aa8 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
  406aa8:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
  406aaa:	61c2      	str	r2, [r0, #28]
  406aac:	4770      	bx	lr
  406aae:	bf00      	nop

00406ab0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  406ab0:	b508      	push	{r3, lr}
  406ab2:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  406ab4:	4b0b      	ldr	r3, [pc, #44]	; (406ae4 <udp_remove+0x34>)
  406ab6:	681b      	ldr	r3, [r3, #0]
  406ab8:	4283      	cmp	r3, r0
  406aba:	d001      	beq.n	406ac0 <udp_remove+0x10>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  406abc:	b923      	cbnz	r3, 406ac8 <udp_remove+0x18>
  406abe:	e00c      	b.n	406ada <udp_remove+0x2a>

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  406ac0:	68da      	ldr	r2, [r3, #12]
  406ac2:	4b08      	ldr	r3, [pc, #32]	; (406ae4 <udp_remove+0x34>)
  406ac4:	601a      	str	r2, [r3, #0]
  406ac6:	e008      	b.n	406ada <udp_remove+0x2a>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  406ac8:	68da      	ldr	r2, [r3, #12]
  406aca:	4291      	cmp	r1, r2
  406acc:	d102      	bne.n	406ad4 <udp_remove+0x24>
  406ace:	b10a      	cbz	r2, 406ad4 <udp_remove+0x24>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  406ad0:	68ca      	ldr	r2, [r1, #12]
  406ad2:	60da      	str	r2, [r3, #12]
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  406ad4:	68db      	ldr	r3, [r3, #12]
  406ad6:	2b00      	cmp	r3, #0
  406ad8:	d1f6      	bne.n	406ac8 <udp_remove+0x18>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  406ada:	2000      	movs	r0, #0
  406adc:	4b02      	ldr	r3, [pc, #8]	; (406ae8 <udp_remove+0x38>)
  406ade:	4798      	blx	r3
  406ae0:	bd08      	pop	{r3, pc}
  406ae2:	bf00      	nop
  406ae4:	204048b8 	.word	0x204048b8
  406ae8:	004034cd 	.word	0x004034cd

00406aec <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  406aec:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  406aee:	2000      	movs	r0, #0
  406af0:	4b05      	ldr	r3, [pc, #20]	; (406b08 <udp_new+0x1c>)
  406af2:	4798      	blx	r3
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  406af4:	4604      	mov	r4, r0
  406af6:	b128      	cbz	r0, 406b04 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  406af8:	2220      	movs	r2, #32
  406afa:	2100      	movs	r1, #0
  406afc:	4b03      	ldr	r3, [pc, #12]	; (406b0c <udp_new+0x20>)
  406afe:	4798      	blx	r3
    pcb->ttl = UDP_TTL;
  406b00:	23ff      	movs	r3, #255	; 0xff
  406b02:	72a3      	strb	r3, [r4, #10]
  }
  return pcb;
}
  406b04:	4620      	mov	r0, r4
  406b06:	bd10      	pop	{r4, pc}
  406b08:	004034ad 	.word	0x004034ad
  406b0c:	0040805d 	.word	0x0040805d

00406b10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  406b10:	b510      	push	{r4, lr}
  406b12:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  406b14:	eb00 0280 	add.w	r2, r0, r0, lsl #2
  406b18:	4b09      	ldr	r3, [pc, #36]	; (406b40 <etharp_free_entry+0x30>)
  406b1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406b1e:	b138      	cbz	r0, 406b30 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  406b20:	4b08      	ldr	r3, [pc, #32]	; (406b44 <etharp_free_entry+0x34>)
  406b22:	4798      	blx	r3
    arp_table[i].q = NULL;
  406b24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  406b28:	009b      	lsls	r3, r3, #2
  406b2a:	2100      	movs	r1, #0
  406b2c:	4a04      	ldr	r2, [pc, #16]	; (406b40 <etharp_free_entry+0x30>)
  406b2e:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  406b30:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406b34:	4b02      	ldr	r3, [pc, #8]	; (406b40 <etharp_free_entry+0x30>)
  406b36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  406b3a:	2300      	movs	r3, #0
  406b3c:	74a3      	strb	r3, [r4, #18]
  406b3e:	bd10      	pop	{r4, pc}
  406b40:	204024f0 	.word	0x204024f0
  406b44:	004036c9 	.word	0x004036c9

00406b48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  406b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b4c:	b083      	sub	sp, #12
  406b4e:	4a3a      	ldr	r2, [pc, #232]	; (406c38 <etharp_find_entry+0xf0>)
  406b50:	2300      	movs	r3, #0
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u8_t age_queue = 0;
  406b52:	4698      	mov	r8, r3
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  406b54:	260a      	movs	r6, #10
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  406b56:	469e      	mov	lr, r3
  406b58:	469b      	mov	fp, r3
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  406b5a:	4634      	mov	r4, r6
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  406b5c:	46b4      	mov	ip, r6
  406b5e:	46b1      	mov	r9, r6
  406b60:	9101      	str	r1, [sp, #4]
  406b62:	4615      	mov	r5, r2
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
  406b64:	7c97      	ldrb	r7, [r2, #18]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  406b66:	2c0a      	cmp	r4, #10
  406b68:	d102      	bne.n	406b70 <etharp_find_entry+0x28>
  406b6a:	b90f      	cbnz	r7, 406b70 <etharp_find_entry+0x28>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  406b6c:	b25c      	sxtb	r4, r3
  406b6e:	e021      	b.n	406bb4 <etharp_find_entry+0x6c>
    } else if (state != ETHARP_STATE_EMPTY) {
  406b70:	b307      	cbz	r7, 406bb4 <etharp_find_entry+0x6c>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  406b72:	b130      	cbz	r0, 406b82 <etharp_find_entry+0x3a>
  406b74:	6801      	ldr	r1, [r0, #0]
  406b76:	468a      	mov	sl, r1
  406b78:	6869      	ldr	r1, [r5, #4]
  406b7a:	458a      	cmp	sl, r1
  406b7c:	d101      	bne.n	406b82 <etharp_find_entry+0x3a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  406b7e:	b258      	sxtb	r0, r3
  406b80:	e056      	b.n	406c30 <etharp_find_entry+0xe8>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  406b82:	2f01      	cmp	r7, #1
  406b84:	d10e      	bne.n	406ba4 <etharp_find_entry+0x5c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  406b86:	682f      	ldr	r7, [r5, #0]
  406b88:	b12f      	cbz	r7, 406b96 <etharp_find_entry+0x4e>
          if (arp_table[i].ctime >= age_queue) {
  406b8a:	7ced      	ldrb	r5, [r5, #19]
  406b8c:	4545      	cmp	r5, r8
  406b8e:	d311      	bcc.n	406bb4 <etharp_find_entry+0x6c>
            old_queue = i;
  406b90:	b25e      	sxtb	r6, r3
            age_queue = arp_table[i].ctime;
  406b92:	46a8      	mov	r8, r5
  406b94:	e00e      	b.n	406bb4 <etharp_find_entry+0x6c>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  406b96:	7ced      	ldrb	r5, [r5, #19]
  406b98:	455d      	cmp	r5, fp
  406b9a:	d30b      	bcc.n	406bb4 <etharp_find_entry+0x6c>
            old_pending = i;
  406b9c:	fa4f f983 	sxtb.w	r9, r3
            age_pending = arp_table[i].ctime;
  406ba0:	46ab      	mov	fp, r5
  406ba2:	e007      	b.n	406bb4 <etharp_find_entry+0x6c>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  406ba4:	2f01      	cmp	r7, #1
  406ba6:	d905      	bls.n	406bb4 <etharp_find_entry+0x6c>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  406ba8:	7ced      	ldrb	r5, [r5, #19]
  406baa:	4575      	cmp	r5, lr
  406bac:	d302      	bcc.n	406bb4 <etharp_find_entry+0x6c>
            old_stable = i;
  406bae:	fa4f fc83 	sxtb.w	ip, r3
            age_stable = arp_table[i].ctime;
  406bb2:	46ae      	mov	lr, r5
  406bb4:	3301      	adds	r3, #1
  406bb6:	3214      	adds	r2, #20
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  406bb8:	2b0a      	cmp	r3, #10
  406bba:	d1d2      	bne.n	406b62 <etharp_find_entry+0x1a>
  406bbc:	9901      	ldr	r1, [sp, #4]
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  406bbe:	f011 0f02 	tst.w	r1, #2
  406bc2:	d12d      	bne.n	406c20 <etharp_find_entry+0xd8>
  406bc4:	4605      	mov	r5, r0
  406bc6:	2c0a      	cmp	r4, #10
  406bc8:	d103      	bne.n	406bd2 <etharp_find_entry+0x8a>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  406bca:	f011 0f01 	tst.w	r1, #1
  406bce:	d104      	bne.n	406bda <etharp_find_entry+0x92>
  406bd0:	e029      	b.n	406c26 <etharp_find_entry+0xde>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  406bd2:	2c09      	cmp	r4, #9
  406bd4:	dc01      	bgt.n	406bda <etharp_find_entry+0x92>
    i = empty;
  406bd6:	b2e4      	uxtb	r4, r4
  406bd8:	e011      	b.n	406bfe <etharp_find_entry+0xb6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  406bda:	f1bc 0f09 	cmp.w	ip, #9
  406bde:	dc02      	bgt.n	406be6 <etharp_find_entry+0x9e>
      /* recycle oldest stable*/
      i = old_stable;
  406be0:	fa5f f48c 	uxtb.w	r4, ip
  406be4:	e008      	b.n	406bf8 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  406be6:	f1b9 0f09 	cmp.w	r9, #9
  406bea:	dc02      	bgt.n	406bf2 <etharp_find_entry+0xaa>
      /* recycle oldest pending */
      i = old_pending;
  406bec:	fa5f f489 	uxtb.w	r4, r9
  406bf0:	e002      	b.n	406bf8 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  406bf2:	2e09      	cmp	r6, #9
  406bf4:	dc1a      	bgt.n	406c2c <etharp_find_entry+0xe4>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  406bf6:	b2f4      	uxtb	r4, r6
      return (s8_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  406bf8:	4620      	mov	r0, r4
  406bfa:	4b10      	ldr	r3, [pc, #64]	; (406c3c <etharp_find_entry+0xf4>)
  406bfc:	4798      	blx	r3
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  406bfe:	b135      	cbz	r5, 406c0e <etharp_find_entry+0xc6>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  406c00:	6829      	ldr	r1, [r5, #0]
  406c02:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  406c06:	4a0c      	ldr	r2, [pc, #48]	; (406c38 <etharp_find_entry+0xf0>)
  406c08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406c0c:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
  406c0e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  406c12:	4b09      	ldr	r3, [pc, #36]	; (406c38 <etharp_find_entry+0xf0>)
  406c14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  406c18:	2200      	movs	r2, #0
  406c1a:	74da      	strb	r2, [r3, #19]
  return (err_t)i;
  406c1c:	b260      	sxtb	r0, r4
  406c1e:	e007      	b.n	406c30 <etharp_find_entry+0xe8>
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  406c20:	f04f 30ff 	mov.w	r0, #4294967295
  406c24:	e004      	b.n	406c30 <etharp_find_entry+0xe8>
  406c26:	f04f 30ff 	mov.w	r0, #4294967295
  406c2a:	e001      	b.n	406c30 <etharp_find_entry+0xe8>
      i = old_queue;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  406c2c:	f04f 30ff 	mov.w	r0, #4294967295
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  }
  arp_table[i].ctime = 0;
  return (err_t)i;
}
  406c30:	b003      	add	sp, #12
  406c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c36:	bf00      	nop
  406c38:	204024f0 	.word	0x204024f0
  406c3c:	00406b11 	.word	0x00406b11

00406c40 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  406c40:	b538      	push	{r3, r4, r5, lr}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
  406c42:	684c      	ldr	r4, [r1, #4]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
  406c44:	681d      	ldr	r5, [r3, #0]
  406c46:	6025      	str	r5, [r4, #0]
  406c48:	889b      	ldrh	r3, [r3, #4]
  406c4a:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
  406c4c:	6813      	ldr	r3, [r2, #0]
  406c4e:	f8c4 3006 	str.w	r3, [r4, #6]
  406c52:	8893      	ldrh	r3, [r2, #4]
  406c54:	8163      	strh	r3, [r4, #10]
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
  406c56:	2308      	movs	r3, #8
  406c58:	7323      	strb	r3, [r4, #12]
  406c5a:	2300      	movs	r3, #0
  406c5c:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  406c5e:	6983      	ldr	r3, [r0, #24]
  406c60:	4798      	blx	r3
}
  406c62:	bd38      	pop	{r3, r4, r5, pc}

00406c64 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  406c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c66:	4c0e      	ldr	r4, [pc, #56]	; (406ca0 <etharp_tmr+0x3c>)
  406c68:	2500      	movs	r5, #0
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  406c6a:	4e0e      	ldr	r6, [pc, #56]	; (406ca4 <etharp_tmr+0x40>)
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  406c6c:	2702      	movs	r7, #2
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
  406c6e:	4628      	mov	r0, r5
  406c70:	4621      	mov	r1, r4
  406c72:	7ca2      	ldrb	r2, [r4, #18]
    if (state != ETHARP_STATE_EMPTY
  406c74:	b172      	cbz	r2, 406c94 <etharp_tmr+0x30>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  406c76:	7ce3      	ldrb	r3, [r4, #19]
  406c78:	3301      	adds	r3, #1
  406c7a:	b2db      	uxtb	r3, r3
  406c7c:	74e3      	strb	r3, [r4, #19]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  406c7e:	2bef      	cmp	r3, #239	; 0xef
  406c80:	d803      	bhi.n	406c8a <etharp_tmr+0x26>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  406c82:	2b01      	cmp	r3, #1
  406c84:	d903      	bls.n	406c8e <etharp_tmr+0x2a>
  406c86:	2a01      	cmp	r2, #1
  406c88:	d101      	bne.n	406c8e <etharp_tmr+0x2a>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  406c8a:	47b0      	blx	r6
  406c8c:	e002      	b.n	406c94 <etharp_tmr+0x30>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
  406c8e:	2a03      	cmp	r2, #3
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  406c90:	bf08      	it	eq
  406c92:	748f      	strbeq	r7, [r1, #18]
  406c94:	3501      	adds	r5, #1
  406c96:	3414      	adds	r4, #20
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  406c98:	2d0a      	cmp	r5, #10
  406c9a:	d1e8      	bne.n	406c6e <etharp_tmr+0xa>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
  406c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c9e:	bf00      	nop
  406ca0:	204024f0 	.word	0x204024f0
  406ca4:	00406b11 	.word	0x00406b11

00406ca8 <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
  406ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406caa:	4606      	mov	r6, r0
  406cac:	4d07      	ldr	r5, [pc, #28]	; (406ccc <etharp_cleanup_netif+0x24>)
  406cae:	2400      	movs	r4, #0
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
  406cb0:	4f07      	ldr	r7, [pc, #28]	; (406cd0 <etharp_cleanup_netif+0x28>)
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
  406cb2:	4620      	mov	r0, r4
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  406cb4:	7cab      	ldrb	r3, [r5, #18]
  406cb6:	b11b      	cbz	r3, 406cc0 <etharp_cleanup_netif+0x18>
  406cb8:	68ab      	ldr	r3, [r5, #8]
  406cba:	42b3      	cmp	r3, r6
  406cbc:	d100      	bne.n	406cc0 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
  406cbe:	47b8      	blx	r7
  406cc0:	3401      	adds	r4, #1
  406cc2:	3514      	adds	r5, #20
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  406cc4:	2c0a      	cmp	r4, #10
  406cc6:	d1f4      	bne.n	406cb2 <etharp_cleanup_netif+0xa>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
  406cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406cca:	bf00      	nop
  406ccc:	204024f0 	.word	0x204024f0
  406cd0:	00406b11 	.word	0x00406b11

00406cd4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  406cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406cd8:	4605      	mov	r5, r0
  406cda:	4688      	mov	r8, r1
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
  406cdc:	2200      	movs	r2, #0
  406cde:	212a      	movs	r1, #42	; 0x2a
  406ce0:	2003      	movs	r0, #3
  406ce2:	4b22      	ldr	r3, [pc, #136]	; (406d6c <etharp_request+0x98>)
  406ce4:	4798      	blx	r3
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  406ce6:	2800      	cmp	r0, #0
  406ce8:	d03c      	beq.n	406d64 <etharp_request+0x90>
  406cea:	4607      	mov	r7, r0
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
  406cec:	6844      	ldr	r4, [r0, #4]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
  406cee:	2001      	movs	r0, #1
  406cf0:	4b1f      	ldr	r3, [pc, #124]	; (406d70 <etharp_request+0x9c>)
  406cf2:	4798      	blx	r3
  406cf4:	82a0      	strh	r0, [r4, #20]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  406cf6:	f8d5 302b 	ldr.w	r3, [r5, #43]	; 0x2b
  406cfa:	f8c4 3016 	str.w	r3, [r4, #22]
  406cfe:	f8b5 302f 	ldrh.w	r3, [r5, #47]	; 0x2f
  406d02:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  406d04:	4b1b      	ldr	r3, [pc, #108]	; (406d74 <etharp_request+0xa0>)
  406d06:	6818      	ldr	r0, [r3, #0]
  406d08:	6220      	str	r0, [r4, #32]
  406d0a:	889b      	ldrh	r3, [r3, #4]
  406d0c:	84a3      	strh	r3, [r4, #36]	; 0x24
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
  406d0e:	4b1a      	ldr	r3, [pc, #104]	; (406d78 <etharp_request+0xa4>)
  406d10:	6818      	ldr	r0, [r3, #0]
  406d12:	6020      	str	r0, [r4, #0]
  406d14:	889b      	ldrh	r3, [r3, #4]
  406d16:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
  406d18:	f8d5 302b 	ldr.w	r3, [r5, #43]	; 0x2b
  406d1c:	f8c4 3006 	str.w	r3, [r4, #6]
  406d20:	f8b5 302f 	ldrh.w	r3, [r5, #47]	; 0x2f
  406d24:	8163      	strh	r3, [r4, #10]
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  406d26:	686b      	ldr	r3, [r5, #4]
  406d28:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  406d2a:	f8d8 3000 	ldr.w	r3, [r8]
  406d2e:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  406d32:	2200      	movs	r2, #0
  406d34:	73a2      	strb	r2, [r4, #14]
  406d36:	2301      	movs	r3, #1
  406d38:	73e3      	strb	r3, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  406d3a:	2308      	movs	r3, #8
  406d3c:	7423      	strb	r3, [r4, #16]
  406d3e:	7462      	strb	r2, [r4, #17]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
  406d40:	2206      	movs	r2, #6
  406d42:	74a2      	strb	r2, [r4, #18]
  hdr->protolen = sizeof(ip_addr_t);
  406d44:	2204      	movs	r2, #4
  406d46:	74e2      	strb	r2, [r4, #19]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
  406d48:	7323      	strb	r3, [r4, #12]
  406d4a:	2306      	movs	r3, #6
  406d4c:	7363      	strb	r3, [r4, #13]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
  406d4e:	69ab      	ldr	r3, [r5, #24]
  406d50:	4639      	mov	r1, r7
  406d52:	4628      	mov	r0, r5
  406d54:	4798      	blx	r3
  406d56:	4604      	mov	r4, r0
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
  406d58:	4638      	mov	r0, r7
  406d5a:	4b08      	ldr	r3, [pc, #32]	; (406d7c <etharp_request+0xa8>)
  406d5c:	4798      	blx	r3
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
  406d5e:	4620      	mov	r0, r4
  406d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  406d64:	f04f 30ff 	mov.w	r0, #4294967295
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
  406d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406d6c:	00403729 	.word	0x00403729
  406d70:	00401095 	.word	0x00401095
  406d74:	0040e7f0 	.word	0x0040e7f0
  406d78:	0040e7e8 	.word	0x0040e7e8
  406d7c:	004036c9 	.word	0x004036c9

00406d80 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  406d80:	b570      	push	{r4, r5, r6, lr}
  406d82:	4605      	mov	r5, r0
  406d84:	460e      	mov	r6, r1
  406d86:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  406d88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  406d8c:	4b14      	ldr	r3, [pc, #80]	; (406de0 <etharp_output_to_arp_index+0x60>)
  406d8e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  406d92:	7c9b      	ldrb	r3, [r3, #18]
  406d94:	2b02      	cmp	r3, #2
  406d96:	d115      	bne.n	406dc4 <etharp_output_to_arp_index+0x44>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
  406d98:	4613      	mov	r3, r2
  406d9a:	4a11      	ldr	r2, [pc, #68]	; (406de0 <etharp_output_to_arp_index+0x60>)
  406d9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  406da0:	7cdb      	ldrb	r3, [r3, #19]
  406da2:	2be3      	cmp	r3, #227	; 0xe3
  406da4:	d90e      	bls.n	406dc4 <etharp_output_to_arp_index+0x44>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  406da6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  406daa:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  406dae:	3104      	adds	r1, #4
  406db0:	4b0c      	ldr	r3, [pc, #48]	; (406de4 <etharp_output_to_arp_index+0x64>)
  406db2:	4798      	blx	r3
  406db4:	b930      	cbnz	r0, 406dc4 <etharp_output_to_arp_index+0x44>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
  406db6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  406dba:	4a09      	ldr	r2, [pc, #36]	; (406de0 <etharp_output_to_arp_index+0x60>)
  406dbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406dc0:	2203      	movs	r2, #3
  406dc2:	749a      	strb	r2, [r3, #18]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  406dc4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406dc8:	4b05      	ldr	r3, [pc, #20]	; (406de0 <etharp_output_to_arp_index+0x60>)
  406dca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  406dce:	330c      	adds	r3, #12
  406dd0:	f105 022b 	add.w	r2, r5, #43	; 0x2b
  406dd4:	4631      	mov	r1, r6
  406dd6:	4628      	mov	r0, r5
  406dd8:	4c03      	ldr	r4, [pc, #12]	; (406de8 <etharp_output_to_arp_index+0x68>)
  406dda:	47a0      	blx	r4
    &arp_table[arp_idx].ethaddr);
}
  406ddc:	bd70      	pop	{r4, r5, r6, pc}
  406dde:	bf00      	nop
  406de0:	204024f0 	.word	0x204024f0
  406de4:	00406cd5 	.word	0x00406cd5
  406de8:	00406c41 	.word	0x00406c41

00406dec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
  406dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406df0:	4607      	mov	r7, r0
  406df2:	460d      	mov	r5, r1
  406df4:	4616      	mov	r6, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  406df6:	4601      	mov	r1, r0
  406df8:	6828      	ldr	r0, [r5, #0]
  406dfa:	4b4f      	ldr	r3, [pc, #316]	; (406f38 <etharp_query+0x14c>)
  406dfc:	4798      	blx	r3
  406dfe:	2800      	cmp	r0, #0
  406e00:	d174      	bne.n	406eec <etharp_query+0x100>
      ip_addr_ismulticast(ipaddr) ||
  406e02:	682b      	ldr	r3, [r5, #0]
      ip_addr_isany(ipaddr)) {
  406e04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  406e08:	2b00      	cmp	r3, #0
  406e0a:	bf18      	it	ne
  406e0c:	2ae0      	cmpne	r2, #224	; 0xe0
  406e0e:	d071      	beq.n	406ef4 <etharp_query+0x108>
  406e10:	2d00      	cmp	r5, #0
  406e12:	d06f      	beq.n	406ef4 <etharp_query+0x108>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
  406e14:	2101      	movs	r1, #1
  406e16:	4628      	mov	r0, r5
  406e18:	4b48      	ldr	r3, [pc, #288]	; (406f3c <etharp_query+0x150>)
  406e1a:	4798      	blx	r3

  /* could not find or create entry? */
  if (i < 0) {
  406e1c:	1e04      	subs	r4, r0, #0
  406e1e:	db6d      	blt.n	406efc <etharp_query+0x110>
    }
    return (err_t)i;
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  406e20:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  406e24:	4a46      	ldr	r2, [pc, #280]	; (406f40 <etharp_query+0x154>)
  406e26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406e2a:	7c9b      	ldrb	r3, [r3, #18]
  406e2c:	b953      	cbnz	r3, 406e44 <etharp_query+0x58>
    arp_table[i].state = ETHARP_STATE_PENDING;
  406e2e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  406e32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406e36:	2201      	movs	r2, #1
  406e38:	749a      	strb	r2, [r3, #18]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  406e3a:	fab6 f886 	clz	r8, r6
  406e3e:	ea4f 1858 	mov.w	r8, r8, lsr #5
  406e42:	e008      	b.n	406e56 <etharp_query+0x6a>
  406e44:	fab6 f886 	clz	r8, r6
  406e48:	ea4f 1858 	mov.w	r8, r8, lsr #5
  406e4c:	2b01      	cmp	r3, #1
  406e4e:	d002      	beq.n	406e56 <etharp_query+0x6a>
  406e50:	f1b8 0f00 	cmp.w	r8, #0
  406e54:	d008      	beq.n	406e68 <etharp_query+0x7c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  406e56:	4629      	mov	r1, r5
  406e58:	4638      	mov	r0, r7
  406e5a:	4b3a      	ldr	r3, [pc, #232]	; (406f44 <etharp_query+0x158>)
  406e5c:	4798      	blx	r3
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  406e5e:	f1b8 0f00 	cmp.w	r8, #0
  406e62:	d003      	beq.n	406e6c <etharp_query+0x80>
  406e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  406e68:	f04f 30ff 	mov.w	r0, #4294967295
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  406e6c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  406e70:	4a33      	ldr	r2, [pc, #204]	; (406f40 <etharp_query+0x154>)
  406e72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406e76:	7c9b      	ldrb	r3, [r3, #18]
  406e78:	2b01      	cmp	r3, #1
  406e7a:	d90e      	bls.n	406e9a <etharp_query+0xae>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  406e7c:	4b32      	ldr	r3, [pc, #200]	; (406f48 <etharp_query+0x15c>)
  406e7e:	701c      	strb	r4, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
  406e80:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406e84:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  406e88:	330c      	adds	r3, #12
  406e8a:	f107 022b 	add.w	r2, r7, #43	; 0x2b
  406e8e:	4631      	mov	r1, r6
  406e90:	4638      	mov	r0, r7
  406e92:	4c2e      	ldr	r4, [pc, #184]	; (406f4c <etharp_query+0x160>)
  406e94:	47a0      	blx	r4
  406e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  406e9a:	2b01      	cmp	r3, #1
  406e9c:	d14a      	bne.n	406f34 <etharp_query+0x148>
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
  406e9e:	2e00      	cmp	r6, #0
  406ea0:	d03c      	beq.n	406f1c <etharp_query+0x130>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
  406ea2:	7b33      	ldrb	r3, [r6, #12]
  406ea4:	2b01      	cmp	r3, #1
  406ea6:	d12c      	bne.n	406f02 <etharp_query+0x116>
  406ea8:	4633      	mov	r3, r6
  406eaa:	e002      	b.n	406eb2 <etharp_query+0xc6>
  406eac:	7b1a      	ldrb	r2, [r3, #12]
  406eae:	2a01      	cmp	r2, #1
  406eb0:	d128      	bne.n	406f04 <etharp_query+0x118>
        copy_needed = 1;
        break;
      }
      p = p->next;
  406eb2:	681b      	ldr	r3, [r3, #0]
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
  406eb4:	2b00      	cmp	r3, #0
  406eb6:	d1f9      	bne.n	406eac <etharp_query+0xc0>
  406eb8:	e037      	b.n	406f2a <etharp_query+0x13e>
    }
    if(copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
      if(p != NULL) {
        if (pbuf_copy(p, q) != ERR_OK) {
  406eba:	4631      	mov	r1, r6
  406ebc:	4628      	mov	r0, r5
  406ebe:	4b24      	ldr	r3, [pc, #144]	; (406f50 <etharp_query+0x164>)
  406ec0:	4798      	blx	r3
  406ec2:	b118      	cbz	r0, 406ecc <etharp_query+0xe0>
          pbuf_free(p);
  406ec4:	4628      	mov	r0, r5
  406ec6:	4b23      	ldr	r3, [pc, #140]	; (406f54 <etharp_query+0x168>)
  406ec8:	4798      	blx	r3
  406eca:	e023      	b.n	406f14 <etharp_query+0x128>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
  406ecc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  406ed0:	4a1b      	ldr	r2, [pc, #108]	; (406f40 <etharp_query+0x154>)
  406ed2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  406ed6:	b108      	cbz	r0, 406edc <etharp_query+0xf0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
  406ed8:	4b1e      	ldr	r3, [pc, #120]	; (406f54 <etharp_query+0x168>)
  406eda:	4798      	blx	r3
      }
      arp_table[i].q = p;
  406edc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406ee0:	4a17      	ldr	r2, [pc, #92]	; (406f40 <etharp_query+0x154>)
  406ee2:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
      result = ERR_OK;
  406ee6:	2000      	movs	r0, #0
  406ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr) ||
      ip_addr_isany(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  406eec:	f06f 000d 	mvn.w	r0, #13
  406ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ef4:	f06f 000d 	mvn.w	r0, #13
  406ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
  406efc:	4620      	mov	r0, r4
  406efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
  406f02:	4633      	mov	r3, r6
      }
      p = p->next;
    }
    if(copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  406f04:	2200      	movs	r2, #0
  406f06:	8919      	ldrh	r1, [r3, #8]
  406f08:	2003      	movs	r0, #3
  406f0a:	4b13      	ldr	r3, [pc, #76]	; (406f58 <etharp_query+0x16c>)
  406f0c:	4798      	blx	r3
      if(p != NULL) {
  406f0e:	4605      	mov	r5, r0
  406f10:	2800      	cmp	r0, #0
  406f12:	d1d2      	bne.n	406eba <etharp_query+0xce>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  406f14:	f04f 30ff 	mov.w	r0, #4294967295
  406f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
      pbuf_ref(p);
  406f1c:	4630      	mov	r0, r6
  406f1e:	4b0f      	ldr	r3, [pc, #60]	; (406f5c <etharp_query+0x170>)
  406f20:	4798      	blx	r3
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  406f22:	f04f 30ff 	mov.w	r0, #4294967295
  406f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
      pbuf_ref(p);
  406f2a:	4630      	mov	r0, r6
  406f2c:	4b0b      	ldr	r3, [pc, #44]	; (406f5c <etharp_query+0x170>)
  406f2e:	4798      	blx	r3
          p = NULL;
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  406f30:	4635      	mov	r5, r6
  406f32:	e7cb      	b.n	406ecc <etharp_query+0xe0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
    }
  }
  return result;
}
  406f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f38:	004028b5 	.word	0x004028b5
  406f3c:	00406b49 	.word	0x00406b49
  406f40:	204024f0 	.word	0x204024f0
  406f44:	00406cd5 	.word	0x00406cd5
  406f48:	204024ec 	.word	0x204024ec
  406f4c:	00406c41 	.word	0x00406c41
  406f50:	0040394d 	.word	0x0040394d
  406f54:	004036c9 	.word	0x004036c9
  406f58:	00403729 	.word	0x00403729
  406f5c:	004038f5 	.word	0x004038f5

00406f60 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
  406f60:	b570      	push	{r4, r5, r6, lr}
  406f62:	b082      	sub	sp, #8
  406f64:	4605      	mov	r5, r0
  406f66:	460e      	mov	r6, r1
  406f68:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
  406f6a:	210e      	movs	r1, #14
  406f6c:	4630      	mov	r0, r6
  406f6e:	4b3c      	ldr	r3, [pc, #240]	; (407060 <etharp_output+0x100>)
  406f70:	4798      	blx	r3
  406f72:	2800      	cmp	r0, #0
  406f74:	d16a      	bne.n	40704c <etharp_output+0xec>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
  406f76:	4629      	mov	r1, r5
  406f78:	6820      	ldr	r0, [r4, #0]
  406f7a:	4b3a      	ldr	r3, [pc, #232]	; (407064 <etharp_output+0x104>)
  406f7c:	4798      	blx	r3
  406f7e:	2800      	cmp	r0, #0
  406f80:	d15c      	bne.n	40703c <etharp_output+0xdc>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
  406f82:	6823      	ldr	r3, [r4, #0]
  406f84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  406f88:	2ae0      	cmp	r2, #224	; 0xe0
  406f8a:	d115      	bne.n	406fb8 <etharp_output+0x58>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
  406f8c:	2301      	movs	r3, #1
  406f8e:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
  406f92:	2300      	movs	r3, #0
  406f94:	f88d 3001 	strb.w	r3, [sp, #1]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
  406f98:	235e      	movs	r3, #94	; 0x5e
  406f9a:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  406f9e:	7863      	ldrb	r3, [r4, #1]
  406fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  406fa4:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  406fa8:	78a3      	ldrb	r3, [r4, #2]
  406faa:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  406fae:	78e3      	ldrb	r3, [r4, #3]
  406fb0:	f88d 3005 	strb.w	r3, [sp, #5]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  406fb4:	466b      	mov	r3, sp
  406fb6:	e042      	b.n	40703e <etharp_output+0xde>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  406fb8:	686a      	ldr	r2, [r5, #4]
  406fba:	405a      	eors	r2, r3
  406fbc:	68a9      	ldr	r1, [r5, #8]
  406fbe:	420a      	tst	r2, r1
  406fc0:	d00a      	beq.n	406fd8 <etharp_output+0x78>
  406fc2:	b29b      	uxth	r3, r3
  406fc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
  406fc8:	4293      	cmp	r3, r2
  406fca:	d005      	beq.n	406fd8 <etharp_output+0x78>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
  406fcc:	f115 040c 	adds.w	r4, r5, #12
  406fd0:	d03f      	beq.n	407052 <etharp_output+0xf2>
  406fd2:	68eb      	ldr	r3, [r5, #12]
  406fd4:	2b00      	cmp	r3, #0
  406fd6:	d03f      	beq.n	407058 <etharp_output+0xf8>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  406fd8:	4b23      	ldr	r3, [pc, #140]	; (407068 <etharp_output+0x108>)
  406fda:	781a      	ldrb	r2, [r3, #0]
  406fdc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  406fe0:	4b22      	ldr	r3, [pc, #136]	; (40706c <etharp_output+0x10c>)
  406fe2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  406fe6:	7c9b      	ldrb	r3, [r3, #18]
  406fe8:	2b01      	cmp	r3, #1
  406fea:	d90c      	bls.n	407006 <etharp_output+0xa6>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  406fec:	460b      	mov	r3, r1
  406fee:	491f      	ldr	r1, [pc, #124]	; (40706c <etharp_output+0x10c>)
  406ff0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  406ff4:	6821      	ldr	r1, [r4, #0]
  406ff6:	685b      	ldr	r3, [r3, #4]
  406ff8:	4299      	cmp	r1, r3
  406ffa:	d104      	bne.n	407006 <etharp_output+0xa6>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  406ffc:	4631      	mov	r1, r6
  406ffe:	4628      	mov	r0, r5
  407000:	4b1b      	ldr	r3, [pc, #108]	; (407070 <etharp_output+0x110>)
  407002:	4798      	blx	r3
  407004:	e02a      	b.n	40705c <etharp_output+0xfc>
  407006:	4b19      	ldr	r3, [pc, #100]	; (40706c <etharp_output+0x10c>)
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
  407008:	2200      	movs	r2, #0
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  40700a:	7c99      	ldrb	r1, [r3, #18]
  40700c:	2901      	cmp	r1, #1
  40700e:	d90b      	bls.n	407028 <etharp_output+0xc8>
  407010:	6820      	ldr	r0, [r4, #0]
  407012:	6859      	ldr	r1, [r3, #4]
  407014:	4288      	cmp	r0, r1
  407016:	d107      	bne.n	407028 <etharp_output+0xc8>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  407018:	b2d2      	uxtb	r2, r2
  40701a:	4b13      	ldr	r3, [pc, #76]	; (407068 <etharp_output+0x108>)
  40701c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
  40701e:	4631      	mov	r1, r6
  407020:	4628      	mov	r0, r5
  407022:	4b13      	ldr	r3, [pc, #76]	; (407070 <etharp_output+0x110>)
  407024:	4798      	blx	r3
  407026:	e019      	b.n	40705c <etharp_output+0xfc>
  407028:	3201      	adds	r2, #1
  40702a:	3314      	adds	r3, #20
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  40702c:	2a0a      	cmp	r2, #10
  40702e:	d1ec      	bne.n	40700a <etharp_output+0xaa>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  407030:	4632      	mov	r2, r6
  407032:	4621      	mov	r1, r4
  407034:	4628      	mov	r0, r5
  407036:	4b0f      	ldr	r3, [pc, #60]	; (407074 <etharp_output+0x114>)
  407038:	4798      	blx	r3
  40703a:	e00f      	b.n	40705c <etharp_output+0xfc>
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  40703c:	4b0e      	ldr	r3, [pc, #56]	; (407078 <etharp_output+0x118>)
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
  40703e:	f105 022b 	add.w	r2, r5, #43	; 0x2b
  407042:	4631      	mov	r1, r6
  407044:	4628      	mov	r0, r5
  407046:	4c0d      	ldr	r4, [pc, #52]	; (40707c <etharp_output+0x11c>)
  407048:	47a0      	blx	r4
  40704a:	e007      	b.n	40705c <etharp_output+0xfc>
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
  40704c:	f06f 0001 	mvn.w	r0, #1
  407050:	e004      	b.n	40705c <etharp_output+0xfc>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
  407052:	f06f 0003 	mvn.w	r0, #3
  407056:	e001      	b.n	40705c <etharp_output+0xfc>
  407058:	f06f 0003 	mvn.w	r0, #3

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
}
  40705c:	b002      	add	sp, #8
  40705e:	bd70      	pop	{r4, r5, r6, pc}
  407060:	00403659 	.word	0x00403659
  407064:	004028b5 	.word	0x004028b5
  407068:	204024ec 	.word	0x204024ec
  40706c:	204024f0 	.word	0x204024f0
  407070:	00406d81 	.word	0x00406d81
  407074:	00406ded 	.word	0x00406ded
  407078:	0040e7e8 	.word	0x0040e7e8
  40707c:	00406c41 	.word	0x00406c41

00407080 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  407080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407084:	b085      	sub	sp, #20
  407086:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  407088:	8947      	ldrh	r7, [r0, #10]
  40708a:	2f0e      	cmp	r7, #14
  40708c:	f240 80ef 	bls.w	40726e <ethernet_input+0x1ee>
  407090:	460e      	mov	r6, r1
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  407092:	6845      	ldr	r5, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
  407094:	f8b5 800c 	ldrh.w	r8, [r5, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  407098:	782b      	ldrb	r3, [r5, #0]
  40709a:	f013 0f01 	tst.w	r3, #1
  40709e:	d015      	beq.n	4070cc <ethernet_input+0x4c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
  4070a0:	2b01      	cmp	r3, #1
  4070a2:	d109      	bne.n	4070b8 <ethernet_input+0x38>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  4070a4:	786b      	ldrb	r3, [r5, #1]
  4070a6:	b98b      	cbnz	r3, 4070cc <ethernet_input+0x4c>
  4070a8:	78ab      	ldrb	r3, [r5, #2]
  4070aa:	2b5e      	cmp	r3, #94	; 0x5e
  4070ac:	d10e      	bne.n	4070cc <ethernet_input+0x4c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  4070ae:	7b43      	ldrb	r3, [r0, #13]
  4070b0:	f043 0310 	orr.w	r3, r3, #16
  4070b4:	7343      	strb	r3, [r0, #13]
  4070b6:	e009      	b.n	4070cc <ethernet_input+0x4c>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  4070b8:	2206      	movs	r2, #6
  4070ba:	4975      	ldr	r1, [pc, #468]	; (407290 <ethernet_input+0x210>)
  4070bc:	4628      	mov	r0, r5
  4070be:	4b75      	ldr	r3, [pc, #468]	; (407294 <ethernet_input+0x214>)
  4070c0:	4798      	blx	r3
  4070c2:	b918      	cbnz	r0, 4070cc <ethernet_input+0x4c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  4070c4:	7b63      	ldrb	r3, [r4, #13]
  4070c6:	f043 0308 	orr.w	r3, r3, #8
  4070ca:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
  4070cc:	f1b8 0f08 	cmp.w	r8, #8
  4070d0:	d003      	beq.n	4070da <ethernet_input+0x5a>
  4070d2:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
  4070d6:	d013      	beq.n	407100 <ethernet_input+0x80>
  4070d8:	e0c9      	b.n	40726e <ethernet_input+0x1ee>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  4070da:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
  4070de:	f013 0f20 	tst.w	r3, #32
  4070e2:	f000 80c4 	beq.w	40726e <ethernet_input+0x1ee>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
  4070e6:	f06f 010d 	mvn.w	r1, #13
  4070ea:	4620      	mov	r0, r4
  4070ec:	4b6a      	ldr	r3, [pc, #424]	; (407298 <ethernet_input+0x218>)
  4070ee:	4798      	blx	r3
  4070f0:	2800      	cmp	r0, #0
  4070f2:	f040 80bc 	bne.w	40726e <ethernet_input+0x1ee>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
  4070f6:	4631      	mov	r1, r6
  4070f8:	4620      	mov	r0, r4
  4070fa:	4b68      	ldr	r3, [pc, #416]	; (40729c <ethernet_input+0x21c>)
  4070fc:	4798      	blx	r3
      }
      break;
  4070fe:	e0c2      	b.n	407286 <ethernet_input+0x206>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  407100:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
  407104:	f013 0f20 	tst.w	r3, #32
  407108:	f000 80b1 	beq.w	40726e <ethernet_input+0x1ee>
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  40710c:	b906      	cbnz	r6, 407110 <ethernet_input+0x90>
  40710e:	e7fe      	b.n	40710e <ethernet_input+0x8e>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
  407110:	2f29      	cmp	r7, #41	; 0x29
  407112:	d803      	bhi.n	40711c <ethernet_input+0x9c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  407114:	4620      	mov	r0, r4
  407116:	4b62      	ldr	r3, [pc, #392]	; (4072a0 <ethernet_input+0x220>)
  407118:	4798      	blx	r3
  40711a:	e0b4      	b.n	407286 <ethernet_input+0x206>
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  40711c:	89eb      	ldrh	r3, [r5, #14]
  40711e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  407122:	d108      	bne.n	407136 <ethernet_input+0xb6>
  407124:	7cab      	ldrb	r3, [r5, #18]
  407126:	2b06      	cmp	r3, #6
  407128:	d105      	bne.n	407136 <ethernet_input+0xb6>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  40712a:	7ceb      	ldrb	r3, [r5, #19]
  40712c:	2b04      	cmp	r3, #4
  40712e:	d102      	bne.n	407136 <ethernet_input+0xb6>
      (hdr->protolen != sizeof(ip_addr_t)) ||
  407130:	8a2b      	ldrh	r3, [r5, #16]
  407132:	2b08      	cmp	r3, #8
  407134:	d003      	beq.n	40713e <ethernet_input+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  407136:	4620      	mov	r0, r4
  407138:	4b59      	ldr	r3, [pc, #356]	; (4072a0 <ethernet_input+0x220>)
  40713a:	4798      	blx	r3
  40713c:	e0a3      	b.n	407286 <ethernet_input+0x206>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  40713e:	46a9      	mov	r9, r5
  407140:	f859 0f1c 	ldr.w	r0, [r9, #28]!
  407144:	9002      	str	r0, [sp, #8]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  407146:	f8d5 0026 	ldr.w	r0, [r5, #38]	; 0x26
  40714a:	9003      	str	r0, [sp, #12]

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
  40714c:	1d33      	adds	r3, r6, #4
  40714e:	9301      	str	r3, [sp, #4]
  407150:	f000 8091 	beq.w	407276 <ethernet_input+0x1f6>
  407154:	6873      	ldr	r3, [r6, #4]
  407156:	2b00      	cmp	r3, #0
  407158:	f000 808d 	beq.w	407276 <ethernet_input+0x1f6>
    for_us = 0;
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  40715c:	9a03      	ldr	r2, [sp, #12]
  40715e:	4293      	cmp	r3, r2
  407160:	bf14      	ite	ne
  407162:	f04f 0b00 	movne.w	fp, #0
  407166:	f04f 0b01 	moveq.w	fp, #1
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  40716a:	f105 0116 	add.w	r1, r5, #22
  40716e:	9100      	str	r1, [sp, #0]
  407170:	4293      	cmp	r3, r2
  407172:	bf0c      	ite	eq
  407174:	f04f 0a01 	moveq.w	sl, #1
  407178:	f04f 0a02 	movne.w	sl, #2
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  40717c:	f106 082b 	add.w	r8, r6, #43	; 0x2b
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  407180:	9802      	ldr	r0, [sp, #8]
  407182:	2800      	cmp	r0, #0
  407184:	d03a      	beq.n	4071fc <ethernet_input+0x17c>
      ip_addr_isbroadcast(ipaddr, netif) ||
  407186:	4631      	mov	r1, r6
  407188:	4b46      	ldr	r3, [pc, #280]	; (4072a4 <ethernet_input+0x224>)
  40718a:	4798      	blx	r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  40718c:	2800      	cmp	r0, #0
  40718e:	d135      	bne.n	4071fc <ethernet_input+0x17c>
      ip_addr_isbroadcast(ipaddr, netif) ||
  407190:	9b02      	ldr	r3, [sp, #8]
  407192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  407196:	2be0      	cmp	r3, #224	; 0xe0
  407198:	d030      	beq.n	4071fc <ethernet_input+0x17c>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
  40719a:	4651      	mov	r1, sl
  40719c:	a802      	add	r0, sp, #8
  40719e:	4b42      	ldr	r3, [pc, #264]	; (4072a8 <ethernet_input+0x228>)
  4071a0:	4798      	blx	r3
  /* bail out if no entry could be found */
  if (i < 0) {
  4071a2:	1e03      	subs	r3, r0, #0
  4071a4:	db2a      	blt.n	4071fc <ethernet_input+0x17c>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  4071a6:	f8df e110 	ldr.w	lr, [pc, #272]	; 4072b8 <ethernet_input+0x238>
  4071aa:	009a      	lsls	r2, r3, #2
  4071ac:	18d1      	adds	r1, r2, r3
  4071ae:	0089      	lsls	r1, r1, #2
  4071b0:	eb0e 0c01 	add.w	ip, lr, r1
  4071b4:	2002      	movs	r0, #2
  4071b6:	f88c 0012 	strb.w	r0, [ip, #18]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  4071ba:	f8cc 6008 	str.w	r6, [ip, #8]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  4071be:	441a      	add	r2, r3
  4071c0:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
  4071c4:	9f00      	ldr	r7, [sp, #0]
  4071c6:	6838      	ldr	r0, [r7, #0]
  4071c8:	60d0      	str	r0, [r2, #12]
  4071ca:	88b8      	ldrh	r0, [r7, #4]
  4071cc:	8210      	strh	r0, [r2, #16]
  /* reset time stamp */
  arp_table[i].ctime = 0;
  4071ce:	2200      	movs	r2, #0
  4071d0:	f88c 2013 	strb.w	r2, [ip, #19]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
  4071d4:	f85e a001 	ldr.w	sl, [lr, r1]
  4071d8:	f1ba 0f00 	cmp.w	sl, #0
  4071dc:	d00e      	beq.n	4071fc <ethernet_input+0x17c>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
  4071de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4071e2:	009b      	lsls	r3, r3, #2
  4071e4:	4611      	mov	r1, r2
  4071e6:	f84e 1003 	str.w	r1, [lr, r3]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  4071ea:	463b      	mov	r3, r7
  4071ec:	4642      	mov	r2, r8
  4071ee:	4651      	mov	r1, sl
  4071f0:	4630      	mov	r0, r6
  4071f2:	4f2e      	ldr	r7, [pc, #184]	; (4072ac <ethernet_input+0x22c>)
  4071f4:	47b8      	blx	r7
    /* free the queued IP packet */
    pbuf_free(p);
  4071f6:	4650      	mov	r0, sl
  4071f8:	4b29      	ldr	r3, [pc, #164]	; (4072a0 <ethernet_input+0x220>)
  4071fa:	4798      	blx	r3
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  4071fc:	8aab      	ldrh	r3, [r5, #20]
  4071fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  407202:	d003      	beq.n	40720c <ethernet_input+0x18c>
  407204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407208:	d029      	beq.n	40725e <ethernet_input+0x1de>
  40720a:	e02c      	b.n	407266 <ethernet_input+0x1e6>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  40720c:	f1bb 0f00 	cmp.w	fp, #0
  407210:	d029      	beq.n	407266 <ethernet_input+0x1e6>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
  407212:	2002      	movs	r0, #2
  407214:	4b26      	ldr	r3, [pc, #152]	; (4072b0 <ethernet_input+0x230>)
  407216:	4798      	blx	r3
  407218:	82a8      	strh	r0, [r5, #20]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
  40721a:	f8d9 3000 	ldr.w	r3, [r9]
  40721e:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
  407222:	9b01      	ldr	r3, [sp, #4]
  407224:	681b      	ldr	r3, [r3, #0]
  407226:	61eb      	str	r3, [r5, #28]
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
  407228:	9900      	ldr	r1, [sp, #0]
  40722a:	680b      	ldr	r3, [r1, #0]
  40722c:	622b      	str	r3, [r5, #32]
  40722e:	888b      	ldrh	r3, [r1, #4]
  407230:	84ab      	strh	r3, [r5, #36]	; 0x24
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
  407232:	680b      	ldr	r3, [r1, #0]
  407234:	602b      	str	r3, [r5, #0]
  407236:	888b      	ldrh	r3, [r1, #4]
  407238:	80ab      	strh	r3, [r5, #4]
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
  40723a:	f8d8 3000 	ldr.w	r3, [r8]
  40723e:	600b      	str	r3, [r1, #0]
  407240:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  407244:	808b      	strh	r3, [r1, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
  407246:	f8d8 3000 	ldr.w	r3, [r8]
  40724a:	f8c5 3006 	str.w	r3, [r5, #6]
  40724e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  407252:	816b      	strh	r3, [r5, #10]

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
  407254:	69b3      	ldr	r3, [r6, #24]
  407256:	4621      	mov	r1, r4
  407258:	4630      	mov	r0, r6
  40725a:	4798      	blx	r3
  40725c:	e003      	b.n	407266 <ethernet_input+0x1e6>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  40725e:	a902      	add	r1, sp, #8
  407260:	4630      	mov	r0, r6
  407262:	4b14      	ldr	r3, [pc, #80]	; (4072b4 <ethernet_input+0x234>)
  407264:	4798      	blx	r3
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
  407266:	4620      	mov	r0, r4
  407268:	4b0d      	ldr	r3, [pc, #52]	; (4072a0 <ethernet_input+0x220>)
  40726a:	4798      	blx	r3
  40726c:	e00b      	b.n	407286 <ethernet_input+0x206>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  40726e:	4620      	mov	r0, r4
  407270:	4b0b      	ldr	r3, [pc, #44]	; (4072a0 <ethernet_input+0x220>)
  407272:	4798      	blx	r3
  407274:	e007      	b.n	407286 <ethernet_input+0x206>
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  407276:	f105 0316 	add.w	r3, r5, #22
  40727a:	9300      	str	r3, [sp, #0]
  40727c:	f04f 0b00 	mov.w	fp, #0
  407280:	f04f 0a02 	mov.w	sl, #2
  407284:	e77a      	b.n	40717c <ethernet_input+0xfc>
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  return ERR_OK;
}
  407286:	2000      	movs	r0, #0
  407288:	b005      	add	sp, #20
  40728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40728e:	bf00      	nop
  407290:	0040e7e8 	.word	0x0040e7e8
  407294:	00407ec5 	.word	0x00407ec5
  407298:	00403659 	.word	0x00403659
  40729c:	0040259d 	.word	0x0040259d
  4072a0:	004036c9 	.word	0x004036c9
  4072a4:	004028b5 	.word	0x004028b5
  4072a8:	00406b49 	.word	0x00406b49
  4072ac:	00406c41 	.word	0x00406c41
  4072b0:	00401095 	.word	0x00401095
  4072b4:	00401d35 	.word	0x00401d35
  4072b8:	204024f0 	.word	0x204024f0

004072bc <gmac_rx_populate_queue>:
 * (since the lsb are used as status bits by GMAC).
 *
 * \param p_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_populate_queue(struct gmac_device *p_gmac_dev)
{
  4072bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4072c0:	4607      	mov	r7, r0
  4072c2:	f100 042c 	add.w	r4, r0, #44	; 0x2c
  4072c6:	4606      	mov	r6, r0
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  4072c8:	2500      	movs	r5, #0
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  4072ca:	f04f 0b03 	mov.w	fp, #3
  4072ce:	f44f 6ac0 	mov.w	sl, #1536	; 0x600
  4072d2:	f8df 9040 	ldr.w	r9, [pc, #64]	; 407314 <gmac_rx_populate_queue+0x58>
  4072d6:	3404      	adds	r4, #4
  4072d8:	46a0      	mov	r8, r4
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {
  4072da:	6823      	ldr	r3, [r4, #0]
  4072dc:	b99b      	cbnz	r3, 407306 <gmac_rx_populate_queue+0x4a>

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  4072de:	465a      	mov	r2, fp
  4072e0:	4651      	mov	r1, sl
  4072e2:	4658      	mov	r0, fp
  4072e4:	47c8      	blx	r9
			if (p == NULL) {
  4072e6:	4603      	mov	r3, r0
  4072e8:	b188      	cbz	r0, 40730e <gmac_rx_populate_queue+0x52>

			/* Make sure that the payload buffer is properly aligned. */
			LWIP_ASSERT("gmac_rx_populate_queue: unaligned p->payload buffer address",
					(((uint32_t)p->payload & 0xFFFFFFFC) == (uint32_t)p->payload));

			if (ul_index == GMAC_RX_BUFFERS - 1)
  4072ea:	2d02      	cmp	r5, #2
  4072ec:	d104      	bne.n	4072f8 <gmac_rx_populate_queue+0x3c>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
  4072ee:	6842      	ldr	r2, [r0, #4]
  4072f0:	f042 0202 	orr.w	r2, r2, #2
  4072f4:	613a      	str	r2, [r7, #16]
  4072f6:	e002      	b.n	4072fe <gmac_rx_populate_queue+0x42>
			else
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload;
  4072f8:	6842      	ldr	r2, [r0, #4]
  4072fa:	f847 2035 	str.w	r2, [r7, r5, lsl #3]

			/* Reset status value. */
			p_gmac_dev->rx_desc[ul_index].status.val = 0;
  4072fe:	2200      	movs	r2, #0
  407300:	6072      	str	r2, [r6, #4]

			/* Save pbuf pointer to be sent to lwIP upper layer. */
			p_gmac_dev->rx_pbuf[ul_index] = p;
  407302:	f8c8 3000 	str.w	r3, [r8]
{
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  407306:	3501      	adds	r5, #1
  407308:	3608      	adds	r6, #8
  40730a:	2d03      	cmp	r5, #3
  40730c:	d1e3      	bne.n	4072d6 <gmac_rx_populate_queue+0x1a>
  40730e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407312:	bf00      	nop
  407314:	00403729 	.word	0x00403729

00407318 <gmac_low_level_output>:
 *
 * \return ERR_OK if the packet could be sent.
 * an err_t value if the packet couldn't be sent.
 */
static err_t gmac_low_level_output(struct netif *netif, struct pbuf *p)
{
  407318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  40731c:	6a07      	ldr	r7, [r0, #32]
 *
 * \return  Transmit status.
 */
static inline uint32_t gmac_get_tx_status(Gmac* p_gmac)
{
	return p_gmac->GMAC_TSR;
  40731e:	4b1c      	ldr	r3, [pc, #112]	; (407390 <gmac_low_level_output+0x78>)
  407320:	695b      	ldr	r3, [r3, #20]
		gmac_clear_tx_status(GMAC, GMAC_TX_ERRORS);

		gmac_enable_transmit(GMAC, true);
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;
  407322:	f241 230c 	movw	r3, #4620	; 0x120c
  407326:	58fb      	ldr	r3, [r7, r3]
  407328:	3303      	adds	r3, #3
  40732a:	f857 5033 	ldr.w	r5, [r7, r3, lsl #3]

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  40732e:	4688      	mov	r8, r1
  407330:	b151      	cbz	r1, 407348 <gmac_low_level_output+0x30>
  407332:	460c      	mov	r4, r1
		memcpy(buffer, q->payload, q->len);
  407334:	4e17      	ldr	r6, [pc, #92]	; (407394 <gmac_low_level_output+0x7c>)
  407336:	8962      	ldrh	r2, [r4, #10]
  407338:	6861      	ldr	r1, [r4, #4]
  40733a:	4628      	mov	r0, r5
  40733c:	47b0      	blx	r6
		buffer += q->len;
  40733e:	8963      	ldrh	r3, [r4, #10]
  407340:	441d      	add	r5, r3
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  407342:	6824      	ldr	r4, [r4, #0]
  407344:	2c00      	cmp	r4, #0
  407346:	d1f6      	bne.n	407336 <gmac_low_level_output+0x1e>
		memcpy(buffer, q->payload, q->len);
		buffer += q->len;
	}

	/* Set len and mark the buffer to be sent by GMAC. */
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_len = p->tot_len;
  407348:	f241 210c 	movw	r1, #4620	; 0x120c
  40734c:	587a      	ldr	r2, [r7, r1]
  40734e:	1cd3      	adds	r3, r2, #3
  407350:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  407354:	8898      	ldrh	r0, [r3, #4]
  407356:	f8b8 4008 	ldrh.w	r4, [r8, #8]
  40735a:	f364 000d 	bfi	r0, r4, #0, #14
  40735e:	8098      	strh	r0, [r3, #4]
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_used = 0;
  407360:	79d8      	ldrb	r0, [r3, #7]
  407362:	f36f 10c7 	bfc	r0, #7, #1
  407366:	71d8      	strb	r0, [r3, #7]

	LWIP_DEBUGF(NETIF_DEBUG,
			("gmac_low_level_output: DMA buffer sent, size=%d [idx=%u]\n",
			p->tot_len, ps_gmac_dev->us_tx_idx));

	ps_gmac_dev->us_tx_idx = (ps_gmac_dev->us_tx_idx + 1) % GMAC_TX_BUFFERS;
  407368:	3201      	adds	r2, #1
  40736a:	4b0b      	ldr	r3, [pc, #44]	; (407398 <gmac_low_level_output+0x80>)
  40736c:	fba3 0302 	umull	r0, r3, r3, r2
  407370:	085b      	lsrs	r3, r3, #1
  407372:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  407376:	1ad3      	subs	r3, r2, r3
  407378:	507b      	str	r3, [r7, r1]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40737a:	f3bf 8f4f 	dsb	sy
 * \param p_gmac   Pointer to the GMAC instance.
 */
static inline void gmac_start_transmission(Gmac* p_gmac)
{
	__DSB();
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  40737e:	4a04      	ldr	r2, [pc, #16]	; (407390 <gmac_low_level_output+0x78>)
  407380:	6813      	ldr	r3, [r2, #0]
  407382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  407386:	6013      	str	r3, [r2, #0]
	lwip_tx_count += p->tot_len;
#endif
	LINK_STATS_INC(link.xmit);

	return ERR_OK;
}
  407388:	2000      	movs	r0, #0
  40738a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40738e:	bf00      	nop
  407390:	40050000 	.word	0x40050000
  407394:	00407f29 	.word	0x00407f29
  407398:	aaaaaaab 	.word	0xaaaaaaab

0040739c <GMAC_Handler>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40739c:	2280      	movs	r2, #128	; 0x80
  40739e:	4b02      	ldr	r3, [pc, #8]	; (4073a8 <GMAC_Handler+0xc>)
  4073a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4073a4:	4770      	bx	lr
  4073a6:	bf00      	nop
  4073a8:	e000e100 	.word	0xe000e100

004073ac <ethernetif_input>:
 * input function is called.
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
void ethernetif_input(struct netif *netif)
{
  4073ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * \return a pbuf filled with the received packet (including MAC header).
 * 0 on memory error.
 */
static struct pbuf *gmac_low_level_input(struct netif *netif)
{
	struct gmac_device *ps_gmac_dev = netif->state;
  4073b0:	6a04      	ldr	r4, [r0, #32]
	struct pbuf *p = 0;
	uint32_t length = 0;
	uint32_t ul_index = 0;
	gmac_rx_descriptor_t *p_rx = &ps_gmac_dev->rx_desc[ps_gmac_dev->us_rx_idx];
  4073b2:	f241 2308 	movw	r3, #4616	; 0x1208
  4073b6:	f854 8003 	ldr.w	r8, [r4, r3]
 *
 * \param p_gmac   Pointer to the GMAC instance.
 */
static inline uint32_t gmac_get_rx_status(Gmac* p_gmac)
{
	return p_gmac->GMAC_RSR;
  4073ba:	4b24      	ldr	r3, [pc, #144]	; (40744c <ethernetif_input+0xa0>)
  4073bc:	6a1b      	ldr	r3, [r3, #32]
  4073be:	eb04 02c8 	add.w	r2, r4, r8, lsl #3

		gmac_enable_receive(GMAC, true);
	}

	/* Check that a packet has been received and processed by GMAC. */
	if ((p_rx->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  4073c2:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  4073c6:	f013 0f01 	tst.w	r3, #1
  4073ca:	d03c      	beq.n	407446 <ethernetif_input+0x9a>
  4073cc:	4606      	mov	r6, r0
		/* Packet is a SOF since packet size is set to maximum. */
		length = p_rx->status.val & GMAC_RXD_LEN_MASK;

		/* Fetch pre-allocated pbuf. */
		p = ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx];
  4073ce:	f108 030c 	add.w	r3, r8, #12
  4073d2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
		p->len = length;
  4073d6:	6853      	ldr	r3, [r2, #4]
  4073d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4073dc:	816b      	strh	r3, [r5, #10]

		/* Remove this pbuf from its desriptor. */
		ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx] = 0;
  4073de:	f241 2708 	movw	r7, #4616	; 0x1208
  4073e2:	59e2      	ldr	r2, [r4, r7]
  4073e4:	320c      	adds	r2, #12
  4073e6:	2100      	movs	r1, #0
  4073e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		LWIP_DEBUGF(NETIF_DEBUG,
				("gmac_low_level_input: DMA buffer %p received, size=%u [idx=%u]\n",
				p, length, ps_gmac_dev->us_rx_idx));

		/* Set pbuf total packet size. */
		p->tot_len = length;
  4073ec:	812b      	strh	r3, [r5, #8]
		LINK_STATS_INC(link.recv);

		/* Fill empty descriptors with new pbufs. */
		gmac_rx_populate_queue(ps_gmac_dev);
  4073ee:	4620      	mov	r0, r4
  4073f0:	4b17      	ldr	r3, [pc, #92]	; (407450 <ethernetif_input+0xa4>)
  4073f2:	4798      	blx	r3

		/* Mark the descriptor ready for transfer. */
		p_rx->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  4073f4:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  4073f8:	f023 0301 	bic.w	r3, r3, #1
  4073fc:	f844 3038 	str.w	r3, [r4, r8, lsl #3]

		ps_gmac_dev->us_rx_idx = (ps_gmac_dev->us_rx_idx + 1) % GMAC_RX_BUFFERS;
  407400:	59e2      	ldr	r2, [r4, r7]
  407402:	3201      	adds	r2, #1
  407404:	4b13      	ldr	r3, [pc, #76]	; (407454 <ethernetif_input+0xa8>)
  407406:	fba3 1302 	umull	r1, r3, r3, r2
  40740a:	085b      	lsrs	r3, r3, #1
  40740c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  407410:	1ad3      	subs	r3, r2, r3
  407412:	51e3      	str	r3, [r4, r7]
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
	if (p == NULL)
  407414:	b1bd      	cbz	r5, 407446 <ethernetif_input+0x9a>
		return;

	/* Points to packet payload, which starts with an Ethernet header. */
	ethhdr = p->payload;

	switch (htons(ethhdr->type)) {
  407416:	686b      	ldr	r3, [r5, #4]
  407418:	8998      	ldrh	r0, [r3, #12]
  40741a:	4b0f      	ldr	r3, [pc, #60]	; (407458 <ethernetif_input+0xac>)
  40741c:	4798      	blx	r3
  40741e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
  407422:	d003      	beq.n	40742c <ethernetif_input+0x80>
  407424:	f640 0306 	movw	r3, #2054	; 0x806
  407428:	4298      	cmp	r0, r3
  40742a:	d109      	bne.n	407440 <ethernetif_input+0x94>
#if PPPOE_SUPPORT
		case ETHTYPE_PPPOEDISC:
		case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
			/* Send packet to lwIP for processing. */
			if (netif->input(p, netif) != ERR_OK) {
  40742c:	6933      	ldr	r3, [r6, #16]
  40742e:	4631      	mov	r1, r6
  407430:	4628      	mov	r0, r5
  407432:	4798      	blx	r3
  407434:	b138      	cbz	r0, 407446 <ethernetif_input+0x9a>
				LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
				/* Free buffer. */
				pbuf_free(p);
  407436:	4628      	mov	r0, r5
  407438:	4b08      	ldr	r3, [pc, #32]	; (40745c <ethernetif_input+0xb0>)
  40743a:	4798      	blx	r3
  40743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;

		default:
			/* Free buffer. */
			pbuf_free(p);
  407440:	4628      	mov	r0, r5
  407442:	4b06      	ldr	r3, [pc, #24]	; (40745c <ethernetif_input+0xb0>)
  407444:	4798      	blx	r3
  407446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40744a:	bf00      	nop
  40744c:	40050000 	.word	0x40050000
  407450:	004072bd 	.word	0x004072bd
  407454:	aaaaaaab 	.word	0xaaaaaaab
  407458:	00401095 	.word	0x00401095
  40745c:	004036c9 	.word	0x004036c9

00407460 <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized.
 * ERR_MEM if private data couldn't be allocated.
 * any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
  407460:	b5f0      	push	{r4, r5, r6, r7, lr}
  407462:	b083      	sub	sp, #12
  407464:	4606      	mov	r6, r0
	LWIP_ASSERT("netif != NULL", (netif != NULL));

	gs_gmac_dev.netif = netif;
  407466:	4b70      	ldr	r3, [pc, #448]	; (407628 <ethernetif_init+0x1c8>)
  407468:	f241 2210 	movw	r2, #4624	; 0x1210
  40746c:	5098      	str	r0, [r3, r2]
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = &gs_gmac_dev;
  40746e:	6203      	str	r3, [r0, #32]
	netif->name[0] = IFNAME0;
  407470:	2365      	movs	r3, #101	; 0x65
  407472:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
	netif->name[1] = IFNAME1;
  407476:	236e      	movs	r3, #110	; 0x6e
  407478:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
  40747c:	4b6b      	ldr	r3, [pc, #428]	; (40762c <ethernetif_init+0x1cc>)
  40747e:	6143      	str	r3, [r0, #20]
	netif->linkoutput = gmac_low_level_output;
  407480:	4b6b      	ldr	r3, [pc, #428]	; (407630 <ethernetif_init+0x1d0>)
  407482:	6183      	str	r3, [r0, #24]
static void gmac_low_level_init(struct netif *netif)
{
	volatile uint32_t ul_delay;

	/* Set MAC hardware address length. */
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
  407484:	2306      	movs	r3, #6
  407486:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	/* Set MAC hardware address. */
	netif->hwaddr[0] = gs_uc_mac_address[0];
  40748a:	2300      	movs	r3, #0
  40748c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	netif->hwaddr[1] = gs_uc_mac_address[1];
  407490:	2304      	movs	r3, #4
  407492:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	netif->hwaddr[2] = gs_uc_mac_address[2];
  407496:	2325      	movs	r3, #37	; 0x25
  407498:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	netif->hwaddr[3] = gs_uc_mac_address[3];
  40749c:	231c      	movs	r3, #28
  40749e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	netif->hwaddr[4] = gs_uc_mac_address[4];
  4074a2:	23a0      	movs	r3, #160	; 0xa0
  4074a4:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
	netif->hwaddr[5] = gs_uc_mac_address[5];
  4074a8:	2302      	movs	r3, #2
  4074aa:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30

	/* Set maximum transfer unit. */
	netif->mtu = NET_MTU;
  4074ae:	f240 53dc 	movw	r3, #1500	; 0x5dc
  4074b2:	8503      	strh	r3, [r0, #40]	; 0x28

	/* Device capabilities. */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
  4074b4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  4074b8:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
  4074bc:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			| NETIF_FLAG_DHCP
#endif
	;

	/* Wait for PHY to be ready (CAT811: Max400ms). */
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  4074c0:	4b5c      	ldr	r3, [pc, #368]	; (407634 <ethernetif_init+0x1d4>)
  4074c2:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4074c4:	9b01      	ldr	r3, [sp, #4]
  4074c6:	1e5a      	subs	r2, r3, #1
  4074c8:	9201      	str	r2, [sp, #4]
  4074ca:	2b00      	cmp	r3, #0
  4074cc:	d1fa      	bne.n	4074c4 <ethernetif_init+0x64>
	}

	/* Enable GMAC clock. */
	pmc_enable_periph_clk(ID_GMAC);
  4074ce:	2027      	movs	r0, #39	; 0x27
  4074d0:	4b59      	ldr	r3, [pc, #356]	; (407638 <ethernetif_init+0x1d8>)
  4074d2:	4798      	blx	r3
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_ncr   Network control value.
 */
static inline void gmac_network_control(Gmac* p_gmac, uint32_t ul_ncr)
{
	p_gmac->GMAC_NCR = ul_ncr;
  4074d4:	4c59      	ldr	r4, [pc, #356]	; (40763c <ethernetif_init+0x1dc>)
  4074d6:	2700      	movs	r7, #0
  4074d8:	6027      	str	r7, [r4, #0]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_source   Interrupt source(s) to be disabled.
 */
static inline void gmac_disable_interrupt(Gmac* p_gmac, uint32_t ul_source)
{
	p_gmac->GMAC_IDR = ul_source;
  4074da:	f04f 32ff 	mov.w	r2, #4294967295
  4074de:	62e2      	str	r2, [r4, #44]	; 0x2c
 *
 * \param p_gmac   Pointer to the GMAC instance.
 */
static inline void gmac_clear_statistics(Gmac* p_gmac)
{
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  4074e0:	6823      	ldr	r3, [r4, #0]
  4074e2:	f043 0320 	orr.w	r3, r3, #32
  4074e6:	6023      	str	r3, [r4, #0]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_status   Receive status.
 */
static inline void gmac_clear_rx_status(Gmac* p_gmac, uint32_t ul_status)
{
	p_gmac->GMAC_RSR = ul_status;
  4074e8:	230f      	movs	r3, #15
  4074ea:	6223      	str	r3, [r4, #32]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_status   Transmit status.
 */
static inline void gmac_clear_tx_status(Gmac* p_gmac, uint32_t ul_status)
{
	p_gmac->GMAC_TSR = ul_status;
  4074ec:	f240 133f 	movw	r3, #319	; 0x13f
  4074f0:	6163      	str	r3, [r4, #20]
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_interrupt_status(Gmac* p_gmac)
{
	return p_gmac->GMAC_ISR;
  4074f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
static inline void gmac_enable_copy_all(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  4074f4:	6863      	ldr	r3, [r4, #4]
  4074f6:	f023 0310 	bic.w	r3, r3, #16
  4074fa:	6063      	str	r3, [r4, #4]
static inline void gmac_disable_broadcast(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  4074fc:	6863      	ldr	r3, [r4, #4]
  4074fe:	f023 0320 	bic.w	r3, r3, #32
  407502:	6063      	str	r3, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr   Rx buffer.
 */
static inline void gmac_set_rx_bufsize(Gmac* p_gmac, uint32_t ul_code)
{
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  407504:	6923      	ldr	r3, [r4, #16]
			| GMAC_DCFGR_DRBS(ul_code);
  407506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
  40750a:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr   Rx buffer.
 */
static inline void gmac_set_rx_bufsize(Gmac* p_gmac, uint32_t ul_code)
{
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  40750e:	6123      	str	r3, [r4, #16]
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_priority_interrupt_status(Gmac* p_gmac, gmac_quelist_t queue_idx)
{
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  407510:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
  407514:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
	/* Clear interrupts */
	gmac_get_priority_interrupt_status(GMAC, GMAC_QUE_2);
	gmac_get_priority_interrupt_status(GMAC, GMAC_QUE_1);

	/* Set Tx Priority */
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  407518:	4b49      	ldr	r3, [pc, #292]	; (407640 <ethernetif_init+0x1e0>)
  40751a:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  40751c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  407520:	605a      	str	r2, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  407522:	f023 0303 	bic.w	r3, r3, #3
  407526:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
  40752a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
	gmac_set_tx_priority_queue(GMAC, (uint32_t)&gs_tx_desc_null, GMAC_QUE_2);
	gmac_set_tx_priority_queue(GMAC, (uint32_t)&gs_tx_desc_null, GMAC_QUE_1);
	
	/* Set Rx Priority */
	gs_rx_desc_null.addr.val = (uint32_t)0xFFFFFFFF & GMAC_RXD_ADDR_MASK;
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  40752e:	4b45      	ldr	r3, [pc, #276]	; (407644 <ethernetif_init+0x1e4>)
  407530:	f06f 0201 	mvn.w	r2, #1
  407534:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.status.val = 0;
  407536:	605f      	str	r7, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  407538:	f023 0303 	bic.w	r3, r3, #3
  40753c:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
  407540:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
static void gmac_rx_init(struct gmac_device *ps_gmac_dev)
{
	uint32_t ul_index = 0;

	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;
  407544:	4d38      	ldr	r5, [pc, #224]	; (407628 <ethernetif_init+0x1c8>)
  407546:	f241 2308 	movw	r3, #4616	; 0x1208
  40754a:	50ef      	str	r7, [r5, r3]

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  40754c:	632f      	str	r7, [r5, #48]	; 0x30
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  40754e:	602f      	str	r7, [r5, #0]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  407550:	606f      	str	r7, [r5, #4]
	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  407552:	636f      	str	r7, [r5, #52]	; 0x34
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  407554:	60af      	str	r7, [r5, #8]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  407556:	60ef      	str	r7, [r5, #12]
	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  407558:	63af      	str	r7, [r5, #56]	; 0x38
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  40755a:	616f      	str	r7, [r5, #20]
	}
	ps_gmac_dev->rx_desc[ul_index - 1].addr.val |= GMAC_RXD_WRAP;
  40755c:	2302      	movs	r3, #2
  40755e:	612b      	str	r3, [r5, #16]

	/* Build RX buffer and descriptors. */
	gmac_rx_populate_queue(ps_gmac_dev);
  407560:	4628      	mov	r0, r5
  407562:	4b39      	ldr	r3, [pc, #228]	; (407648 <ethernetif_init+0x1e8>)
  407564:	4798      	blx	r3
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr   Rx queue address.
 */
static inline void gmac_set_rx_queue(Gmac* p_gmac, uint32_t ul_addr)
{
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  407566:	f025 0303 	bic.w	r3, r5, #3
  40756a:	61a3      	str	r3, [r4, #24]
static void gmac_tx_init(struct gmac_device *ps_gmac_dev)
{
	uint32_t ul_index;

	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;
  40756c:	f241 230c 	movw	r3, #4620	; 0x120c
  407570:	50ef      	str	r7, [r5, r3]

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  407572:	f105 033c 	add.w	r3, r5, #60	; 0x3c
  407576:	61ab      	str	r3, [r5, #24]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  407578:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
  40757c:	61eb      	str	r3, [r5, #28]
	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  40757e:	f205 622a 	addw	r2, r5, #1578	; 0x62a
  407582:	622a      	str	r2, [r5, #32]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  407584:	626b      	str	r3, [r5, #36]	; 0x24
	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  407586:	f605 4318 	addw	r3, r5, #3096	; 0xc18
  40758a:	62ab      	str	r3, [r5, #40]	; 0x28
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
	}
	ps_gmac_dev->tx_desc[ul_index - 1].status.val |= GMAC_TXD_WRAP;
  40758c:	4b2f      	ldr	r3, [pc, #188]	; (40764c <ethernetif_init+0x1ec>)
  40758e:	62eb      	str	r3, [r5, #44]	; 0x2c
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr  Tx queue address.
 */
static inline void gmac_set_tx_queue(Gmac* p_gmac, uint32_t ul_addr)
{
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  407590:	3518      	adds	r5, #24
  407592:	f025 0503 	bic.w	r5, r5, #3
  407596:	61e5      	str	r5, [r4, #28]
 * \param uc_enable   0 to disable GMAC transmit, else to enable it.
 */
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  407598:	6823      	ldr	r3, [r4, #0]
  40759a:	f043 0308 	orr.w	r3, r3, #8
  40759e:	6023      	str	r3, [r4, #0]
 * \param uc_enable   0 to disable GMAC receiver, else to enable it.
 */
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  4075a0:	6823      	ldr	r3, [r4, #0]
  4075a2:	f043 0304 	orr.w	r3, r3, #4
  4075a6:	6023      	str	r3, [r4, #0]
 */
static inline void gmac_enable_statistics_write(Gmac* p_gmac,
		uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  4075a8:	6823      	ldr	r3, [r4, #0]
  4075aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4075ae:	6023      	str	r3, [r4, #0]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_source   Interrupt source(s) to be enabled.
 */
static inline void gmac_enable_interrupt(Gmac* p_gmac, uint32_t ul_source)
{
	p_gmac->GMAC_IER = ul_source;
  4075b0:	62a7      	str	r7, [r4, #40]	; 0x28
 * \param p_mac_addr  GMAC address.
 */
static inline void gmac_set_address(Gmac* p_gmac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  4075b2:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
  4075b6:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
  4075ba:	0413      	lsls	r3, r2, #16
  4075bc:	ea43 6201 	orr.w	r2, r3, r1, lsl #24
  4075c0:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
  4075c4:	4313      	orrs	r3, r2
  4075c6:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
  4075ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4075ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  4075d2:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
  4075d6:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
  4075da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4075de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4075e2:	4b1b      	ldr	r3, [pc, #108]	; (407650 <ethernetif_init+0x1f0>)
  4075e4:	f883 7327 	strb.w	r7, [r3, #807]	; 0x327
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4075e8:	2280      	movs	r2, #128	; 0x80
  4075ea:	605a      	str	r2, [r3, #4]
	/* Enable NVIC GMAC interrupt. */
	NVIC_SetPriority(GMAC_IRQn, INT_PRIORITY_GMAC);
	NVIC_EnableIRQ(GMAC_IRQn);

	/* Init MAC PHY driver. */
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
  4075ec:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
  4075f0:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  4075f4:	4639      	mov	r1, r7
  4075f6:	4620      	mov	r0, r4
  4075f8:	4b16      	ldr	r3, [pc, #88]	; (407654 <ethernetif_init+0x1f4>)
  4075fa:	4798      	blx	r3
  4075fc:	b980      	cbnz	r0, 407620 <ethernetif_init+0x1c0>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: PHY init ERROR!\n"));
		return;
	}

	/* Auto Negotiate, work in RMII mode. */
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  4075fe:	4639      	mov	r1, r7
  407600:	4620      	mov	r0, r4
  407602:	4b15      	ldr	r3, [pc, #84]	; (407658 <ethernetif_init+0x1f8>)
  407604:	4798      	blx	r3
  407606:	b958      	cbnz	r0, 407620 <ethernetif_init+0x1c0>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: auto negotiate ERROR!\n"));
		return;
	}

	/* Establish ethernet link. */
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  407608:	2201      	movs	r2, #1
  40760a:	4639      	mov	r1, r7
  40760c:	4620      	mov	r0, r4
  40760e:	4b13      	ldr	r3, [pc, #76]	; (40765c <ethernetif_init+0x1fc>)
  407610:	4798      	blx	r3
  407612:	b928      	cbnz	r0, 407620 <ethernetif_init+0x1c0>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: set link ERROR!\n"));
		return;
	}

	/* Set link up*/
	netif->flags |= NETIF_FLAG_LINK_UP;
  407614:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
  407618:	f043 0310 	orr.w	r3, r3, #16
  40761c:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
	if (id == 0)
		return ERR_MEM;
#endif

	return ERR_OK;
}
  407620:	2000      	movs	r0, #0
  407622:	b003      	add	sp, #12
  407624:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407626:	bf00      	nop
  407628:	204025c0 	.word	0x204025c0
  40762c:	00406f61 	.word	0x00406f61
  407630:	00407319 	.word	0x00407319
  407634:	01312d00 	.word	0x01312d00
  407638:	00400ba1 	.word	0x00400ba1
  40763c:	40050000 	.word	0x40050000
  407640:	204025b8 	.word	0x204025b8
  407644:	204037d8 	.word	0x204037d8
  407648:	004072bd 	.word	0x004072bd
  40764c:	c0008000 	.word	0xc0008000
  407650:	e000e100 	.word	0xe000e100
  407654:	0040068d 	.word	0x0040068d
  407658:	004004a1 	.word	0x004004a1
  40765c:	004003ad 	.word	0x004003ad

00407660 <status_callback>:
 * is up.
 *
 * \param netif The network interface instance.
 */
void status_callback(struct netif *netif)
{
  407660:	b500      	push	{lr}
  407662:	b087      	sub	sp, #28
	int8_t c_mess[20];
	if (netif_is_up(netif)) {
  407664:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  407668:	f013 0f01 	tst.w	r3, #1
  40766c:	d010      	beq.n	407690 <status_callback+0x30>
		strcpy((char*)c_mess, "IP=");
  40766e:	4b0d      	ldr	r3, [pc, #52]	; (4076a4 <status_callback+0x44>)
  407670:	9301      	str	r3, [sp, #4]
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
  407672:	3004      	adds	r0, #4
  407674:	4b0c      	ldr	r3, [pc, #48]	; (4076a8 <status_callback+0x48>)
  407676:	4798      	blx	r3
  407678:	4601      	mov	r1, r0
  40767a:	a801      	add	r0, sp, #4
  40767c:	4b0b      	ldr	r3, [pc, #44]	; (4076ac <status_callback+0x4c>)
  40767e:	4798      	blx	r3
		printf("Network up %s\r\n", (char const*)c_mess);
  407680:	a901      	add	r1, sp, #4
  407682:	480b      	ldr	r0, [pc, #44]	; (4076b0 <status_callback+0x50>)
  407684:	4b0b      	ldr	r3, [pc, #44]	; (4076b4 <status_callback+0x54>)
  407686:	4798      	blx	r3
		//httpd_init();											//need to call this AFTER Network is Up
		IP_Active=1;
  407688:	2201      	movs	r2, #1
  40768a:	4b0b      	ldr	r3, [pc, #44]	; (4076b8 <status_callback+0x58>)
  40768c:	601a      	str	r2, [r3, #0]
  40768e:	e005      	b.n	40769c <status_callback+0x3c>
		
	} else {
		printf("Network down\r\n");
  407690:	480a      	ldr	r0, [pc, #40]	; (4076bc <status_callback+0x5c>)
  407692:	4b08      	ldr	r3, [pc, #32]	; (4076b4 <status_callback+0x54>)
  407694:	4798      	blx	r3
		IP_Active=0;
  407696:	2200      	movs	r2, #0
  407698:	4b07      	ldr	r3, [pc, #28]	; (4076b8 <status_callback+0x58>)
  40769a:	601a      	str	r2, [r3, #0]
	}
}
  40769c:	b007      	add	sp, #28
  40769e:	f85d fb04 	ldr.w	pc, [sp], #4
  4076a2:	bf00      	nop
  4076a4:	003d5049 	.word	0x003d5049
  4076a8:	004029b5 	.word	0x004029b5
  4076ac:	0040831d 	.word	0x0040831d
  4076b0:	0040e7f8 	.word	0x0040e7f8
  4076b4:	00407e9d 	.word	0x00407e9d
  4076b8:	204037e0 	.word	0x204037e0
  4076bc:	0040e808 	.word	0x0040e808

004076c0 <getIP_Active>:

/* Global variable containing MAC configuration (hw addr, IP, GW, etc). */
struct netif gs_net_if;

/*Get_IP_Active returns the global variable indicating if a network address has been assigned or not*/
uint16_t getIP_Active(void){uint16_t x =IP_Active; return x;}
  4076c0:	4b01      	ldr	r3, [pc, #4]	; (4076c8 <getIP_Active+0x8>)
  4076c2:	6818      	ldr	r0, [r3, #0]
  4076c4:	b280      	uxth	r0, r0
  4076c6:	4770      	bx	lr
  4076c8:	204037e0 	.word	0x204037e0

004076cc <init_ethernet>:

/**
 * \brief Initialize the lwIP TCP/IP stack with the network interface driver.
 */
void init_ethernet(void)
{
  4076cc:	b530      	push	{r4, r5, lr}
  4076ce:	b089      	sub	sp, #36	; 0x24
	/* Initialize lwIP. */
	lwip_init();
  4076d0:	4b10      	ldr	r3, [pc, #64]	; (407714 <init_ethernet+0x48>)
  4076d2:	4798      	blx	r3
	struct ip_addr x_ip_addr, x_net_mask, x_gateway;
	extern err_t ethernetif_init(struct netif *netif);

#if defined(DHCP_USED)
		/* DHCP mode. */
	x_ip_addr.addr = 0;
  4076d4:	2300      	movs	r3, #0
  4076d6:	9305      	str	r3, [sp, #20]
	x_net_mask.addr = 0;
  4076d8:	9306      	str	r3, [sp, #24]
			ETHERNET_CONF_GATEWAY_ADDR2,
			ETHERNET_CONF_GATEWAY_ADDR3);
#endif

	/* Add data to netif */
	if (NULL == netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
  4076da:	4c0f      	ldr	r4, [pc, #60]	; (407718 <init_ethernet+0x4c>)
  4076dc:	4a0f      	ldr	r2, [pc, #60]	; (40771c <init_ethernet+0x50>)
  4076de:	9202      	str	r2, [sp, #8]
  4076e0:	4a0f      	ldr	r2, [pc, #60]	; (407720 <init_ethernet+0x54>)
  4076e2:	9201      	str	r2, [sp, #4]
  4076e4:	9300      	str	r3, [sp, #0]
  4076e6:	ab07      	add	r3, sp, #28
  4076e8:	aa06      	add	r2, sp, #24
  4076ea:	a905      	add	r1, sp, #20
  4076ec:	4620      	mov	r0, r4
  4076ee:	4d0d      	ldr	r5, [pc, #52]	; (407724 <init_ethernet+0x58>)
  4076f0:	47a8      	blx	r5
			ethernetif_init, ethernet_input)) {
		LWIP_ASSERT("NULL == netif_add", 0);
	}

	/* Make it the default interface */
	netif_set_default(&gs_net_if);
  4076f2:	4620      	mov	r0, r4
  4076f4:	4b0c      	ldr	r3, [pc, #48]	; (407728 <init_ethernet+0x5c>)
  4076f6:	4798      	blx	r3

	/* Setup callback function for netif status change */
	netif_set_status_callback(&gs_net_if, status_callback);
  4076f8:	490c      	ldr	r1, [pc, #48]	; (40772c <init_ethernet+0x60>)
  4076fa:	4620      	mov	r0, r4
  4076fc:	4b0c      	ldr	r3, [pc, #48]	; (407730 <init_ethernet+0x64>)
  4076fe:	4798      	blx	r3

	/* Bring it up */
#if defined(DHCP_USED)
	/* DHCP mode. */
	if (ERR_OK != dhcp_start(&gs_net_if)) {
  407700:	4620      	mov	r0, r4
  407702:	4b0c      	ldr	r3, [pc, #48]	; (407734 <init_ethernet+0x68>)
  407704:	4798      	blx	r3
		LWIP_ASSERT("ERR_OK != dhcp_start", 0);
	}
	printf("DHCP Started\r\n");
  407706:	480c      	ldr	r0, [pc, #48]	; (407738 <init_ethernet+0x6c>)
  407708:	4b0c      	ldr	r3, [pc, #48]	; (40773c <init_ethernet+0x70>)
  40770a:	4798      	blx	r3

	/* Set hw and IP parameters, initialize MAC too. */
	ethernet_configure_interface();

	/* Initialize timer. */
	sys_init_timing();
  40770c:	4b0c      	ldr	r3, [pc, #48]	; (407740 <init_ethernet+0x74>)
  40770e:	4798      	blx	r3
}
  407710:	b009      	add	sp, #36	; 0x24
  407712:	bd30      	pop	{r4, r5, pc}
  407714:	00402fc1 	.word	0x00402fc1
  407718:	204048bc 	.word	0x204048bc
  40771c:	00407081 	.word	0x00407081
  407720:	00407461 	.word	0x00407461
  407724:	00403575 	.word	0x00403575
  407728:	004035dd 	.word	0x004035dd
  40772c:	00407661 	.word	0x00407661
  407730:	00403651 	.word	0x00403651
  407734:	004020d9 	.word	0x004020d9
  407738:	0040e818 	.word	0x0040e818
  40773c:	00407e9d 	.word	0x00407e9d
  407740:	00407a81 	.word	0x00407a81

00407744 <ethernet_task>:

/**
 * \brief Process incoming ethernet frames, then update timers.
 */
void ethernet_task(void)
{
  407744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Poll the network interface driver for incoming ethernet frames. */
	ethernetif_input(&gs_net_if);		//to treat incoming packets (function defined in the network interface GMAC driver) 	
  407746:	4816      	ldr	r0, [pc, #88]	; (4077a0 <ethernet_task+0x5c>)
  407748:	4b16      	ldr	r3, [pc, #88]	; (4077a4 <ethernet_task+0x60>)
  40774a:	4798      	blx	r3
{
	static uint32_t ul_last_time;
	uint32_t ul_cur_time, ul_time_diff, ul_idx_timer;
	timers_info_t *p_tmr_inf;

	ul_cur_time = sys_get_ms();
  40774c:	4b16      	ldr	r3, [pc, #88]	; (4077a8 <ethernet_task+0x64>)
  40774e:	4798      	blx	r3
	if (ul_cur_time >= ul_last_time) {
  407750:	4b16      	ldr	r3, [pc, #88]	; (4077ac <ethernet_task+0x68>)
  407752:	681d      	ldr	r5, [r3, #0]
  407754:	42a8      	cmp	r0, r5
		ul_time_diff = ul_cur_time - ul_last_time;
  407756:	eba0 0505 	sub.w	r5, r0, r5
	} else {
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
  40775a:	bf38      	it	cc
  40775c:	f105 35ff 	addcc.w	r5, r5, #4294967295
	}

	if (ul_time_diff) {
  407760:	b1e5      	cbz	r5, 40779c <ethernet_task+0x58>
		ul_last_time = ul_cur_time;
  407762:	4b12      	ldr	r3, [pc, #72]	; (4077ac <ethernet_task+0x68>)
  407764:	6018      	str	r0, [r3, #0]
  407766:	4f12      	ldr	r7, [pc, #72]	; (4077b0 <ethernet_task+0x6c>)
  407768:	f107 0408 	add.w	r4, r7, #8
  40776c:	3744      	adds	r7, #68	; 0x44
  40776e:	4626      	mov	r6, r4
		for (ul_idx_timer = 0;
			 ul_idx_timer < (sizeof(gs_timers_table) / sizeof(timers_info_t));
			 ul_idx_timer++) {
			p_tmr_inf = &gs_timers_table[ul_idx_timer];
			p_tmr_inf->timer += ul_time_diff;
  407770:	f854 3c08 	ldr.w	r3, [r4, #-8]
  407774:	442b      	add	r3, r5
  407776:	f844 3c08 	str.w	r3, [r4, #-8]
			if (p_tmr_inf->timer > p_tmr_inf->timer_interval) {
  40777a:	f854 2c04 	ldr.w	r2, [r4, #-4]
  40777e:	4293      	cmp	r3, r2
  407780:	d909      	bls.n	407796 <ethernet_task+0x52>
				if (p_tmr_inf->timer_func) {
  407782:	6823      	ldr	r3, [r4, #0]
  407784:	b103      	cbz	r3, 407788 <ethernet_task+0x44>
					p_tmr_inf->timer_func();
  407786:	4798      	blx	r3
				}

				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
  407788:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40778c:	f856 2c04 	ldr.w	r2, [r6, #-4]
  407790:	1a9b      	subs	r3, r3, r2
  407792:	f846 3c08 	str.w	r3, [r6, #-8]
  407796:	340c      	adds	r4, #12
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
	}

	if (ul_time_diff) {
		ul_last_time = ul_cur_time;
		for (ul_idx_timer = 0;
  407798:	42bc      	cmp	r4, r7
  40779a:	d1e8      	bne.n	40776e <ethernet_task+0x2a>
  40779c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40779e:	bf00      	nop
  4077a0:	204048bc 	.word	0x204048bc
  4077a4:	004073ad 	.word	0x004073ad
  4077a8:	00407b15 	.word	0x00407b15
  4077ac:	204037e4 	.word	0x204037e4
  4077b0:	20400014 	.word	0x20400014

004077b4 <tcpErrorHandler>:
	}
	else printf("Successfully initiated send from pbuf was the following : '%s'\n\n",string);
	return 0;
}
//void  (*tcp_err_fn)(void *arg, err_t err)
void tcpErrorHandler(void *arg, err_t err){
  4077b4:	b508      	push	{r3, lr}
	printf("tcpErrorHandler was called...\n\n ");
  4077b6:	4802      	ldr	r0, [pc, #8]	; (4077c0 <tcpErrorHandler+0xc>)
  4077b8:	4b02      	ldr	r3, [pc, #8]	; (4077c4 <tcpErrorHandler+0x10>)
  4077ba:	4798      	blx	r3
  4077bc:	bd08      	pop	{r3, pc}
  4077be:	bf00      	nop
  4077c0:	0040e828 	.word	0x0040e828
  4077c4:	00407e9d 	.word	0x00407e9d

004077c8 <tcpSendCallback>:
	    return 0;
	return err;
	
}
//typedef err_t (*tcp_sent_fn)(void *arg, struct tcp_pcb *tpcb,u16_t len);
err_t tcpSendCallback(void *arg, struct tcp_pcb *tpcb,u16_t len){
  4077c8:	b510      	push	{r4, lr}
	//u32_t *Arg = *(u32_t*)arg;
	printf("tcpSendCallback was called...\n\n");
  4077ca:	4803      	ldr	r0, [pc, #12]	; (4077d8 <tcpSendCallback+0x10>)
  4077cc:	4c03      	ldr	r4, [pc, #12]	; (4077dc <tcpSendCallback+0x14>)
  4077ce:	47a0      	blx	r4
	printf("Successfully sent pack via TCP\n\n");
  4077d0:	4803      	ldr	r0, [pc, #12]	; (4077e0 <tcpSendCallback+0x18>)
  4077d2:	47a0      	blx	r4
	return 0;
}
  4077d4:	2000      	movs	r0, #0
  4077d6:	bd10      	pop	{r4, pc}
  4077d8:	0040e84c 	.word	0x0040e84c
  4077dc:	00407e9d 	.word	0x00407e9d
  4077e0:	0040e86c 	.word	0x0040e86c

004077e4 <tcp_send_packet>:
	tcp_send_packet();
	return err;
}

uint32_t tcp_send_packet(void)
{
  4077e4:	b530      	push	{r4, r5, lr}
  4077e6:	b0b3      	sub	sp, #204	; 0xcc
	char *data	="Kebba";
	//char *data ="anything";

	char *string1="POST /log.php HTTP/1.0\r\nHOST: localhost\r\nContent-Length: ";
	char dataLength[100];
	sprintf(dataLength,"%d",(strlen(data)+2));
  4077e8:	2207      	movs	r2, #7
  4077ea:	492c      	ldr	r1, [pc, #176]	; (40789c <tcp_send_packet+0xb8>)
  4077ec:	a819      	add	r0, sp, #100	; 0x64
  4077ee:	4b2c      	ldr	r3, [pc, #176]	; (4078a0 <tcp_send_packet+0xbc>)
  4077f0:	4798      	blx	r3
	char *string2="\r\n\n";
	char *dispData=data;
	char *string3="\r\n\r\n";
	char string[100];
	strcpy(string,string1);
  4077f2:	466c      	mov	r4, sp
  4077f4:	4d2b      	ldr	r5, [pc, #172]	; (4078a4 <tcp_send_packet+0xc0>)
  4077f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4077f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4077fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4077fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4077fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  407800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  407802:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  407806:	c403      	stmia	r4!, {r0, r1}
  407808:	8022      	strh	r2, [r4, #0]
	strcat(string,dataLength);
  40780a:	a919      	add	r1, sp, #100	; 0x64
  40780c:	4668      	mov	r0, sp
  40780e:	4b26      	ldr	r3, [pc, #152]	; (4078a8 <tcp_send_packet+0xc4>)
  407810:	4798      	blx	r3
	strcat(string,string2);
  407812:	4668      	mov	r0, sp
  407814:	4c25      	ldr	r4, [pc, #148]	; (4078ac <tcp_send_packet+0xc8>)
  407816:	47a0      	blx	r4
  407818:	4603      	mov	r3, r0
  40781a:	4a25      	ldr	r2, [pc, #148]	; (4078b0 <tcp_send_packet+0xcc>)
  40781c:	6810      	ldr	r0, [r2, #0]
  40781e:	f84d 0003 	str.w	r0, [sp, r3]
	strcat(string,dispData);
  407822:	4668      	mov	r0, sp
  407824:	47a0      	blx	r4
  407826:	4602      	mov	r2, r0
  407828:	eb0d 0100 	add.w	r1, sp, r0
  40782c:	4b21      	ldr	r3, [pc, #132]	; (4078b4 <tcp_send_packet+0xd0>)
  40782e:	6818      	ldr	r0, [r3, #0]
  407830:	f84d 0002 	str.w	r0, [sp, r2]
  407834:	889b      	ldrh	r3, [r3, #4]
  407836:	808b      	strh	r3, [r1, #4]
	strcat(string,string3);
  407838:	4668      	mov	r0, sp
  40783a:	47a0      	blx	r4
  40783c:	4602      	mov	r2, r0
  40783e:	eb0d 0100 	add.w	r1, sp, r0
  407842:	4b1d      	ldr	r3, [pc, #116]	; (4078b8 <tcp_send_packet+0xd4>)
  407844:	6818      	ldr	r0, [r3, #0]
  407846:	f84d 0002 	str.w	r0, [sp, r2]
  40784a:	791b      	ldrb	r3, [r3, #4]
  40784c:	710b      	strb	r3, [r1, #4]
	//char *string = "POST /log.php HTTP/1.1\r\nHOST: localhost\r\nContent-Length: 6\r\n\ntest\r\n\r\n";//POST /log.php HTTP/1.1\r\n HOST: localhost\r\nContent-Length: 7\r\n\nhello\r\n\r\n
	uint32_t len = strlen(string);

	/* push to buffer */
	err_t error = tcp_write(pcb, string, strlen(string), TCP_WRITE_FLAG_COPY);
  40784e:	4668      	mov	r0, sp
  407850:	47a0      	blx	r4
  407852:	2301      	movs	r3, #1
  407854:	b282      	uxth	r2, r0
  407856:	4669      	mov	r1, sp
  407858:	4818      	ldr	r0, [pc, #96]	; (4078bc <tcp_send_packet+0xd8>)
  40785a:	6800      	ldr	r0, [r0, #0]
  40785c:	4c18      	ldr	r4, [pc, #96]	; (4078c0 <tcp_send_packet+0xdc>)
  40785e:	47a0      	blx	r4

	if (error) {
  407860:	b128      	cbz	r0, 40786e <tcp_send_packet+0x8a>
  407862:	4601      	mov	r1, r0
		printf("ERROR: Code: %d (tcp_send_packet :: tcp_write)\n\n", error);
  407864:	4817      	ldr	r0, [pc, #92]	; (4078c4 <tcp_send_packet+0xe0>)
  407866:	4b18      	ldr	r3, [pc, #96]	; (4078c8 <tcp_send_packet+0xe4>)
  407868:	4798      	blx	r3
		return 1;
  40786a:	2001      	movs	r0, #1
  40786c:	e013      	b.n	407896 <tcp_send_packet+0xb2>
	}
	else	printf("Successfully written to pbuf was the following: \n'%s'\n\n",string);
  40786e:	4669      	mov	r1, sp
  407870:	4816      	ldr	r0, [pc, #88]	; (4078cc <tcp_send_packet+0xe8>)
  407872:	4b15      	ldr	r3, [pc, #84]	; (4078c8 <tcp_send_packet+0xe4>)
  407874:	4798      	blx	r3

	/* now send */
	error = tcp_output(pcb);
  407876:	4b11      	ldr	r3, [pc, #68]	; (4078bc <tcp_send_packet+0xd8>)
  407878:	6818      	ldr	r0, [r3, #0]
  40787a:	4b15      	ldr	r3, [pc, #84]	; (4078d0 <tcp_send_packet+0xec>)
  40787c:	4798      	blx	r3
	if (error) {
  40787e:	4601      	mov	r1, r0
  407880:	b120      	cbz	r0, 40788c <tcp_send_packet+0xa8>
		printf("ERROR: Code: %d (tcp_send_packet :: tcp_output)\n", error);
  407882:	4814      	ldr	r0, [pc, #80]	; (4078d4 <tcp_send_packet+0xf0>)
  407884:	4b10      	ldr	r3, [pc, #64]	; (4078c8 <tcp_send_packet+0xe4>)
  407886:	4798      	blx	r3
		return 1;
  407888:	2001      	movs	r0, #1
  40788a:	e004      	b.n	407896 <tcp_send_packet+0xb2>
	}
	else printf("Successfully initiated send from pbuf was the following : '%s'\n\n",string);
  40788c:	4669      	mov	r1, sp
  40788e:	4812      	ldr	r0, [pc, #72]	; (4078d8 <tcp_send_packet+0xf4>)
  407890:	4b0d      	ldr	r3, [pc, #52]	; (4078c8 <tcp_send_packet+0xe4>)
  407892:	4798      	blx	r3
	return 0;
  407894:	2000      	movs	r0, #0
}
  407896:	b033      	add	sp, #204	; 0xcc
  407898:	bd30      	pop	{r4, r5, pc}
  40789a:	bf00      	nop
  40789c:	0040e890 	.word	0x0040e890
  4078a0:	004082d1 	.word	0x004082d1
  4078a4:	0040e894 	.word	0x0040e894
  4078a8:	0040831d 	.word	0x0040831d
  4078ac:	00408441 	.word	0x00408441
  4078b0:	0040e8d0 	.word	0x0040e8d0
  4078b4:	0040e8d4 	.word	0x0040e8d4
  4078b8:	0040e8dc 	.word	0x0040e8dc
  4078bc:	204048f4 	.word	0x204048f4
  4078c0:	00405c41 	.word	0x00405c41
  4078c4:	0040e8e4 	.word	0x0040e8e4
  4078c8:	00407e9d 	.word	0x00407e9d
  4078cc:	0040e918 	.word	0x0040e918
  4078d0:	004060d1 	.word	0x004060d1
  4078d4:	0040e950 	.word	0x0040e950
  4078d8:	0040e984 	.word	0x0040e984

004078dc <connectedCallback>:
	tcp_poll(pcb, http_poll, 4);
	return ERR_OK;
}
//typedef err_t;
//typedef err_t (*tcp_connected_fn)(void *arg, struct tcp_pcb *tpcb, err_t err);
err_t connectedCallback(void *arg, struct tcp_pcb *tpcb, err_t err){
  4078dc:	b510      	push	{r4, lr}
  4078de:	4614      	mov	r4, r2
	//int *Arg = *((int*)arg);
	printf("\nSuccessfully created TCP connection!\n\n"); //printf("Connection Made: %d\n",Arg);
  4078e0:	4803      	ldr	r0, [pc, #12]	; (4078f0 <connectedCallback+0x14>)
  4078e2:	4b04      	ldr	r3, [pc, #16]	; (4078f4 <connectedCallback+0x18>)
  4078e4:	4798      	blx	r3
	//printf("Connection Made to IP: %#x\n",arg);

	tcp_send_packet();
  4078e6:	4b04      	ldr	r3, [pc, #16]	; (4078f8 <connectedCallback+0x1c>)
  4078e8:	4798      	blx	r3
	return err;
}
  4078ea:	4620      	mov	r0, r4
  4078ec:	bd10      	pop	{r4, pc}
  4078ee:	bf00      	nop
  4078f0:	0040e9c8 	.word	0x0040e9c8
  4078f4:	00407e9d 	.word	0x00407e9d
  4078f8:	004077e5 	.word	0x004077e5

004078fc <ready2Receive>:
	printf("tcpSendCallback was called...\n\n");
	printf("Successfully sent pack via TCP\n\n");
	return 0;
}
//ready to receive just tells the mainloop when the last status code was received
uint16_t ready2Receive(void){uint16_t x=ready; return x;};
  4078fc:	4b01      	ldr	r3, [pc, #4]	; (407904 <ready2Receive+0x8>)
  4078fe:	8818      	ldrh	r0, [r3, #0]
  407900:	b280      	uxth	r0, r0
  407902:	4770      	bx	lr
  407904:	20400050 	.word	0x20400050

00407908 <httpd_init>:

/**
 * \brief HTTP server init.
 */
void httpd_init(void)
{
  407908:	b530      	push	{r4, r5, lr}
  40790a:	b083      	sub	sp, #12

	ready=0;
  40790c:	4b18      	ldr	r3, [pc, #96]	; (407970 <httpd_init+0x68>)
  40790e:	2200      	movs	r2, #0
  407910:	801a      	strh	r2, [r3, #0]
	printf("\nready set to: %d \n ==================================================\n",ready );
  407912:	8819      	ldrh	r1, [r3, #0]
  407914:	b289      	uxth	r1, r1
  407916:	4817      	ldr	r0, [pc, #92]	; (407974 <httpd_init+0x6c>)
  407918:	4b17      	ldr	r3, [pc, #92]	; (407978 <httpd_init+0x70>)
  40791a:	4798      	blx	r3

	    /* create an ip */
	    struct ip_addr ip;
	    //IP4_ADDR(&ip, 192,168,0,100); //IP address on  my server (for wired router)
	    IP4_ADDR(&ip, 192,168,0,101); //IP address on  my server
  40791c:	ad02      	add	r5, sp, #8
  40791e:	4b17      	ldr	r3, [pc, #92]	; (40797c <httpd_init+0x74>)
  407920:	f845 3d04 	str.w	r3, [r5, #-4]!
	
	 pcb = tcp_new();
  407924:	4b16      	ldr	r3, [pc, #88]	; (407980 <httpd_init+0x78>)
  407926:	4798      	blx	r3
  407928:	4c16      	ldr	r4, [pc, #88]	; (407984 <httpd_init+0x7c>)
  40792a:	6020      	str	r0, [r4, #0]
	    /* dummy data to pass to callbacks*/
	tcp_arg(pcb, &ip);
  40792c:	4629      	mov	r1, r5
  40792e:	4b16      	ldr	r3, [pc, #88]	; (407988 <httpd_init+0x80>)
  407930:	4798      	blx	r3
	
	
	tcp_err(pcb, tcpErrorHandler);
  407932:	4916      	ldr	r1, [pc, #88]	; (40798c <httpd_init+0x84>)
  407934:	6820      	ldr	r0, [r4, #0]
  407936:	4b16      	ldr	r3, [pc, #88]	; (407990 <httpd_init+0x88>)
  407938:	4798      	blx	r3
	tcp_recv(pcb, tcpRecvCallback);
  40793a:	4916      	ldr	r1, [pc, #88]	; (407994 <httpd_init+0x8c>)
  40793c:	6820      	ldr	r0, [r4, #0]
  40793e:	4b16      	ldr	r3, [pc, #88]	; (407998 <httpd_init+0x90>)
  407940:	4798      	blx	r3
	tcp_sent(pcb, tcpSendCallback);
  407942:	4916      	ldr	r1, [pc, #88]	; (40799c <httpd_init+0x94>)
  407944:	6820      	ldr	r0, [r4, #0]
  407946:	4b16      	ldr	r3, [pc, #88]	; (4079a0 <httpd_init+0x98>)
  407948:	4798      	blx	r3

	//tcp_bind(pcb, IP_ADDR_ANY, 80);
	err_t  isConnectionOk;
	isConnectionOk=tcp_connect(pcb, &ip, 80,connectedCallback);
  40794a:	4b16      	ldr	r3, [pc, #88]	; (4079a4 <httpd_init+0x9c>)
  40794c:	2250      	movs	r2, #80	; 0x50
  40794e:	4629      	mov	r1, r5
  407950:	6820      	ldr	r0, [r4, #0]
  407952:	4c15      	ldr	r4, [pc, #84]	; (4079a8 <httpd_init+0xa0>)
  407954:	47a0      	blx	r4

	if(isConnectionOk==ERR_OK)printf("Connection okay because %d was returned by tcp_connect\n\n",isConnectionOk);
  407956:	b920      	cbnz	r0, 407962 <httpd_init+0x5a>
  407958:	2100      	movs	r1, #0
  40795a:	4814      	ldr	r0, [pc, #80]	; (4079ac <httpd_init+0xa4>)
  40795c:	4b06      	ldr	r3, [pc, #24]	; (407978 <httpd_init+0x70>)
  40795e:	4798      	blx	r3
  407960:	e003      	b.n	40796a <httpd_init+0x62>
  407962:	4601      	mov	r1, r0
	else printf("\nNot Connected: error %d\n\n",isConnectionOk);
  407964:	4812      	ldr	r0, [pc, #72]	; (4079b0 <httpd_init+0xa8>)
  407966:	4b04      	ldr	r3, [pc, #16]	; (407978 <httpd_init+0x70>)
  407968:	4798      	blx	r3
	//tcp_recv(pcb,http_recv("",pcb,));
	

}
  40796a:	b003      	add	sp, #12
  40796c:	bd30      	pop	{r4, r5, pc}
  40796e:	bf00      	nop
  407970:	20400050 	.word	0x20400050
  407974:	0040e9f0 	.word	0x0040e9f0
  407978:	00407e9d 	.word	0x00407e9d
  40797c:	6500a8c0 	.word	0x6500a8c0
  407980:	00404541 	.word	0x00404541
  407984:	204048f4 	.word	0x204048f4
  407988:	00403bbd 	.word	0x00403bbd
  40798c:	004077b5 	.word	0x004077b5
  407990:	00403bcd 	.word	0x00403bcd
  407994:	004079b5 	.word	0x004079b5
  407998:	00403bc1 	.word	0x00403bc1
  40799c:	004077c9 	.word	0x004077c9
  4079a0:	00403bc9 	.word	0x00403bc9
  4079a4:	004078dd 	.word	0x004078dd
  4079a8:	00404575 	.word	0x00404575
  4079ac:	0040ea38 	.word	0x0040ea38
  4079b0:	0040ea74 	.word	0x0040ea74

004079b4 <tcpRecvCallback>:
	printf("tcpErrorHandler was called...\n\n ");
	return;
}

//typedef err_t (*tcp_recv_fn)(void *arg, struct tcp_pcb *tpcb,struct pbuf *p, err_t err);
err_t tcpRecvCallback(void *arg, struct tcp_pcb *tpcb,struct pbuf *p, err_t err){
  4079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4079b6:	4607      	mov	r7, r0
  4079b8:	460e      	mov	r6, r1
  4079ba:	4614      	mov	r4, r2
	printf("tcpRecvCallback was called...\n\n");
  4079bc:	4819      	ldr	r0, [pc, #100]	; (407a24 <tcpRecvCallback+0x70>)
  4079be:	4d1a      	ldr	r5, [pc, #104]	; (407a28 <tcpRecvCallback+0x74>)
  4079c0:	47a8      	blx	r5
	//int Err = *(int*)err;
	    printf("Data recieved.\n\n");
  4079c2:	481a      	ldr	r0, [pc, #104]	; (407a2c <tcpRecvCallback+0x78>)
  4079c4:	47a8      	blx	r5


	    if (p == NULL) {
  4079c6:	bb0c      	cbnz	r4, 407a0c <tcpRecvCallback+0x58>
		    printf("The remote host closed the connection.\n\n");
  4079c8:	4819      	ldr	r0, [pc, #100]	; (407a30 <tcpRecvCallback+0x7c>)
  4079ca:	47a8      	blx	r5
		    printf("Now I'm closing the connection.\n\n");
  4079cc:	4819      	ldr	r0, [pc, #100]	; (407a34 <tcpRecvCallback+0x80>)
  4079ce:	47a8      	blx	r5
 * \param pcb Pointer to a TCP connection structure.
 * \param hs Pointer to structure representing the HTTP state.
 */
static void http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
	tcp_arg(pcb, NULL);
  4079d0:	2100      	movs	r1, #0
  4079d2:	4630      	mov	r0, r6
  4079d4:	4b18      	ldr	r3, [pc, #96]	; (407a38 <tcpRecvCallback+0x84>)
  4079d6:	4798      	blx	r3
	tcp_sent(pcb, NULL);
  4079d8:	2100      	movs	r1, #0
  4079da:	4630      	mov	r0, r6
  4079dc:	4b17      	ldr	r3, [pc, #92]	; (407a3c <tcpRecvCallback+0x88>)
  4079de:	4798      	blx	r3
	tcp_recv(pcb, NULL);
  4079e0:	2100      	movs	r1, #0
  4079e2:	4630      	mov	r0, r6
  4079e4:	4b16      	ldr	r3, [pc, #88]	; (407a40 <tcpRecvCallback+0x8c>)
  4079e6:	4798      	blx	r3
	mem_free(hs);
  4079e8:	4638      	mov	r0, r7
  4079ea:	4b16      	ldr	r3, [pc, #88]	; (407a44 <tcpRecvCallback+0x90>)
  4079ec:	4798      	blx	r3
	tcp_close(pcb);
  4079ee:	4630      	mov	r0, r6
  4079f0:	4b15      	ldr	r3, [pc, #84]	; (407a48 <tcpRecvCallback+0x94>)
  4079f2:	4798      	blx	r3
		    printf("Now I'm closing the connection.\n\n");
			struct http_state *hs;
			hs = arg;
			
		    http_close_conn(tpcb, hs);
			ready=1;
  4079f4:	4b15      	ldr	r3, [pc, #84]	; (407a4c <tcpRecvCallback+0x98>)
  4079f6:	2201      	movs	r2, #1
  4079f8:	801a      	strh	r2, [r3, #0]
			printf("\nready set to: %d \n ==================================================\n",ready );
  4079fa:	8819      	ldrh	r1, [r3, #0]
  4079fc:	b289      	uxth	r1, r1
  4079fe:	4814      	ldr	r0, [pc, #80]	; (407a50 <tcpRecvCallback+0x9c>)
  407a00:	47a8      	blx	r5
			httpd_init();
  407a02:	4b14      	ldr	r3, [pc, #80]	; (407a54 <tcpRecvCallback+0xa0>)
  407a04:	4798      	blx	r3
		    return ERR_ABRT;
  407a06:	f06f 0009 	mvn.w	r0, #9
  407a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			
		    } else {
		    printf("Number of pbufs '%d'\n\n", pbuf_clen(p));
  407a0c:	4620      	mov	r0, r4
  407a0e:	4b12      	ldr	r3, [pc, #72]	; (407a58 <tcpRecvCallback+0xa4>)
  407a10:	4798      	blx	r3
  407a12:	4601      	mov	r1, r0
  407a14:	4811      	ldr	r0, [pc, #68]	; (407a5c <tcpRecvCallback+0xa8>)
  407a16:	4d04      	ldr	r5, [pc, #16]	; (407a28 <tcpRecvCallback+0x74>)
  407a18:	47a8      	blx	r5
		    printf("Contents of pbuf '%s'\n\n", (char *)p->payload);
  407a1a:	6861      	ldr	r1, [r4, #4]
  407a1c:	4810      	ldr	r0, [pc, #64]	; (407a60 <tcpRecvCallback+0xac>)
  407a1e:	47a8      	blx	r5
	    }
		

	    return 0;
  407a20:	2000      	movs	r0, #0
	return err;
	
}
  407a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a24:	0040ea90 	.word	0x0040ea90
  407a28:	00407e9d 	.word	0x00407e9d
  407a2c:	0040eab0 	.word	0x0040eab0
  407a30:	0040eac4 	.word	0x0040eac4
  407a34:	0040eaf0 	.word	0x0040eaf0
  407a38:	00403bbd 	.word	0x00403bbd
  407a3c:	00403bc9 	.word	0x00403bc9
  407a40:	00403bc1 	.word	0x00403bc1
  407a44:	00403201 	.word	0x00403201
  407a48:	004041f5 	.word	0x004041f5
  407a4c:	20400050 	.word	0x20400050
  407a50:	0040e9f0 	.word	0x0040e9f0
  407a54:	00407909 	.word	0x00407909
  407a58:	004038dd 	.word	0x004038dd
  407a5c:	0040eb14 	.word	0x0040eb14
  407a60:	0040eb2c 	.word	0x0040eb2c

00407a64 <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  407a64:	b082      	sub	sp, #8
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  407a66:	4b04      	ldr	r3, [pc, #16]	; (407a78 <TC0_Handler+0x14>)
  407a68:	6a1b      	ldr	r3, [r3, #32]
  407a6a:	9301      	str	r3, [sp, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  407a6c:	4a03      	ldr	r2, [pc, #12]	; (407a7c <TC0_Handler+0x18>)
  407a6e:	6813      	ldr	r3, [r2, #0]
  407a70:	3301      	adds	r3, #1
  407a72:	6013      	str	r3, [r2, #0]
}
  407a74:	b002      	add	sp, #8
  407a76:	4770      	bx	lr
  407a78:	4000c000 	.word	0x4000c000
  407a7c:	204037e8 	.word	0x204037e8

00407a80 <sys_init_timing>:

/**
 * \brief Initialize the timer counter (TC0).
 */
void sys_init_timing(void)
{
  407a80:	b570      	push	{r4, r5, r6, lr}
  407a82:	b084      	sub	sp, #16
	uint32_t ul_div;
	uint32_t ul_tcclks;

	/* Clear tick value. */
	gs_ul_clk_tick = 0;
  407a84:	2500      	movs	r5, #0
  407a86:	4b18      	ldr	r3, [pc, #96]	; (407ae8 <sys_init_timing+0x68>)
  407a88:	601d      	str	r5, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  407a8a:	2017      	movs	r0, #23
  407a8c:	4b17      	ldr	r3, [pc, #92]	; (407aec <sys_init_timing+0x6c>)
  407a8e:	4798      	blx	r3

	/* Configure TC for a 1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(1000,
  407a90:	4c17      	ldr	r4, [pc, #92]	; (407af0 <sys_init_timing+0x70>)
  407a92:	9400      	str	r4, [sp, #0]
  407a94:	ab02      	add	r3, sp, #8
  407a96:	aa03      	add	r2, sp, #12
  407a98:	4621      	mov	r1, r4
  407a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  407a9e:	4e15      	ldr	r6, [pc, #84]	; (407af4 <sys_init_timing+0x74>)
  407aa0:	47b0      	blx	r6
			sysclk_get_main_hz(), &ul_div, &ul_tcclks,
			sysclk_get_main_hz());
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  407aa2:	4e15      	ldr	r6, [pc, #84]	; (407af8 <sys_init_timing+0x78>)
  407aa4:	9a02      	ldr	r2, [sp, #8]
  407aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  407aaa:	4629      	mov	r1, r5
  407aac:	4630      	mov	r0, r6
  407aae:	4b13      	ldr	r3, [pc, #76]	; (407afc <sys_init_timing+0x7c>)
  407ab0:	4798      	blx	r3
	tc_write_rc(TC0, 0, (sysclk_get_main_hz() / ul_div) / 1000);
  407ab2:	9a03      	ldr	r2, [sp, #12]
  407ab4:	fbb4 f4f2 	udiv	r4, r4, r2
  407ab8:	4a11      	ldr	r2, [pc, #68]	; (407b00 <sys_init_timing+0x80>)
  407aba:	fba2 3204 	umull	r3, r2, r2, r4
  407abe:	0992      	lsrs	r2, r2, #6
  407ac0:	4629      	mov	r1, r5
  407ac2:	4630      	mov	r0, r6
  407ac4:	4b0f      	ldr	r3, [pc, #60]	; (407b04 <sys_init_timing+0x84>)
  407ac6:	4798      	blx	r3
  407ac8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  407acc:	4b0e      	ldr	r3, [pc, #56]	; (407b08 <sys_init_timing+0x88>)
  407ace:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  407ad0:	2210      	movs	r2, #16
  407ad2:	4629      	mov	r1, r5
  407ad4:	4630      	mov	r0, r6
  407ad6:	4b0d      	ldr	r3, [pc, #52]	; (407b0c <sys_init_timing+0x8c>)
  407ad8:	4798      	blx	r3

	/* Start timer. */
	tc_start(TC0, 0);
  407ada:	4629      	mov	r1, r5
  407adc:	4630      	mov	r0, r6
  407ade:	4b0c      	ldr	r3, [pc, #48]	; (407b10 <sys_init_timing+0x90>)
  407ae0:	4798      	blx	r3
}
  407ae2:	b004      	add	sp, #16
  407ae4:	bd70      	pop	{r4, r5, r6, pc}
  407ae6:	bf00      	nop
  407ae8:	204037e8 	.word	0x204037e8
  407aec:	00400ba1 	.word	0x00400ba1
  407af0:	11e1a300 	.word	0x11e1a300
  407af4:	00400c29 	.word	0x00400c29
  407af8:	4000c000 	.word	0x4000c000
  407afc:	00400bf5 	.word	0x00400bf5
  407b00:	10624dd3 	.word	0x10624dd3
  407b04:	00400c19 	.word	0x00400c19
  407b08:	e000e100 	.word	0xe000e100
  407b0c:	00400c21 	.word	0x00400c21
  407b10:	00400c11 	.word	0x00400c11

00407b14 <sys_get_ms>:
/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
	return gs_ul_clk_tick;
  407b14:	4b01      	ldr	r3, [pc, #4]	; (407b1c <sys_get_ms+0x8>)
  407b16:	6818      	ldr	r0, [r3, #0]
}
  407b18:	4770      	bx	lr
  407b1a:	bf00      	nop
  407b1c:	204037e8 	.word	0x204037e8

00407b20 <sys_now>:
/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
	return gs_ul_clk_tick;
  407b20:	4b01      	ldr	r3, [pc, #4]	; (407b28 <sys_now+0x8>)
  407b22:	6818      	ldr	r0, [r3, #0]

#if ((LWIP_VERSION) != ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)))
u32_t sys_now(void)
{
	return (sys_get_ms());
}
  407b24:	4770      	bx	lr
  407b26:	bf00      	nop
  407b28:	204037e8 	.word	0x204037e8

00407b2c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  407b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  407b2e:	b083      	sub	sp, #12
  407b30:	4605      	mov	r5, r0
  407b32:	460c      	mov	r4, r1
	uint32_t val = 0;
  407b34:	2300      	movs	r3, #0
  407b36:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  407b38:	4b29      	ldr	r3, [pc, #164]	; (407be0 <usart_serial_getchar+0xb4>)
  407b3a:	4298      	cmp	r0, r3
  407b3c:	d107      	bne.n	407b4e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  407b3e:	461f      	mov	r7, r3
  407b40:	4e28      	ldr	r6, [pc, #160]	; (407be4 <usart_serial_getchar+0xb8>)
  407b42:	4621      	mov	r1, r4
  407b44:	4638      	mov	r0, r7
  407b46:	47b0      	blx	r6
  407b48:	2800      	cmp	r0, #0
  407b4a:	d1fa      	bne.n	407b42 <usart_serial_getchar+0x16>
  407b4c:	e015      	b.n	407b7a <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  407b4e:	4b26      	ldr	r3, [pc, #152]	; (407be8 <usart_serial_getchar+0xbc>)
  407b50:	4298      	cmp	r0, r3
  407b52:	d107      	bne.n	407b64 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  407b54:	461f      	mov	r7, r3
  407b56:	4e23      	ldr	r6, [pc, #140]	; (407be4 <usart_serial_getchar+0xb8>)
  407b58:	4621      	mov	r1, r4
  407b5a:	4638      	mov	r0, r7
  407b5c:	47b0      	blx	r6
  407b5e:	2800      	cmp	r0, #0
  407b60:	d1fa      	bne.n	407b58 <usart_serial_getchar+0x2c>
  407b62:	e015      	b.n	407b90 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  407b64:	4b21      	ldr	r3, [pc, #132]	; (407bec <usart_serial_getchar+0xc0>)
  407b66:	4298      	cmp	r0, r3
  407b68:	d107      	bne.n	407b7a <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  407b6a:	461f      	mov	r7, r3
  407b6c:	4e1d      	ldr	r6, [pc, #116]	; (407be4 <usart_serial_getchar+0xb8>)
  407b6e:	4621      	mov	r1, r4
  407b70:	4638      	mov	r0, r7
  407b72:	47b0      	blx	r6
  407b74:	2800      	cmp	r0, #0
  407b76:	d1fa      	bne.n	407b6e <usart_serial_getchar+0x42>
  407b78:	e017      	b.n	407baa <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  407b7a:	4b1d      	ldr	r3, [pc, #116]	; (407bf0 <usart_serial_getchar+0xc4>)
  407b7c:	429d      	cmp	r5, r3
  407b7e:	d107      	bne.n	407b90 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  407b80:	461f      	mov	r7, r3
  407b82:	4e18      	ldr	r6, [pc, #96]	; (407be4 <usart_serial_getchar+0xb8>)
  407b84:	4621      	mov	r1, r4
  407b86:	4638      	mov	r0, r7
  407b88:	47b0      	blx	r6
  407b8a:	2800      	cmp	r0, #0
  407b8c:	d1fa      	bne.n	407b84 <usart_serial_getchar+0x58>
  407b8e:	e019      	b.n	407bc4 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  407b90:	4b18      	ldr	r3, [pc, #96]	; (407bf4 <usart_serial_getchar+0xc8>)
  407b92:	429d      	cmp	r5, r3
  407b94:	d109      	bne.n	407baa <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  407b96:	461e      	mov	r6, r3
  407b98:	4d17      	ldr	r5, [pc, #92]	; (407bf8 <usart_serial_getchar+0xcc>)
  407b9a:	a901      	add	r1, sp, #4
  407b9c:	4630      	mov	r0, r6
  407b9e:	47a8      	blx	r5
  407ba0:	2800      	cmp	r0, #0
  407ba2:	d1fa      	bne.n	407b9a <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  407ba4:	9b01      	ldr	r3, [sp, #4]
  407ba6:	7023      	strb	r3, [r4, #0]
  407ba8:	e018      	b.n	407bdc <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  407baa:	4b14      	ldr	r3, [pc, #80]	; (407bfc <usart_serial_getchar+0xd0>)
  407bac:	429d      	cmp	r5, r3
  407bae:	d109      	bne.n	407bc4 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  407bb0:	461e      	mov	r6, r3
  407bb2:	4d11      	ldr	r5, [pc, #68]	; (407bf8 <usart_serial_getchar+0xcc>)
  407bb4:	a901      	add	r1, sp, #4
  407bb6:	4630      	mov	r0, r6
  407bb8:	47a8      	blx	r5
  407bba:	2800      	cmp	r0, #0
  407bbc:	d1fa      	bne.n	407bb4 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  407bbe:	9b01      	ldr	r3, [sp, #4]
  407bc0:	7023      	strb	r3, [r4, #0]
  407bc2:	e00b      	b.n	407bdc <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  407bc4:	4b0e      	ldr	r3, [pc, #56]	; (407c00 <usart_serial_getchar+0xd4>)
  407bc6:	429d      	cmp	r5, r3
  407bc8:	d108      	bne.n	407bdc <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  407bca:	461e      	mov	r6, r3
  407bcc:	4d0a      	ldr	r5, [pc, #40]	; (407bf8 <usart_serial_getchar+0xcc>)
  407bce:	a901      	add	r1, sp, #4
  407bd0:	4630      	mov	r0, r6
  407bd2:	47a8      	blx	r5
  407bd4:	2800      	cmp	r0, #0
  407bd6:	d1fa      	bne.n	407bce <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  407bd8:	9b01      	ldr	r3, [sp, #4]
  407bda:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  407bdc:	b003      	add	sp, #12
  407bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407be0:	400e0800 	.word	0x400e0800
  407be4:	00400cb1 	.word	0x00400cb1
  407be8:	400e0a00 	.word	0x400e0a00
  407bec:	400e1a00 	.word	0x400e1a00
  407bf0:	400e1c00 	.word	0x400e1c00
  407bf4:	40024000 	.word	0x40024000
  407bf8:	00400dc9 	.word	0x00400dc9
  407bfc:	40028000 	.word	0x40028000
  407c00:	4002c000 	.word	0x4002c000

00407c04 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  407c04:	b570      	push	{r4, r5, r6, lr}
  407c06:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  407c08:	4b2a      	ldr	r3, [pc, #168]	; (407cb4 <usart_serial_putchar+0xb0>)
  407c0a:	4298      	cmp	r0, r3
  407c0c:	d108      	bne.n	407c20 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  407c0e:	461e      	mov	r6, r3
  407c10:	4d29      	ldr	r5, [pc, #164]	; (407cb8 <usart_serial_putchar+0xb4>)
  407c12:	4621      	mov	r1, r4
  407c14:	4630      	mov	r0, r6
  407c16:	47a8      	blx	r5
  407c18:	2800      	cmp	r0, #0
  407c1a:	d1fa      	bne.n	407c12 <usart_serial_putchar+0xe>
		return 1;
  407c1c:	2001      	movs	r0, #1
  407c1e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  407c20:	4b26      	ldr	r3, [pc, #152]	; (407cbc <usart_serial_putchar+0xb8>)
  407c22:	4298      	cmp	r0, r3
  407c24:	d108      	bne.n	407c38 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  407c26:	461e      	mov	r6, r3
  407c28:	4d23      	ldr	r5, [pc, #140]	; (407cb8 <usart_serial_putchar+0xb4>)
  407c2a:	4621      	mov	r1, r4
  407c2c:	4630      	mov	r0, r6
  407c2e:	47a8      	blx	r5
  407c30:	2800      	cmp	r0, #0
  407c32:	d1fa      	bne.n	407c2a <usart_serial_putchar+0x26>
		return 1;
  407c34:	2001      	movs	r0, #1
  407c36:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  407c38:	4b21      	ldr	r3, [pc, #132]	; (407cc0 <usart_serial_putchar+0xbc>)
  407c3a:	4298      	cmp	r0, r3
  407c3c:	d108      	bne.n	407c50 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  407c3e:	461e      	mov	r6, r3
  407c40:	4d1d      	ldr	r5, [pc, #116]	; (407cb8 <usart_serial_putchar+0xb4>)
  407c42:	4621      	mov	r1, r4
  407c44:	4630      	mov	r0, r6
  407c46:	47a8      	blx	r5
  407c48:	2800      	cmp	r0, #0
  407c4a:	d1fa      	bne.n	407c42 <usart_serial_putchar+0x3e>
		return 1;
  407c4c:	2001      	movs	r0, #1
  407c4e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  407c50:	4b1c      	ldr	r3, [pc, #112]	; (407cc4 <usart_serial_putchar+0xc0>)
  407c52:	4298      	cmp	r0, r3
  407c54:	d108      	bne.n	407c68 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  407c56:	461e      	mov	r6, r3
  407c58:	4d17      	ldr	r5, [pc, #92]	; (407cb8 <usart_serial_putchar+0xb4>)
  407c5a:	4621      	mov	r1, r4
  407c5c:	4630      	mov	r0, r6
  407c5e:	47a8      	blx	r5
  407c60:	2800      	cmp	r0, #0
  407c62:	d1fa      	bne.n	407c5a <usart_serial_putchar+0x56>
		return 1;
  407c64:	2001      	movs	r0, #1
  407c66:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  407c68:	4b17      	ldr	r3, [pc, #92]	; (407cc8 <usart_serial_putchar+0xc4>)
  407c6a:	4298      	cmp	r0, r3
  407c6c:	d108      	bne.n	407c80 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  407c6e:	461e      	mov	r6, r3
  407c70:	4d16      	ldr	r5, [pc, #88]	; (407ccc <usart_serial_putchar+0xc8>)
  407c72:	4621      	mov	r1, r4
  407c74:	4630      	mov	r0, r6
  407c76:	47a8      	blx	r5
  407c78:	2800      	cmp	r0, #0
  407c7a:	d1fa      	bne.n	407c72 <usart_serial_putchar+0x6e>
		return 1;
  407c7c:	2001      	movs	r0, #1
  407c7e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  407c80:	4b13      	ldr	r3, [pc, #76]	; (407cd0 <usart_serial_putchar+0xcc>)
  407c82:	4298      	cmp	r0, r3
  407c84:	d108      	bne.n	407c98 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  407c86:	461e      	mov	r6, r3
  407c88:	4d10      	ldr	r5, [pc, #64]	; (407ccc <usart_serial_putchar+0xc8>)
  407c8a:	4621      	mov	r1, r4
  407c8c:	4630      	mov	r0, r6
  407c8e:	47a8      	blx	r5
  407c90:	2800      	cmp	r0, #0
  407c92:	d1fa      	bne.n	407c8a <usart_serial_putchar+0x86>
		return 1;
  407c94:	2001      	movs	r0, #1
  407c96:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  407c98:	4b0e      	ldr	r3, [pc, #56]	; (407cd4 <usart_serial_putchar+0xd0>)
  407c9a:	4298      	cmp	r0, r3
  407c9c:	d108      	bne.n	407cb0 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  407c9e:	461e      	mov	r6, r3
  407ca0:	4d0a      	ldr	r5, [pc, #40]	; (407ccc <usart_serial_putchar+0xc8>)
  407ca2:	4621      	mov	r1, r4
  407ca4:	4630      	mov	r0, r6
  407ca6:	47a8      	blx	r5
  407ca8:	2800      	cmp	r0, #0
  407caa:	d1fa      	bne.n	407ca2 <usart_serial_putchar+0x9e>
		return 1;
  407cac:	2001      	movs	r0, #1
  407cae:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  407cb0:	2000      	movs	r0, #0
}
  407cb2:	bd70      	pop	{r4, r5, r6, pc}
  407cb4:	400e0800 	.word	0x400e0800
  407cb8:	00400c9d 	.word	0x00400c9d
  407cbc:	400e0a00 	.word	0x400e0a00
  407cc0:	400e1a00 	.word	0x400e1a00
  407cc4:	400e1c00 	.word	0x400e1c00
  407cc8:	40024000 	.word	0x40024000
  407ccc:	00400db1 	.word	0x00400db1
  407cd0:	40028000 	.word	0x40028000
  407cd4:	4002c000 	.word	0x4002c000

00407cd8 <main>:
/**
 * \brief Main program function. Configure the hardware, initialize lwIP
 * TCP/IP stack, and start HTTP service.
 */
int main(void)
{
  407cd8:	b580      	push	{r7, lr}
  407cda:	b086      	sub	sp, #24
	/* Initialize the SAM system. */
	sysclk_init();
  407cdc:	4b3c      	ldr	r3, [pc, #240]	; (407dd0 <main+0xf8>)
  407cde:	4798      	blx	r3
	board_init();
  407ce0:	4b3c      	ldr	r3, [pc, #240]	; (407dd4 <main+0xfc>)
  407ce2:	4798      	blx	r3
  407ce4:	200e      	movs	r0, #14
  407ce6:	4e3c      	ldr	r6, [pc, #240]	; (407dd8 <main+0x100>)
  407ce8:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  407cea:	4d3c      	ldr	r5, [pc, #240]	; (407ddc <main+0x104>)
  407cec:	4b3c      	ldr	r3, [pc, #240]	; (407de0 <main+0x108>)
  407cee:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  407cf0:	4a3c      	ldr	r2, [pc, #240]	; (407de4 <main+0x10c>)
  407cf2:	4b3d      	ldr	r3, [pc, #244]	; (407de8 <main+0x110>)
  407cf4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  407cf6:	4a3d      	ldr	r2, [pc, #244]	; (407dec <main+0x114>)
  407cf8:	4b3d      	ldr	r3, [pc, #244]	; (407df0 <main+0x118>)
  407cfa:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  407cfc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  407d00:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  407d02:	23c0      	movs	r3, #192	; 0xc0
  407d04:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  407d06:	f44f 6700 	mov.w	r7, #2048	; 0x800
  407d0a:	9702      	str	r7, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  407d0c:	2400      	movs	r4, #0
  407d0e:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  407d10:	9404      	str	r4, [sp, #16]
  407d12:	200e      	movs	r0, #14
  407d14:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  407d16:	4a37      	ldr	r2, [pc, #220]	; (407df4 <main+0x11c>)
  407d18:	4669      	mov	r1, sp
  407d1a:	4628      	mov	r0, r5
  407d1c:	4b36      	ldr	r3, [pc, #216]	; (407df8 <main+0x120>)
  407d1e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  407d20:	4628      	mov	r0, r5
  407d22:	4b36      	ldr	r3, [pc, #216]	; (407dfc <main+0x124>)
  407d24:	4798      	blx	r3
		usart_enable_rx(p_usart);
  407d26:	4628      	mov	r0, r5
  407d28:	4b35      	ldr	r3, [pc, #212]	; (407e00 <main+0x128>)
  407d2a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  407d2c:	4e35      	ldr	r6, [pc, #212]	; (407e04 <main+0x12c>)
  407d2e:	6833      	ldr	r3, [r6, #0]
  407d30:	4621      	mov	r1, r4
  407d32:	6898      	ldr	r0, [r3, #8]
  407d34:	4d34      	ldr	r5, [pc, #208]	; (407e08 <main+0x130>)
  407d36:	47a8      	blx	r5
	setbuf(stdin, NULL);
  407d38:	6833      	ldr	r3, [r6, #0]
  407d3a:	4621      	mov	r1, r4
  407d3c:	6858      	ldr	r0, [r3, #4]
  407d3e:	47a8      	blx	r5

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
#if defined(__GNUC__)
	setbuf(stdout, NULL);
  407d40:	6833      	ldr	r3, [r6, #0]
  407d42:	4621      	mov	r1, r4
  407d44:	6898      	ldr	r0, [r3, #8]
  407d46:	47a8      	blx	r5

	/* Configure debug UART */
	configure_console();

	/* Print example information. */
	puts(STRING_HEADER);
  407d48:	4830      	ldr	r0, [pc, #192]	; (407e0c <main+0x134>)
  407d4a:	4b31      	ldr	r3, [pc, #196]	; (407e10 <main+0x138>)
  407d4c:	4798      	blx	r3

	/* Bring up the ethernet interface & initialize timer0, channel0. */
	init_ethernet();
  407d4e:	4b31      	ldr	r3, [pc, #196]	; (407e14 <main+0x13c>)
  407d50:	4798      	blx	r3
	
	
	
	//Setup Sw0 BtnPress

	pio_set_input(PIOA,PIO_PA11,PIO_PULLUP);	//set sw0 push button as input and enable pullup resistor
  407d52:	2201      	movs	r2, #1
  407d54:	4639      	mov	r1, r7
  407d56:	4830      	ldr	r0, [pc, #192]	; (407e18 <main+0x140>)
  407d58:	4b30      	ldr	r3, [pc, #192]	; (407e1c <main+0x144>)
  407d5a:	4798      	blx	r3
		

	/* Program main loop. */
	while (1) {
		//get inputs
		btn = pio_get(PIOA,PIO_INPUT,PIO_PA11); //
  407d5c:	4f2e      	ldr	r7, [pc, #184]	; (407e18 <main+0x140>)
  407d5e:	4e30      	ldr	r6, [pc, #192]	; (407e20 <main+0x148>)
  407d60:	4d30      	ldr	r5, [pc, #192]	; (407e24 <main+0x14c>)
  407d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
  407d66:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  407d6a:	4638      	mov	r0, r7
  407d6c:	47b0      	blx	r6
  407d6e:	6028      	str	r0, [r5, #0]
		IP_Active=getIP_Active(); //checks with ethernet.c to see if the IP Address has been assigned yet
  407d70:	4b2d      	ldr	r3, [pc, #180]	; (407e28 <main+0x150>)
  407d72:	4798      	blx	r3
  407d74:	4c2d      	ldr	r4, [pc, #180]	; (407e2c <main+0x154>)
  407d76:	6020      	str	r0, [r4, #0]
		ready=ready2Receive();  //checks with httpd.c if the previous TCP connection has been closed and is ready for the next
  407d78:	4b2d      	ldr	r3, [pc, #180]	; (407e30 <main+0x158>)
  407d7a:	4798      	blx	r3
  407d7c:	4b2d      	ldr	r3, [pc, #180]	; (407e34 <main+0x15c>)
  407d7e:	8018      	strh	r0, [r3, #0]
		
		/* Check for input packet and process it. */
		ethernet_task();
  407d80:	4b2d      	ldr	r3, [pc, #180]	; (407e38 <main+0x160>)
  407d82:	4798      	blx	r3
							
		//wait for IP_address to be assigned
		if(IP_Active==1){	
  407d84:	6823      	ldr	r3, [r4, #0]
  407d86:	2b01      	cmp	r3, #1
  407d88:	d10a      	bne.n	407da0 <main+0xc8>

			//when btn is pressed, start the timer and initialize the chain of events to send a packet
			if(btn==0&&ready==1){
  407d8a:	682b      	ldr	r3, [r5, #0]
  407d8c:	2b00      	cmp	r3, #0
  407d8e:	d1e8      	bne.n	407d62 <main+0x8a>
  407d90:	4b28      	ldr	r3, [pc, #160]	; (407e34 <main+0x15c>)
  407d92:	881b      	ldrh	r3, [r3, #0]
  407d94:	b29b      	uxth	r3, r3
  407d96:	2b01      	cmp	r3, #1
  407d98:	d1e3      	bne.n	407d62 <main+0x8a>
				//tc_start(TC0,0);							//Start counting
				httpd_init();		//initialize TCP connection & send packet
  407d9a:	4b28      	ldr	r3, [pc, #160]	; (407e3c <main+0x164>)
  407d9c:	4798      	blx	r3
  407d9e:	e7e0      	b.n	407d62 <main+0x8a>

			}
		}
		else if(btn==0&&ready==1){printf("network is down, but ready to send");}		//for testing 
  407da0:	682b      	ldr	r3, [r5, #0]
  407da2:	b943      	cbnz	r3, 407db6 <main+0xde>
  407da4:	4b23      	ldr	r3, [pc, #140]	; (407e34 <main+0x15c>)
  407da6:	881b      	ldrh	r3, [r3, #0]
  407da8:	b29b      	uxth	r3, r3
  407daa:	2b01      	cmp	r3, #1
  407dac:	d103      	bne.n	407db6 <main+0xde>
  407dae:	4824      	ldr	r0, [pc, #144]	; (407e40 <main+0x168>)
  407db0:	4b24      	ldr	r3, [pc, #144]	; (407e44 <main+0x16c>)
  407db2:	4798      	blx	r3
  407db4:	e7d5      	b.n	407d62 <main+0x8a>
		else if(btn==0&&ready==0){printf("network is down, but not ready to send");}	//for testing
  407db6:	682b      	ldr	r3, [r5, #0]
  407db8:	2b00      	cmp	r3, #0
  407dba:	d1d2      	bne.n	407d62 <main+0x8a>
  407dbc:	4b1d      	ldr	r3, [pc, #116]	; (407e34 <main+0x15c>)
  407dbe:	881b      	ldrh	r3, [r3, #0]
  407dc0:	b29b      	uxth	r3, r3
  407dc2:	2b00      	cmp	r3, #0
  407dc4:	d1cd      	bne.n	407d62 <main+0x8a>
  407dc6:	4820      	ldr	r0, [pc, #128]	; (407e48 <main+0x170>)
  407dc8:	4b1e      	ldr	r3, [pc, #120]	; (407e44 <main+0x16c>)
  407dca:	4798      	blx	r3
  407dcc:	e7c9      	b.n	407d62 <main+0x8a>
  407dce:	bf00      	nop
  407dd0:	0040019d 	.word	0x0040019d
  407dd4:	0040029d 	.word	0x0040029d
  407dd8:	00400ba1 	.word	0x00400ba1
  407ddc:	40028000 	.word	0x40028000
  407de0:	20403830 	.word	0x20403830
  407de4:	00407c05 	.word	0x00407c05
  407de8:	2040382c 	.word	0x2040382c
  407dec:	00407b2d 	.word	0x00407b2d
  407df0:	20403828 	.word	0x20403828
  407df4:	047868c0 	.word	0x047868c0
  407df8:	00400d4d 	.word	0x00400d4d
  407dfc:	00400da1 	.word	0x00400da1
  407e00:	00400da9 	.word	0x00400da9
  407e04:	20400480 	.word	0x20400480
  407e08:	00408171 	.word	0x00408171
  407e0c:	0040eb44 	.word	0x0040eb44
  407e10:	00408161 	.word	0x00408161
  407e14:	004076cd 	.word	0x004076cd
  407e18:	400e0e00 	.word	0x400e0e00
  407e1c:	0040095d 	.word	0x0040095d
  407e20:	004008ad 	.word	0x004008ad
  407e24:	204037f0 	.word	0x204037f0
  407e28:	004076c1 	.word	0x004076c1
  407e2c:	204037ec 	.word	0x204037ec
  407e30:	004078fd 	.word	0x004078fd
  407e34:	20400052 	.word	0x20400052
  407e38:	00407745 	.word	0x00407745
  407e3c:	00407909 	.word	0x00407909
  407e40:	0040ebbc 	.word	0x0040ebbc
  407e44:	00407e9d 	.word	0x00407e9d
  407e48:	0040ebe0 	.word	0x0040ebe0

00407e4c <__libc_init_array>:
  407e4c:	b570      	push	{r4, r5, r6, lr}
  407e4e:	4e0f      	ldr	r6, [pc, #60]	; (407e8c <__libc_init_array+0x40>)
  407e50:	4d0f      	ldr	r5, [pc, #60]	; (407e90 <__libc_init_array+0x44>)
  407e52:	1b76      	subs	r6, r6, r5
  407e54:	10b6      	asrs	r6, r6, #2
  407e56:	bf18      	it	ne
  407e58:	2400      	movne	r4, #0
  407e5a:	d005      	beq.n	407e68 <__libc_init_array+0x1c>
  407e5c:	3401      	adds	r4, #1
  407e5e:	f855 3b04 	ldr.w	r3, [r5], #4
  407e62:	4798      	blx	r3
  407e64:	42a6      	cmp	r6, r4
  407e66:	d1f9      	bne.n	407e5c <__libc_init_array+0x10>
  407e68:	4e0a      	ldr	r6, [pc, #40]	; (407e94 <__libc_init_array+0x48>)
  407e6a:	4d0b      	ldr	r5, [pc, #44]	; (407e98 <__libc_init_array+0x4c>)
  407e6c:	1b76      	subs	r6, r6, r5
  407e6e:	f006 ff9d 	bl	40edac <_init>
  407e72:	10b6      	asrs	r6, r6, #2
  407e74:	bf18      	it	ne
  407e76:	2400      	movne	r4, #0
  407e78:	d006      	beq.n	407e88 <__libc_init_array+0x3c>
  407e7a:	3401      	adds	r4, #1
  407e7c:	f855 3b04 	ldr.w	r3, [r5], #4
  407e80:	4798      	blx	r3
  407e82:	42a6      	cmp	r6, r4
  407e84:	d1f9      	bne.n	407e7a <__libc_init_array+0x2e>
  407e86:	bd70      	pop	{r4, r5, r6, pc}
  407e88:	bd70      	pop	{r4, r5, r6, pc}
  407e8a:	bf00      	nop
  407e8c:	0040edb8 	.word	0x0040edb8
  407e90:	0040edb8 	.word	0x0040edb8
  407e94:	0040edc0 	.word	0x0040edc0
  407e98:	0040edb8 	.word	0x0040edb8

00407e9c <iprintf>:
  407e9c:	b40f      	push	{r0, r1, r2, r3}
  407e9e:	b500      	push	{lr}
  407ea0:	4907      	ldr	r1, [pc, #28]	; (407ec0 <iprintf+0x24>)
  407ea2:	b083      	sub	sp, #12
  407ea4:	ab04      	add	r3, sp, #16
  407ea6:	6808      	ldr	r0, [r1, #0]
  407ea8:	f853 2b04 	ldr.w	r2, [r3], #4
  407eac:	6881      	ldr	r1, [r0, #8]
  407eae:	9301      	str	r3, [sp, #4]
  407eb0:	f001 febe 	bl	409c30 <_vfiprintf_r>
  407eb4:	b003      	add	sp, #12
  407eb6:	f85d eb04 	ldr.w	lr, [sp], #4
  407eba:	b004      	add	sp, #16
  407ebc:	4770      	bx	lr
  407ebe:	bf00      	nop
  407ec0:	20400480 	.word	0x20400480

00407ec4 <memcmp>:
  407ec4:	2a03      	cmp	r2, #3
  407ec6:	b470      	push	{r4, r5, r6}
  407ec8:	d926      	bls.n	407f18 <memcmp+0x54>
  407eca:	ea40 0301 	orr.w	r3, r0, r1
  407ece:	079b      	lsls	r3, r3, #30
  407ed0:	d011      	beq.n	407ef6 <memcmp+0x32>
  407ed2:	7804      	ldrb	r4, [r0, #0]
  407ed4:	780d      	ldrb	r5, [r1, #0]
  407ed6:	42ac      	cmp	r4, r5
  407ed8:	d122      	bne.n	407f20 <memcmp+0x5c>
  407eda:	4402      	add	r2, r0
  407edc:	1c43      	adds	r3, r0, #1
  407ede:	e005      	b.n	407eec <memcmp+0x28>
  407ee0:	f813 4b01 	ldrb.w	r4, [r3], #1
  407ee4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  407ee8:	42ac      	cmp	r4, r5
  407eea:	d119      	bne.n	407f20 <memcmp+0x5c>
  407eec:	4293      	cmp	r3, r2
  407eee:	d1f7      	bne.n	407ee0 <memcmp+0x1c>
  407ef0:	2000      	movs	r0, #0
  407ef2:	bc70      	pop	{r4, r5, r6}
  407ef4:	4770      	bx	lr
  407ef6:	460c      	mov	r4, r1
  407ef8:	4603      	mov	r3, r0
  407efa:	681e      	ldr	r6, [r3, #0]
  407efc:	6825      	ldr	r5, [r4, #0]
  407efe:	42ae      	cmp	r6, r5
  407f00:	4618      	mov	r0, r3
  407f02:	4621      	mov	r1, r4
  407f04:	f103 0304 	add.w	r3, r3, #4
  407f08:	f104 0404 	add.w	r4, r4, #4
  407f0c:	d1e1      	bne.n	407ed2 <memcmp+0xe>
  407f0e:	3a04      	subs	r2, #4
  407f10:	2a03      	cmp	r2, #3
  407f12:	4618      	mov	r0, r3
  407f14:	4621      	mov	r1, r4
  407f16:	d8f0      	bhi.n	407efa <memcmp+0x36>
  407f18:	2a00      	cmp	r2, #0
  407f1a:	d1da      	bne.n	407ed2 <memcmp+0xe>
  407f1c:	4610      	mov	r0, r2
  407f1e:	e7e8      	b.n	407ef2 <memcmp+0x2e>
  407f20:	1b60      	subs	r0, r4, r5
  407f22:	bc70      	pop	{r4, r5, r6}
  407f24:	4770      	bx	lr
  407f26:	bf00      	nop

00407f28 <memcpy>:
  407f28:	4684      	mov	ip, r0
  407f2a:	ea41 0300 	orr.w	r3, r1, r0
  407f2e:	f013 0303 	ands.w	r3, r3, #3
  407f32:	d16d      	bne.n	408010 <memcpy+0xe8>
  407f34:	3a40      	subs	r2, #64	; 0x40
  407f36:	d341      	bcc.n	407fbc <memcpy+0x94>
  407f38:	f851 3b04 	ldr.w	r3, [r1], #4
  407f3c:	f840 3b04 	str.w	r3, [r0], #4
  407f40:	f851 3b04 	ldr.w	r3, [r1], #4
  407f44:	f840 3b04 	str.w	r3, [r0], #4
  407f48:	f851 3b04 	ldr.w	r3, [r1], #4
  407f4c:	f840 3b04 	str.w	r3, [r0], #4
  407f50:	f851 3b04 	ldr.w	r3, [r1], #4
  407f54:	f840 3b04 	str.w	r3, [r0], #4
  407f58:	f851 3b04 	ldr.w	r3, [r1], #4
  407f5c:	f840 3b04 	str.w	r3, [r0], #4
  407f60:	f851 3b04 	ldr.w	r3, [r1], #4
  407f64:	f840 3b04 	str.w	r3, [r0], #4
  407f68:	f851 3b04 	ldr.w	r3, [r1], #4
  407f6c:	f840 3b04 	str.w	r3, [r0], #4
  407f70:	f851 3b04 	ldr.w	r3, [r1], #4
  407f74:	f840 3b04 	str.w	r3, [r0], #4
  407f78:	f851 3b04 	ldr.w	r3, [r1], #4
  407f7c:	f840 3b04 	str.w	r3, [r0], #4
  407f80:	f851 3b04 	ldr.w	r3, [r1], #4
  407f84:	f840 3b04 	str.w	r3, [r0], #4
  407f88:	f851 3b04 	ldr.w	r3, [r1], #4
  407f8c:	f840 3b04 	str.w	r3, [r0], #4
  407f90:	f851 3b04 	ldr.w	r3, [r1], #4
  407f94:	f840 3b04 	str.w	r3, [r0], #4
  407f98:	f851 3b04 	ldr.w	r3, [r1], #4
  407f9c:	f840 3b04 	str.w	r3, [r0], #4
  407fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fa4:	f840 3b04 	str.w	r3, [r0], #4
  407fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fac:	f840 3b04 	str.w	r3, [r0], #4
  407fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fb4:	f840 3b04 	str.w	r3, [r0], #4
  407fb8:	3a40      	subs	r2, #64	; 0x40
  407fba:	d2bd      	bcs.n	407f38 <memcpy+0x10>
  407fbc:	3230      	adds	r2, #48	; 0x30
  407fbe:	d311      	bcc.n	407fe4 <memcpy+0xbc>
  407fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fc4:	f840 3b04 	str.w	r3, [r0], #4
  407fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fcc:	f840 3b04 	str.w	r3, [r0], #4
  407fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fd4:	f840 3b04 	str.w	r3, [r0], #4
  407fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fdc:	f840 3b04 	str.w	r3, [r0], #4
  407fe0:	3a10      	subs	r2, #16
  407fe2:	d2ed      	bcs.n	407fc0 <memcpy+0x98>
  407fe4:	320c      	adds	r2, #12
  407fe6:	d305      	bcc.n	407ff4 <memcpy+0xcc>
  407fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fec:	f840 3b04 	str.w	r3, [r0], #4
  407ff0:	3a04      	subs	r2, #4
  407ff2:	d2f9      	bcs.n	407fe8 <memcpy+0xc0>
  407ff4:	3204      	adds	r2, #4
  407ff6:	d008      	beq.n	40800a <memcpy+0xe2>
  407ff8:	07d2      	lsls	r2, r2, #31
  407ffa:	bf1c      	itt	ne
  407ffc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408000:	f800 3b01 	strbne.w	r3, [r0], #1
  408004:	d301      	bcc.n	40800a <memcpy+0xe2>
  408006:	880b      	ldrh	r3, [r1, #0]
  408008:	8003      	strh	r3, [r0, #0]
  40800a:	4660      	mov	r0, ip
  40800c:	4770      	bx	lr
  40800e:	bf00      	nop
  408010:	2a08      	cmp	r2, #8
  408012:	d313      	bcc.n	40803c <memcpy+0x114>
  408014:	078b      	lsls	r3, r1, #30
  408016:	d08d      	beq.n	407f34 <memcpy+0xc>
  408018:	f010 0303 	ands.w	r3, r0, #3
  40801c:	d08a      	beq.n	407f34 <memcpy+0xc>
  40801e:	f1c3 0304 	rsb	r3, r3, #4
  408022:	1ad2      	subs	r2, r2, r3
  408024:	07db      	lsls	r3, r3, #31
  408026:	bf1c      	itt	ne
  408028:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40802c:	f800 3b01 	strbne.w	r3, [r0], #1
  408030:	d380      	bcc.n	407f34 <memcpy+0xc>
  408032:	f831 3b02 	ldrh.w	r3, [r1], #2
  408036:	f820 3b02 	strh.w	r3, [r0], #2
  40803a:	e77b      	b.n	407f34 <memcpy+0xc>
  40803c:	3a04      	subs	r2, #4
  40803e:	d3d9      	bcc.n	407ff4 <memcpy+0xcc>
  408040:	3a01      	subs	r2, #1
  408042:	f811 3b01 	ldrb.w	r3, [r1], #1
  408046:	f800 3b01 	strb.w	r3, [r0], #1
  40804a:	d2f9      	bcs.n	408040 <memcpy+0x118>
  40804c:	780b      	ldrb	r3, [r1, #0]
  40804e:	7003      	strb	r3, [r0, #0]
  408050:	784b      	ldrb	r3, [r1, #1]
  408052:	7043      	strb	r3, [r0, #1]
  408054:	788b      	ldrb	r3, [r1, #2]
  408056:	7083      	strb	r3, [r0, #2]
  408058:	4660      	mov	r0, ip
  40805a:	4770      	bx	lr

0040805c <memset>:
  40805c:	b470      	push	{r4, r5, r6}
  40805e:	0784      	lsls	r4, r0, #30
  408060:	d046      	beq.n	4080f0 <memset+0x94>
  408062:	1e54      	subs	r4, r2, #1
  408064:	2a00      	cmp	r2, #0
  408066:	d041      	beq.n	4080ec <memset+0x90>
  408068:	b2cd      	uxtb	r5, r1
  40806a:	4603      	mov	r3, r0
  40806c:	e002      	b.n	408074 <memset+0x18>
  40806e:	1e62      	subs	r2, r4, #1
  408070:	b3e4      	cbz	r4, 4080ec <memset+0x90>
  408072:	4614      	mov	r4, r2
  408074:	f803 5b01 	strb.w	r5, [r3], #1
  408078:	079a      	lsls	r2, r3, #30
  40807a:	d1f8      	bne.n	40806e <memset+0x12>
  40807c:	2c03      	cmp	r4, #3
  40807e:	d92e      	bls.n	4080de <memset+0x82>
  408080:	b2cd      	uxtb	r5, r1
  408082:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  408086:	2c0f      	cmp	r4, #15
  408088:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40808c:	d919      	bls.n	4080c2 <memset+0x66>
  40808e:	f103 0210 	add.w	r2, r3, #16
  408092:	4626      	mov	r6, r4
  408094:	3e10      	subs	r6, #16
  408096:	2e0f      	cmp	r6, #15
  408098:	f842 5c10 	str.w	r5, [r2, #-16]
  40809c:	f842 5c0c 	str.w	r5, [r2, #-12]
  4080a0:	f842 5c08 	str.w	r5, [r2, #-8]
  4080a4:	f842 5c04 	str.w	r5, [r2, #-4]
  4080a8:	f102 0210 	add.w	r2, r2, #16
  4080ac:	d8f2      	bhi.n	408094 <memset+0x38>
  4080ae:	f1a4 0210 	sub.w	r2, r4, #16
  4080b2:	f022 020f 	bic.w	r2, r2, #15
  4080b6:	f004 040f 	and.w	r4, r4, #15
  4080ba:	3210      	adds	r2, #16
  4080bc:	2c03      	cmp	r4, #3
  4080be:	4413      	add	r3, r2
  4080c0:	d90d      	bls.n	4080de <memset+0x82>
  4080c2:	461e      	mov	r6, r3
  4080c4:	4622      	mov	r2, r4
  4080c6:	3a04      	subs	r2, #4
  4080c8:	2a03      	cmp	r2, #3
  4080ca:	f846 5b04 	str.w	r5, [r6], #4
  4080ce:	d8fa      	bhi.n	4080c6 <memset+0x6a>
  4080d0:	1f22      	subs	r2, r4, #4
  4080d2:	f022 0203 	bic.w	r2, r2, #3
  4080d6:	3204      	adds	r2, #4
  4080d8:	4413      	add	r3, r2
  4080da:	f004 0403 	and.w	r4, r4, #3
  4080de:	b12c      	cbz	r4, 4080ec <memset+0x90>
  4080e0:	b2c9      	uxtb	r1, r1
  4080e2:	441c      	add	r4, r3
  4080e4:	f803 1b01 	strb.w	r1, [r3], #1
  4080e8:	42a3      	cmp	r3, r4
  4080ea:	d1fb      	bne.n	4080e4 <memset+0x88>
  4080ec:	bc70      	pop	{r4, r5, r6}
  4080ee:	4770      	bx	lr
  4080f0:	4614      	mov	r4, r2
  4080f2:	4603      	mov	r3, r0
  4080f4:	e7c2      	b.n	40807c <memset+0x20>
  4080f6:	bf00      	nop

004080f8 <_puts_r>:
  4080f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4080fa:	4605      	mov	r5, r0
  4080fc:	b089      	sub	sp, #36	; 0x24
  4080fe:	4608      	mov	r0, r1
  408100:	460c      	mov	r4, r1
  408102:	f000 f99d 	bl	408440 <strlen>
  408106:	6bab      	ldr	r3, [r5, #56]	; 0x38
  408108:	4f14      	ldr	r7, [pc, #80]	; (40815c <_puts_r+0x64>)
  40810a:	9404      	str	r4, [sp, #16]
  40810c:	2601      	movs	r6, #1
  40810e:	1c44      	adds	r4, r0, #1
  408110:	a904      	add	r1, sp, #16
  408112:	2202      	movs	r2, #2
  408114:	9403      	str	r4, [sp, #12]
  408116:	9005      	str	r0, [sp, #20]
  408118:	68ac      	ldr	r4, [r5, #8]
  40811a:	9706      	str	r7, [sp, #24]
  40811c:	9607      	str	r6, [sp, #28]
  40811e:	9101      	str	r1, [sp, #4]
  408120:	9202      	str	r2, [sp, #8]
  408122:	b1b3      	cbz	r3, 408152 <_puts_r+0x5a>
  408124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408128:	049a      	lsls	r2, r3, #18
  40812a:	d406      	bmi.n	40813a <_puts_r+0x42>
  40812c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40812e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  408136:	81a3      	strh	r3, [r4, #12]
  408138:	6662      	str	r2, [r4, #100]	; 0x64
  40813a:	4621      	mov	r1, r4
  40813c:	4628      	mov	r0, r5
  40813e:	aa01      	add	r2, sp, #4
  408140:	f003 ffc8 	bl	40c0d4 <__sfvwrite_r>
  408144:	2800      	cmp	r0, #0
  408146:	bf14      	ite	ne
  408148:	f04f 30ff 	movne.w	r0, #4294967295
  40814c:	200a      	moveq	r0, #10
  40814e:	b009      	add	sp, #36	; 0x24
  408150:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408152:	4628      	mov	r0, r5
  408154:	f003 fe0c 	bl	40bd70 <__sinit>
  408158:	e7e4      	b.n	408124 <_puts_r+0x2c>
  40815a:	bf00      	nop
  40815c:	0040eb10 	.word	0x0040eb10

00408160 <puts>:
  408160:	4b02      	ldr	r3, [pc, #8]	; (40816c <puts+0xc>)
  408162:	4601      	mov	r1, r0
  408164:	6818      	ldr	r0, [r3, #0]
  408166:	f7ff bfc7 	b.w	4080f8 <_puts_r>
  40816a:	bf00      	nop
  40816c:	20400480 	.word	0x20400480

00408170 <setbuf>:
  408170:	2900      	cmp	r1, #0
  408172:	bf0c      	ite	eq
  408174:	2202      	moveq	r2, #2
  408176:	2200      	movne	r2, #0
  408178:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40817c:	f000 b800 	b.w	408180 <setvbuf>

00408180 <setvbuf>:
  408180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  408184:	4c51      	ldr	r4, [pc, #324]	; (4082cc <setvbuf+0x14c>)
  408186:	6825      	ldr	r5, [r4, #0]
  408188:	b083      	sub	sp, #12
  40818a:	4604      	mov	r4, r0
  40818c:	460f      	mov	r7, r1
  40818e:	4690      	mov	r8, r2
  408190:	461e      	mov	r6, r3
  408192:	b115      	cbz	r5, 40819a <setvbuf+0x1a>
  408194:	6bab      	ldr	r3, [r5, #56]	; 0x38
  408196:	2b00      	cmp	r3, #0
  408198:	d079      	beq.n	40828e <setvbuf+0x10e>
  40819a:	f1b8 0f02 	cmp.w	r8, #2
  40819e:	d004      	beq.n	4081aa <setvbuf+0x2a>
  4081a0:	f1b8 0f01 	cmp.w	r8, #1
  4081a4:	d87f      	bhi.n	4082a6 <setvbuf+0x126>
  4081a6:	2e00      	cmp	r6, #0
  4081a8:	db7d      	blt.n	4082a6 <setvbuf+0x126>
  4081aa:	4621      	mov	r1, r4
  4081ac:	4628      	mov	r0, r5
  4081ae:	f003 fd4b 	bl	40bc48 <_fflush_r>
  4081b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4081b4:	b141      	cbz	r1, 4081c8 <setvbuf+0x48>
  4081b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4081ba:	4299      	cmp	r1, r3
  4081bc:	d002      	beq.n	4081c4 <setvbuf+0x44>
  4081be:	4628      	mov	r0, r5
  4081c0:	f003 fea0 	bl	40bf04 <_free_r>
  4081c4:	2300      	movs	r3, #0
  4081c6:	6323      	str	r3, [r4, #48]	; 0x30
  4081c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4081cc:	2200      	movs	r2, #0
  4081ce:	61a2      	str	r2, [r4, #24]
  4081d0:	6062      	str	r2, [r4, #4]
  4081d2:	061a      	lsls	r2, r3, #24
  4081d4:	d454      	bmi.n	408280 <setvbuf+0x100>
  4081d6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4081da:	f023 0303 	bic.w	r3, r3, #3
  4081de:	f1b8 0f02 	cmp.w	r8, #2
  4081e2:	81a3      	strh	r3, [r4, #12]
  4081e4:	d039      	beq.n	40825a <setvbuf+0xda>
  4081e6:	ab01      	add	r3, sp, #4
  4081e8:	466a      	mov	r2, sp
  4081ea:	4621      	mov	r1, r4
  4081ec:	4628      	mov	r0, r5
  4081ee:	f004 f92b 	bl	40c448 <__swhatbuf_r>
  4081f2:	89a3      	ldrh	r3, [r4, #12]
  4081f4:	4318      	orrs	r0, r3
  4081f6:	81a0      	strh	r0, [r4, #12]
  4081f8:	b326      	cbz	r6, 408244 <setvbuf+0xc4>
  4081fa:	b327      	cbz	r7, 408246 <setvbuf+0xc6>
  4081fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4081fe:	2b00      	cmp	r3, #0
  408200:	d04d      	beq.n	40829e <setvbuf+0x11e>
  408202:	9b00      	ldr	r3, [sp, #0]
  408204:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  408208:	6027      	str	r7, [r4, #0]
  40820a:	429e      	cmp	r6, r3
  40820c:	bf1c      	itt	ne
  40820e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  408212:	81a0      	strhne	r0, [r4, #12]
  408214:	f1b8 0f01 	cmp.w	r8, #1
  408218:	bf08      	it	eq
  40821a:	f040 0001 	orreq.w	r0, r0, #1
  40821e:	b283      	uxth	r3, r0
  408220:	bf08      	it	eq
  408222:	81a0      	strheq	r0, [r4, #12]
  408224:	f003 0008 	and.w	r0, r3, #8
  408228:	b280      	uxth	r0, r0
  40822a:	6127      	str	r7, [r4, #16]
  40822c:	6166      	str	r6, [r4, #20]
  40822e:	b318      	cbz	r0, 408278 <setvbuf+0xf8>
  408230:	f013 0001 	ands.w	r0, r3, #1
  408234:	d02f      	beq.n	408296 <setvbuf+0x116>
  408236:	2000      	movs	r0, #0
  408238:	4276      	negs	r6, r6
  40823a:	61a6      	str	r6, [r4, #24]
  40823c:	60a0      	str	r0, [r4, #8]
  40823e:	b003      	add	sp, #12
  408240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  408244:	9e00      	ldr	r6, [sp, #0]
  408246:	4630      	mov	r0, r6
  408248:	f004 f972 	bl	40c530 <malloc>
  40824c:	4607      	mov	r7, r0
  40824e:	b368      	cbz	r0, 4082ac <setvbuf+0x12c>
  408250:	89a3      	ldrh	r3, [r4, #12]
  408252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408256:	81a3      	strh	r3, [r4, #12]
  408258:	e7d0      	b.n	4081fc <setvbuf+0x7c>
  40825a:	2000      	movs	r0, #0
  40825c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408260:	f043 0302 	orr.w	r3, r3, #2
  408264:	2500      	movs	r5, #0
  408266:	2101      	movs	r1, #1
  408268:	81a3      	strh	r3, [r4, #12]
  40826a:	60a5      	str	r5, [r4, #8]
  40826c:	6022      	str	r2, [r4, #0]
  40826e:	6122      	str	r2, [r4, #16]
  408270:	6161      	str	r1, [r4, #20]
  408272:	b003      	add	sp, #12
  408274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  408278:	60a0      	str	r0, [r4, #8]
  40827a:	b003      	add	sp, #12
  40827c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  408280:	6921      	ldr	r1, [r4, #16]
  408282:	4628      	mov	r0, r5
  408284:	f003 fe3e 	bl	40bf04 <_free_r>
  408288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40828c:	e7a3      	b.n	4081d6 <setvbuf+0x56>
  40828e:	4628      	mov	r0, r5
  408290:	f003 fd6e 	bl	40bd70 <__sinit>
  408294:	e781      	b.n	40819a <setvbuf+0x1a>
  408296:	60a6      	str	r6, [r4, #8]
  408298:	b003      	add	sp, #12
  40829a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40829e:	4628      	mov	r0, r5
  4082a0:	f003 fd66 	bl	40bd70 <__sinit>
  4082a4:	e7ad      	b.n	408202 <setvbuf+0x82>
  4082a6:	f04f 30ff 	mov.w	r0, #4294967295
  4082aa:	e7e2      	b.n	408272 <setvbuf+0xf2>
  4082ac:	f8dd 9000 	ldr.w	r9, [sp]
  4082b0:	45b1      	cmp	r9, r6
  4082b2:	d006      	beq.n	4082c2 <setvbuf+0x142>
  4082b4:	4648      	mov	r0, r9
  4082b6:	f004 f93b 	bl	40c530 <malloc>
  4082ba:	4607      	mov	r7, r0
  4082bc:	b108      	cbz	r0, 4082c2 <setvbuf+0x142>
  4082be:	464e      	mov	r6, r9
  4082c0:	e7c6      	b.n	408250 <setvbuf+0xd0>
  4082c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4082c6:	f04f 30ff 	mov.w	r0, #4294967295
  4082ca:	e7c7      	b.n	40825c <setvbuf+0xdc>
  4082cc:	20400480 	.word	0x20400480

004082d0 <sprintf>:
  4082d0:	b40e      	push	{r1, r2, r3}
  4082d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4082d4:	b09c      	sub	sp, #112	; 0x70
  4082d6:	ab21      	add	r3, sp, #132	; 0x84
  4082d8:	490f      	ldr	r1, [pc, #60]	; (408318 <sprintf+0x48>)
  4082da:	f853 2b04 	ldr.w	r2, [r3], #4
  4082de:	9301      	str	r3, [sp, #4]
  4082e0:	4605      	mov	r5, r0
  4082e2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4082e6:	6808      	ldr	r0, [r1, #0]
  4082e8:	9502      	str	r5, [sp, #8]
  4082ea:	f44f 7702 	mov.w	r7, #520	; 0x208
  4082ee:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4082f2:	a902      	add	r1, sp, #8
  4082f4:	9506      	str	r5, [sp, #24]
  4082f6:	f8ad 7014 	strh.w	r7, [sp, #20]
  4082fa:	9404      	str	r4, [sp, #16]
  4082fc:	9407      	str	r4, [sp, #28]
  4082fe:	f8ad 6016 	strh.w	r6, [sp, #22]
  408302:	f000 f90b 	bl	40851c <_svfprintf_r>
  408306:	9b02      	ldr	r3, [sp, #8]
  408308:	2200      	movs	r2, #0
  40830a:	701a      	strb	r2, [r3, #0]
  40830c:	b01c      	add	sp, #112	; 0x70
  40830e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  408312:	b003      	add	sp, #12
  408314:	4770      	bx	lr
  408316:	bf00      	nop
  408318:	20400480 	.word	0x20400480

0040831c <strcat>:
  40831c:	0783      	lsls	r3, r0, #30
  40831e:	b510      	push	{r4, lr}
  408320:	4604      	mov	r4, r0
  408322:	d110      	bne.n	408346 <strcat+0x2a>
  408324:	6802      	ldr	r2, [r0, #0]
  408326:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40832a:	ea23 0302 	bic.w	r3, r3, r2
  40832e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  408332:	d108      	bne.n	408346 <strcat+0x2a>
  408334:	f850 2f04 	ldr.w	r2, [r0, #4]!
  408338:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40833c:	ea23 0302 	bic.w	r3, r3, r2
  408340:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  408344:	d0f6      	beq.n	408334 <strcat+0x18>
  408346:	7803      	ldrb	r3, [r0, #0]
  408348:	b11b      	cbz	r3, 408352 <strcat+0x36>
  40834a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40834e:	2b00      	cmp	r3, #0
  408350:	d1fb      	bne.n	40834a <strcat+0x2e>
  408352:	f000 f803 	bl	40835c <strcpy>
  408356:	4620      	mov	r0, r4
  408358:	bd10      	pop	{r4, pc}
  40835a:	bf00      	nop

0040835c <strcpy>:
  40835c:	ea80 0201 	eor.w	r2, r0, r1
  408360:	4684      	mov	ip, r0
  408362:	f012 0f03 	tst.w	r2, #3
  408366:	d14f      	bne.n	408408 <strcpy+0xac>
  408368:	f011 0f03 	tst.w	r1, #3
  40836c:	d132      	bne.n	4083d4 <strcpy+0x78>
  40836e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  408372:	f011 0f04 	tst.w	r1, #4
  408376:	f851 3b04 	ldr.w	r3, [r1], #4
  40837a:	d00b      	beq.n	408394 <strcpy+0x38>
  40837c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  408380:	439a      	bics	r2, r3
  408382:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  408386:	bf04      	itt	eq
  408388:	f84c 3b04 	streq.w	r3, [ip], #4
  40838c:	f851 3b04 	ldreq.w	r3, [r1], #4
  408390:	d116      	bne.n	4083c0 <strcpy+0x64>
  408392:	bf00      	nop
  408394:	f851 4b04 	ldr.w	r4, [r1], #4
  408398:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40839c:	439a      	bics	r2, r3
  40839e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4083a2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4083a6:	d10b      	bne.n	4083c0 <strcpy+0x64>
  4083a8:	f84c 3b04 	str.w	r3, [ip], #4
  4083ac:	43a2      	bics	r2, r4
  4083ae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4083b2:	bf04      	itt	eq
  4083b4:	f851 3b04 	ldreq.w	r3, [r1], #4
  4083b8:	f84c 4b04 	streq.w	r4, [ip], #4
  4083bc:	d0ea      	beq.n	408394 <strcpy+0x38>
  4083be:	4623      	mov	r3, r4
  4083c0:	f80c 3b01 	strb.w	r3, [ip], #1
  4083c4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4083c8:	ea4f 2333 	mov.w	r3, r3, ror #8
  4083cc:	d1f8      	bne.n	4083c0 <strcpy+0x64>
  4083ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  4083d2:	4770      	bx	lr
  4083d4:	f011 0f01 	tst.w	r1, #1
  4083d8:	d006      	beq.n	4083e8 <strcpy+0x8c>
  4083da:	f811 2b01 	ldrb.w	r2, [r1], #1
  4083de:	f80c 2b01 	strb.w	r2, [ip], #1
  4083e2:	2a00      	cmp	r2, #0
  4083e4:	bf08      	it	eq
  4083e6:	4770      	bxeq	lr
  4083e8:	f011 0f02 	tst.w	r1, #2
  4083ec:	d0bf      	beq.n	40836e <strcpy+0x12>
  4083ee:	f831 2b02 	ldrh.w	r2, [r1], #2
  4083f2:	f012 0fff 	tst.w	r2, #255	; 0xff
  4083f6:	bf16      	itet	ne
  4083f8:	f82c 2b02 	strhne.w	r2, [ip], #2
  4083fc:	f88c 2000 	strbeq.w	r2, [ip]
  408400:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  408404:	d1b3      	bne.n	40836e <strcpy+0x12>
  408406:	4770      	bx	lr
  408408:	f811 2b01 	ldrb.w	r2, [r1], #1
  40840c:	f80c 2b01 	strb.w	r2, [ip], #1
  408410:	2a00      	cmp	r2, #0
  408412:	d1f9      	bne.n	408408 <strcpy+0xac>
  408414:	4770      	bx	lr
  408416:	bf00      	nop
	...

00408440 <strlen>:
  408440:	f890 f000 	pld	[r0]
  408444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  408448:	f020 0107 	bic.w	r1, r0, #7
  40844c:	f06f 0c00 	mvn.w	ip, #0
  408450:	f010 0407 	ands.w	r4, r0, #7
  408454:	f891 f020 	pld	[r1, #32]
  408458:	f040 8049 	bne.w	4084ee <strlen+0xae>
  40845c:	f04f 0400 	mov.w	r4, #0
  408460:	f06f 0007 	mvn.w	r0, #7
  408464:	e9d1 2300 	ldrd	r2, r3, [r1]
  408468:	f891 f040 	pld	[r1, #64]	; 0x40
  40846c:	f100 0008 	add.w	r0, r0, #8
  408470:	fa82 f24c 	uadd8	r2, r2, ip
  408474:	faa4 f28c 	sel	r2, r4, ip
  408478:	fa83 f34c 	uadd8	r3, r3, ip
  40847c:	faa2 f38c 	sel	r3, r2, ip
  408480:	bb4b      	cbnz	r3, 4084d6 <strlen+0x96>
  408482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  408486:	fa82 f24c 	uadd8	r2, r2, ip
  40848a:	f100 0008 	add.w	r0, r0, #8
  40848e:	faa4 f28c 	sel	r2, r4, ip
  408492:	fa83 f34c 	uadd8	r3, r3, ip
  408496:	faa2 f38c 	sel	r3, r2, ip
  40849a:	b9e3      	cbnz	r3, 4084d6 <strlen+0x96>
  40849c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4084a0:	fa82 f24c 	uadd8	r2, r2, ip
  4084a4:	f100 0008 	add.w	r0, r0, #8
  4084a8:	faa4 f28c 	sel	r2, r4, ip
  4084ac:	fa83 f34c 	uadd8	r3, r3, ip
  4084b0:	faa2 f38c 	sel	r3, r2, ip
  4084b4:	b97b      	cbnz	r3, 4084d6 <strlen+0x96>
  4084b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4084ba:	f101 0120 	add.w	r1, r1, #32
  4084be:	fa82 f24c 	uadd8	r2, r2, ip
  4084c2:	f100 0008 	add.w	r0, r0, #8
  4084c6:	faa4 f28c 	sel	r2, r4, ip
  4084ca:	fa83 f34c 	uadd8	r3, r3, ip
  4084ce:	faa2 f38c 	sel	r3, r2, ip
  4084d2:	2b00      	cmp	r3, #0
  4084d4:	d0c6      	beq.n	408464 <strlen+0x24>
  4084d6:	2a00      	cmp	r2, #0
  4084d8:	bf04      	itt	eq
  4084da:	3004      	addeq	r0, #4
  4084dc:	461a      	moveq	r2, r3
  4084de:	ba12      	rev	r2, r2
  4084e0:	fab2 f282 	clz	r2, r2
  4084e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4084e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4084ec:	4770      	bx	lr
  4084ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4084f2:	f004 0503 	and.w	r5, r4, #3
  4084f6:	f1c4 0000 	rsb	r0, r4, #0
  4084fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4084fe:	f014 0f04 	tst.w	r4, #4
  408502:	f891 f040 	pld	[r1, #64]	; 0x40
  408506:	fa0c f505 	lsl.w	r5, ip, r5
  40850a:	ea62 0205 	orn	r2, r2, r5
  40850e:	bf1c      	itt	ne
  408510:	ea63 0305 	ornne	r3, r3, r5
  408514:	4662      	movne	r2, ip
  408516:	f04f 0400 	mov.w	r4, #0
  40851a:	e7a9      	b.n	408470 <strlen+0x30>

0040851c <_svfprintf_r>:
  40851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408520:	b0c1      	sub	sp, #260	; 0x104
  408522:	460c      	mov	r4, r1
  408524:	9109      	str	r1, [sp, #36]	; 0x24
  408526:	4615      	mov	r5, r2
  408528:	930e      	str	r3, [sp, #56]	; 0x38
  40852a:	900a      	str	r0, [sp, #40]	; 0x28
  40852c:	f003 ff88 	bl	40c440 <_localeconv_r>
  408530:	6803      	ldr	r3, [r0, #0]
  408532:	9317      	str	r3, [sp, #92]	; 0x5c
  408534:	4618      	mov	r0, r3
  408536:	f7ff ff83 	bl	408440 <strlen>
  40853a:	89a3      	ldrh	r3, [r4, #12]
  40853c:	9016      	str	r0, [sp, #88]	; 0x58
  40853e:	061e      	lsls	r6, r3, #24
  408540:	d503      	bpl.n	40854a <_svfprintf_r+0x2e>
  408542:	6923      	ldr	r3, [r4, #16]
  408544:	2b00      	cmp	r3, #0
  408546:	f001 8119 	beq.w	40977c <_svfprintf_r+0x1260>
  40854a:	2300      	movs	r3, #0
  40854c:	461a      	mov	r2, r3
  40854e:	9312      	str	r3, [sp, #72]	; 0x48
  408550:	9325      	str	r3, [sp, #148]	; 0x94
  408552:	9324      	str	r3, [sp, #144]	; 0x90
  408554:	9319      	str	r3, [sp, #100]	; 0x64
  408556:	930b      	str	r3, [sp, #44]	; 0x2c
  408558:	f8df a464 	ldr.w	sl, [pc, #1124]	; 4089c0 <_svfprintf_r+0x4a4>
  40855c:	9214      	str	r2, [sp, #80]	; 0x50
  40855e:	ab30      	add	r3, sp, #192	; 0xc0
  408560:	9323      	str	r3, [sp, #140]	; 0x8c
  408562:	4699      	mov	r9, r3
  408564:	9215      	str	r2, [sp, #84]	; 0x54
  408566:	46a8      	mov	r8, r5
  408568:	f898 3000 	ldrb.w	r3, [r8]
  40856c:	4644      	mov	r4, r8
  40856e:	b1eb      	cbz	r3, 4085ac <_svfprintf_r+0x90>
  408570:	2b25      	cmp	r3, #37	; 0x25
  408572:	d102      	bne.n	40857a <_svfprintf_r+0x5e>
  408574:	e01a      	b.n	4085ac <_svfprintf_r+0x90>
  408576:	2b25      	cmp	r3, #37	; 0x25
  408578:	d003      	beq.n	408582 <_svfprintf_r+0x66>
  40857a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40857e:	2b00      	cmp	r3, #0
  408580:	d1f9      	bne.n	408576 <_svfprintf_r+0x5a>
  408582:	ebc8 0504 	rsb	r5, r8, r4
  408586:	b18d      	cbz	r5, 4085ac <_svfprintf_r+0x90>
  408588:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40858a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40858c:	f8c9 8000 	str.w	r8, [r9]
  408590:	3301      	adds	r3, #1
  408592:	442a      	add	r2, r5
  408594:	2b07      	cmp	r3, #7
  408596:	f8c9 5004 	str.w	r5, [r9, #4]
  40859a:	9225      	str	r2, [sp, #148]	; 0x94
  40859c:	9324      	str	r3, [sp, #144]	; 0x90
  40859e:	f300 80a6 	bgt.w	4086ee <_svfprintf_r+0x1d2>
  4085a2:	f109 0908 	add.w	r9, r9, #8
  4085a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4085a8:	442b      	add	r3, r5
  4085aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4085ac:	7823      	ldrb	r3, [r4, #0]
  4085ae:	2b00      	cmp	r3, #0
  4085b0:	f000 80a6 	beq.w	408700 <_svfprintf_r+0x1e4>
  4085b4:	2300      	movs	r3, #0
  4085b6:	461a      	mov	r2, r3
  4085b8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4085bc:	4619      	mov	r1, r3
  4085be:	930c      	str	r3, [sp, #48]	; 0x30
  4085c0:	9307      	str	r3, [sp, #28]
  4085c2:	f04f 3bff 	mov.w	fp, #4294967295
  4085c6:	7863      	ldrb	r3, [r4, #1]
  4085c8:	f104 0801 	add.w	r8, r4, #1
  4085cc:	465d      	mov	r5, fp
  4085ce:	f108 0801 	add.w	r8, r8, #1
  4085d2:	f1a3 0020 	sub.w	r0, r3, #32
  4085d6:	2858      	cmp	r0, #88	; 0x58
  4085d8:	f200 8425 	bhi.w	408e26 <_svfprintf_r+0x90a>
  4085dc:	e8df f010 	tbh	[pc, r0, lsl #1]
  4085e0:	04230388 	.word	0x04230388
  4085e4:	03900423 	.word	0x03900423
  4085e8:	04230423 	.word	0x04230423
  4085ec:	04230423 	.word	0x04230423
  4085f0:	04230423 	.word	0x04230423
  4085f4:	03a50397 	.word	0x03a50397
  4085f8:	005d0423 	.word	0x005d0423
  4085fc:	042300e2 	.word	0x042300e2
  408600:	010500fe 	.word	0x010500fe
  408604:	01050105 	.word	0x01050105
  408608:	01050105 	.word	0x01050105
  40860c:	01050105 	.word	0x01050105
  408610:	01050105 	.word	0x01050105
  408614:	04230423 	.word	0x04230423
  408618:	04230423 	.word	0x04230423
  40861c:	04230423 	.word	0x04230423
  408620:	04230423 	.word	0x04230423
  408624:	04230423 	.word	0x04230423
  408628:	02810115 	.word	0x02810115
  40862c:	02810423 	.word	0x02810423
  408630:	04230423 	.word	0x04230423
  408634:	04230423 	.word	0x04230423
  408638:	042302c6 	.word	0x042302c6
  40863c:	02cd0423 	.word	0x02cd0423
  408640:	04230423 	.word	0x04230423
  408644:	04230423 	.word	0x04230423
  408648:	02f70423 	.word	0x02f70423
  40864c:	04230423 	.word	0x04230423
  408650:	04230325 	.word	0x04230325
  408654:	04230423 	.word	0x04230423
  408658:	04230423 	.word	0x04230423
  40865c:	04230423 	.word	0x04230423
  408660:	04230423 	.word	0x04230423
  408664:	03660423 	.word	0x03660423
  408668:	02810379 	.word	0x02810379
  40866c:	02810281 	.word	0x02810281
  408670:	03790381 	.word	0x03790381
  408674:	04230423 	.word	0x04230423
  408678:	042303d1 	.word	0x042303d1
  40867c:	00a303db 	.word	0x00a303db
  408680:	03ee0064 	.word	0x03ee0064
  408684:	03f50423 	.word	0x03f50423
  408688:	03aa0423 	.word	0x03aa0423
  40868c:	04230423 	.word	0x04230423
  408690:	03bc      	.short	0x03bc
  408692:	980c      	ldr	r0, [sp, #48]	; 0x30
  408694:	930e      	str	r3, [sp, #56]	; 0x38
  408696:	4240      	negs	r0, r0
  408698:	900c      	str	r0, [sp, #48]	; 0x30
  40869a:	9b07      	ldr	r3, [sp, #28]
  40869c:	f043 0304 	orr.w	r3, r3, #4
  4086a0:	9307      	str	r3, [sp, #28]
  4086a2:	f898 3000 	ldrb.w	r3, [r8]
  4086a6:	e792      	b.n	4085ce <_svfprintf_r+0xb2>
  4086a8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4086aa:	46ab      	mov	fp, r5
  4086ac:	2100      	movs	r1, #0
  4086ae:	6804      	ldr	r4, [r0, #0]
  4086b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4086b4:	1d07      	adds	r7, r0, #4
  4086b6:	9807      	ldr	r0, [sp, #28]
  4086b8:	2330      	movs	r3, #48	; 0x30
  4086ba:	2278      	movs	r2, #120	; 0x78
  4086bc:	458b      	cmp	fp, r1
  4086be:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4086c2:	f04f 0500 	mov.w	r5, #0
  4086c6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  4086ca:	f040 0302 	orr.w	r3, r0, #2
  4086ce:	f2c0 83c7 	blt.w	408e60 <_svfprintf_r+0x944>
  4086d2:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  4086d6:	f043 0302 	orr.w	r3, r3, #2
  4086da:	9307      	str	r3, [sp, #28]
  4086dc:	ea54 0305 	orrs.w	r3, r4, r5
  4086e0:	970e      	str	r7, [sp, #56]	; 0x38
  4086e2:	f000 8393 	beq.w	408e0c <_svfprintf_r+0x8f0>
  4086e6:	460f      	mov	r7, r1
  4086e8:	9211      	str	r2, [sp, #68]	; 0x44
  4086ea:	48b3      	ldr	r0, [pc, #716]	; (4089b8 <_svfprintf_r+0x49c>)
  4086ec:	e2ce      	b.n	408c8c <_svfprintf_r+0x770>
  4086ee:	aa23      	add	r2, sp, #140	; 0x8c
  4086f0:	9909      	ldr	r1, [sp, #36]	; 0x24
  4086f2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4086f4:	f004 ffe8 	bl	40d6c8 <__ssprint_r>
  4086f8:	b948      	cbnz	r0, 40870e <_svfprintf_r+0x1f2>
  4086fa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4086fe:	e752      	b.n	4085a6 <_svfprintf_r+0x8a>
  408700:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408702:	b123      	cbz	r3, 40870e <_svfprintf_r+0x1f2>
  408704:	980a      	ldr	r0, [sp, #40]	; 0x28
  408706:	9909      	ldr	r1, [sp, #36]	; 0x24
  408708:	aa23      	add	r2, sp, #140	; 0x8c
  40870a:	f004 ffdd 	bl	40d6c8 <__ssprint_r>
  40870e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408710:	899b      	ldrh	r3, [r3, #12]
  408712:	f013 0f40 	tst.w	r3, #64	; 0x40
  408716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408718:	bf18      	it	ne
  40871a:	f04f 33ff 	movne.w	r3, #4294967295
  40871e:	4618      	mov	r0, r3
  408720:	b041      	add	sp, #260	; 0x104
  408722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408726:	9311      	str	r3, [sp, #68]	; 0x44
  408728:	46ab      	mov	fp, r5
  40872a:	2a00      	cmp	r2, #0
  40872c:	f041 8223 	bne.w	409b76 <_svfprintf_r+0x165a>
  408730:	9a07      	ldr	r2, [sp, #28]
  408732:	f012 0320 	ands.w	r3, r2, #32
  408736:	f000 822e 	beq.w	408b96 <_svfprintf_r+0x67a>
  40873a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40873c:	3707      	adds	r7, #7
  40873e:	f027 0307 	bic.w	r3, r7, #7
  408742:	2700      	movs	r7, #0
  408744:	f103 0108 	add.w	r1, r3, #8
  408748:	45bb      	cmp	fp, r7
  40874a:	910e      	str	r1, [sp, #56]	; 0x38
  40874c:	e9d3 4500 	ldrd	r4, r5, [r3]
  408750:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408754:	f2c0 8752 	blt.w	4095fc <_svfprintf_r+0x10e0>
  408758:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40875c:	9307      	str	r3, [sp, #28]
  40875e:	ea54 0305 	orrs.w	r3, r4, r5
  408762:	f000 8375 	beq.w	408e50 <_svfprintf_r+0x934>
  408766:	ae30      	add	r6, sp, #192	; 0xc0
  408768:	08e2      	lsrs	r2, r4, #3
  40876a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40876e:	08e9      	lsrs	r1, r5, #3
  408770:	f004 0307 	and.w	r3, r4, #7
  408774:	460d      	mov	r5, r1
  408776:	4614      	mov	r4, r2
  408778:	3330      	adds	r3, #48	; 0x30
  40877a:	ea54 0205 	orrs.w	r2, r4, r5
  40877e:	f806 3d01 	strb.w	r3, [r6, #-1]!
  408782:	d1f1      	bne.n	408768 <_svfprintf_r+0x24c>
  408784:	9a07      	ldr	r2, [sp, #28]
  408786:	07d1      	lsls	r1, r2, #31
  408788:	f140 8084 	bpl.w	408894 <_svfprintf_r+0x378>
  40878c:	2b30      	cmp	r3, #48	; 0x30
  40878e:	f000 8081 	beq.w	408894 <_svfprintf_r+0x378>
  408792:	2230      	movs	r2, #48	; 0x30
  408794:	1e73      	subs	r3, r6, #1
  408796:	f806 2c01 	strb.w	r2, [r6, #-1]
  40879a:	aa30      	add	r2, sp, #192	; 0xc0
  40879c:	1ad2      	subs	r2, r2, r3
  40879e:	920d      	str	r2, [sp, #52]	; 0x34
  4087a0:	461e      	mov	r6, r3
  4087a2:	e07a      	b.n	40889a <_svfprintf_r+0x37e>
  4087a4:	f898 3000 	ldrb.w	r3, [r8]
  4087a8:	2b2a      	cmp	r3, #42	; 0x2a
  4087aa:	f108 0401 	add.w	r4, r8, #1
  4087ae:	f001 81b1 	beq.w	409b14 <_svfprintf_r+0x15f8>
  4087b2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4087b6:	2809      	cmp	r0, #9
  4087b8:	bf98      	it	ls
  4087ba:	2500      	movls	r5, #0
  4087bc:	f201 8164 	bhi.w	409a88 <_svfprintf_r+0x156c>
  4087c0:	f814 3b01 	ldrb.w	r3, [r4], #1
  4087c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4087c8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  4087cc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4087d0:	2809      	cmp	r0, #9
  4087d2:	d9f5      	bls.n	4087c0 <_svfprintf_r+0x2a4>
  4087d4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  4087d8:	46a0      	mov	r8, r4
  4087da:	e6fa      	b.n	4085d2 <_svfprintf_r+0xb6>
  4087dc:	9b07      	ldr	r3, [sp, #28]
  4087de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4087e2:	9307      	str	r3, [sp, #28]
  4087e4:	f898 3000 	ldrb.w	r3, [r8]
  4087e8:	e6f1      	b.n	4085ce <_svfprintf_r+0xb2>
  4087ea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4087ee:	2300      	movs	r3, #0
  4087f0:	461c      	mov	r4, r3
  4087f2:	f818 3b01 	ldrb.w	r3, [r8], #1
  4087f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4087fa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4087fe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408802:	2809      	cmp	r0, #9
  408804:	d9f5      	bls.n	4087f2 <_svfprintf_r+0x2d6>
  408806:	940c      	str	r4, [sp, #48]	; 0x30
  408808:	e6e3      	b.n	4085d2 <_svfprintf_r+0xb6>
  40880a:	9311      	str	r3, [sp, #68]	; 0x44
  40880c:	46ab      	mov	fp, r5
  40880e:	2a00      	cmp	r2, #0
  408810:	f041 81c9 	bne.w	409ba6 <_svfprintf_r+0x168a>
  408814:	9b07      	ldr	r3, [sp, #28]
  408816:	f043 0310 	orr.w	r3, r3, #16
  40881a:	9307      	str	r3, [sp, #28]
  40881c:	9b07      	ldr	r3, [sp, #28]
  40881e:	0698      	lsls	r0, r3, #26
  408820:	f140 8530 	bpl.w	409284 <_svfprintf_r+0xd68>
  408824:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408826:	3707      	adds	r7, #7
  408828:	f027 0707 	bic.w	r7, r7, #7
  40882c:	e9d7 2300 	ldrd	r2, r3, [r7]
  408830:	f107 0108 	add.w	r1, r7, #8
  408834:	910e      	str	r1, [sp, #56]	; 0x38
  408836:	4614      	mov	r4, r2
  408838:	461d      	mov	r5, r3
  40883a:	2a00      	cmp	r2, #0
  40883c:	f173 0300 	sbcs.w	r3, r3, #0
  408840:	f2c0 855b 	blt.w	4092fa <_svfprintf_r+0xdde>
  408844:	f1bb 0f00 	cmp.w	fp, #0
  408848:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40884c:	f2c0 8538 	blt.w	4092c0 <_svfprintf_r+0xda4>
  408850:	9b07      	ldr	r3, [sp, #28]
  408852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408856:	9307      	str	r3, [sp, #28]
  408858:	ea54 0305 	orrs.w	r3, r4, r5
  40885c:	f000 81db 	beq.w	408c16 <_svfprintf_r+0x6fa>
  408860:	2d00      	cmp	r5, #0
  408862:	bf08      	it	eq
  408864:	2c0a      	cmpeq	r4, #10
  408866:	f0c0 81db 	bcc.w	408c20 <_svfprintf_r+0x704>
  40886a:	ae30      	add	r6, sp, #192	; 0xc0
  40886c:	4620      	mov	r0, r4
  40886e:	4629      	mov	r1, r5
  408870:	220a      	movs	r2, #10
  408872:	2300      	movs	r3, #0
  408874:	f005 fe04 	bl	40e480 <__aeabi_uldivmod>
  408878:	3230      	adds	r2, #48	; 0x30
  40887a:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40887e:	4620      	mov	r0, r4
  408880:	4629      	mov	r1, r5
  408882:	2300      	movs	r3, #0
  408884:	220a      	movs	r2, #10
  408886:	f005 fdfb 	bl	40e480 <__aeabi_uldivmod>
  40888a:	4604      	mov	r4, r0
  40888c:	460d      	mov	r5, r1
  40888e:	ea54 0305 	orrs.w	r3, r4, r5
  408892:	d1eb      	bne.n	40886c <_svfprintf_r+0x350>
  408894:	ab30      	add	r3, sp, #192	; 0xc0
  408896:	1b9b      	subs	r3, r3, r6
  408898:	930d      	str	r3, [sp, #52]	; 0x34
  40889a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40889c:	455b      	cmp	r3, fp
  40889e:	bfb8      	it	lt
  4088a0:	465b      	movlt	r3, fp
  4088a2:	9308      	str	r3, [sp, #32]
  4088a4:	2300      	movs	r3, #0
  4088a6:	9313      	str	r3, [sp, #76]	; 0x4c
  4088a8:	b117      	cbz	r7, 4088b0 <_svfprintf_r+0x394>
  4088aa:	9b08      	ldr	r3, [sp, #32]
  4088ac:	3301      	adds	r3, #1
  4088ae:	9308      	str	r3, [sp, #32]
  4088b0:	9b07      	ldr	r3, [sp, #28]
  4088b2:	f013 0302 	ands.w	r3, r3, #2
  4088b6:	930f      	str	r3, [sp, #60]	; 0x3c
  4088b8:	d002      	beq.n	4088c0 <_svfprintf_r+0x3a4>
  4088ba:	9b08      	ldr	r3, [sp, #32]
  4088bc:	3302      	adds	r3, #2
  4088be:	9308      	str	r3, [sp, #32]
  4088c0:	9b07      	ldr	r3, [sp, #28]
  4088c2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4088c6:	9310      	str	r3, [sp, #64]	; 0x40
  4088c8:	f040 82d7 	bne.w	408e7a <_svfprintf_r+0x95e>
  4088cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4088ce:	9a08      	ldr	r2, [sp, #32]
  4088d0:	1a9d      	subs	r5, r3, r2
  4088d2:	2d00      	cmp	r5, #0
  4088d4:	f340 82d1 	ble.w	408e7a <_svfprintf_r+0x95e>
  4088d8:	2d10      	cmp	r5, #16
  4088da:	9925      	ldr	r1, [sp, #148]	; 0x94
  4088dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4088de:	4f37      	ldr	r7, [pc, #220]	; (4089bc <_svfprintf_r+0x4a0>)
  4088e0:	dd27      	ble.n	408932 <_svfprintf_r+0x416>
  4088e2:	9618      	str	r6, [sp, #96]	; 0x60
  4088e4:	4648      	mov	r0, r9
  4088e6:	2410      	movs	r4, #16
  4088e8:	46b9      	mov	r9, r7
  4088ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4088ec:	462f      	mov	r7, r5
  4088ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4088f0:	e004      	b.n	4088fc <_svfprintf_r+0x3e0>
  4088f2:	3f10      	subs	r7, #16
  4088f4:	2f10      	cmp	r7, #16
  4088f6:	f100 0008 	add.w	r0, r0, #8
  4088fa:	dd16      	ble.n	40892a <_svfprintf_r+0x40e>
  4088fc:	3201      	adds	r2, #1
  4088fe:	4b2f      	ldr	r3, [pc, #188]	; (4089bc <_svfprintf_r+0x4a0>)
  408900:	9224      	str	r2, [sp, #144]	; 0x90
  408902:	3110      	adds	r1, #16
  408904:	2a07      	cmp	r2, #7
  408906:	9125      	str	r1, [sp, #148]	; 0x94
  408908:	e880 0018 	stmia.w	r0, {r3, r4}
  40890c:	ddf1      	ble.n	4088f2 <_svfprintf_r+0x3d6>
  40890e:	aa23      	add	r2, sp, #140	; 0x8c
  408910:	4631      	mov	r1, r6
  408912:	4628      	mov	r0, r5
  408914:	f004 fed8 	bl	40d6c8 <__ssprint_r>
  408918:	2800      	cmp	r0, #0
  40891a:	f47f aef8 	bne.w	40870e <_svfprintf_r+0x1f2>
  40891e:	3f10      	subs	r7, #16
  408920:	2f10      	cmp	r7, #16
  408922:	9925      	ldr	r1, [sp, #148]	; 0x94
  408924:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408926:	a830      	add	r0, sp, #192	; 0xc0
  408928:	dce8      	bgt.n	4088fc <_svfprintf_r+0x3e0>
  40892a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40892c:	463d      	mov	r5, r7
  40892e:	464f      	mov	r7, r9
  408930:	4681      	mov	r9, r0
  408932:	3201      	adds	r2, #1
  408934:	186c      	adds	r4, r5, r1
  408936:	2a07      	cmp	r2, #7
  408938:	9425      	str	r4, [sp, #148]	; 0x94
  40893a:	9224      	str	r2, [sp, #144]	; 0x90
  40893c:	f8c9 7000 	str.w	r7, [r9]
  408940:	f8c9 5004 	str.w	r5, [r9, #4]
  408944:	f300 8428 	bgt.w	409198 <_svfprintf_r+0xc7c>
  408948:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40894c:	f109 0908 	add.w	r9, r9, #8
  408950:	b177      	cbz	r7, 408970 <_svfprintf_r+0x454>
  408952:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408954:	3301      	adds	r3, #1
  408956:	3401      	adds	r4, #1
  408958:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40895c:	2201      	movs	r2, #1
  40895e:	2b07      	cmp	r3, #7
  408960:	9425      	str	r4, [sp, #148]	; 0x94
  408962:	9324      	str	r3, [sp, #144]	; 0x90
  408964:	e889 0006 	stmia.w	r9, {r1, r2}
  408968:	f300 83a0 	bgt.w	4090ac <_svfprintf_r+0xb90>
  40896c:	f109 0908 	add.w	r9, r9, #8
  408970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408972:	b16b      	cbz	r3, 408990 <_svfprintf_r+0x474>
  408974:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408976:	3301      	adds	r3, #1
  408978:	3402      	adds	r4, #2
  40897a:	a91c      	add	r1, sp, #112	; 0x70
  40897c:	2202      	movs	r2, #2
  40897e:	2b07      	cmp	r3, #7
  408980:	9425      	str	r4, [sp, #148]	; 0x94
  408982:	9324      	str	r3, [sp, #144]	; 0x90
  408984:	e889 0006 	stmia.w	r9, {r1, r2}
  408988:	f300 839c 	bgt.w	4090c4 <_svfprintf_r+0xba8>
  40898c:	f109 0908 	add.w	r9, r9, #8
  408990:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408992:	2b80      	cmp	r3, #128	; 0x80
  408994:	f000 82d5 	beq.w	408f42 <_svfprintf_r+0xa26>
  408998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40899a:	ebc3 070b 	rsb	r7, r3, fp
  40899e:	2f00      	cmp	r7, #0
  4089a0:	dd39      	ble.n	408a16 <_svfprintf_r+0x4fa>
  4089a2:	4a07      	ldr	r2, [pc, #28]	; (4089c0 <_svfprintf_r+0x4a4>)
  4089a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4089a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4089a8:	2f10      	cmp	r7, #16
  4089aa:	dd28      	ble.n	4089fe <_svfprintf_r+0x4e2>
  4089ac:	4622      	mov	r2, r4
  4089ae:	f04f 0b10 	mov.w	fp, #16
  4089b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4089b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4089b6:	e00a      	b.n	4089ce <_svfprintf_r+0x4b2>
  4089b8:	0040ec44 	.word	0x0040ec44
  4089bc:	0040ec64 	.word	0x0040ec64
  4089c0:	0040ec10 	.word	0x0040ec10
  4089c4:	3f10      	subs	r7, #16
  4089c6:	2f10      	cmp	r7, #16
  4089c8:	f109 0908 	add.w	r9, r9, #8
  4089cc:	dd16      	ble.n	4089fc <_svfprintf_r+0x4e0>
  4089ce:	3301      	adds	r3, #1
  4089d0:	3210      	adds	r2, #16
  4089d2:	2b07      	cmp	r3, #7
  4089d4:	9225      	str	r2, [sp, #148]	; 0x94
  4089d6:	9324      	str	r3, [sp, #144]	; 0x90
  4089d8:	e889 0c00 	stmia.w	r9, {sl, fp}
  4089dc:	ddf2      	ble.n	4089c4 <_svfprintf_r+0x4a8>
  4089de:	aa23      	add	r2, sp, #140	; 0x8c
  4089e0:	4621      	mov	r1, r4
  4089e2:	4628      	mov	r0, r5
  4089e4:	f004 fe70 	bl	40d6c8 <__ssprint_r>
  4089e8:	2800      	cmp	r0, #0
  4089ea:	f47f ae90 	bne.w	40870e <_svfprintf_r+0x1f2>
  4089ee:	3f10      	subs	r7, #16
  4089f0:	2f10      	cmp	r7, #16
  4089f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4089f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4089f6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4089fa:	dce8      	bgt.n	4089ce <_svfprintf_r+0x4b2>
  4089fc:	4614      	mov	r4, r2
  4089fe:	3301      	adds	r3, #1
  408a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408a02:	9324      	str	r3, [sp, #144]	; 0x90
  408a04:	443c      	add	r4, r7
  408a06:	2b07      	cmp	r3, #7
  408a08:	9425      	str	r4, [sp, #148]	; 0x94
  408a0a:	e889 0084 	stmia.w	r9, {r2, r7}
  408a0e:	f300 8341 	bgt.w	409094 <_svfprintf_r+0xb78>
  408a12:	f109 0908 	add.w	r9, r9, #8
  408a16:	9b07      	ldr	r3, [sp, #28]
  408a18:	05da      	lsls	r2, r3, #23
  408a1a:	f100 8230 	bmi.w	408e7e <_svfprintf_r+0x962>
  408a1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a20:	990d      	ldr	r1, [sp, #52]	; 0x34
  408a22:	f8c9 6000 	str.w	r6, [r9]
  408a26:	3301      	adds	r3, #1
  408a28:	440c      	add	r4, r1
  408a2a:	2b07      	cmp	r3, #7
  408a2c:	9425      	str	r4, [sp, #148]	; 0x94
  408a2e:	f8c9 1004 	str.w	r1, [r9, #4]
  408a32:	9324      	str	r3, [sp, #144]	; 0x90
  408a34:	f300 8318 	bgt.w	409068 <_svfprintf_r+0xb4c>
  408a38:	f109 0908 	add.w	r9, r9, #8
  408a3c:	9b07      	ldr	r3, [sp, #28]
  408a3e:	0759      	lsls	r1, r3, #29
  408a40:	d53f      	bpl.n	408ac2 <_svfprintf_r+0x5a6>
  408a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408a44:	9a08      	ldr	r2, [sp, #32]
  408a46:	1a9d      	subs	r5, r3, r2
  408a48:	2d00      	cmp	r5, #0
  408a4a:	dd3a      	ble.n	408ac2 <_svfprintf_r+0x5a6>
  408a4c:	2d10      	cmp	r5, #16
  408a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a50:	4fbc      	ldr	r7, [pc, #752]	; (408d44 <_svfprintf_r+0x828>)
  408a52:	dd23      	ble.n	408a9c <_svfprintf_r+0x580>
  408a54:	4622      	mov	r2, r4
  408a56:	2610      	movs	r6, #16
  408a58:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408a5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408a5e:	e004      	b.n	408a6a <_svfprintf_r+0x54e>
  408a60:	3d10      	subs	r5, #16
  408a62:	2d10      	cmp	r5, #16
  408a64:	f109 0908 	add.w	r9, r9, #8
  408a68:	dd17      	ble.n	408a9a <_svfprintf_r+0x57e>
  408a6a:	3301      	adds	r3, #1
  408a6c:	49b5      	ldr	r1, [pc, #724]	; (408d44 <_svfprintf_r+0x828>)
  408a6e:	9324      	str	r3, [sp, #144]	; 0x90
  408a70:	3210      	adds	r2, #16
  408a72:	2b07      	cmp	r3, #7
  408a74:	9225      	str	r2, [sp, #148]	; 0x94
  408a76:	e889 0042 	stmia.w	r9, {r1, r6}
  408a7a:	ddf1      	ble.n	408a60 <_svfprintf_r+0x544>
  408a7c:	aa23      	add	r2, sp, #140	; 0x8c
  408a7e:	4621      	mov	r1, r4
  408a80:	4658      	mov	r0, fp
  408a82:	f004 fe21 	bl	40d6c8 <__ssprint_r>
  408a86:	2800      	cmp	r0, #0
  408a88:	f47f ae41 	bne.w	40870e <_svfprintf_r+0x1f2>
  408a8c:	3d10      	subs	r5, #16
  408a8e:	2d10      	cmp	r5, #16
  408a90:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408a92:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a94:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408a98:	dce7      	bgt.n	408a6a <_svfprintf_r+0x54e>
  408a9a:	4614      	mov	r4, r2
  408a9c:	3301      	adds	r3, #1
  408a9e:	442c      	add	r4, r5
  408aa0:	2b07      	cmp	r3, #7
  408aa2:	9425      	str	r4, [sp, #148]	; 0x94
  408aa4:	9324      	str	r3, [sp, #144]	; 0x90
  408aa6:	f8c9 7000 	str.w	r7, [r9]
  408aaa:	f8c9 5004 	str.w	r5, [r9, #4]
  408aae:	dd08      	ble.n	408ac2 <_svfprintf_r+0x5a6>
  408ab0:	aa23      	add	r2, sp, #140	; 0x8c
  408ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
  408ab4:	980a      	ldr	r0, [sp, #40]	; 0x28
  408ab6:	f004 fe07 	bl	40d6c8 <__ssprint_r>
  408aba:	2800      	cmp	r0, #0
  408abc:	f47f ae27 	bne.w	40870e <_svfprintf_r+0x1f2>
  408ac0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408ac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408ac6:	9908      	ldr	r1, [sp, #32]
  408ac8:	428a      	cmp	r2, r1
  408aca:	bfac      	ite	ge
  408acc:	189b      	addge	r3, r3, r2
  408ace:	185b      	addlt	r3, r3, r1
  408ad0:	930b      	str	r3, [sp, #44]	; 0x2c
  408ad2:	2c00      	cmp	r4, #0
  408ad4:	f040 82d4 	bne.w	409080 <_svfprintf_r+0xb64>
  408ad8:	2300      	movs	r3, #0
  408ada:	9324      	str	r3, [sp, #144]	; 0x90
  408adc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408ae0:	e542      	b.n	408568 <_svfprintf_r+0x4c>
  408ae2:	9311      	str	r3, [sp, #68]	; 0x44
  408ae4:	46ab      	mov	fp, r5
  408ae6:	2a00      	cmp	r2, #0
  408ae8:	f041 8059 	bne.w	409b9e <_svfprintf_r+0x1682>
  408aec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408aee:	3707      	adds	r7, #7
  408af0:	f027 0307 	bic.w	r3, r7, #7
  408af4:	f103 0208 	add.w	r2, r3, #8
  408af8:	920e      	str	r2, [sp, #56]	; 0x38
  408afa:	681a      	ldr	r2, [r3, #0]
  408afc:	9214      	str	r2, [sp, #80]	; 0x50
  408afe:	685b      	ldr	r3, [r3, #4]
  408b00:	9315      	str	r3, [sp, #84]	; 0x54
  408b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408b04:	9d14      	ldr	r5, [sp, #80]	; 0x50
  408b06:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  408b0a:	4628      	mov	r0, r5
  408b0c:	4621      	mov	r1, r4
  408b0e:	f04f 32ff 	mov.w	r2, #4294967295
  408b12:	4b8d      	ldr	r3, [pc, #564]	; (408d48 <_svfprintf_r+0x82c>)
  408b14:	f005 fc76 	bl	40e404 <__aeabi_dcmpun>
  408b18:	2800      	cmp	r0, #0
  408b1a:	f040 84c1 	bne.w	4094a0 <_svfprintf_r+0xf84>
  408b1e:	4628      	mov	r0, r5
  408b20:	4621      	mov	r1, r4
  408b22:	f04f 32ff 	mov.w	r2, #4294967295
  408b26:	4b88      	ldr	r3, [pc, #544]	; (408d48 <_svfprintf_r+0x82c>)
  408b28:	f005 fc4e 	bl	40e3c8 <__aeabi_dcmple>
  408b2c:	2800      	cmp	r0, #0
  408b2e:	f040 84b7 	bne.w	4094a0 <_svfprintf_r+0xf84>
  408b32:	9814      	ldr	r0, [sp, #80]	; 0x50
  408b34:	9915      	ldr	r1, [sp, #84]	; 0x54
  408b36:	2200      	movs	r2, #0
  408b38:	2300      	movs	r3, #0
  408b3a:	f005 fc3b 	bl	40e3b4 <__aeabi_dcmplt>
  408b3e:	2800      	cmp	r0, #0
  408b40:	f040 874b 	bne.w	4099da <_svfprintf_r+0x14be>
  408b44:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408b48:	4e80      	ldr	r6, [pc, #512]	; (408d4c <_svfprintf_r+0x830>)
  408b4a:	4b81      	ldr	r3, [pc, #516]	; (408d50 <_svfprintf_r+0x834>)
  408b4c:	9907      	ldr	r1, [sp, #28]
  408b4e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  408b52:	9107      	str	r1, [sp, #28]
  408b54:	9911      	ldr	r1, [sp, #68]	; 0x44
  408b56:	2203      	movs	r2, #3
  408b58:	f04f 0b00 	mov.w	fp, #0
  408b5c:	9208      	str	r2, [sp, #32]
  408b5e:	2947      	cmp	r1, #71	; 0x47
  408b60:	bfd8      	it	le
  408b62:	461e      	movle	r6, r3
  408b64:	920d      	str	r2, [sp, #52]	; 0x34
  408b66:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  408b6a:	e69d      	b.n	4088a8 <_svfprintf_r+0x38c>
  408b6c:	9b07      	ldr	r3, [sp, #28]
  408b6e:	f043 0308 	orr.w	r3, r3, #8
  408b72:	9307      	str	r3, [sp, #28]
  408b74:	f898 3000 	ldrb.w	r3, [r8]
  408b78:	e529      	b.n	4085ce <_svfprintf_r+0xb2>
  408b7a:	9311      	str	r3, [sp, #68]	; 0x44
  408b7c:	46ab      	mov	fp, r5
  408b7e:	2a00      	cmp	r2, #0
  408b80:	f041 8009 	bne.w	409b96 <_svfprintf_r+0x167a>
  408b84:	9b07      	ldr	r3, [sp, #28]
  408b86:	f043 0310 	orr.w	r3, r3, #16
  408b8a:	9307      	str	r3, [sp, #28]
  408b8c:	9a07      	ldr	r2, [sp, #28]
  408b8e:	f012 0320 	ands.w	r3, r2, #32
  408b92:	f47f add2 	bne.w	40873a <_svfprintf_r+0x21e>
  408b96:	9907      	ldr	r1, [sp, #28]
  408b98:	f011 0210 	ands.w	r2, r1, #16
  408b9c:	f000 8507 	beq.w	4095ae <_svfprintf_r+0x1092>
  408ba0:	980e      	ldr	r0, [sp, #56]	; 0x38
  408ba2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408ba6:	f1bb 0f00 	cmp.w	fp, #0
  408baa:	6804      	ldr	r4, [r0, #0]
  408bac:	f100 0704 	add.w	r7, r0, #4
  408bb0:	f04f 0500 	mov.w	r5, #0
  408bb4:	f2c0 8521 	blt.w	4095fa <_svfprintf_r+0x10de>
  408bb8:	460a      	mov	r2, r1
  408bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  408bbe:	9207      	str	r2, [sp, #28]
  408bc0:	ea54 0205 	orrs.w	r2, r4, r5
  408bc4:	970e      	str	r7, [sp, #56]	; 0x38
  408bc6:	f000 8143 	beq.w	408e50 <_svfprintf_r+0x934>
  408bca:	461f      	mov	r7, r3
  408bcc:	e5cb      	b.n	408766 <_svfprintf_r+0x24a>
  408bce:	9311      	str	r3, [sp, #68]	; 0x44
  408bd0:	46ab      	mov	fp, r5
  408bd2:	2a00      	cmp	r2, #0
  408bd4:	f040 87d7 	bne.w	409b86 <_svfprintf_r+0x166a>
  408bd8:	9b07      	ldr	r3, [sp, #28]
  408bda:	f043 0310 	orr.w	r3, r3, #16
  408bde:	9307      	str	r3, [sp, #28]
  408be0:	9a07      	ldr	r2, [sp, #28]
  408be2:	f012 0320 	ands.w	r3, r2, #32
  408be6:	f000 8332 	beq.w	40924e <_svfprintf_r+0xd32>
  408bea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408bec:	3707      	adds	r7, #7
  408bee:	f027 0307 	bic.w	r3, r7, #7
  408bf2:	2700      	movs	r7, #0
  408bf4:	f103 0108 	add.w	r1, r3, #8
  408bf8:	45bb      	cmp	fp, r7
  408bfa:	910e      	str	r1, [sp, #56]	; 0x38
  408bfc:	e9d3 4500 	ldrd	r4, r5, [r3]
  408c00:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408c04:	f2c0 835c 	blt.w	4092c0 <_svfprintf_r+0xda4>
  408c08:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  408c0c:	9307      	str	r3, [sp, #28]
  408c0e:	ea54 0305 	orrs.w	r3, r4, r5
  408c12:	f47f ae25 	bne.w	408860 <_svfprintf_r+0x344>
  408c16:	f1bb 0f00 	cmp.w	fp, #0
  408c1a:	f000 80fe 	beq.w	408e1a <_svfprintf_r+0x8fe>
  408c1e:	2400      	movs	r4, #0
  408c20:	ae40      	add	r6, sp, #256	; 0x100
  408c22:	3430      	adds	r4, #48	; 0x30
  408c24:	f806 4d41 	strb.w	r4, [r6, #-65]!
  408c28:	e634      	b.n	408894 <_svfprintf_r+0x378>
  408c2a:	9311      	str	r3, [sp, #68]	; 0x44
  408c2c:	46ab      	mov	fp, r5
  408c2e:	2a00      	cmp	r2, #0
  408c30:	f040 87a5 	bne.w	409b7e <_svfprintf_r+0x1662>
  408c34:	9b07      	ldr	r3, [sp, #28]
  408c36:	4847      	ldr	r0, [pc, #284]	; (408d54 <_svfprintf_r+0x838>)
  408c38:	069d      	lsls	r5, r3, #26
  408c3a:	f140 8097 	bpl.w	408d6c <_svfprintf_r+0x850>
  408c3e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408c40:	3707      	adds	r7, #7
  408c42:	f027 0307 	bic.w	r3, r7, #7
  408c46:	e9d3 4500 	ldrd	r4, r5, [r3]
  408c4a:	f103 0208 	add.w	r2, r3, #8
  408c4e:	920e      	str	r2, [sp, #56]	; 0x38
  408c50:	9a07      	ldr	r2, [sp, #28]
  408c52:	f012 0701 	ands.w	r7, r2, #1
  408c56:	f000 8241 	beq.w	4090dc <_svfprintf_r+0xbc0>
  408c5a:	ea54 0305 	orrs.w	r3, r4, r5
  408c5e:	f000 84f5 	beq.w	40964c <_svfprintf_r+0x1130>
  408c62:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  408c66:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  408c6a:	2700      	movs	r7, #0
  408c6c:	9a07      	ldr	r2, [sp, #28]
  408c6e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408c72:	2330      	movs	r3, #48	; 0x30
  408c74:	45bb      	cmp	fp, r7
  408c76:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  408c7a:	f042 0302 	orr.w	r3, r2, #2
  408c7e:	f2c0 86a9 	blt.w	4099d4 <_svfprintf_r+0x14b8>
  408c82:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  408c86:	f043 0302 	orr.w	r3, r3, #2
  408c8a:	9307      	str	r3, [sp, #28]
  408c8c:	ae30      	add	r6, sp, #192	; 0xc0
  408c8e:	0923      	lsrs	r3, r4, #4
  408c90:	f004 010f 	and.w	r1, r4, #15
  408c94:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  408c98:	092a      	lsrs	r2, r5, #4
  408c9a:	461c      	mov	r4, r3
  408c9c:	4615      	mov	r5, r2
  408c9e:	5c43      	ldrb	r3, [r0, r1]
  408ca0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  408ca4:	ea54 0305 	orrs.w	r3, r4, r5
  408ca8:	d1f1      	bne.n	408c8e <_svfprintf_r+0x772>
  408caa:	e5f3      	b.n	408894 <_svfprintf_r+0x378>
  408cac:	990e      	ldr	r1, [sp, #56]	; 0x38
  408cae:	9311      	str	r3, [sp, #68]	; 0x44
  408cb0:	680a      	ldr	r2, [r1, #0]
  408cb2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  408cb6:	2300      	movs	r3, #0
  408cb8:	460a      	mov	r2, r1
  408cba:	461f      	mov	r7, r3
  408cbc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408cc0:	3204      	adds	r2, #4
  408cc2:	2301      	movs	r3, #1
  408cc4:	9308      	str	r3, [sp, #32]
  408cc6:	46bb      	mov	fp, r7
  408cc8:	9713      	str	r7, [sp, #76]	; 0x4c
  408cca:	920e      	str	r2, [sp, #56]	; 0x38
  408ccc:	930d      	str	r3, [sp, #52]	; 0x34
  408cce:	ae26      	add	r6, sp, #152	; 0x98
  408cd0:	e5ee      	b.n	4088b0 <_svfprintf_r+0x394>
  408cd2:	9311      	str	r3, [sp, #68]	; 0x44
  408cd4:	46ab      	mov	fp, r5
  408cd6:	2a00      	cmp	r2, #0
  408cd8:	f43f ada0 	beq.w	40881c <_svfprintf_r+0x300>
  408cdc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408ce0:	e59c      	b.n	40881c <_svfprintf_r+0x300>
  408ce2:	9b07      	ldr	r3, [sp, #28]
  408ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408ce8:	9307      	str	r3, [sp, #28]
  408cea:	f898 3000 	ldrb.w	r3, [r8]
  408cee:	e46e      	b.n	4085ce <_svfprintf_r+0xb2>
  408cf0:	f898 3000 	ldrb.w	r3, [r8]
  408cf4:	2900      	cmp	r1, #0
  408cf6:	f47f ac6a 	bne.w	4085ce <_svfprintf_r+0xb2>
  408cfa:	2201      	movs	r2, #1
  408cfc:	2120      	movs	r1, #32
  408cfe:	e466      	b.n	4085ce <_svfprintf_r+0xb2>
  408d00:	9b07      	ldr	r3, [sp, #28]
  408d02:	f043 0301 	orr.w	r3, r3, #1
  408d06:	9307      	str	r3, [sp, #28]
  408d08:	f898 3000 	ldrb.w	r3, [r8]
  408d0c:	e45f      	b.n	4085ce <_svfprintf_r+0xb2>
  408d0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408d10:	6823      	ldr	r3, [r4, #0]
  408d12:	930c      	str	r3, [sp, #48]	; 0x30
  408d14:	4618      	mov	r0, r3
  408d16:	2800      	cmp	r0, #0
  408d18:	4623      	mov	r3, r4
  408d1a:	f103 0304 	add.w	r3, r3, #4
  408d1e:	f6ff acb8 	blt.w	408692 <_svfprintf_r+0x176>
  408d22:	930e      	str	r3, [sp, #56]	; 0x38
  408d24:	f898 3000 	ldrb.w	r3, [r8]
  408d28:	e451      	b.n	4085ce <_svfprintf_r+0xb2>
  408d2a:	f898 3000 	ldrb.w	r3, [r8]
  408d2e:	2201      	movs	r2, #1
  408d30:	212b      	movs	r1, #43	; 0x2b
  408d32:	e44c      	b.n	4085ce <_svfprintf_r+0xb2>
  408d34:	9311      	str	r3, [sp, #68]	; 0x44
  408d36:	46ab      	mov	fp, r5
  408d38:	2a00      	cmp	r2, #0
  408d3a:	f43f af51 	beq.w	408be0 <_svfprintf_r+0x6c4>
  408d3e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408d42:	e74d      	b.n	408be0 <_svfprintf_r+0x6c4>
  408d44:	0040ec64 	.word	0x0040ec64
  408d48:	7fefffff 	.word	0x7fefffff
  408d4c:	0040ec24 	.word	0x0040ec24
  408d50:	0040ec20 	.word	0x0040ec20
  408d54:	0040ec30 	.word	0x0040ec30
  408d58:	9311      	str	r3, [sp, #68]	; 0x44
  408d5a:	46ab      	mov	fp, r5
  408d5c:	2a00      	cmp	r2, #0
  408d5e:	f040 8703 	bne.w	409b68 <_svfprintf_r+0x164c>
  408d62:	9b07      	ldr	r3, [sp, #28]
  408d64:	4899      	ldr	r0, [pc, #612]	; (408fcc <_svfprintf_r+0xab0>)
  408d66:	069d      	lsls	r5, r3, #26
  408d68:	f53f af69 	bmi.w	408c3e <_svfprintf_r+0x722>
  408d6c:	9b07      	ldr	r3, [sp, #28]
  408d6e:	06dc      	lsls	r4, r3, #27
  408d70:	f140 845e 	bpl.w	409630 <_svfprintf_r+0x1114>
  408d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408d76:	4613      	mov	r3, r2
  408d78:	3304      	adds	r3, #4
  408d7a:	6814      	ldr	r4, [r2, #0]
  408d7c:	930e      	str	r3, [sp, #56]	; 0x38
  408d7e:	2500      	movs	r5, #0
  408d80:	e766      	b.n	408c50 <_svfprintf_r+0x734>
  408d82:	f898 3000 	ldrb.w	r3, [r8]
  408d86:	2b6c      	cmp	r3, #108	; 0x6c
  408d88:	f000 84e1 	beq.w	40974e <_svfprintf_r+0x1232>
  408d8c:	9807      	ldr	r0, [sp, #28]
  408d8e:	f040 0010 	orr.w	r0, r0, #16
  408d92:	9007      	str	r0, [sp, #28]
  408d94:	e41b      	b.n	4085ce <_svfprintf_r+0xb2>
  408d96:	2a00      	cmp	r2, #0
  408d98:	f040 86db 	bne.w	409b52 <_svfprintf_r+0x1636>
  408d9c:	9b07      	ldr	r3, [sp, #28]
  408d9e:	069b      	lsls	r3, r3, #26
  408da0:	f140 842f 	bpl.w	409602 <_svfprintf_r+0x10e6>
  408da4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408da6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408da8:	6813      	ldr	r3, [r2, #0]
  408daa:	17cd      	asrs	r5, r1, #31
  408dac:	4608      	mov	r0, r1
  408dae:	3204      	adds	r2, #4
  408db0:	4629      	mov	r1, r5
  408db2:	920e      	str	r2, [sp, #56]	; 0x38
  408db4:	e9c3 0100 	strd	r0, r1, [r3]
  408db8:	f7ff bbd6 	b.w	408568 <_svfprintf_r+0x4c>
  408dbc:	9b07      	ldr	r3, [sp, #28]
  408dbe:	f043 0320 	orr.w	r3, r3, #32
  408dc2:	9307      	str	r3, [sp, #28]
  408dc4:	f898 3000 	ldrb.w	r3, [r8]
  408dc8:	e401      	b.n	4085ce <_svfprintf_r+0xb2>
  408dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408dcc:	9311      	str	r3, [sp, #68]	; 0x44
  408dce:	6816      	ldr	r6, [r2, #0]
  408dd0:	2400      	movs	r4, #0
  408dd2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  408dd6:	1d17      	adds	r7, r2, #4
  408dd8:	2e00      	cmp	r6, #0
  408dda:	f000 85bd 	beq.w	409958 <_svfprintf_r+0x143c>
  408dde:	2d00      	cmp	r5, #0
  408de0:	f2c0 850f 	blt.w	409802 <_svfprintf_r+0x12e6>
  408de4:	462a      	mov	r2, r5
  408de6:	4621      	mov	r1, r4
  408de8:	4630      	mov	r0, r6
  408dea:	f003 fe61 	bl	40cab0 <memchr>
  408dee:	2800      	cmp	r0, #0
  408df0:	f000 8604 	beq.w	4099fc <_svfprintf_r+0x14e0>
  408df4:	1b83      	subs	r3, r0, r6
  408df6:	930d      	str	r3, [sp, #52]	; 0x34
  408df8:	46a3      	mov	fp, r4
  408dfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408dfe:	970e      	str	r7, [sp, #56]	; 0x38
  408e00:	9308      	str	r3, [sp, #32]
  408e02:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  408e06:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408e0a:	e54d      	b.n	4088a8 <_svfprintf_r+0x38c>
  408e0c:	486f      	ldr	r0, [pc, #444]	; (408fcc <_svfprintf_r+0xab0>)
  408e0e:	9211      	str	r2, [sp, #68]	; 0x44
  408e10:	f1bb 0f00 	cmp.w	fp, #0
  408e14:	f040 8173 	bne.w	4090fe <_svfprintf_r+0xbe2>
  408e18:	465f      	mov	r7, fp
  408e1a:	f04f 0b00 	mov.w	fp, #0
  408e1e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  408e22:	ae30      	add	r6, sp, #192	; 0xc0
  408e24:	e539      	b.n	40889a <_svfprintf_r+0x37e>
  408e26:	9311      	str	r3, [sp, #68]	; 0x44
  408e28:	2a00      	cmp	r2, #0
  408e2a:	f040 86b0 	bne.w	409b8e <_svfprintf_r+0x1672>
  408e2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408e30:	2a00      	cmp	r2, #0
  408e32:	f43f ac65 	beq.w	408700 <_svfprintf_r+0x1e4>
  408e36:	2300      	movs	r3, #0
  408e38:	2101      	movs	r1, #1
  408e3a:	461f      	mov	r7, r3
  408e3c:	9108      	str	r1, [sp, #32]
  408e3e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  408e42:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408e46:	469b      	mov	fp, r3
  408e48:	9313      	str	r3, [sp, #76]	; 0x4c
  408e4a:	910d      	str	r1, [sp, #52]	; 0x34
  408e4c:	ae26      	add	r6, sp, #152	; 0x98
  408e4e:	e52f      	b.n	4088b0 <_svfprintf_r+0x394>
  408e50:	f1bb 0f00 	cmp.w	fp, #0
  408e54:	f000 85dd 	beq.w	409a12 <_svfprintf_r+0x14f6>
  408e58:	2700      	movs	r7, #0
  408e5a:	2400      	movs	r4, #0
  408e5c:	2500      	movs	r5, #0
  408e5e:	e482      	b.n	408766 <_svfprintf_r+0x24a>
  408e60:	485a      	ldr	r0, [pc, #360]	; (408fcc <_svfprintf_r+0xab0>)
  408e62:	9307      	str	r3, [sp, #28]
  408e64:	9211      	str	r2, [sp, #68]	; 0x44
  408e66:	ea54 0305 	orrs.w	r3, r4, r5
  408e6a:	970e      	str	r7, [sp, #56]	; 0x38
  408e6c:	f04f 0700 	mov.w	r7, #0
  408e70:	f47f af0c 	bne.w	408c8c <_svfprintf_r+0x770>
  408e74:	2400      	movs	r4, #0
  408e76:	2500      	movs	r5, #0
  408e78:	e708      	b.n	408c8c <_svfprintf_r+0x770>
  408e7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408e7c:	e568      	b.n	408950 <_svfprintf_r+0x434>
  408e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408e80:	2b65      	cmp	r3, #101	; 0x65
  408e82:	f340 80a9 	ble.w	408fd8 <_svfprintf_r+0xabc>
  408e86:	9814      	ldr	r0, [sp, #80]	; 0x50
  408e88:	9915      	ldr	r1, [sp, #84]	; 0x54
  408e8a:	2200      	movs	r2, #0
  408e8c:	2300      	movs	r3, #0
  408e8e:	f005 fa87 	bl	40e3a0 <__aeabi_dcmpeq>
  408e92:	2800      	cmp	r0, #0
  408e94:	f000 8135 	beq.w	409102 <_svfprintf_r+0xbe6>
  408e98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408e9a:	4a4d      	ldr	r2, [pc, #308]	; (408fd0 <_svfprintf_r+0xab4>)
  408e9c:	f8c9 2000 	str.w	r2, [r9]
  408ea0:	3301      	adds	r3, #1
  408ea2:	3401      	adds	r4, #1
  408ea4:	2201      	movs	r2, #1
  408ea6:	2b07      	cmp	r3, #7
  408ea8:	9425      	str	r4, [sp, #148]	; 0x94
  408eaa:	9324      	str	r3, [sp, #144]	; 0x90
  408eac:	f8c9 2004 	str.w	r2, [r9, #4]
  408eb0:	f300 83e6 	bgt.w	409680 <_svfprintf_r+0x1164>
  408eb4:	f109 0908 	add.w	r9, r9, #8
  408eb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408eba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408ebc:	4293      	cmp	r3, r2
  408ebe:	db03      	blt.n	408ec8 <_svfprintf_r+0x9ac>
  408ec0:	9b07      	ldr	r3, [sp, #28]
  408ec2:	07db      	lsls	r3, r3, #31
  408ec4:	f57f adba 	bpl.w	408a3c <_svfprintf_r+0x520>
  408ec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408eca:	9916      	ldr	r1, [sp, #88]	; 0x58
  408ecc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  408ece:	f8c9 2000 	str.w	r2, [r9]
  408ed2:	3301      	adds	r3, #1
  408ed4:	440c      	add	r4, r1
  408ed6:	2b07      	cmp	r3, #7
  408ed8:	9425      	str	r4, [sp, #148]	; 0x94
  408eda:	f8c9 1004 	str.w	r1, [r9, #4]
  408ede:	9324      	str	r3, [sp, #144]	; 0x90
  408ee0:	f300 843f 	bgt.w	409762 <_svfprintf_r+0x1246>
  408ee4:	f109 0908 	add.w	r9, r9, #8
  408ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408eea:	1e5d      	subs	r5, r3, #1
  408eec:	2d00      	cmp	r5, #0
  408eee:	f77f ada5 	ble.w	408a3c <_svfprintf_r+0x520>
  408ef2:	4a38      	ldr	r2, [pc, #224]	; (408fd4 <_svfprintf_r+0xab8>)
  408ef4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ef6:	920f      	str	r2, [sp, #60]	; 0x3c
  408ef8:	2d10      	cmp	r5, #16
  408efa:	f340 81e6 	ble.w	4092ca <_svfprintf_r+0xdae>
  408efe:	2610      	movs	r6, #16
  408f00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408f02:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  408f06:	e005      	b.n	408f14 <_svfprintf_r+0x9f8>
  408f08:	f109 0908 	add.w	r9, r9, #8
  408f0c:	3d10      	subs	r5, #16
  408f0e:	2d10      	cmp	r5, #16
  408f10:	f340 81db 	ble.w	4092ca <_svfprintf_r+0xdae>
  408f14:	3301      	adds	r3, #1
  408f16:	3410      	adds	r4, #16
  408f18:	2b07      	cmp	r3, #7
  408f1a:	9425      	str	r4, [sp, #148]	; 0x94
  408f1c:	9324      	str	r3, [sp, #144]	; 0x90
  408f1e:	f8c9 a000 	str.w	sl, [r9]
  408f22:	f8c9 6004 	str.w	r6, [r9, #4]
  408f26:	ddef      	ble.n	408f08 <_svfprintf_r+0x9ec>
  408f28:	aa23      	add	r2, sp, #140	; 0x8c
  408f2a:	4659      	mov	r1, fp
  408f2c:	4638      	mov	r0, r7
  408f2e:	f004 fbcb 	bl	40d6c8 <__ssprint_r>
  408f32:	2800      	cmp	r0, #0
  408f34:	f47f abeb 	bne.w	40870e <_svfprintf_r+0x1f2>
  408f38:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408f3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f3c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408f40:	e7e4      	b.n	408f0c <_svfprintf_r+0x9f0>
  408f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408f44:	9a08      	ldr	r2, [sp, #32]
  408f46:	1a9f      	subs	r7, r3, r2
  408f48:	2f00      	cmp	r7, #0
  408f4a:	f77f ad25 	ble.w	408998 <_svfprintf_r+0x47c>
  408f4e:	4a21      	ldr	r2, [pc, #132]	; (408fd4 <_svfprintf_r+0xab8>)
  408f50:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f52:	920f      	str	r2, [sp, #60]	; 0x3c
  408f54:	2f10      	cmp	r7, #16
  408f56:	dd2b      	ble.n	408fb0 <_svfprintf_r+0xa94>
  408f58:	464a      	mov	r2, r9
  408f5a:	4621      	mov	r1, r4
  408f5c:	46b9      	mov	r9, r7
  408f5e:	2510      	movs	r5, #16
  408f60:	4637      	mov	r7, r6
  408f62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408f64:	9e09      	ldr	r6, [sp, #36]	; 0x24
  408f66:	e006      	b.n	408f76 <_svfprintf_r+0xa5a>
  408f68:	f1a9 0910 	sub.w	r9, r9, #16
  408f6c:	f1b9 0f10 	cmp.w	r9, #16
  408f70:	f102 0208 	add.w	r2, r2, #8
  408f74:	dd18      	ble.n	408fa8 <_svfprintf_r+0xa8c>
  408f76:	3301      	adds	r3, #1
  408f78:	3110      	adds	r1, #16
  408f7a:	2b07      	cmp	r3, #7
  408f7c:	9125      	str	r1, [sp, #148]	; 0x94
  408f7e:	9324      	str	r3, [sp, #144]	; 0x90
  408f80:	f8c2 a000 	str.w	sl, [r2]
  408f84:	6055      	str	r5, [r2, #4]
  408f86:	ddef      	ble.n	408f68 <_svfprintf_r+0xa4c>
  408f88:	aa23      	add	r2, sp, #140	; 0x8c
  408f8a:	4631      	mov	r1, r6
  408f8c:	4620      	mov	r0, r4
  408f8e:	f004 fb9b 	bl	40d6c8 <__ssprint_r>
  408f92:	2800      	cmp	r0, #0
  408f94:	f47f abbb 	bne.w	40870e <_svfprintf_r+0x1f2>
  408f98:	f1a9 0910 	sub.w	r9, r9, #16
  408f9c:	f1b9 0f10 	cmp.w	r9, #16
  408fa0:	9925      	ldr	r1, [sp, #148]	; 0x94
  408fa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408fa4:	aa30      	add	r2, sp, #192	; 0xc0
  408fa6:	dce6      	bgt.n	408f76 <_svfprintf_r+0xa5a>
  408fa8:	463e      	mov	r6, r7
  408faa:	460c      	mov	r4, r1
  408fac:	464f      	mov	r7, r9
  408fae:	4691      	mov	r9, r2
  408fb0:	3301      	adds	r3, #1
  408fb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408fb4:	9324      	str	r3, [sp, #144]	; 0x90
  408fb6:	443c      	add	r4, r7
  408fb8:	2b07      	cmp	r3, #7
  408fba:	9425      	str	r4, [sp, #148]	; 0x94
  408fbc:	e889 0084 	stmia.w	r9, {r2, r7}
  408fc0:	f300 8245 	bgt.w	40944e <_svfprintf_r+0xf32>
  408fc4:	f109 0908 	add.w	r9, r9, #8
  408fc8:	e4e6      	b.n	408998 <_svfprintf_r+0x47c>
  408fca:	bf00      	nop
  408fcc:	0040ec44 	.word	0x0040ec44
  408fd0:	0040ec60 	.word	0x0040ec60
  408fd4:	0040ec10 	.word	0x0040ec10
  408fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408fda:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408fdc:	2b01      	cmp	r3, #1
  408fde:	f340 8208 	ble.w	4093f2 <_svfprintf_r+0xed6>
  408fe2:	3501      	adds	r5, #1
  408fe4:	3401      	adds	r4, #1
  408fe6:	2301      	movs	r3, #1
  408fe8:	2d07      	cmp	r5, #7
  408fea:	9425      	str	r4, [sp, #148]	; 0x94
  408fec:	9524      	str	r5, [sp, #144]	; 0x90
  408fee:	f8c9 6000 	str.w	r6, [r9]
  408ff2:	f8c9 3004 	str.w	r3, [r9, #4]
  408ff6:	f300 820d 	bgt.w	409414 <_svfprintf_r+0xef8>
  408ffa:	f109 0908 	add.w	r9, r9, #8
  408ffe:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409002:	f8c9 3000 	str.w	r3, [r9]
  409006:	3501      	adds	r5, #1
  409008:	4414      	add	r4, r2
  40900a:	2d07      	cmp	r5, #7
  40900c:	9425      	str	r4, [sp, #148]	; 0x94
  40900e:	9524      	str	r5, [sp, #144]	; 0x90
  409010:	f8c9 2004 	str.w	r2, [r9, #4]
  409014:	f300 820e 	bgt.w	409434 <_svfprintf_r+0xf18>
  409018:	f109 0908 	add.w	r9, r9, #8
  40901c:	2300      	movs	r3, #0
  40901e:	9814      	ldr	r0, [sp, #80]	; 0x50
  409020:	9915      	ldr	r1, [sp, #84]	; 0x54
  409022:	2200      	movs	r2, #0
  409024:	f005 f9bc 	bl	40e3a0 <__aeabi_dcmpeq>
  409028:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40902a:	2800      	cmp	r0, #0
  40902c:	f040 80c3 	bne.w	4091b6 <_svfprintf_r+0xc9a>
  409030:	3b01      	subs	r3, #1
  409032:	3501      	adds	r5, #1
  409034:	3601      	adds	r6, #1
  409036:	441c      	add	r4, r3
  409038:	2d07      	cmp	r5, #7
  40903a:	9524      	str	r5, [sp, #144]	; 0x90
  40903c:	9425      	str	r4, [sp, #148]	; 0x94
  40903e:	f8c9 6000 	str.w	r6, [r9]
  409042:	f8c9 3004 	str.w	r3, [r9, #4]
  409046:	f300 80f5 	bgt.w	409234 <_svfprintf_r+0xd18>
  40904a:	f109 0908 	add.w	r9, r9, #8
  40904e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  409050:	f8c9 2004 	str.w	r2, [r9, #4]
  409054:	3501      	adds	r5, #1
  409056:	4414      	add	r4, r2
  409058:	ab1f      	add	r3, sp, #124	; 0x7c
  40905a:	2d07      	cmp	r5, #7
  40905c:	9425      	str	r4, [sp, #148]	; 0x94
  40905e:	9524      	str	r5, [sp, #144]	; 0x90
  409060:	f8c9 3000 	str.w	r3, [r9]
  409064:	f77f ace8 	ble.w	408a38 <_svfprintf_r+0x51c>
  409068:	aa23      	add	r2, sp, #140	; 0x8c
  40906a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40906c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40906e:	f004 fb2b 	bl	40d6c8 <__ssprint_r>
  409072:	2800      	cmp	r0, #0
  409074:	f47f ab4b 	bne.w	40870e <_svfprintf_r+0x1f2>
  409078:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40907a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40907e:	e4dd      	b.n	408a3c <_svfprintf_r+0x520>
  409080:	aa23      	add	r2, sp, #140	; 0x8c
  409082:	9909      	ldr	r1, [sp, #36]	; 0x24
  409084:	980a      	ldr	r0, [sp, #40]	; 0x28
  409086:	f004 fb1f 	bl	40d6c8 <__ssprint_r>
  40908a:	2800      	cmp	r0, #0
  40908c:	f43f ad24 	beq.w	408ad8 <_svfprintf_r+0x5bc>
  409090:	f7ff bb3d 	b.w	40870e <_svfprintf_r+0x1f2>
  409094:	aa23      	add	r2, sp, #140	; 0x8c
  409096:	9909      	ldr	r1, [sp, #36]	; 0x24
  409098:	980a      	ldr	r0, [sp, #40]	; 0x28
  40909a:	f004 fb15 	bl	40d6c8 <__ssprint_r>
  40909e:	2800      	cmp	r0, #0
  4090a0:	f47f ab35 	bne.w	40870e <_svfprintf_r+0x1f2>
  4090a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4090a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4090aa:	e4b4      	b.n	408a16 <_svfprintf_r+0x4fa>
  4090ac:	aa23      	add	r2, sp, #140	; 0x8c
  4090ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4090b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4090b2:	f004 fb09 	bl	40d6c8 <__ssprint_r>
  4090b6:	2800      	cmp	r0, #0
  4090b8:	f47f ab29 	bne.w	40870e <_svfprintf_r+0x1f2>
  4090bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4090be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4090c2:	e455      	b.n	408970 <_svfprintf_r+0x454>
  4090c4:	aa23      	add	r2, sp, #140	; 0x8c
  4090c6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4090c8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4090ca:	f004 fafd 	bl	40d6c8 <__ssprint_r>
  4090ce:	2800      	cmp	r0, #0
  4090d0:	f47f ab1d 	bne.w	40870e <_svfprintf_r+0x1f2>
  4090d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4090d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4090da:	e459      	b.n	408990 <_svfprintf_r+0x474>
  4090dc:	f1bb 0f00 	cmp.w	fp, #0
  4090e0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4090e4:	f2c0 82d8 	blt.w	409698 <_svfprintf_r+0x117c>
  4090e8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4090ec:	9307      	str	r3, [sp, #28]
  4090ee:	ea54 0305 	orrs.w	r3, r4, r5
  4090f2:	f47f adcb 	bne.w	408c8c <_svfprintf_r+0x770>
  4090f6:	f1bb 0f00 	cmp.w	fp, #0
  4090fa:	f43f ae8d 	beq.w	408e18 <_svfprintf_r+0x8fc>
  4090fe:	2700      	movs	r7, #0
  409100:	e6b8      	b.n	408e74 <_svfprintf_r+0x958>
  409102:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  409104:	2d00      	cmp	r5, #0
  409106:	f340 82ca 	ble.w	40969e <_svfprintf_r+0x1182>
  40910a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40910c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40910e:	4293      	cmp	r3, r2
  409110:	bfa8      	it	ge
  409112:	4613      	movge	r3, r2
  409114:	2b00      	cmp	r3, #0
  409116:	461d      	mov	r5, r3
  409118:	dd0d      	ble.n	409136 <_svfprintf_r+0xc1a>
  40911a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40911c:	f8c9 6000 	str.w	r6, [r9]
  409120:	3301      	adds	r3, #1
  409122:	442c      	add	r4, r5
  409124:	2b07      	cmp	r3, #7
  409126:	9425      	str	r4, [sp, #148]	; 0x94
  409128:	f8c9 5004 	str.w	r5, [r9, #4]
  40912c:	9324      	str	r3, [sp, #144]	; 0x90
  40912e:	f300 839c 	bgt.w	40986a <_svfprintf_r+0x134e>
  409132:	f109 0908 	add.w	r9, r9, #8
  409136:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409138:	2d00      	cmp	r5, #0
  40913a:	bfa8      	it	ge
  40913c:	1b5b      	subge	r3, r3, r5
  40913e:	2b00      	cmp	r3, #0
  409140:	461d      	mov	r5, r3
  409142:	f340 80f6 	ble.w	409332 <_svfprintf_r+0xe16>
  409146:	4aba      	ldr	r2, [pc, #744]	; (409430 <_svfprintf_r+0xf14>)
  409148:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40914a:	920f      	str	r2, [sp, #60]	; 0x3c
  40914c:	2d10      	cmp	r5, #16
  40914e:	f340 828a 	ble.w	409666 <_svfprintf_r+0x114a>
  409152:	4622      	mov	r2, r4
  409154:	2710      	movs	r7, #16
  409156:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40915a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40915c:	e005      	b.n	40916a <_svfprintf_r+0xc4e>
  40915e:	f109 0908 	add.w	r9, r9, #8
  409162:	3d10      	subs	r5, #16
  409164:	2d10      	cmp	r5, #16
  409166:	f340 827d 	ble.w	409664 <_svfprintf_r+0x1148>
  40916a:	3301      	adds	r3, #1
  40916c:	3210      	adds	r2, #16
  40916e:	2b07      	cmp	r3, #7
  409170:	9225      	str	r2, [sp, #148]	; 0x94
  409172:	9324      	str	r3, [sp, #144]	; 0x90
  409174:	f8c9 a000 	str.w	sl, [r9]
  409178:	f8c9 7004 	str.w	r7, [r9, #4]
  40917c:	ddef      	ble.n	40915e <_svfprintf_r+0xc42>
  40917e:	aa23      	add	r2, sp, #140	; 0x8c
  409180:	4621      	mov	r1, r4
  409182:	4658      	mov	r0, fp
  409184:	f004 faa0 	bl	40d6c8 <__ssprint_r>
  409188:	2800      	cmp	r0, #0
  40918a:	f47f aac0 	bne.w	40870e <_svfprintf_r+0x1f2>
  40918e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409190:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409192:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409196:	e7e4      	b.n	409162 <_svfprintf_r+0xc46>
  409198:	aa23      	add	r2, sp, #140	; 0x8c
  40919a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40919c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40919e:	f004 fa93 	bl	40d6c8 <__ssprint_r>
  4091a2:	2800      	cmp	r0, #0
  4091a4:	f47f aab3 	bne.w	40870e <_svfprintf_r+0x1f2>
  4091a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4091ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4091ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4091b2:	f7ff bbcd 	b.w	408950 <_svfprintf_r+0x434>
  4091b6:	1e5e      	subs	r6, r3, #1
  4091b8:	2e00      	cmp	r6, #0
  4091ba:	f77f af48 	ble.w	40904e <_svfprintf_r+0xb32>
  4091be:	4b9c      	ldr	r3, [pc, #624]	; (409430 <_svfprintf_r+0xf14>)
  4091c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4091c2:	2e10      	cmp	r6, #16
  4091c4:	dd2c      	ble.n	409220 <_svfprintf_r+0xd04>
  4091c6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  4091ca:	2710      	movs	r7, #16
  4091cc:	46b0      	mov	r8, r6
  4091ce:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4091d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4091d4:	e006      	b.n	4091e4 <_svfprintf_r+0xcc8>
  4091d6:	f1a8 0810 	sub.w	r8, r8, #16
  4091da:	f1b8 0f10 	cmp.w	r8, #16
  4091de:	f109 0908 	add.w	r9, r9, #8
  4091e2:	dd1a      	ble.n	40921a <_svfprintf_r+0xcfe>
  4091e4:	3501      	adds	r5, #1
  4091e6:	3410      	adds	r4, #16
  4091e8:	2d07      	cmp	r5, #7
  4091ea:	9425      	str	r4, [sp, #148]	; 0x94
  4091ec:	9524      	str	r5, [sp, #144]	; 0x90
  4091ee:	f8c9 a000 	str.w	sl, [r9]
  4091f2:	f8c9 7004 	str.w	r7, [r9, #4]
  4091f6:	ddee      	ble.n	4091d6 <_svfprintf_r+0xcba>
  4091f8:	aa23      	add	r2, sp, #140	; 0x8c
  4091fa:	4631      	mov	r1, r6
  4091fc:	4658      	mov	r0, fp
  4091fe:	f004 fa63 	bl	40d6c8 <__ssprint_r>
  409202:	2800      	cmp	r0, #0
  409204:	f47f aa83 	bne.w	40870e <_svfprintf_r+0x1f2>
  409208:	f1a8 0810 	sub.w	r8, r8, #16
  40920c:	f1b8 0f10 	cmp.w	r8, #16
  409210:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409212:	9d24      	ldr	r5, [sp, #144]	; 0x90
  409214:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409218:	dce4      	bgt.n	4091e4 <_svfprintf_r+0xcc8>
  40921a:	4646      	mov	r6, r8
  40921c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  409220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409222:	3501      	adds	r5, #1
  409224:	4434      	add	r4, r6
  409226:	2d07      	cmp	r5, #7
  409228:	9425      	str	r4, [sp, #148]	; 0x94
  40922a:	9524      	str	r5, [sp, #144]	; 0x90
  40922c:	e889 0048 	stmia.w	r9, {r3, r6}
  409230:	f77f af0b 	ble.w	40904a <_svfprintf_r+0xb2e>
  409234:	aa23      	add	r2, sp, #140	; 0x8c
  409236:	9909      	ldr	r1, [sp, #36]	; 0x24
  409238:	980a      	ldr	r0, [sp, #40]	; 0x28
  40923a:	f004 fa45 	bl	40d6c8 <__ssprint_r>
  40923e:	2800      	cmp	r0, #0
  409240:	f47f aa65 	bne.w	40870e <_svfprintf_r+0x1f2>
  409244:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409246:	9d24      	ldr	r5, [sp, #144]	; 0x90
  409248:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40924c:	e6ff      	b.n	40904e <_svfprintf_r+0xb32>
  40924e:	9907      	ldr	r1, [sp, #28]
  409250:	f011 0210 	ands.w	r2, r1, #16
  409254:	f000 8108 	beq.w	409468 <_svfprintf_r+0xf4c>
  409258:	980e      	ldr	r0, [sp, #56]	; 0x38
  40925a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40925e:	f1bb 0f00 	cmp.w	fp, #0
  409262:	6804      	ldr	r4, [r0, #0]
  409264:	f100 0704 	add.w	r7, r0, #4
  409268:	f04f 0500 	mov.w	r5, #0
  40926c:	db26      	blt.n	4092bc <_svfprintf_r+0xda0>
  40926e:	460a      	mov	r2, r1
  409270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  409274:	9207      	str	r2, [sp, #28]
  409276:	ea54 0205 	orrs.w	r2, r4, r5
  40927a:	970e      	str	r7, [sp, #56]	; 0x38
  40927c:	461f      	mov	r7, r3
  40927e:	f47f aaef 	bne.w	408860 <_svfprintf_r+0x344>
  409282:	e4c8      	b.n	408c16 <_svfprintf_r+0x6fa>
  409284:	9b07      	ldr	r3, [sp, #28]
  409286:	06d9      	lsls	r1, r3, #27
  409288:	d42a      	bmi.n	4092e0 <_svfprintf_r+0xdc4>
  40928a:	9b07      	ldr	r3, [sp, #28]
  40928c:	065a      	lsls	r2, r3, #25
  40928e:	d527      	bpl.n	4092e0 <_svfprintf_r+0xdc4>
  409290:	990e      	ldr	r1, [sp, #56]	; 0x38
  409292:	f9b1 4000 	ldrsh.w	r4, [r1]
  409296:	3104      	adds	r1, #4
  409298:	17e5      	asrs	r5, r4, #31
  40929a:	4622      	mov	r2, r4
  40929c:	462b      	mov	r3, r5
  40929e:	910e      	str	r1, [sp, #56]	; 0x38
  4092a0:	f7ff bacb 	b.w	40883a <_svfprintf_r+0x31e>
  4092a4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4092a6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4092aa:	f1bb 0f00 	cmp.w	fp, #0
  4092ae:	680c      	ldr	r4, [r1, #0]
  4092b0:	f101 0704 	add.w	r7, r1, #4
  4092b4:	f04f 0500 	mov.w	r5, #0
  4092b8:	f280 8247 	bge.w	40974a <_svfprintf_r+0x122e>
  4092bc:	970e      	str	r7, [sp, #56]	; 0x38
  4092be:	461f      	mov	r7, r3
  4092c0:	ea54 0305 	orrs.w	r3, r4, r5
  4092c4:	f47f aacc 	bne.w	408860 <_svfprintf_r+0x344>
  4092c8:	e4aa      	b.n	408c20 <_svfprintf_r+0x704>
  4092ca:	3301      	adds	r3, #1
  4092cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4092ce:	9324      	str	r3, [sp, #144]	; 0x90
  4092d0:	442c      	add	r4, r5
  4092d2:	2b07      	cmp	r3, #7
  4092d4:	9425      	str	r4, [sp, #148]	; 0x94
  4092d6:	e889 0024 	stmia.w	r9, {r2, r5}
  4092da:	f77f abad 	ble.w	408a38 <_svfprintf_r+0x51c>
  4092de:	e6c3      	b.n	409068 <_svfprintf_r+0xb4c>
  4092e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4092e2:	6814      	ldr	r4, [r2, #0]
  4092e4:	4613      	mov	r3, r2
  4092e6:	3304      	adds	r3, #4
  4092e8:	17e5      	asrs	r5, r4, #31
  4092ea:	4622      	mov	r2, r4
  4092ec:	930e      	str	r3, [sp, #56]	; 0x38
  4092ee:	2a00      	cmp	r2, #0
  4092f0:	462b      	mov	r3, r5
  4092f2:	f173 0300 	sbcs.w	r3, r3, #0
  4092f6:	f6bf aaa5 	bge.w	408844 <_svfprintf_r+0x328>
  4092fa:	4264      	negs	r4, r4
  4092fc:	f04f 072d 	mov.w	r7, #45	; 0x2d
  409300:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  409304:	f1bb 0f00 	cmp.w	fp, #0
  409308:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40930c:	f6ff aaa8 	blt.w	408860 <_svfprintf_r+0x344>
  409310:	9b07      	ldr	r3, [sp, #28]
  409312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  409316:	9307      	str	r3, [sp, #28]
  409318:	f7ff baa2 	b.w	408860 <_svfprintf_r+0x344>
  40931c:	aa23      	add	r2, sp, #140	; 0x8c
  40931e:	9909      	ldr	r1, [sp, #36]	; 0x24
  409320:	980a      	ldr	r0, [sp, #40]	; 0x28
  409322:	f004 f9d1 	bl	40d6c8 <__ssprint_r>
  409326:	2800      	cmp	r0, #0
  409328:	f47f a9f1 	bne.w	40870e <_svfprintf_r+0x1f2>
  40932c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40932e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409332:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  409334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409336:	4432      	add	r2, r6
  409338:	4617      	mov	r7, r2
  40933a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40933c:	4293      	cmp	r3, r2
  40933e:	db47      	blt.n	4093d0 <_svfprintf_r+0xeb4>
  409340:	9a07      	ldr	r2, [sp, #28]
  409342:	07d5      	lsls	r5, r2, #31
  409344:	d444      	bmi.n	4093d0 <_svfprintf_r+0xeb4>
  409346:	9912      	ldr	r1, [sp, #72]	; 0x48
  409348:	440e      	add	r6, r1
  40934a:	1bf5      	subs	r5, r6, r7
  40934c:	1acb      	subs	r3, r1, r3
  40934e:	429d      	cmp	r5, r3
  409350:	bfa8      	it	ge
  409352:	461d      	movge	r5, r3
  409354:	2d00      	cmp	r5, #0
  409356:	462e      	mov	r6, r5
  409358:	dd0d      	ble.n	409376 <_svfprintf_r+0xe5a>
  40935a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40935c:	f8c9 7000 	str.w	r7, [r9]
  409360:	3201      	adds	r2, #1
  409362:	442c      	add	r4, r5
  409364:	2a07      	cmp	r2, #7
  409366:	9425      	str	r4, [sp, #148]	; 0x94
  409368:	f8c9 5004 	str.w	r5, [r9, #4]
  40936c:	9224      	str	r2, [sp, #144]	; 0x90
  40936e:	f300 830b 	bgt.w	409988 <_svfprintf_r+0x146c>
  409372:	f109 0908 	add.w	r9, r9, #8
  409376:	2e00      	cmp	r6, #0
  409378:	bfac      	ite	ge
  40937a:	1b9d      	subge	r5, r3, r6
  40937c:	461d      	movlt	r5, r3
  40937e:	2d00      	cmp	r5, #0
  409380:	f77f ab5c 	ble.w	408a3c <_svfprintf_r+0x520>
  409384:	4a2a      	ldr	r2, [pc, #168]	; (409430 <_svfprintf_r+0xf14>)
  409386:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409388:	920f      	str	r2, [sp, #60]	; 0x3c
  40938a:	2d10      	cmp	r5, #16
  40938c:	dd9d      	ble.n	4092ca <_svfprintf_r+0xdae>
  40938e:	2610      	movs	r6, #16
  409390:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409392:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  409396:	e004      	b.n	4093a2 <_svfprintf_r+0xe86>
  409398:	f109 0908 	add.w	r9, r9, #8
  40939c:	3d10      	subs	r5, #16
  40939e:	2d10      	cmp	r5, #16
  4093a0:	dd93      	ble.n	4092ca <_svfprintf_r+0xdae>
  4093a2:	3301      	adds	r3, #1
  4093a4:	3410      	adds	r4, #16
  4093a6:	2b07      	cmp	r3, #7
  4093a8:	9425      	str	r4, [sp, #148]	; 0x94
  4093aa:	9324      	str	r3, [sp, #144]	; 0x90
  4093ac:	f8c9 a000 	str.w	sl, [r9]
  4093b0:	f8c9 6004 	str.w	r6, [r9, #4]
  4093b4:	ddf0      	ble.n	409398 <_svfprintf_r+0xe7c>
  4093b6:	aa23      	add	r2, sp, #140	; 0x8c
  4093b8:	4659      	mov	r1, fp
  4093ba:	4638      	mov	r0, r7
  4093bc:	f004 f984 	bl	40d6c8 <__ssprint_r>
  4093c0:	2800      	cmp	r0, #0
  4093c2:	f47f a9a4 	bne.w	40870e <_svfprintf_r+0x1f2>
  4093c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4093c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4093ca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4093ce:	e7e5      	b.n	40939c <_svfprintf_r+0xe80>
  4093d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4093d2:	9816      	ldr	r0, [sp, #88]	; 0x58
  4093d4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4093d6:	f8c9 1000 	str.w	r1, [r9]
  4093da:	3201      	adds	r2, #1
  4093dc:	4404      	add	r4, r0
  4093de:	2a07      	cmp	r2, #7
  4093e0:	9425      	str	r4, [sp, #148]	; 0x94
  4093e2:	f8c9 0004 	str.w	r0, [r9, #4]
  4093e6:	9224      	str	r2, [sp, #144]	; 0x90
  4093e8:	f300 82a9 	bgt.w	40993e <_svfprintf_r+0x1422>
  4093ec:	f109 0908 	add.w	r9, r9, #8
  4093f0:	e7a9      	b.n	409346 <_svfprintf_r+0xe2a>
  4093f2:	9b07      	ldr	r3, [sp, #28]
  4093f4:	07d8      	lsls	r0, r3, #31
  4093f6:	f53f adf4 	bmi.w	408fe2 <_svfprintf_r+0xac6>
  4093fa:	3501      	adds	r5, #1
  4093fc:	3401      	adds	r4, #1
  4093fe:	2301      	movs	r3, #1
  409400:	2d07      	cmp	r5, #7
  409402:	9425      	str	r4, [sp, #148]	; 0x94
  409404:	9524      	str	r5, [sp, #144]	; 0x90
  409406:	f8c9 6000 	str.w	r6, [r9]
  40940a:	f8c9 3004 	str.w	r3, [r9, #4]
  40940e:	f77f ae1c 	ble.w	40904a <_svfprintf_r+0xb2e>
  409412:	e70f      	b.n	409234 <_svfprintf_r+0xd18>
  409414:	aa23      	add	r2, sp, #140	; 0x8c
  409416:	9909      	ldr	r1, [sp, #36]	; 0x24
  409418:	980a      	ldr	r0, [sp, #40]	; 0x28
  40941a:	f004 f955 	bl	40d6c8 <__ssprint_r>
  40941e:	2800      	cmp	r0, #0
  409420:	f47f a975 	bne.w	40870e <_svfprintf_r+0x1f2>
  409424:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409426:	9d24      	ldr	r5, [sp, #144]	; 0x90
  409428:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40942c:	e5e7      	b.n	408ffe <_svfprintf_r+0xae2>
  40942e:	bf00      	nop
  409430:	0040ec10 	.word	0x0040ec10
  409434:	aa23      	add	r2, sp, #140	; 0x8c
  409436:	9909      	ldr	r1, [sp, #36]	; 0x24
  409438:	980a      	ldr	r0, [sp, #40]	; 0x28
  40943a:	f004 f945 	bl	40d6c8 <__ssprint_r>
  40943e:	2800      	cmp	r0, #0
  409440:	f47f a965 	bne.w	40870e <_svfprintf_r+0x1f2>
  409444:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409446:	9d24      	ldr	r5, [sp, #144]	; 0x90
  409448:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40944c:	e5e6      	b.n	40901c <_svfprintf_r+0xb00>
  40944e:	aa23      	add	r2, sp, #140	; 0x8c
  409450:	9909      	ldr	r1, [sp, #36]	; 0x24
  409452:	980a      	ldr	r0, [sp, #40]	; 0x28
  409454:	f004 f938 	bl	40d6c8 <__ssprint_r>
  409458:	2800      	cmp	r0, #0
  40945a:	f47f a958 	bne.w	40870e <_svfprintf_r+0x1f2>
  40945e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409460:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409464:	f7ff ba98 	b.w	408998 <_svfprintf_r+0x47c>
  409468:	9907      	ldr	r1, [sp, #28]
  40946a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40946e:	f43f af19 	beq.w	4092a4 <_svfprintf_r+0xd88>
  409472:	980e      	ldr	r0, [sp, #56]	; 0x38
  409474:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409478:	f1bb 0f00 	cmp.w	fp, #0
  40947c:	8804      	ldrh	r4, [r0, #0]
  40947e:	f100 0704 	add.w	r7, r0, #4
  409482:	f04f 0500 	mov.w	r5, #0
  409486:	f2c0 81b9 	blt.w	4097fc <_svfprintf_r+0x12e0>
  40948a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40948e:	9307      	str	r3, [sp, #28]
  409490:	ea54 0305 	orrs.w	r3, r4, r5
  409494:	970e      	str	r7, [sp, #56]	; 0x38
  409496:	4617      	mov	r7, r2
  409498:	f47f a9e2 	bne.w	408860 <_svfprintf_r+0x344>
  40949c:	f7ff bbbb 	b.w	408c16 <_svfprintf_r+0x6fa>
  4094a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4094a2:	4622      	mov	r2, r4
  4094a4:	4620      	mov	r0, r4
  4094a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4094a8:	4623      	mov	r3, r4
  4094aa:	4621      	mov	r1, r4
  4094ac:	f004 ffaa 	bl	40e404 <__aeabi_dcmpun>
  4094b0:	2800      	cmp	r0, #0
  4094b2:	f040 8317 	bne.w	409ae4 <_svfprintf_r+0x15c8>
  4094b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4094b8:	f1bb 3fff 	cmp.w	fp, #4294967295
  4094bc:	f023 0320 	bic.w	r3, r3, #32
  4094c0:	930d      	str	r3, [sp, #52]	; 0x34
  4094c2:	f000 8270 	beq.w	4099a6 <_svfprintf_r+0x148a>
  4094c6:	2b47      	cmp	r3, #71	; 0x47
  4094c8:	f000 8192 	beq.w	4097f0 <_svfprintf_r+0x12d4>
  4094cc:	9b07      	ldr	r3, [sp, #28]
  4094ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4094d2:	9310      	str	r3, [sp, #64]	; 0x40
  4094d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4094d6:	1e1f      	subs	r7, r3, #0
  4094d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4094da:	9308      	str	r3, [sp, #32]
  4094dc:	bfbb      	ittet	lt
  4094de:	463b      	movlt	r3, r7
  4094e0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4094e4:	2300      	movge	r3, #0
  4094e6:	232d      	movlt	r3, #45	; 0x2d
  4094e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4094ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4094ec:	2b66      	cmp	r3, #102	; 0x66
  4094ee:	f000 825d 	beq.w	4099ac <_svfprintf_r+0x1490>
  4094f2:	2b46      	cmp	r3, #70	; 0x46
  4094f4:	f000 8151 	beq.w	40979a <_svfprintf_r+0x127e>
  4094f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4094fa:	9a08      	ldr	r2, [sp, #32]
  4094fc:	2b45      	cmp	r3, #69	; 0x45
  4094fe:	a821      	add	r0, sp, #132	; 0x84
  409500:	a91e      	add	r1, sp, #120	; 0x78
  409502:	bf0c      	ite	eq
  409504:	f10b 0501 	addeq.w	r5, fp, #1
  409508:	465d      	movne	r5, fp
  40950a:	9004      	str	r0, [sp, #16]
  40950c:	9103      	str	r1, [sp, #12]
  40950e:	a81d      	add	r0, sp, #116	; 0x74
  409510:	2102      	movs	r1, #2
  409512:	463b      	mov	r3, r7
  409514:	9002      	str	r0, [sp, #8]
  409516:	9501      	str	r5, [sp, #4]
  409518:	9100      	str	r1, [sp, #0]
  40951a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40951c:	f001 fbc4 	bl	40aca8 <_dtoa_r>
  409520:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409522:	2b67      	cmp	r3, #103	; 0x67
  409524:	4606      	mov	r6, r0
  409526:	f040 8290 	bne.w	409a4a <_svfprintf_r+0x152e>
  40952a:	9b07      	ldr	r3, [sp, #28]
  40952c:	07da      	lsls	r2, r3, #31
  40952e:	f140 82af 	bpl.w	409a90 <_svfprintf_r+0x1574>
  409532:	1974      	adds	r4, r6, r5
  409534:	9808      	ldr	r0, [sp, #32]
  409536:	4639      	mov	r1, r7
  409538:	2200      	movs	r2, #0
  40953a:	2300      	movs	r3, #0
  40953c:	f004 ff30 	bl	40e3a0 <__aeabi_dcmpeq>
  409540:	2800      	cmp	r0, #0
  409542:	f040 8190 	bne.w	409866 <_svfprintf_r+0x134a>
  409546:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409548:	429c      	cmp	r4, r3
  40954a:	d906      	bls.n	40955a <_svfprintf_r+0x103e>
  40954c:	2130      	movs	r1, #48	; 0x30
  40954e:	1c5a      	adds	r2, r3, #1
  409550:	9221      	str	r2, [sp, #132]	; 0x84
  409552:	7019      	strb	r1, [r3, #0]
  409554:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409556:	429c      	cmp	r4, r3
  409558:	d8f9      	bhi.n	40954e <_svfprintf_r+0x1032>
  40955a:	1b9b      	subs	r3, r3, r6
  40955c:	9312      	str	r3, [sp, #72]	; 0x48
  40955e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409560:	2b47      	cmp	r3, #71	; 0x47
  409562:	f000 8179 	beq.w	409858 <_svfprintf_r+0x133c>
  409566:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409568:	2b65      	cmp	r3, #101	; 0x65
  40956a:	f340 827d 	ble.w	409a68 <_svfprintf_r+0x154c>
  40956e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409570:	2b66      	cmp	r3, #102	; 0x66
  409572:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409574:	9313      	str	r3, [sp, #76]	; 0x4c
  409576:	f000 825b 	beq.w	409a30 <_svfprintf_r+0x1514>
  40957a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40957c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40957e:	428a      	cmp	r2, r1
  409580:	f2c0 8230 	blt.w	4099e4 <_svfprintf_r+0x14c8>
  409584:	9b07      	ldr	r3, [sp, #28]
  409586:	07d9      	lsls	r1, r3, #31
  409588:	f100 8284 	bmi.w	409a94 <_svfprintf_r+0x1578>
  40958c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  409590:	920d      	str	r2, [sp, #52]	; 0x34
  409592:	2267      	movs	r2, #103	; 0x67
  409594:	9211      	str	r2, [sp, #68]	; 0x44
  409596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409598:	2a00      	cmp	r2, #0
  40959a:	f040 8153 	bne.w	409844 <_svfprintf_r+0x1328>
  40959e:	9308      	str	r3, [sp, #32]
  4095a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4095a2:	9307      	str	r3, [sp, #28]
  4095a4:	4693      	mov	fp, r2
  4095a6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4095aa:	f7ff b97d 	b.w	4088a8 <_svfprintf_r+0x38c>
  4095ae:	9907      	ldr	r1, [sp, #28]
  4095b0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  4095b4:	d015      	beq.n	4095e2 <_svfprintf_r+0x10c6>
  4095b6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4095b8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4095bc:	f1bb 0f00 	cmp.w	fp, #0
  4095c0:	8804      	ldrh	r4, [r0, #0]
  4095c2:	f100 0704 	add.w	r7, r0, #4
  4095c6:	f04f 0500 	mov.w	r5, #0
  4095ca:	db16      	blt.n	4095fa <_svfprintf_r+0x10de>
  4095cc:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  4095d0:	9307      	str	r3, [sp, #28]
  4095d2:	ea54 0305 	orrs.w	r3, r4, r5
  4095d6:	970e      	str	r7, [sp, #56]	; 0x38
  4095d8:	f43f ac3a 	beq.w	408e50 <_svfprintf_r+0x934>
  4095dc:	4617      	mov	r7, r2
  4095de:	f7ff b8c2 	b.w	408766 <_svfprintf_r+0x24a>
  4095e2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4095e4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4095e8:	f1bb 0f00 	cmp.w	fp, #0
  4095ec:	680c      	ldr	r4, [r1, #0]
  4095ee:	f101 0704 	add.w	r7, r1, #4
  4095f2:	f04f 0500 	mov.w	r5, #0
  4095f6:	f280 80a5 	bge.w	409744 <_svfprintf_r+0x1228>
  4095fa:	970e      	str	r7, [sp, #56]	; 0x38
  4095fc:	2700      	movs	r7, #0
  4095fe:	f7ff b8b2 	b.w	408766 <_svfprintf_r+0x24a>
  409602:	9b07      	ldr	r3, [sp, #28]
  409604:	06df      	lsls	r7, r3, #27
  409606:	d40b      	bmi.n	409620 <_svfprintf_r+0x1104>
  409608:	9b07      	ldr	r3, [sp, #28]
  40960a:	065e      	lsls	r6, r3, #25
  40960c:	d508      	bpl.n	409620 <_svfprintf_r+0x1104>
  40960e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409610:	6813      	ldr	r3, [r2, #0]
  409612:	3204      	adds	r2, #4
  409614:	920e      	str	r2, [sp, #56]	; 0x38
  409616:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40961a:	801a      	strh	r2, [r3, #0]
  40961c:	f7fe bfa4 	b.w	408568 <_svfprintf_r+0x4c>
  409620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409622:	6813      	ldr	r3, [r2, #0]
  409624:	3204      	adds	r2, #4
  409626:	920e      	str	r2, [sp, #56]	; 0x38
  409628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40962a:	601a      	str	r2, [r3, #0]
  40962c:	f7fe bf9c 	b.w	408568 <_svfprintf_r+0x4c>
  409630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409632:	9b07      	ldr	r3, [sp, #28]
  409634:	f013 0f40 	tst.w	r3, #64	; 0x40
  409638:	4613      	mov	r3, r2
  40963a:	f103 0304 	add.w	r3, r3, #4
  40963e:	bf0c      	ite	eq
  409640:	6814      	ldreq	r4, [r2, #0]
  409642:	8814      	ldrhne	r4, [r2, #0]
  409644:	930e      	str	r3, [sp, #56]	; 0x38
  409646:	2500      	movs	r5, #0
  409648:	f7ff bb02 	b.w	408c50 <_svfprintf_r+0x734>
  40964c:	2700      	movs	r7, #0
  40964e:	45bb      	cmp	fp, r7
  409650:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  409654:	f6ff ac0e 	blt.w	408e74 <_svfprintf_r+0x958>
  409658:	9b07      	ldr	r3, [sp, #28]
  40965a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40965e:	9307      	str	r3, [sp, #28]
  409660:	f7ff bbd6 	b.w	408e10 <_svfprintf_r+0x8f4>
  409664:	4614      	mov	r4, r2
  409666:	3301      	adds	r3, #1
  409668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40966a:	9324      	str	r3, [sp, #144]	; 0x90
  40966c:	442c      	add	r4, r5
  40966e:	2b07      	cmp	r3, #7
  409670:	9425      	str	r4, [sp, #148]	; 0x94
  409672:	e889 0024 	stmia.w	r9, {r2, r5}
  409676:	f73f ae51 	bgt.w	40931c <_svfprintf_r+0xe00>
  40967a:	f109 0908 	add.w	r9, r9, #8
  40967e:	e658      	b.n	409332 <_svfprintf_r+0xe16>
  409680:	aa23      	add	r2, sp, #140	; 0x8c
  409682:	9909      	ldr	r1, [sp, #36]	; 0x24
  409684:	980a      	ldr	r0, [sp, #40]	; 0x28
  409686:	f004 f81f 	bl	40d6c8 <__ssprint_r>
  40968a:	2800      	cmp	r0, #0
  40968c:	f47f a83f 	bne.w	40870e <_svfprintf_r+0x1f2>
  409690:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409692:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409696:	e40f      	b.n	408eb8 <_svfprintf_r+0x99c>
  409698:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40969a:	f7ff bbe4 	b.w	408e66 <_svfprintf_r+0x94a>
  40969e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4096a0:	4ab5      	ldr	r2, [pc, #724]	; (409978 <_svfprintf_r+0x145c>)
  4096a2:	f8c9 2000 	str.w	r2, [r9]
  4096a6:	3301      	adds	r3, #1
  4096a8:	3401      	adds	r4, #1
  4096aa:	2201      	movs	r2, #1
  4096ac:	2b07      	cmp	r3, #7
  4096ae:	9425      	str	r4, [sp, #148]	; 0x94
  4096b0:	9324      	str	r3, [sp, #144]	; 0x90
  4096b2:	f8c9 2004 	str.w	r2, [r9, #4]
  4096b6:	f300 808e 	bgt.w	4097d6 <_svfprintf_r+0x12ba>
  4096ba:	f109 0908 	add.w	r9, r9, #8
  4096be:	b92d      	cbnz	r5, 4096cc <_svfprintf_r+0x11b0>
  4096c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4096c2:	b91b      	cbnz	r3, 4096cc <_svfprintf_r+0x11b0>
  4096c4:	9b07      	ldr	r3, [sp, #28]
  4096c6:	07df      	lsls	r7, r3, #31
  4096c8:	f57f a9b8 	bpl.w	408a3c <_svfprintf_r+0x520>
  4096cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4096ce:	9916      	ldr	r1, [sp, #88]	; 0x58
  4096d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4096d2:	f8c9 2000 	str.w	r2, [r9]
  4096d6:	3301      	adds	r3, #1
  4096d8:	440c      	add	r4, r1
  4096da:	2b07      	cmp	r3, #7
  4096dc:	9425      	str	r4, [sp, #148]	; 0x94
  4096de:	f8c9 1004 	str.w	r1, [r9, #4]
  4096e2:	9324      	str	r3, [sp, #144]	; 0x90
  4096e4:	f300 81c2 	bgt.w	409a6c <_svfprintf_r+0x1550>
  4096e8:	f109 0908 	add.w	r9, r9, #8
  4096ec:	426d      	negs	r5, r5
  4096ee:	2d00      	cmp	r5, #0
  4096f0:	f340 809b 	ble.w	40982a <_svfprintf_r+0x130e>
  4096f4:	4aa1      	ldr	r2, [pc, #644]	; (40997c <_svfprintf_r+0x1460>)
  4096f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4096f8:	2d10      	cmp	r5, #16
  4096fa:	f340 80c3 	ble.w	409884 <_svfprintf_r+0x1368>
  4096fe:	4622      	mov	r2, r4
  409700:	2710      	movs	r7, #16
  409702:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  409706:	9c09      	ldr	r4, [sp, #36]	; 0x24
  409708:	e005      	b.n	409716 <_svfprintf_r+0x11fa>
  40970a:	f109 0908 	add.w	r9, r9, #8
  40970e:	3d10      	subs	r5, #16
  409710:	2d10      	cmp	r5, #16
  409712:	f340 80b6 	ble.w	409882 <_svfprintf_r+0x1366>
  409716:	3301      	adds	r3, #1
  409718:	3210      	adds	r2, #16
  40971a:	2b07      	cmp	r3, #7
  40971c:	9225      	str	r2, [sp, #148]	; 0x94
  40971e:	9324      	str	r3, [sp, #144]	; 0x90
  409720:	f8c9 a000 	str.w	sl, [r9]
  409724:	f8c9 7004 	str.w	r7, [r9, #4]
  409728:	ddef      	ble.n	40970a <_svfprintf_r+0x11ee>
  40972a:	aa23      	add	r2, sp, #140	; 0x8c
  40972c:	4621      	mov	r1, r4
  40972e:	4658      	mov	r0, fp
  409730:	f003 ffca 	bl	40d6c8 <__ssprint_r>
  409734:	2800      	cmp	r0, #0
  409736:	f47e afea 	bne.w	40870e <_svfprintf_r+0x1f2>
  40973a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40973c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40973e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409742:	e7e4      	b.n	40970e <_svfprintf_r+0x11f2>
  409744:	9a07      	ldr	r2, [sp, #28]
  409746:	f7ff ba38 	b.w	408bba <_svfprintf_r+0x69e>
  40974a:	9a07      	ldr	r2, [sp, #28]
  40974c:	e590      	b.n	409270 <_svfprintf_r+0xd54>
  40974e:	9b07      	ldr	r3, [sp, #28]
  409750:	f043 0320 	orr.w	r3, r3, #32
  409754:	9307      	str	r3, [sp, #28]
  409756:	f108 0801 	add.w	r8, r8, #1
  40975a:	f898 3000 	ldrb.w	r3, [r8]
  40975e:	f7fe bf36 	b.w	4085ce <_svfprintf_r+0xb2>
  409762:	aa23      	add	r2, sp, #140	; 0x8c
  409764:	9909      	ldr	r1, [sp, #36]	; 0x24
  409766:	980a      	ldr	r0, [sp, #40]	; 0x28
  409768:	f003 ffae 	bl	40d6c8 <__ssprint_r>
  40976c:	2800      	cmp	r0, #0
  40976e:	f47e afce 	bne.w	40870e <_svfprintf_r+0x1f2>
  409772:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409774:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409778:	f7ff bbb6 	b.w	408ee8 <_svfprintf_r+0x9cc>
  40977c:	2140      	movs	r1, #64	; 0x40
  40977e:	980a      	ldr	r0, [sp, #40]	; 0x28
  409780:	f002 fede 	bl	40c540 <_malloc_r>
  409784:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409786:	6010      	str	r0, [r2, #0]
  409788:	6110      	str	r0, [r2, #16]
  40978a:	2800      	cmp	r0, #0
  40978c:	f000 81e5 	beq.w	409b5a <_svfprintf_r+0x163e>
  409790:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409792:	2340      	movs	r3, #64	; 0x40
  409794:	6153      	str	r3, [r2, #20]
  409796:	f7fe bed8 	b.w	40854a <_svfprintf_r+0x2e>
  40979a:	a821      	add	r0, sp, #132	; 0x84
  40979c:	a91e      	add	r1, sp, #120	; 0x78
  40979e:	9004      	str	r0, [sp, #16]
  4097a0:	9103      	str	r1, [sp, #12]
  4097a2:	a81d      	add	r0, sp, #116	; 0x74
  4097a4:	2103      	movs	r1, #3
  4097a6:	9002      	str	r0, [sp, #8]
  4097a8:	9a08      	ldr	r2, [sp, #32]
  4097aa:	f8cd b004 	str.w	fp, [sp, #4]
  4097ae:	463b      	mov	r3, r7
  4097b0:	9100      	str	r1, [sp, #0]
  4097b2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4097b4:	f001 fa78 	bl	40aca8 <_dtoa_r>
  4097b8:	465d      	mov	r5, fp
  4097ba:	4606      	mov	r6, r0
  4097bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4097be:	2b46      	cmp	r3, #70	; 0x46
  4097c0:	eb06 0405 	add.w	r4, r6, r5
  4097c4:	f47f aeb6 	bne.w	409534 <_svfprintf_r+0x1018>
  4097c8:	7833      	ldrb	r3, [r6, #0]
  4097ca:	2b30      	cmp	r3, #48	; 0x30
  4097cc:	f000 817c 	beq.w	409ac8 <_svfprintf_r+0x15ac>
  4097d0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4097d2:	442c      	add	r4, r5
  4097d4:	e6ae      	b.n	409534 <_svfprintf_r+0x1018>
  4097d6:	aa23      	add	r2, sp, #140	; 0x8c
  4097d8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4097da:	980a      	ldr	r0, [sp, #40]	; 0x28
  4097dc:	f003 ff74 	bl	40d6c8 <__ssprint_r>
  4097e0:	2800      	cmp	r0, #0
  4097e2:	f47e af94 	bne.w	40870e <_svfprintf_r+0x1f2>
  4097e6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4097e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4097ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4097ee:	e766      	b.n	4096be <_svfprintf_r+0x11a2>
  4097f0:	f1bb 0f00 	cmp.w	fp, #0
  4097f4:	bf08      	it	eq
  4097f6:	f04f 0b01 	moveq.w	fp, #1
  4097fa:	e667      	b.n	4094cc <_svfprintf_r+0xfb0>
  4097fc:	970e      	str	r7, [sp, #56]	; 0x38
  4097fe:	4617      	mov	r7, r2
  409800:	e55e      	b.n	4092c0 <_svfprintf_r+0xda4>
  409802:	4630      	mov	r0, r6
  409804:	f7fe fe1c 	bl	408440 <strlen>
  409808:	46a3      	mov	fp, r4
  40980a:	4603      	mov	r3, r0
  40980c:	900d      	str	r0, [sp, #52]	; 0x34
  40980e:	f7ff baf4 	b.w	408dfa <_svfprintf_r+0x8de>
  409812:	aa23      	add	r2, sp, #140	; 0x8c
  409814:	9909      	ldr	r1, [sp, #36]	; 0x24
  409816:	980a      	ldr	r0, [sp, #40]	; 0x28
  409818:	f003 ff56 	bl	40d6c8 <__ssprint_r>
  40981c:	2800      	cmp	r0, #0
  40981e:	f47e af76 	bne.w	40870e <_svfprintf_r+0x1f2>
  409822:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409824:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409826:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40982a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40982c:	f8c9 6000 	str.w	r6, [r9]
  409830:	3301      	adds	r3, #1
  409832:	440c      	add	r4, r1
  409834:	2b07      	cmp	r3, #7
  409836:	9425      	str	r4, [sp, #148]	; 0x94
  409838:	9324      	str	r3, [sp, #144]	; 0x90
  40983a:	f8c9 1004 	str.w	r1, [r9, #4]
  40983e:	f77f a8fb 	ble.w	408a38 <_svfprintf_r+0x51c>
  409842:	e411      	b.n	409068 <_svfprintf_r+0xb4c>
  409844:	272d      	movs	r7, #45	; 0x2d
  409846:	9308      	str	r3, [sp, #32]
  409848:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40984a:	9307      	str	r3, [sp, #28]
  40984c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  409850:	f04f 0b00 	mov.w	fp, #0
  409854:	f7ff b829 	b.w	4088aa <_svfprintf_r+0x38e>
  409858:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40985a:	1cdd      	adds	r5, r3, #3
  40985c:	db1e      	blt.n	40989c <_svfprintf_r+0x1380>
  40985e:	459b      	cmp	fp, r3
  409860:	db1c      	blt.n	40989c <_svfprintf_r+0x1380>
  409862:	9313      	str	r3, [sp, #76]	; 0x4c
  409864:	e689      	b.n	40957a <_svfprintf_r+0x105e>
  409866:	4623      	mov	r3, r4
  409868:	e677      	b.n	40955a <_svfprintf_r+0x103e>
  40986a:	aa23      	add	r2, sp, #140	; 0x8c
  40986c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40986e:	980a      	ldr	r0, [sp, #40]	; 0x28
  409870:	f003 ff2a 	bl	40d6c8 <__ssprint_r>
  409874:	2800      	cmp	r0, #0
  409876:	f47e af4a 	bne.w	40870e <_svfprintf_r+0x1f2>
  40987a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40987c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409880:	e459      	b.n	409136 <_svfprintf_r+0xc1a>
  409882:	4614      	mov	r4, r2
  409884:	3301      	adds	r3, #1
  409886:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409888:	9324      	str	r3, [sp, #144]	; 0x90
  40988a:	442c      	add	r4, r5
  40988c:	2b07      	cmp	r3, #7
  40988e:	9425      	str	r4, [sp, #148]	; 0x94
  409890:	e889 0024 	stmia.w	r9, {r2, r5}
  409894:	dcbd      	bgt.n	409812 <_svfprintf_r+0x12f6>
  409896:	f109 0908 	add.w	r9, r9, #8
  40989a:	e7c6      	b.n	40982a <_svfprintf_r+0x130e>
  40989c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40989e:	3a02      	subs	r2, #2
  4098a0:	9211      	str	r2, [sp, #68]	; 0x44
  4098a2:	3b01      	subs	r3, #1
  4098a4:	2b00      	cmp	r3, #0
  4098a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4098aa:	931d      	str	r3, [sp, #116]	; 0x74
  4098ac:	bfb8      	it	lt
  4098ae:	425b      	neglt	r3, r3
  4098b0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  4098b4:	bfb4      	ite	lt
  4098b6:	222d      	movlt	r2, #45	; 0x2d
  4098b8:	222b      	movge	r2, #43	; 0x2b
  4098ba:	2b09      	cmp	r3, #9
  4098bc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4098c0:	f340 80f1 	ble.w	409aa6 <_svfprintf_r+0x158a>
  4098c4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4098c8:	4604      	mov	r4, r0
  4098ca:	4a2d      	ldr	r2, [pc, #180]	; (409980 <_svfprintf_r+0x1464>)
  4098cc:	fb82 2103 	smull	r2, r1, r2, r3
  4098d0:	17da      	asrs	r2, r3, #31
  4098d2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  4098d6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4098da:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  4098de:	f103 0130 	add.w	r1, r3, #48	; 0x30
  4098e2:	2a09      	cmp	r2, #9
  4098e4:	4613      	mov	r3, r2
  4098e6:	f804 1d01 	strb.w	r1, [r4, #-1]!
  4098ea:	dcee      	bgt.n	4098ca <_svfprintf_r+0x13ae>
  4098ec:	4621      	mov	r1, r4
  4098ee:	3330      	adds	r3, #48	; 0x30
  4098f0:	b2da      	uxtb	r2, r3
  4098f2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4098f6:	4288      	cmp	r0, r1
  4098f8:	f240 813a 	bls.w	409b70 <_svfprintf_r+0x1654>
  4098fc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  409900:	4623      	mov	r3, r4
  409902:	e001      	b.n	409908 <_svfprintf_r+0x13ec>
  409904:	f813 2b01 	ldrb.w	r2, [r3], #1
  409908:	f801 2b01 	strb.w	r2, [r1], #1
  40990c:	4298      	cmp	r0, r3
  40990e:	d1f9      	bne.n	409904 <_svfprintf_r+0x13e8>
  409910:	1c43      	adds	r3, r0, #1
  409912:	1b1b      	subs	r3, r3, r4
  409914:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  409918:	4413      	add	r3, r2
  40991a:	aa1f      	add	r2, sp, #124	; 0x7c
  40991c:	1a9b      	subs	r3, r3, r2
  40991e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409920:	9319      	str	r3, [sp, #100]	; 0x64
  409922:	2a01      	cmp	r2, #1
  409924:	4413      	add	r3, r2
  409926:	930d      	str	r3, [sp, #52]	; 0x34
  409928:	f340 80ea 	ble.w	409b00 <_svfprintf_r+0x15e4>
  40992c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40992e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409930:	4413      	add	r3, r2
  409932:	2200      	movs	r2, #0
  409934:	930d      	str	r3, [sp, #52]	; 0x34
  409936:	9213      	str	r2, [sp, #76]	; 0x4c
  409938:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40993c:	e62b      	b.n	409596 <_svfprintf_r+0x107a>
  40993e:	aa23      	add	r2, sp, #140	; 0x8c
  409940:	9909      	ldr	r1, [sp, #36]	; 0x24
  409942:	980a      	ldr	r0, [sp, #40]	; 0x28
  409944:	f003 fec0 	bl	40d6c8 <__ssprint_r>
  409948:	2800      	cmp	r0, #0
  40994a:	f47e aee0 	bne.w	40870e <_svfprintf_r+0x1f2>
  40994e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409950:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409952:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409956:	e4f6      	b.n	409346 <_svfprintf_r+0xe2a>
  409958:	2d06      	cmp	r5, #6
  40995a:	462b      	mov	r3, r5
  40995c:	bf28      	it	cs
  40995e:	2306      	movcs	r3, #6
  409960:	930d      	str	r3, [sp, #52]	; 0x34
  409962:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409966:	46b3      	mov	fp, r6
  409968:	970e      	str	r7, [sp, #56]	; 0x38
  40996a:	9613      	str	r6, [sp, #76]	; 0x4c
  40996c:	4637      	mov	r7, r6
  40996e:	9308      	str	r3, [sp, #32]
  409970:	4e04      	ldr	r6, [pc, #16]	; (409984 <_svfprintf_r+0x1468>)
  409972:	f7fe bf99 	b.w	4088a8 <_svfprintf_r+0x38c>
  409976:	bf00      	nop
  409978:	0040ec60 	.word	0x0040ec60
  40997c:	0040ec10 	.word	0x0040ec10
  409980:	66666667 	.word	0x66666667
  409984:	0040ec58 	.word	0x0040ec58
  409988:	aa23      	add	r2, sp, #140	; 0x8c
  40998a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40998c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40998e:	f003 fe9b 	bl	40d6c8 <__ssprint_r>
  409992:	2800      	cmp	r0, #0
  409994:	f47e aebb 	bne.w	40870e <_svfprintf_r+0x1f2>
  409998:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40999a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40999c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40999e:	1ad3      	subs	r3, r2, r3
  4099a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4099a4:	e4e7      	b.n	409376 <_svfprintf_r+0xe5a>
  4099a6:	f04f 0b06 	mov.w	fp, #6
  4099aa:	e58f      	b.n	4094cc <_svfprintf_r+0xfb0>
  4099ac:	a821      	add	r0, sp, #132	; 0x84
  4099ae:	a91e      	add	r1, sp, #120	; 0x78
  4099b0:	9004      	str	r0, [sp, #16]
  4099b2:	9103      	str	r1, [sp, #12]
  4099b4:	a81d      	add	r0, sp, #116	; 0x74
  4099b6:	2103      	movs	r1, #3
  4099b8:	9002      	str	r0, [sp, #8]
  4099ba:	9a08      	ldr	r2, [sp, #32]
  4099bc:	f8cd b004 	str.w	fp, [sp, #4]
  4099c0:	463b      	mov	r3, r7
  4099c2:	9100      	str	r1, [sp, #0]
  4099c4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4099c6:	f001 f96f 	bl	40aca8 <_dtoa_r>
  4099ca:	465d      	mov	r5, fp
  4099cc:	4606      	mov	r6, r0
  4099ce:	eb00 040b 	add.w	r4, r0, fp
  4099d2:	e6f9      	b.n	4097c8 <_svfprintf_r+0x12ac>
  4099d4:	9307      	str	r3, [sp, #28]
  4099d6:	f7ff b959 	b.w	408c8c <_svfprintf_r+0x770>
  4099da:	272d      	movs	r7, #45	; 0x2d
  4099dc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4099e0:	f7ff b8b2 	b.w	408b48 <_svfprintf_r+0x62c>
  4099e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4099e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4099e8:	4413      	add	r3, r2
  4099ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4099ec:	930d      	str	r3, [sp, #52]	; 0x34
  4099ee:	2a00      	cmp	r2, #0
  4099f0:	dd7e      	ble.n	409af0 <_svfprintf_r+0x15d4>
  4099f2:	2267      	movs	r2, #103	; 0x67
  4099f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4099f8:	9211      	str	r2, [sp, #68]	; 0x44
  4099fa:	e5cc      	b.n	409596 <_svfprintf_r+0x107a>
  4099fc:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  409a00:	970e      	str	r7, [sp, #56]	; 0x38
  409a02:	9308      	str	r3, [sp, #32]
  409a04:	950d      	str	r5, [sp, #52]	; 0x34
  409a06:	4683      	mov	fp, r0
  409a08:	9013      	str	r0, [sp, #76]	; 0x4c
  409a0a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  409a0e:	f7fe bf4b 	b.w	4088a8 <_svfprintf_r+0x38c>
  409a12:	9b07      	ldr	r3, [sp, #28]
  409a14:	07db      	lsls	r3, r3, #31
  409a16:	465f      	mov	r7, fp
  409a18:	d505      	bpl.n	409a26 <_svfprintf_r+0x150a>
  409a1a:	ae40      	add	r6, sp, #256	; 0x100
  409a1c:	2330      	movs	r3, #48	; 0x30
  409a1e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  409a22:	f7fe bf37 	b.w	408894 <_svfprintf_r+0x378>
  409a26:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  409a2a:	ae30      	add	r6, sp, #192	; 0xc0
  409a2c:	f7fe bf35 	b.w	40889a <_svfprintf_r+0x37e>
  409a30:	2b00      	cmp	r3, #0
  409a32:	dd7d      	ble.n	409b30 <_svfprintf_r+0x1614>
  409a34:	f1bb 0f00 	cmp.w	fp, #0
  409a38:	d13d      	bne.n	409ab6 <_svfprintf_r+0x159a>
  409a3a:	9a07      	ldr	r2, [sp, #28]
  409a3c:	07d4      	lsls	r4, r2, #31
  409a3e:	d43a      	bmi.n	409ab6 <_svfprintf_r+0x159a>
  409a40:	461a      	mov	r2, r3
  409a42:	920d      	str	r2, [sp, #52]	; 0x34
  409a44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409a48:	e5a5      	b.n	409596 <_svfprintf_r+0x107a>
  409a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409a4c:	2b47      	cmp	r3, #71	; 0x47
  409a4e:	f47f ad70 	bne.w	409532 <_svfprintf_r+0x1016>
  409a52:	9b07      	ldr	r3, [sp, #28]
  409a54:	07db      	lsls	r3, r3, #31
  409a56:	f53f aeb1 	bmi.w	4097bc <_svfprintf_r+0x12a0>
  409a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409a5c:	1b9b      	subs	r3, r3, r6
  409a5e:	9312      	str	r3, [sp, #72]	; 0x48
  409a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409a62:	2b47      	cmp	r3, #71	; 0x47
  409a64:	f43f aef8 	beq.w	409858 <_svfprintf_r+0x133c>
  409a68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409a6a:	e71a      	b.n	4098a2 <_svfprintf_r+0x1386>
  409a6c:	aa23      	add	r2, sp, #140	; 0x8c
  409a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
  409a70:	980a      	ldr	r0, [sp, #40]	; 0x28
  409a72:	f003 fe29 	bl	40d6c8 <__ssprint_r>
  409a76:	2800      	cmp	r0, #0
  409a78:	f47e ae49 	bne.w	40870e <_svfprintf_r+0x1f2>
  409a7c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  409a7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409a80:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409a82:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409a86:	e631      	b.n	4096ec <_svfprintf_r+0x11d0>
  409a88:	46a0      	mov	r8, r4
  409a8a:	2500      	movs	r5, #0
  409a8c:	f7fe bda1 	b.w	4085d2 <_svfprintf_r+0xb6>
  409a90:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409a92:	e562      	b.n	40955a <_svfprintf_r+0x103e>
  409a94:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409a96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409a98:	4413      	add	r3, r2
  409a9a:	2267      	movs	r2, #103	; 0x67
  409a9c:	930d      	str	r3, [sp, #52]	; 0x34
  409a9e:	9211      	str	r2, [sp, #68]	; 0x44
  409aa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409aa4:	e577      	b.n	409596 <_svfprintf_r+0x107a>
  409aa6:	3330      	adds	r3, #48	; 0x30
  409aa8:	2230      	movs	r2, #48	; 0x30
  409aaa:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  409aae:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  409ab2:	ab20      	add	r3, sp, #128	; 0x80
  409ab4:	e731      	b.n	40991a <_svfprintf_r+0x13fe>
  409ab6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409ab8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409aba:	189d      	adds	r5, r3, r2
  409abc:	eb05 030b 	add.w	r3, r5, fp
  409ac0:	930d      	str	r3, [sp, #52]	; 0x34
  409ac2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409ac6:	e566      	b.n	409596 <_svfprintf_r+0x107a>
  409ac8:	9808      	ldr	r0, [sp, #32]
  409aca:	4639      	mov	r1, r7
  409acc:	2200      	movs	r2, #0
  409ace:	2300      	movs	r3, #0
  409ad0:	f004 fc66 	bl	40e3a0 <__aeabi_dcmpeq>
  409ad4:	2800      	cmp	r0, #0
  409ad6:	f47f ae7b 	bne.w	4097d0 <_svfprintf_r+0x12b4>
  409ada:	f1c5 0501 	rsb	r5, r5, #1
  409ade:	951d      	str	r5, [sp, #116]	; 0x74
  409ae0:	442c      	add	r4, r5
  409ae2:	e527      	b.n	409534 <_svfprintf_r+0x1018>
  409ae4:	4e32      	ldr	r6, [pc, #200]	; (409bb0 <_svfprintf_r+0x1694>)
  409ae6:	4b33      	ldr	r3, [pc, #204]	; (409bb4 <_svfprintf_r+0x1698>)
  409ae8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  409aec:	f7ff b82e 	b.w	408b4c <_svfprintf_r+0x630>
  409af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409af4:	f1c3 0301 	rsb	r3, r3, #1
  409af8:	441a      	add	r2, r3
  409afa:	4613      	mov	r3, r2
  409afc:	920d      	str	r2, [sp, #52]	; 0x34
  409afe:	e778      	b.n	4099f2 <_svfprintf_r+0x14d6>
  409b00:	9b07      	ldr	r3, [sp, #28]
  409b02:	f013 0301 	ands.w	r3, r3, #1
  409b06:	f47f af11 	bne.w	40992c <_svfprintf_r+0x1410>
  409b0a:	9313      	str	r3, [sp, #76]	; 0x4c
  409b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409b0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409b12:	e540      	b.n	409596 <_svfprintf_r+0x107a>
  409b14:	980e      	ldr	r0, [sp, #56]	; 0x38
  409b16:	f898 3001 	ldrb.w	r3, [r8, #1]
  409b1a:	6805      	ldr	r5, [r0, #0]
  409b1c:	3004      	adds	r0, #4
  409b1e:	2d00      	cmp	r5, #0
  409b20:	900e      	str	r0, [sp, #56]	; 0x38
  409b22:	46a0      	mov	r8, r4
  409b24:	f6be ad53 	bge.w	4085ce <_svfprintf_r+0xb2>
  409b28:	f04f 35ff 	mov.w	r5, #4294967295
  409b2c:	f7fe bd4f 	b.w	4085ce <_svfprintf_r+0xb2>
  409b30:	f1bb 0f00 	cmp.w	fp, #0
  409b34:	d102      	bne.n	409b3c <_svfprintf_r+0x1620>
  409b36:	9b07      	ldr	r3, [sp, #28]
  409b38:	07d8      	lsls	r0, r3, #31
  409b3a:	d507      	bpl.n	409b4c <_svfprintf_r+0x1630>
  409b3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  409b3e:	1c5d      	adds	r5, r3, #1
  409b40:	eb05 030b 	add.w	r3, r5, fp
  409b44:	930d      	str	r3, [sp, #52]	; 0x34
  409b46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409b4a:	e524      	b.n	409596 <_svfprintf_r+0x107a>
  409b4c:	2301      	movs	r3, #1
  409b4e:	930d      	str	r3, [sp, #52]	; 0x34
  409b50:	e521      	b.n	409596 <_svfprintf_r+0x107a>
  409b52:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409b56:	f7ff b921 	b.w	408d9c <_svfprintf_r+0x880>
  409b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409b5c:	230c      	movs	r3, #12
  409b5e:	6013      	str	r3, [r2, #0]
  409b60:	f04f 30ff 	mov.w	r0, #4294967295
  409b64:	f7fe bddc 	b.w	408720 <_svfprintf_r+0x204>
  409b68:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409b6c:	f7ff b8f9 	b.w	408d62 <_svfprintf_r+0x846>
  409b70:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  409b74:	e6d1      	b.n	40991a <_svfprintf_r+0x13fe>
  409b76:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409b7a:	f7fe bdd9 	b.w	408730 <_svfprintf_r+0x214>
  409b7e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409b82:	f7ff b857 	b.w	408c34 <_svfprintf_r+0x718>
  409b86:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409b8a:	f7ff b825 	b.w	408bd8 <_svfprintf_r+0x6bc>
  409b8e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409b92:	f7ff b94c 	b.w	408e2e <_svfprintf_r+0x912>
  409b96:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409b9a:	f7fe bff3 	b.w	408b84 <_svfprintf_r+0x668>
  409b9e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409ba2:	f7fe bfa3 	b.w	408aec <_svfprintf_r+0x5d0>
  409ba6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409baa:	f7fe be33 	b.w	408814 <_svfprintf_r+0x2f8>
  409bae:	bf00      	nop
  409bb0:	0040ec2c 	.word	0x0040ec2c
  409bb4:	0040ec28 	.word	0x0040ec28

00409bb8 <__sprint_r.part.0>:
  409bb8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  409bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409bbe:	049c      	lsls	r4, r3, #18
  409bc0:	4692      	mov	sl, r2
  409bc2:	d52c      	bpl.n	409c1e <__sprint_r.part.0+0x66>
  409bc4:	6893      	ldr	r3, [r2, #8]
  409bc6:	6812      	ldr	r2, [r2, #0]
  409bc8:	b33b      	cbz	r3, 409c1a <__sprint_r.part.0+0x62>
  409bca:	460f      	mov	r7, r1
  409bcc:	4680      	mov	r8, r0
  409bce:	f102 0908 	add.w	r9, r2, #8
  409bd2:	e919 0060 	ldmdb	r9, {r5, r6}
  409bd6:	08b6      	lsrs	r6, r6, #2
  409bd8:	d017      	beq.n	409c0a <__sprint_r.part.0+0x52>
  409bda:	3d04      	subs	r5, #4
  409bdc:	2400      	movs	r4, #0
  409bde:	e001      	b.n	409be4 <__sprint_r.part.0+0x2c>
  409be0:	42a6      	cmp	r6, r4
  409be2:	d010      	beq.n	409c06 <__sprint_r.part.0+0x4e>
  409be4:	463a      	mov	r2, r7
  409be6:	f855 1f04 	ldr.w	r1, [r5, #4]!
  409bea:	4640      	mov	r0, r8
  409bec:	f002 f92a 	bl	40be44 <_fputwc_r>
  409bf0:	1c43      	adds	r3, r0, #1
  409bf2:	f104 0401 	add.w	r4, r4, #1
  409bf6:	d1f3      	bne.n	409be0 <__sprint_r.part.0+0x28>
  409bf8:	2300      	movs	r3, #0
  409bfa:	f8ca 3008 	str.w	r3, [sl, #8]
  409bfe:	f8ca 3004 	str.w	r3, [sl, #4]
  409c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409c06:	f8da 3008 	ldr.w	r3, [sl, #8]
  409c0a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  409c0e:	f8ca 3008 	str.w	r3, [sl, #8]
  409c12:	f109 0908 	add.w	r9, r9, #8
  409c16:	2b00      	cmp	r3, #0
  409c18:	d1db      	bne.n	409bd2 <__sprint_r.part.0+0x1a>
  409c1a:	2000      	movs	r0, #0
  409c1c:	e7ec      	b.n	409bf8 <__sprint_r.part.0+0x40>
  409c1e:	f002 fa59 	bl	40c0d4 <__sfvwrite_r>
  409c22:	2300      	movs	r3, #0
  409c24:	f8ca 3008 	str.w	r3, [sl, #8]
  409c28:	f8ca 3004 	str.w	r3, [sl, #4]
  409c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00409c30 <_vfiprintf_r>:
  409c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c34:	b0ab      	sub	sp, #172	; 0xac
  409c36:	461c      	mov	r4, r3
  409c38:	9100      	str	r1, [sp, #0]
  409c3a:	4690      	mov	r8, r2
  409c3c:	9304      	str	r3, [sp, #16]
  409c3e:	9005      	str	r0, [sp, #20]
  409c40:	b118      	cbz	r0, 409c4a <_vfiprintf_r+0x1a>
  409c42:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409c44:	2b00      	cmp	r3, #0
  409c46:	f000 80de 	beq.w	409e06 <_vfiprintf_r+0x1d6>
  409c4a:	9800      	ldr	r0, [sp, #0]
  409c4c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  409c50:	b28a      	uxth	r2, r1
  409c52:	0495      	lsls	r5, r2, #18
  409c54:	d407      	bmi.n	409c66 <_vfiprintf_r+0x36>
  409c56:	6e43      	ldr	r3, [r0, #100]	; 0x64
  409c58:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  409c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  409c60:	8182      	strh	r2, [r0, #12]
  409c62:	6643      	str	r3, [r0, #100]	; 0x64
  409c64:	b292      	uxth	r2, r2
  409c66:	0711      	lsls	r1, r2, #28
  409c68:	f140 80b1 	bpl.w	409dce <_vfiprintf_r+0x19e>
  409c6c:	9b00      	ldr	r3, [sp, #0]
  409c6e:	691b      	ldr	r3, [r3, #16]
  409c70:	2b00      	cmp	r3, #0
  409c72:	f000 80ac 	beq.w	409dce <_vfiprintf_r+0x19e>
  409c76:	f002 021a 	and.w	r2, r2, #26
  409c7a:	2a0a      	cmp	r2, #10
  409c7c:	f000 80b5 	beq.w	409dea <_vfiprintf_r+0x1ba>
  409c80:	2300      	movs	r3, #0
  409c82:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  409c86:	9302      	str	r3, [sp, #8]
  409c88:	930f      	str	r3, [sp, #60]	; 0x3c
  409c8a:	930e      	str	r3, [sp, #56]	; 0x38
  409c8c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  409c90:	46da      	mov	sl, fp
  409c92:	f898 3000 	ldrb.w	r3, [r8]
  409c96:	4644      	mov	r4, r8
  409c98:	b1fb      	cbz	r3, 409cda <_vfiprintf_r+0xaa>
  409c9a:	2b25      	cmp	r3, #37	; 0x25
  409c9c:	d102      	bne.n	409ca4 <_vfiprintf_r+0x74>
  409c9e:	e01c      	b.n	409cda <_vfiprintf_r+0xaa>
  409ca0:	2b25      	cmp	r3, #37	; 0x25
  409ca2:	d003      	beq.n	409cac <_vfiprintf_r+0x7c>
  409ca4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  409ca8:	2b00      	cmp	r3, #0
  409caa:	d1f9      	bne.n	409ca0 <_vfiprintf_r+0x70>
  409cac:	ebc8 0504 	rsb	r5, r8, r4
  409cb0:	b19d      	cbz	r5, 409cda <_vfiprintf_r+0xaa>
  409cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409cb6:	f8ca 8000 	str.w	r8, [sl]
  409cba:	3301      	adds	r3, #1
  409cbc:	442a      	add	r2, r5
  409cbe:	2b07      	cmp	r3, #7
  409cc0:	f8ca 5004 	str.w	r5, [sl, #4]
  409cc4:	920f      	str	r2, [sp, #60]	; 0x3c
  409cc6:	930e      	str	r3, [sp, #56]	; 0x38
  409cc8:	dd7b      	ble.n	409dc2 <_vfiprintf_r+0x192>
  409cca:	2a00      	cmp	r2, #0
  409ccc:	f040 8528 	bne.w	40a720 <_vfiprintf_r+0xaf0>
  409cd0:	9b02      	ldr	r3, [sp, #8]
  409cd2:	920e      	str	r2, [sp, #56]	; 0x38
  409cd4:	442b      	add	r3, r5
  409cd6:	46da      	mov	sl, fp
  409cd8:	9302      	str	r3, [sp, #8]
  409cda:	7823      	ldrb	r3, [r4, #0]
  409cdc:	2b00      	cmp	r3, #0
  409cde:	f000 843e 	beq.w	40a55e <_vfiprintf_r+0x92e>
  409ce2:	2100      	movs	r1, #0
  409ce4:	f04f 0300 	mov.w	r3, #0
  409ce8:	f04f 32ff 	mov.w	r2, #4294967295
  409cec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409cf0:	f104 0801 	add.w	r8, r4, #1
  409cf4:	7863      	ldrb	r3, [r4, #1]
  409cf6:	9201      	str	r2, [sp, #4]
  409cf8:	4608      	mov	r0, r1
  409cfa:	460e      	mov	r6, r1
  409cfc:	460c      	mov	r4, r1
  409cfe:	f108 0801 	add.w	r8, r8, #1
  409d02:	f1a3 0220 	sub.w	r2, r3, #32
  409d06:	2a58      	cmp	r2, #88	; 0x58
  409d08:	f200 8393 	bhi.w	40a432 <_vfiprintf_r+0x802>
  409d0c:	e8df f012 	tbh	[pc, r2, lsl #1]
  409d10:	03910346 	.word	0x03910346
  409d14:	034e0391 	.word	0x034e0391
  409d18:	03910391 	.word	0x03910391
  409d1c:	03910391 	.word	0x03910391
  409d20:	03910391 	.word	0x03910391
  409d24:	02670289 	.word	0x02670289
  409d28:	00800391 	.word	0x00800391
  409d2c:	0391026c 	.word	0x0391026c
  409d30:	025901c6 	.word	0x025901c6
  409d34:	02590259 	.word	0x02590259
  409d38:	02590259 	.word	0x02590259
  409d3c:	02590259 	.word	0x02590259
  409d40:	02590259 	.word	0x02590259
  409d44:	03910391 	.word	0x03910391
  409d48:	03910391 	.word	0x03910391
  409d4c:	03910391 	.word	0x03910391
  409d50:	03910391 	.word	0x03910391
  409d54:	03910391 	.word	0x03910391
  409d58:	039101cb 	.word	0x039101cb
  409d5c:	03910391 	.word	0x03910391
  409d60:	03910391 	.word	0x03910391
  409d64:	03910391 	.word	0x03910391
  409d68:	03910391 	.word	0x03910391
  409d6c:	02140391 	.word	0x02140391
  409d70:	03910391 	.word	0x03910391
  409d74:	03910391 	.word	0x03910391
  409d78:	02ee0391 	.word	0x02ee0391
  409d7c:	03910391 	.word	0x03910391
  409d80:	03910311 	.word	0x03910311
  409d84:	03910391 	.word	0x03910391
  409d88:	03910391 	.word	0x03910391
  409d8c:	03910391 	.word	0x03910391
  409d90:	03910391 	.word	0x03910391
  409d94:	03340391 	.word	0x03340391
  409d98:	0391038a 	.word	0x0391038a
  409d9c:	03910391 	.word	0x03910391
  409da0:	038a0367 	.word	0x038a0367
  409da4:	03910391 	.word	0x03910391
  409da8:	0391036c 	.word	0x0391036c
  409dac:	02950379 	.word	0x02950379
  409db0:	02e90085 	.word	0x02e90085
  409db4:	029b0391 	.word	0x029b0391
  409db8:	02ba0391 	.word	0x02ba0391
  409dbc:	03910391 	.word	0x03910391
  409dc0:	0353      	.short	0x0353
  409dc2:	f10a 0a08 	add.w	sl, sl, #8
  409dc6:	9b02      	ldr	r3, [sp, #8]
  409dc8:	442b      	add	r3, r5
  409dca:	9302      	str	r3, [sp, #8]
  409dcc:	e785      	b.n	409cda <_vfiprintf_r+0xaa>
  409dce:	9900      	ldr	r1, [sp, #0]
  409dd0:	9805      	ldr	r0, [sp, #20]
  409dd2:	f000 fe61 	bl	40aa98 <__swsetup_r>
  409dd6:	2800      	cmp	r0, #0
  409dd8:	f040 8558 	bne.w	40a88c <_vfiprintf_r+0xc5c>
  409ddc:	9b00      	ldr	r3, [sp, #0]
  409dde:	899a      	ldrh	r2, [r3, #12]
  409de0:	f002 021a 	and.w	r2, r2, #26
  409de4:	2a0a      	cmp	r2, #10
  409de6:	f47f af4b 	bne.w	409c80 <_vfiprintf_r+0x50>
  409dea:	9900      	ldr	r1, [sp, #0]
  409dec:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  409df0:	2b00      	cmp	r3, #0
  409df2:	f6ff af45 	blt.w	409c80 <_vfiprintf_r+0x50>
  409df6:	4623      	mov	r3, r4
  409df8:	4642      	mov	r2, r8
  409dfa:	9805      	ldr	r0, [sp, #20]
  409dfc:	f000 fe16 	bl	40aa2c <__sbprintf>
  409e00:	b02b      	add	sp, #172	; 0xac
  409e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e06:	f001 ffb3 	bl	40bd70 <__sinit>
  409e0a:	e71e      	b.n	409c4a <_vfiprintf_r+0x1a>
  409e0c:	4264      	negs	r4, r4
  409e0e:	9304      	str	r3, [sp, #16]
  409e10:	f046 0604 	orr.w	r6, r6, #4
  409e14:	f898 3000 	ldrb.w	r3, [r8]
  409e18:	e771      	b.n	409cfe <_vfiprintf_r+0xce>
  409e1a:	2130      	movs	r1, #48	; 0x30
  409e1c:	9804      	ldr	r0, [sp, #16]
  409e1e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  409e22:	9901      	ldr	r1, [sp, #4]
  409e24:	9406      	str	r4, [sp, #24]
  409e26:	f04f 0300 	mov.w	r3, #0
  409e2a:	2278      	movs	r2, #120	; 0x78
  409e2c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409e30:	2900      	cmp	r1, #0
  409e32:	4603      	mov	r3, r0
  409e34:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  409e38:	6804      	ldr	r4, [r0, #0]
  409e3a:	f103 0304 	add.w	r3, r3, #4
  409e3e:	f04f 0500 	mov.w	r5, #0
  409e42:	f046 0202 	orr.w	r2, r6, #2
  409e46:	f2c0 8525 	blt.w	40a894 <_vfiprintf_r+0xc64>
  409e4a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409e4e:	ea54 0205 	orrs.w	r2, r4, r5
  409e52:	f046 0602 	orr.w	r6, r6, #2
  409e56:	9304      	str	r3, [sp, #16]
  409e58:	f040 84bf 	bne.w	40a7da <_vfiprintf_r+0xbaa>
  409e5c:	48b3      	ldr	r0, [pc, #716]	; (40a12c <_vfiprintf_r+0x4fc>)
  409e5e:	9b01      	ldr	r3, [sp, #4]
  409e60:	2b00      	cmp	r3, #0
  409e62:	f040 841c 	bne.w	40a69e <_vfiprintf_r+0xa6e>
  409e66:	4699      	mov	r9, r3
  409e68:	2300      	movs	r3, #0
  409e6a:	9301      	str	r3, [sp, #4]
  409e6c:	9303      	str	r3, [sp, #12]
  409e6e:	465f      	mov	r7, fp
  409e70:	9b01      	ldr	r3, [sp, #4]
  409e72:	9a03      	ldr	r2, [sp, #12]
  409e74:	4293      	cmp	r3, r2
  409e76:	bfb8      	it	lt
  409e78:	4613      	movlt	r3, r2
  409e7a:	461d      	mov	r5, r3
  409e7c:	f1b9 0f00 	cmp.w	r9, #0
  409e80:	d000      	beq.n	409e84 <_vfiprintf_r+0x254>
  409e82:	3501      	adds	r5, #1
  409e84:	f016 0302 	ands.w	r3, r6, #2
  409e88:	9307      	str	r3, [sp, #28]
  409e8a:	bf18      	it	ne
  409e8c:	3502      	addne	r5, #2
  409e8e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  409e92:	9308      	str	r3, [sp, #32]
  409e94:	f040 82f1 	bne.w	40a47a <_vfiprintf_r+0x84a>
  409e98:	9b06      	ldr	r3, [sp, #24]
  409e9a:	1b5c      	subs	r4, r3, r5
  409e9c:	2c00      	cmp	r4, #0
  409e9e:	f340 82ec 	ble.w	40a47a <_vfiprintf_r+0x84a>
  409ea2:	2c10      	cmp	r4, #16
  409ea4:	f340 8556 	ble.w	40a954 <_vfiprintf_r+0xd24>
  409ea8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 40a130 <_vfiprintf_r+0x500>
  409eac:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  409eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409eb2:	46d4      	mov	ip, sl
  409eb4:	2310      	movs	r3, #16
  409eb6:	46c2      	mov	sl, r8
  409eb8:	4670      	mov	r0, lr
  409eba:	46a8      	mov	r8, r5
  409ebc:	464d      	mov	r5, r9
  409ebe:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409ec2:	e007      	b.n	409ed4 <_vfiprintf_r+0x2a4>
  409ec4:	f100 0e02 	add.w	lr, r0, #2
  409ec8:	f10c 0c08 	add.w	ip, ip, #8
  409ecc:	4608      	mov	r0, r1
  409ece:	3c10      	subs	r4, #16
  409ed0:	2c10      	cmp	r4, #16
  409ed2:	dd13      	ble.n	409efc <_vfiprintf_r+0x2cc>
  409ed4:	1c41      	adds	r1, r0, #1
  409ed6:	3210      	adds	r2, #16
  409ed8:	2907      	cmp	r1, #7
  409eda:	920f      	str	r2, [sp, #60]	; 0x3c
  409edc:	f8cc 5000 	str.w	r5, [ip]
  409ee0:	f8cc 3004 	str.w	r3, [ip, #4]
  409ee4:	910e      	str	r1, [sp, #56]	; 0x38
  409ee6:	dded      	ble.n	409ec4 <_vfiprintf_r+0x294>
  409ee8:	2a00      	cmp	r2, #0
  409eea:	f040 82b7 	bne.w	40a45c <_vfiprintf_r+0x82c>
  409eee:	3c10      	subs	r4, #16
  409ef0:	2c10      	cmp	r4, #16
  409ef2:	4610      	mov	r0, r2
  409ef4:	f04f 0e01 	mov.w	lr, #1
  409ef8:	46dc      	mov	ip, fp
  409efa:	dceb      	bgt.n	409ed4 <_vfiprintf_r+0x2a4>
  409efc:	46a9      	mov	r9, r5
  409efe:	4670      	mov	r0, lr
  409f00:	4645      	mov	r5, r8
  409f02:	46d0      	mov	r8, sl
  409f04:	46e2      	mov	sl, ip
  409f06:	4422      	add	r2, r4
  409f08:	2807      	cmp	r0, #7
  409f0a:	920f      	str	r2, [sp, #60]	; 0x3c
  409f0c:	f8ca 9000 	str.w	r9, [sl]
  409f10:	f8ca 4004 	str.w	r4, [sl, #4]
  409f14:	900e      	str	r0, [sp, #56]	; 0x38
  409f16:	f300 8375 	bgt.w	40a604 <_vfiprintf_r+0x9d4>
  409f1a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  409f1e:	f10a 0a08 	add.w	sl, sl, #8
  409f22:	f100 0e01 	add.w	lr, r0, #1
  409f26:	2b00      	cmp	r3, #0
  409f28:	f040 82b0 	bne.w	40a48c <_vfiprintf_r+0x85c>
  409f2c:	9b07      	ldr	r3, [sp, #28]
  409f2e:	2b00      	cmp	r3, #0
  409f30:	f000 82c3 	beq.w	40a4ba <_vfiprintf_r+0x88a>
  409f34:	3202      	adds	r2, #2
  409f36:	a90c      	add	r1, sp, #48	; 0x30
  409f38:	2302      	movs	r3, #2
  409f3a:	f1be 0f07 	cmp.w	lr, #7
  409f3e:	920f      	str	r2, [sp, #60]	; 0x3c
  409f40:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409f44:	e88a 000a 	stmia.w	sl, {r1, r3}
  409f48:	f340 8378 	ble.w	40a63c <_vfiprintf_r+0xa0c>
  409f4c:	2a00      	cmp	r2, #0
  409f4e:	f040 840a 	bne.w	40a766 <_vfiprintf_r+0xb36>
  409f52:	9b08      	ldr	r3, [sp, #32]
  409f54:	2b80      	cmp	r3, #128	; 0x80
  409f56:	f04f 0e01 	mov.w	lr, #1
  409f5a:	4610      	mov	r0, r2
  409f5c:	46da      	mov	sl, fp
  409f5e:	f040 82b0 	bne.w	40a4c2 <_vfiprintf_r+0x892>
  409f62:	9b06      	ldr	r3, [sp, #24]
  409f64:	1b5c      	subs	r4, r3, r5
  409f66:	2c00      	cmp	r4, #0
  409f68:	f340 82ab 	ble.w	40a4c2 <_vfiprintf_r+0x892>
  409f6c:	2c10      	cmp	r4, #16
  409f6e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 40a134 <_vfiprintf_r+0x504>
  409f72:	f340 850b 	ble.w	40a98c <_vfiprintf_r+0xd5c>
  409f76:	46d6      	mov	lr, sl
  409f78:	2310      	movs	r3, #16
  409f7a:	46c2      	mov	sl, r8
  409f7c:	46a8      	mov	r8, r5
  409f7e:	464d      	mov	r5, r9
  409f80:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409f84:	e007      	b.n	409f96 <_vfiprintf_r+0x366>
  409f86:	f100 0c02 	add.w	ip, r0, #2
  409f8a:	f10e 0e08 	add.w	lr, lr, #8
  409f8e:	4608      	mov	r0, r1
  409f90:	3c10      	subs	r4, #16
  409f92:	2c10      	cmp	r4, #16
  409f94:	dd13      	ble.n	409fbe <_vfiprintf_r+0x38e>
  409f96:	1c41      	adds	r1, r0, #1
  409f98:	3210      	adds	r2, #16
  409f9a:	2907      	cmp	r1, #7
  409f9c:	920f      	str	r2, [sp, #60]	; 0x3c
  409f9e:	f8ce 5000 	str.w	r5, [lr]
  409fa2:	f8ce 3004 	str.w	r3, [lr, #4]
  409fa6:	910e      	str	r1, [sp, #56]	; 0x38
  409fa8:	dded      	ble.n	409f86 <_vfiprintf_r+0x356>
  409faa:	2a00      	cmp	r2, #0
  409fac:	f040 8315 	bne.w	40a5da <_vfiprintf_r+0x9aa>
  409fb0:	3c10      	subs	r4, #16
  409fb2:	2c10      	cmp	r4, #16
  409fb4:	f04f 0c01 	mov.w	ip, #1
  409fb8:	4610      	mov	r0, r2
  409fba:	46de      	mov	lr, fp
  409fbc:	dceb      	bgt.n	409f96 <_vfiprintf_r+0x366>
  409fbe:	46a9      	mov	r9, r5
  409fc0:	4645      	mov	r5, r8
  409fc2:	46d0      	mov	r8, sl
  409fc4:	46f2      	mov	sl, lr
  409fc6:	4422      	add	r2, r4
  409fc8:	f1bc 0f07 	cmp.w	ip, #7
  409fcc:	920f      	str	r2, [sp, #60]	; 0x3c
  409fce:	f8ca 9000 	str.w	r9, [sl]
  409fd2:	f8ca 4004 	str.w	r4, [sl, #4]
  409fd6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  409fda:	f300 83d2 	bgt.w	40a782 <_vfiprintf_r+0xb52>
  409fde:	9b01      	ldr	r3, [sp, #4]
  409fe0:	9903      	ldr	r1, [sp, #12]
  409fe2:	1a5c      	subs	r4, r3, r1
  409fe4:	2c00      	cmp	r4, #0
  409fe6:	f10a 0a08 	add.w	sl, sl, #8
  409fea:	f10c 0e01 	add.w	lr, ip, #1
  409fee:	4660      	mov	r0, ip
  409ff0:	f300 826d 	bgt.w	40a4ce <_vfiprintf_r+0x89e>
  409ff4:	9903      	ldr	r1, [sp, #12]
  409ff6:	f8ca 7000 	str.w	r7, [sl]
  409ffa:	440a      	add	r2, r1
  409ffc:	f1be 0f07 	cmp.w	lr, #7
  40a000:	920f      	str	r2, [sp, #60]	; 0x3c
  40a002:	f8ca 1004 	str.w	r1, [sl, #4]
  40a006:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40a00a:	f340 82ce 	ble.w	40a5aa <_vfiprintf_r+0x97a>
  40a00e:	2a00      	cmp	r2, #0
  40a010:	f040 833a 	bne.w	40a688 <_vfiprintf_r+0xa58>
  40a014:	0770      	lsls	r0, r6, #29
  40a016:	920e      	str	r2, [sp, #56]	; 0x38
  40a018:	d538      	bpl.n	40a08c <_vfiprintf_r+0x45c>
  40a01a:	9b06      	ldr	r3, [sp, #24]
  40a01c:	1b5c      	subs	r4, r3, r5
  40a01e:	2c00      	cmp	r4, #0
  40a020:	dd34      	ble.n	40a08c <_vfiprintf_r+0x45c>
  40a022:	46da      	mov	sl, fp
  40a024:	2c10      	cmp	r4, #16
  40a026:	f340 84ab 	ble.w	40a980 <_vfiprintf_r+0xd50>
  40a02a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 40a130 <_vfiprintf_r+0x500>
  40a02e:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a030:	464f      	mov	r7, r9
  40a032:	2610      	movs	r6, #16
  40a034:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40a038:	e006      	b.n	40a048 <_vfiprintf_r+0x418>
  40a03a:	1c88      	adds	r0, r1, #2
  40a03c:	f10a 0a08 	add.w	sl, sl, #8
  40a040:	4619      	mov	r1, r3
  40a042:	3c10      	subs	r4, #16
  40a044:	2c10      	cmp	r4, #16
  40a046:	dd13      	ble.n	40a070 <_vfiprintf_r+0x440>
  40a048:	1c4b      	adds	r3, r1, #1
  40a04a:	3210      	adds	r2, #16
  40a04c:	2b07      	cmp	r3, #7
  40a04e:	920f      	str	r2, [sp, #60]	; 0x3c
  40a050:	f8ca 7000 	str.w	r7, [sl]
  40a054:	f8ca 6004 	str.w	r6, [sl, #4]
  40a058:	930e      	str	r3, [sp, #56]	; 0x38
  40a05a:	ddee      	ble.n	40a03a <_vfiprintf_r+0x40a>
  40a05c:	2a00      	cmp	r2, #0
  40a05e:	f040 828e 	bne.w	40a57e <_vfiprintf_r+0x94e>
  40a062:	3c10      	subs	r4, #16
  40a064:	2c10      	cmp	r4, #16
  40a066:	f04f 0001 	mov.w	r0, #1
  40a06a:	4611      	mov	r1, r2
  40a06c:	46da      	mov	sl, fp
  40a06e:	dceb      	bgt.n	40a048 <_vfiprintf_r+0x418>
  40a070:	46b9      	mov	r9, r7
  40a072:	4422      	add	r2, r4
  40a074:	2807      	cmp	r0, #7
  40a076:	920f      	str	r2, [sp, #60]	; 0x3c
  40a078:	f8ca 9000 	str.w	r9, [sl]
  40a07c:	f8ca 4004 	str.w	r4, [sl, #4]
  40a080:	900e      	str	r0, [sp, #56]	; 0x38
  40a082:	f340 829b 	ble.w	40a5bc <_vfiprintf_r+0x98c>
  40a086:	2a00      	cmp	r2, #0
  40a088:	f040 8425 	bne.w	40a8d6 <_vfiprintf_r+0xca6>
  40a08c:	9b02      	ldr	r3, [sp, #8]
  40a08e:	9a06      	ldr	r2, [sp, #24]
  40a090:	42aa      	cmp	r2, r5
  40a092:	bfac      	ite	ge
  40a094:	189b      	addge	r3, r3, r2
  40a096:	195b      	addlt	r3, r3, r5
  40a098:	9302      	str	r3, [sp, #8]
  40a09a:	e299      	b.n	40a5d0 <_vfiprintf_r+0x9a0>
  40a09c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40a0a0:	f898 3000 	ldrb.w	r3, [r8]
  40a0a4:	e62b      	b.n	409cfe <_vfiprintf_r+0xce>
  40a0a6:	9406      	str	r4, [sp, #24]
  40a0a8:	2900      	cmp	r1, #0
  40a0aa:	f040 84af 	bne.w	40aa0c <_vfiprintf_r+0xddc>
  40a0ae:	f046 0610 	orr.w	r6, r6, #16
  40a0b2:	06b3      	lsls	r3, r6, #26
  40a0b4:	f140 8312 	bpl.w	40a6dc <_vfiprintf_r+0xaac>
  40a0b8:	9904      	ldr	r1, [sp, #16]
  40a0ba:	3107      	adds	r1, #7
  40a0bc:	f021 0107 	bic.w	r1, r1, #7
  40a0c0:	e9d1 2300 	ldrd	r2, r3, [r1]
  40a0c4:	3108      	adds	r1, #8
  40a0c6:	9104      	str	r1, [sp, #16]
  40a0c8:	4614      	mov	r4, r2
  40a0ca:	461d      	mov	r5, r3
  40a0cc:	2a00      	cmp	r2, #0
  40a0ce:	f173 0300 	sbcs.w	r3, r3, #0
  40a0d2:	f2c0 8386 	blt.w	40a7e2 <_vfiprintf_r+0xbb2>
  40a0d6:	9b01      	ldr	r3, [sp, #4]
  40a0d8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a0dc:	2b00      	cmp	r3, #0
  40a0de:	f2c0 831a 	blt.w	40a716 <_vfiprintf_r+0xae6>
  40a0e2:	ea54 0305 	orrs.w	r3, r4, r5
  40a0e6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a0ea:	f000 80ed 	beq.w	40a2c8 <_vfiprintf_r+0x698>
  40a0ee:	2d00      	cmp	r5, #0
  40a0f0:	bf08      	it	eq
  40a0f2:	2c0a      	cmpeq	r4, #10
  40a0f4:	f0c0 80ed 	bcc.w	40a2d2 <_vfiprintf_r+0x6a2>
  40a0f8:	465f      	mov	r7, fp
  40a0fa:	4620      	mov	r0, r4
  40a0fc:	4629      	mov	r1, r5
  40a0fe:	220a      	movs	r2, #10
  40a100:	2300      	movs	r3, #0
  40a102:	f004 f9bd 	bl	40e480 <__aeabi_uldivmod>
  40a106:	3230      	adds	r2, #48	; 0x30
  40a108:	f807 2d01 	strb.w	r2, [r7, #-1]!
  40a10c:	4620      	mov	r0, r4
  40a10e:	4629      	mov	r1, r5
  40a110:	2300      	movs	r3, #0
  40a112:	220a      	movs	r2, #10
  40a114:	f004 f9b4 	bl	40e480 <__aeabi_uldivmod>
  40a118:	4604      	mov	r4, r0
  40a11a:	460d      	mov	r5, r1
  40a11c:	ea54 0305 	orrs.w	r3, r4, r5
  40a120:	d1eb      	bne.n	40a0fa <_vfiprintf_r+0x4ca>
  40a122:	ebc7 030b 	rsb	r3, r7, fp
  40a126:	9303      	str	r3, [sp, #12]
  40a128:	e6a2      	b.n	409e70 <_vfiprintf_r+0x240>
  40a12a:	bf00      	nop
  40a12c:	0040ec44 	.word	0x0040ec44
  40a130:	0040ec84 	.word	0x0040ec84
  40a134:	0040ec74 	.word	0x0040ec74
  40a138:	9406      	str	r4, [sp, #24]
  40a13a:	2900      	cmp	r1, #0
  40a13c:	f040 8462 	bne.w	40aa04 <_vfiprintf_r+0xdd4>
  40a140:	f046 0610 	orr.w	r6, r6, #16
  40a144:	f016 0320 	ands.w	r3, r6, #32
  40a148:	f000 82ae 	beq.w	40a6a8 <_vfiprintf_r+0xa78>
  40a14c:	9b04      	ldr	r3, [sp, #16]
  40a14e:	3307      	adds	r3, #7
  40a150:	f023 0307 	bic.w	r3, r3, #7
  40a154:	f04f 0200 	mov.w	r2, #0
  40a158:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40a15c:	e9d3 4500 	ldrd	r4, r5, [r3]
  40a160:	f103 0208 	add.w	r2, r3, #8
  40a164:	9b01      	ldr	r3, [sp, #4]
  40a166:	9204      	str	r2, [sp, #16]
  40a168:	2b00      	cmp	r3, #0
  40a16a:	f2c0 8174 	blt.w	40a456 <_vfiprintf_r+0x826>
  40a16e:	ea54 0305 	orrs.w	r3, r4, r5
  40a172:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a176:	f040 816e 	bne.w	40a456 <_vfiprintf_r+0x826>
  40a17a:	9b01      	ldr	r3, [sp, #4]
  40a17c:	2b00      	cmp	r3, #0
  40a17e:	f000 8430 	beq.w	40a9e2 <_vfiprintf_r+0xdb2>
  40a182:	f04f 0900 	mov.w	r9, #0
  40a186:	2400      	movs	r4, #0
  40a188:	2500      	movs	r5, #0
  40a18a:	465f      	mov	r7, fp
  40a18c:	08e2      	lsrs	r2, r4, #3
  40a18e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40a192:	08e9      	lsrs	r1, r5, #3
  40a194:	f004 0307 	and.w	r3, r4, #7
  40a198:	460d      	mov	r5, r1
  40a19a:	4614      	mov	r4, r2
  40a19c:	3330      	adds	r3, #48	; 0x30
  40a19e:	ea54 0205 	orrs.w	r2, r4, r5
  40a1a2:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40a1a6:	d1f1      	bne.n	40a18c <_vfiprintf_r+0x55c>
  40a1a8:	07f4      	lsls	r4, r6, #31
  40a1aa:	d5ba      	bpl.n	40a122 <_vfiprintf_r+0x4f2>
  40a1ac:	2b30      	cmp	r3, #48	; 0x30
  40a1ae:	d0b8      	beq.n	40a122 <_vfiprintf_r+0x4f2>
  40a1b0:	2230      	movs	r2, #48	; 0x30
  40a1b2:	1e7b      	subs	r3, r7, #1
  40a1b4:	f807 2c01 	strb.w	r2, [r7, #-1]
  40a1b8:	ebc3 020b 	rsb	r2, r3, fp
  40a1bc:	9203      	str	r2, [sp, #12]
  40a1be:	461f      	mov	r7, r3
  40a1c0:	e656      	b.n	409e70 <_vfiprintf_r+0x240>
  40a1c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40a1c6:	2400      	movs	r4, #0
  40a1c8:	f818 3b01 	ldrb.w	r3, [r8], #1
  40a1cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40a1d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  40a1d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40a1d8:	2a09      	cmp	r2, #9
  40a1da:	d9f5      	bls.n	40a1c8 <_vfiprintf_r+0x598>
  40a1dc:	e591      	b.n	409d02 <_vfiprintf_r+0xd2>
  40a1de:	f898 3000 	ldrb.w	r3, [r8]
  40a1e2:	2101      	movs	r1, #1
  40a1e4:	202b      	movs	r0, #43	; 0x2b
  40a1e6:	e58a      	b.n	409cfe <_vfiprintf_r+0xce>
  40a1e8:	f898 3000 	ldrb.w	r3, [r8]
  40a1ec:	2b2a      	cmp	r3, #42	; 0x2a
  40a1ee:	f108 0501 	add.w	r5, r8, #1
  40a1f2:	f000 83dd 	beq.w	40a9b0 <_vfiprintf_r+0xd80>
  40a1f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40a1fa:	2a09      	cmp	r2, #9
  40a1fc:	46a8      	mov	r8, r5
  40a1fe:	bf98      	it	ls
  40a200:	2500      	movls	r5, #0
  40a202:	f200 83ce 	bhi.w	40a9a2 <_vfiprintf_r+0xd72>
  40a206:	f818 3b01 	ldrb.w	r3, [r8], #1
  40a20a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40a20e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40a212:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40a216:	2a09      	cmp	r2, #9
  40a218:	d9f5      	bls.n	40a206 <_vfiprintf_r+0x5d6>
  40a21a:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  40a21e:	9201      	str	r2, [sp, #4]
  40a220:	e56f      	b.n	409d02 <_vfiprintf_r+0xd2>
  40a222:	9a04      	ldr	r2, [sp, #16]
  40a224:	6814      	ldr	r4, [r2, #0]
  40a226:	4613      	mov	r3, r2
  40a228:	2c00      	cmp	r4, #0
  40a22a:	f103 0304 	add.w	r3, r3, #4
  40a22e:	f6ff aded 	blt.w	409e0c <_vfiprintf_r+0x1dc>
  40a232:	9304      	str	r3, [sp, #16]
  40a234:	f898 3000 	ldrb.w	r3, [r8]
  40a238:	e561      	b.n	409cfe <_vfiprintf_r+0xce>
  40a23a:	9406      	str	r4, [sp, #24]
  40a23c:	2900      	cmp	r1, #0
  40a23e:	d081      	beq.n	40a144 <_vfiprintf_r+0x514>
  40a240:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a244:	e77e      	b.n	40a144 <_vfiprintf_r+0x514>
  40a246:	9a04      	ldr	r2, [sp, #16]
  40a248:	9406      	str	r4, [sp, #24]
  40a24a:	6817      	ldr	r7, [r2, #0]
  40a24c:	f04f 0300 	mov.w	r3, #0
  40a250:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a254:	1d14      	adds	r4, r2, #4
  40a256:	9b01      	ldr	r3, [sp, #4]
  40a258:	2f00      	cmp	r7, #0
  40a25a:	f000 8386 	beq.w	40a96a <_vfiprintf_r+0xd3a>
  40a25e:	2b00      	cmp	r3, #0
  40a260:	f2c0 835f 	blt.w	40a922 <_vfiprintf_r+0xcf2>
  40a264:	461a      	mov	r2, r3
  40a266:	2100      	movs	r1, #0
  40a268:	4638      	mov	r0, r7
  40a26a:	f002 fc21 	bl	40cab0 <memchr>
  40a26e:	2800      	cmp	r0, #0
  40a270:	f000 838f 	beq.w	40a992 <_vfiprintf_r+0xd62>
  40a274:	1bc3      	subs	r3, r0, r7
  40a276:	9303      	str	r3, [sp, #12]
  40a278:	2300      	movs	r3, #0
  40a27a:	9404      	str	r4, [sp, #16]
  40a27c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a280:	9301      	str	r3, [sp, #4]
  40a282:	e5f5      	b.n	409e70 <_vfiprintf_r+0x240>
  40a284:	9406      	str	r4, [sp, #24]
  40a286:	2900      	cmp	r1, #0
  40a288:	f040 83b9 	bne.w	40a9fe <_vfiprintf_r+0xdce>
  40a28c:	f016 0920 	ands.w	r9, r6, #32
  40a290:	d135      	bne.n	40a2fe <_vfiprintf_r+0x6ce>
  40a292:	f016 0310 	ands.w	r3, r6, #16
  40a296:	d103      	bne.n	40a2a0 <_vfiprintf_r+0x670>
  40a298:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40a29c:	f040 832a 	bne.w	40a8f4 <_vfiprintf_r+0xcc4>
  40a2a0:	9a04      	ldr	r2, [sp, #16]
  40a2a2:	4613      	mov	r3, r2
  40a2a4:	6814      	ldr	r4, [r2, #0]
  40a2a6:	9a01      	ldr	r2, [sp, #4]
  40a2a8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40a2ac:	2a00      	cmp	r2, #0
  40a2ae:	f103 0304 	add.w	r3, r3, #4
  40a2b2:	f04f 0500 	mov.w	r5, #0
  40a2b6:	f2c0 8332 	blt.w	40a91e <_vfiprintf_r+0xcee>
  40a2ba:	ea54 0205 	orrs.w	r2, r4, r5
  40a2be:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a2c2:	9304      	str	r3, [sp, #16]
  40a2c4:	f47f af13 	bne.w	40a0ee <_vfiprintf_r+0x4be>
  40a2c8:	9b01      	ldr	r3, [sp, #4]
  40a2ca:	2b00      	cmp	r3, #0
  40a2cc:	f43f adcc 	beq.w	409e68 <_vfiprintf_r+0x238>
  40a2d0:	2400      	movs	r4, #0
  40a2d2:	af2a      	add	r7, sp, #168	; 0xa8
  40a2d4:	3430      	adds	r4, #48	; 0x30
  40a2d6:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40a2da:	ebc7 030b 	rsb	r3, r7, fp
  40a2de:	9303      	str	r3, [sp, #12]
  40a2e0:	e5c6      	b.n	409e70 <_vfiprintf_r+0x240>
  40a2e2:	f046 0620 	orr.w	r6, r6, #32
  40a2e6:	f898 3000 	ldrb.w	r3, [r8]
  40a2ea:	e508      	b.n	409cfe <_vfiprintf_r+0xce>
  40a2ec:	9406      	str	r4, [sp, #24]
  40a2ee:	2900      	cmp	r1, #0
  40a2f0:	f040 836e 	bne.w	40a9d0 <_vfiprintf_r+0xda0>
  40a2f4:	f046 0610 	orr.w	r6, r6, #16
  40a2f8:	f016 0920 	ands.w	r9, r6, #32
  40a2fc:	d0c9      	beq.n	40a292 <_vfiprintf_r+0x662>
  40a2fe:	9b04      	ldr	r3, [sp, #16]
  40a300:	3307      	adds	r3, #7
  40a302:	f023 0307 	bic.w	r3, r3, #7
  40a306:	f04f 0200 	mov.w	r2, #0
  40a30a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40a30e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40a312:	f103 0208 	add.w	r2, r3, #8
  40a316:	9b01      	ldr	r3, [sp, #4]
  40a318:	9204      	str	r2, [sp, #16]
  40a31a:	2b00      	cmp	r3, #0
  40a31c:	f2c0 81f9 	blt.w	40a712 <_vfiprintf_r+0xae2>
  40a320:	ea54 0305 	orrs.w	r3, r4, r5
  40a324:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a328:	f04f 0900 	mov.w	r9, #0
  40a32c:	f47f aedf 	bne.w	40a0ee <_vfiprintf_r+0x4be>
  40a330:	e7ca      	b.n	40a2c8 <_vfiprintf_r+0x698>
  40a332:	9406      	str	r4, [sp, #24]
  40a334:	2900      	cmp	r1, #0
  40a336:	f040 8351 	bne.w	40a9dc <_vfiprintf_r+0xdac>
  40a33a:	06b2      	lsls	r2, r6, #26
  40a33c:	48ae      	ldr	r0, [pc, #696]	; (40a5f8 <_vfiprintf_r+0x9c8>)
  40a33e:	d541      	bpl.n	40a3c4 <_vfiprintf_r+0x794>
  40a340:	9a04      	ldr	r2, [sp, #16]
  40a342:	3207      	adds	r2, #7
  40a344:	f022 0207 	bic.w	r2, r2, #7
  40a348:	e9d2 4500 	ldrd	r4, r5, [r2]
  40a34c:	f102 0108 	add.w	r1, r2, #8
  40a350:	9104      	str	r1, [sp, #16]
  40a352:	f016 0901 	ands.w	r9, r6, #1
  40a356:	f000 8177 	beq.w	40a648 <_vfiprintf_r+0xa18>
  40a35a:	ea54 0205 	orrs.w	r2, r4, r5
  40a35e:	f040 8226 	bne.w	40a7ae <_vfiprintf_r+0xb7e>
  40a362:	f04f 0300 	mov.w	r3, #0
  40a366:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a36a:	9b01      	ldr	r3, [sp, #4]
  40a36c:	2b00      	cmp	r3, #0
  40a36e:	f2c0 8196 	blt.w	40a69e <_vfiprintf_r+0xa6e>
  40a372:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a376:	e572      	b.n	409e5e <_vfiprintf_r+0x22e>
  40a378:	9a04      	ldr	r2, [sp, #16]
  40a37a:	9406      	str	r4, [sp, #24]
  40a37c:	6813      	ldr	r3, [r2, #0]
  40a37e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40a382:	4613      	mov	r3, r2
  40a384:	f04f 0100 	mov.w	r1, #0
  40a388:	2501      	movs	r5, #1
  40a38a:	3304      	adds	r3, #4
  40a38c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40a390:	9304      	str	r3, [sp, #16]
  40a392:	9503      	str	r5, [sp, #12]
  40a394:	af10      	add	r7, sp, #64	; 0x40
  40a396:	2300      	movs	r3, #0
  40a398:	9301      	str	r3, [sp, #4]
  40a39a:	e573      	b.n	409e84 <_vfiprintf_r+0x254>
  40a39c:	f898 3000 	ldrb.w	r3, [r8]
  40a3a0:	2800      	cmp	r0, #0
  40a3a2:	f47f acac 	bne.w	409cfe <_vfiprintf_r+0xce>
  40a3a6:	2101      	movs	r1, #1
  40a3a8:	2020      	movs	r0, #32
  40a3aa:	e4a8      	b.n	409cfe <_vfiprintf_r+0xce>
  40a3ac:	f046 0601 	orr.w	r6, r6, #1
  40a3b0:	f898 3000 	ldrb.w	r3, [r8]
  40a3b4:	e4a3      	b.n	409cfe <_vfiprintf_r+0xce>
  40a3b6:	9406      	str	r4, [sp, #24]
  40a3b8:	2900      	cmp	r1, #0
  40a3ba:	f040 830c 	bne.w	40a9d6 <_vfiprintf_r+0xda6>
  40a3be:	06b2      	lsls	r2, r6, #26
  40a3c0:	488e      	ldr	r0, [pc, #568]	; (40a5fc <_vfiprintf_r+0x9cc>)
  40a3c2:	d4bd      	bmi.n	40a340 <_vfiprintf_r+0x710>
  40a3c4:	9904      	ldr	r1, [sp, #16]
  40a3c6:	06f7      	lsls	r7, r6, #27
  40a3c8:	460a      	mov	r2, r1
  40a3ca:	f100 819d 	bmi.w	40a708 <_vfiprintf_r+0xad8>
  40a3ce:	0675      	lsls	r5, r6, #25
  40a3d0:	f140 819a 	bpl.w	40a708 <_vfiprintf_r+0xad8>
  40a3d4:	3204      	adds	r2, #4
  40a3d6:	880c      	ldrh	r4, [r1, #0]
  40a3d8:	9204      	str	r2, [sp, #16]
  40a3da:	2500      	movs	r5, #0
  40a3dc:	e7b9      	b.n	40a352 <_vfiprintf_r+0x722>
  40a3de:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40a3e2:	f898 3000 	ldrb.w	r3, [r8]
  40a3e6:	e48a      	b.n	409cfe <_vfiprintf_r+0xce>
  40a3e8:	f898 3000 	ldrb.w	r3, [r8]
  40a3ec:	2b6c      	cmp	r3, #108	; 0x6c
  40a3ee:	bf03      	ittte	eq
  40a3f0:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  40a3f4:	f046 0620 	orreq.w	r6, r6, #32
  40a3f8:	f108 0801 	addeq.w	r8, r8, #1
  40a3fc:	f046 0610 	orrne.w	r6, r6, #16
  40a400:	e47d      	b.n	409cfe <_vfiprintf_r+0xce>
  40a402:	2900      	cmp	r1, #0
  40a404:	f040 8309 	bne.w	40aa1a <_vfiprintf_r+0xdea>
  40a408:	06b4      	lsls	r4, r6, #26
  40a40a:	f140 821c 	bpl.w	40a846 <_vfiprintf_r+0xc16>
  40a40e:	9a04      	ldr	r2, [sp, #16]
  40a410:	9902      	ldr	r1, [sp, #8]
  40a412:	6813      	ldr	r3, [r2, #0]
  40a414:	17cd      	asrs	r5, r1, #31
  40a416:	4608      	mov	r0, r1
  40a418:	3204      	adds	r2, #4
  40a41a:	4629      	mov	r1, r5
  40a41c:	9204      	str	r2, [sp, #16]
  40a41e:	e9c3 0100 	strd	r0, r1, [r3]
  40a422:	e436      	b.n	409c92 <_vfiprintf_r+0x62>
  40a424:	9406      	str	r4, [sp, #24]
  40a426:	2900      	cmp	r1, #0
  40a428:	f43f ae43 	beq.w	40a0b2 <_vfiprintf_r+0x482>
  40a42c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a430:	e63f      	b.n	40a0b2 <_vfiprintf_r+0x482>
  40a432:	9406      	str	r4, [sp, #24]
  40a434:	2900      	cmp	r1, #0
  40a436:	f040 82ed 	bne.w	40aa14 <_vfiprintf_r+0xde4>
  40a43a:	2b00      	cmp	r3, #0
  40a43c:	f000 808f 	beq.w	40a55e <_vfiprintf_r+0x92e>
  40a440:	2501      	movs	r5, #1
  40a442:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40a446:	f04f 0300 	mov.w	r3, #0
  40a44a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a44e:	9503      	str	r5, [sp, #12]
  40a450:	af10      	add	r7, sp, #64	; 0x40
  40a452:	e7a0      	b.n	40a396 <_vfiprintf_r+0x766>
  40a454:	9304      	str	r3, [sp, #16]
  40a456:	f04f 0900 	mov.w	r9, #0
  40a45a:	e696      	b.n	40a18a <_vfiprintf_r+0x55a>
  40a45c:	aa0d      	add	r2, sp, #52	; 0x34
  40a45e:	9900      	ldr	r1, [sp, #0]
  40a460:	9309      	str	r3, [sp, #36]	; 0x24
  40a462:	4648      	mov	r0, r9
  40a464:	f7ff fba8 	bl	409bb8 <__sprint_r.part.0>
  40a468:	2800      	cmp	r0, #0
  40a46a:	d17f      	bne.n	40a56c <_vfiprintf_r+0x93c>
  40a46c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a46e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a470:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a472:	f100 0e01 	add.w	lr, r0, #1
  40a476:	46dc      	mov	ip, fp
  40a478:	e529      	b.n	409ece <_vfiprintf_r+0x29e>
  40a47a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a47c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a47e:	f100 0e01 	add.w	lr, r0, #1
  40a482:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40a486:	2b00      	cmp	r3, #0
  40a488:	f43f ad50 	beq.w	409f2c <_vfiprintf_r+0x2fc>
  40a48c:	3201      	adds	r2, #1
  40a48e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40a492:	2301      	movs	r3, #1
  40a494:	f1be 0f07 	cmp.w	lr, #7
  40a498:	920f      	str	r2, [sp, #60]	; 0x3c
  40a49a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40a49e:	e88a 000a 	stmia.w	sl, {r1, r3}
  40a4a2:	f340 80bf 	ble.w	40a624 <_vfiprintf_r+0x9f4>
  40a4a6:	2a00      	cmp	r2, #0
  40a4a8:	f040 814e 	bne.w	40a748 <_vfiprintf_r+0xb18>
  40a4ac:	9907      	ldr	r1, [sp, #28]
  40a4ae:	2900      	cmp	r1, #0
  40a4b0:	f040 80be 	bne.w	40a630 <_vfiprintf_r+0xa00>
  40a4b4:	469e      	mov	lr, r3
  40a4b6:	4610      	mov	r0, r2
  40a4b8:	46da      	mov	sl, fp
  40a4ba:	9b08      	ldr	r3, [sp, #32]
  40a4bc:	2b80      	cmp	r3, #128	; 0x80
  40a4be:	f43f ad50 	beq.w	409f62 <_vfiprintf_r+0x332>
  40a4c2:	9b01      	ldr	r3, [sp, #4]
  40a4c4:	9903      	ldr	r1, [sp, #12]
  40a4c6:	1a5c      	subs	r4, r3, r1
  40a4c8:	2c00      	cmp	r4, #0
  40a4ca:	f77f ad93 	ble.w	409ff4 <_vfiprintf_r+0x3c4>
  40a4ce:	2c10      	cmp	r4, #16
  40a4d0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40a600 <_vfiprintf_r+0x9d0>
  40a4d4:	dd25      	ble.n	40a522 <_vfiprintf_r+0x8f2>
  40a4d6:	46d4      	mov	ip, sl
  40a4d8:	2310      	movs	r3, #16
  40a4da:	46c2      	mov	sl, r8
  40a4dc:	46a8      	mov	r8, r5
  40a4de:	464d      	mov	r5, r9
  40a4e0:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40a4e4:	e007      	b.n	40a4f6 <_vfiprintf_r+0x8c6>
  40a4e6:	f100 0e02 	add.w	lr, r0, #2
  40a4ea:	f10c 0c08 	add.w	ip, ip, #8
  40a4ee:	4608      	mov	r0, r1
  40a4f0:	3c10      	subs	r4, #16
  40a4f2:	2c10      	cmp	r4, #16
  40a4f4:	dd11      	ble.n	40a51a <_vfiprintf_r+0x8ea>
  40a4f6:	1c41      	adds	r1, r0, #1
  40a4f8:	3210      	adds	r2, #16
  40a4fa:	2907      	cmp	r1, #7
  40a4fc:	920f      	str	r2, [sp, #60]	; 0x3c
  40a4fe:	f8cc 5000 	str.w	r5, [ip]
  40a502:	f8cc 3004 	str.w	r3, [ip, #4]
  40a506:	910e      	str	r1, [sp, #56]	; 0x38
  40a508:	dded      	ble.n	40a4e6 <_vfiprintf_r+0x8b6>
  40a50a:	b9d2      	cbnz	r2, 40a542 <_vfiprintf_r+0x912>
  40a50c:	3c10      	subs	r4, #16
  40a50e:	2c10      	cmp	r4, #16
  40a510:	f04f 0e01 	mov.w	lr, #1
  40a514:	4610      	mov	r0, r2
  40a516:	46dc      	mov	ip, fp
  40a518:	dced      	bgt.n	40a4f6 <_vfiprintf_r+0x8c6>
  40a51a:	46a9      	mov	r9, r5
  40a51c:	4645      	mov	r5, r8
  40a51e:	46d0      	mov	r8, sl
  40a520:	46e2      	mov	sl, ip
  40a522:	4422      	add	r2, r4
  40a524:	f1be 0f07 	cmp.w	lr, #7
  40a528:	920f      	str	r2, [sp, #60]	; 0x3c
  40a52a:	f8ca 9000 	str.w	r9, [sl]
  40a52e:	f8ca 4004 	str.w	r4, [sl, #4]
  40a532:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40a536:	dc2e      	bgt.n	40a596 <_vfiprintf_r+0x966>
  40a538:	f10a 0a08 	add.w	sl, sl, #8
  40a53c:	f10e 0e01 	add.w	lr, lr, #1
  40a540:	e558      	b.n	409ff4 <_vfiprintf_r+0x3c4>
  40a542:	aa0d      	add	r2, sp, #52	; 0x34
  40a544:	9900      	ldr	r1, [sp, #0]
  40a546:	9301      	str	r3, [sp, #4]
  40a548:	4648      	mov	r0, r9
  40a54a:	f7ff fb35 	bl	409bb8 <__sprint_r.part.0>
  40a54e:	b968      	cbnz	r0, 40a56c <_vfiprintf_r+0x93c>
  40a550:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a552:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a554:	9b01      	ldr	r3, [sp, #4]
  40a556:	f100 0e01 	add.w	lr, r0, #1
  40a55a:	46dc      	mov	ip, fp
  40a55c:	e7c8      	b.n	40a4f0 <_vfiprintf_r+0x8c0>
  40a55e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a560:	b123      	cbz	r3, 40a56c <_vfiprintf_r+0x93c>
  40a562:	9805      	ldr	r0, [sp, #20]
  40a564:	9900      	ldr	r1, [sp, #0]
  40a566:	aa0d      	add	r2, sp, #52	; 0x34
  40a568:	f7ff fb26 	bl	409bb8 <__sprint_r.part.0>
  40a56c:	9b00      	ldr	r3, [sp, #0]
  40a56e:	899b      	ldrh	r3, [r3, #12]
  40a570:	065a      	lsls	r2, r3, #25
  40a572:	f100 818b 	bmi.w	40a88c <_vfiprintf_r+0xc5c>
  40a576:	9802      	ldr	r0, [sp, #8]
  40a578:	b02b      	add	sp, #172	; 0xac
  40a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a57e:	aa0d      	add	r2, sp, #52	; 0x34
  40a580:	9900      	ldr	r1, [sp, #0]
  40a582:	4648      	mov	r0, r9
  40a584:	f7ff fb18 	bl	409bb8 <__sprint_r.part.0>
  40a588:	2800      	cmp	r0, #0
  40a58a:	d1ef      	bne.n	40a56c <_vfiprintf_r+0x93c>
  40a58c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a58e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a590:	1c48      	adds	r0, r1, #1
  40a592:	46da      	mov	sl, fp
  40a594:	e555      	b.n	40a042 <_vfiprintf_r+0x412>
  40a596:	2a00      	cmp	r2, #0
  40a598:	f040 80fb 	bne.w	40a792 <_vfiprintf_r+0xb62>
  40a59c:	9a03      	ldr	r2, [sp, #12]
  40a59e:	921b      	str	r2, [sp, #108]	; 0x6c
  40a5a0:	2301      	movs	r3, #1
  40a5a2:	920f      	str	r2, [sp, #60]	; 0x3c
  40a5a4:	971a      	str	r7, [sp, #104]	; 0x68
  40a5a6:	930e      	str	r3, [sp, #56]	; 0x38
  40a5a8:	46da      	mov	sl, fp
  40a5aa:	f10a 0a08 	add.w	sl, sl, #8
  40a5ae:	0771      	lsls	r1, r6, #29
  40a5b0:	d504      	bpl.n	40a5bc <_vfiprintf_r+0x98c>
  40a5b2:	9b06      	ldr	r3, [sp, #24]
  40a5b4:	1b5c      	subs	r4, r3, r5
  40a5b6:	2c00      	cmp	r4, #0
  40a5b8:	f73f ad34 	bgt.w	40a024 <_vfiprintf_r+0x3f4>
  40a5bc:	9b02      	ldr	r3, [sp, #8]
  40a5be:	9906      	ldr	r1, [sp, #24]
  40a5c0:	42a9      	cmp	r1, r5
  40a5c2:	bfac      	ite	ge
  40a5c4:	185b      	addge	r3, r3, r1
  40a5c6:	195b      	addlt	r3, r3, r5
  40a5c8:	9302      	str	r3, [sp, #8]
  40a5ca:	2a00      	cmp	r2, #0
  40a5cc:	f040 80b3 	bne.w	40a736 <_vfiprintf_r+0xb06>
  40a5d0:	2300      	movs	r3, #0
  40a5d2:	930e      	str	r3, [sp, #56]	; 0x38
  40a5d4:	46da      	mov	sl, fp
  40a5d6:	f7ff bb5c 	b.w	409c92 <_vfiprintf_r+0x62>
  40a5da:	aa0d      	add	r2, sp, #52	; 0x34
  40a5dc:	9900      	ldr	r1, [sp, #0]
  40a5de:	9307      	str	r3, [sp, #28]
  40a5e0:	4648      	mov	r0, r9
  40a5e2:	f7ff fae9 	bl	409bb8 <__sprint_r.part.0>
  40a5e6:	2800      	cmp	r0, #0
  40a5e8:	d1c0      	bne.n	40a56c <_vfiprintf_r+0x93c>
  40a5ea:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a5ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a5ee:	9b07      	ldr	r3, [sp, #28]
  40a5f0:	f100 0c01 	add.w	ip, r0, #1
  40a5f4:	46de      	mov	lr, fp
  40a5f6:	e4cb      	b.n	409f90 <_vfiprintf_r+0x360>
  40a5f8:	0040ec30 	.word	0x0040ec30
  40a5fc:	0040ec44 	.word	0x0040ec44
  40a600:	0040ec74 	.word	0x0040ec74
  40a604:	2a00      	cmp	r2, #0
  40a606:	f040 8133 	bne.w	40a870 <_vfiprintf_r+0xc40>
  40a60a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40a60e:	2b00      	cmp	r3, #0
  40a610:	f000 80f5 	beq.w	40a7fe <_vfiprintf_r+0xbce>
  40a614:	2301      	movs	r3, #1
  40a616:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40a61a:	461a      	mov	r2, r3
  40a61c:	931b      	str	r3, [sp, #108]	; 0x6c
  40a61e:	469e      	mov	lr, r3
  40a620:	911a      	str	r1, [sp, #104]	; 0x68
  40a622:	46da      	mov	sl, fp
  40a624:	4670      	mov	r0, lr
  40a626:	f10a 0a08 	add.w	sl, sl, #8
  40a62a:	f10e 0e01 	add.w	lr, lr, #1
  40a62e:	e47d      	b.n	409f2c <_vfiprintf_r+0x2fc>
  40a630:	a90c      	add	r1, sp, #48	; 0x30
  40a632:	2202      	movs	r2, #2
  40a634:	469e      	mov	lr, r3
  40a636:	911a      	str	r1, [sp, #104]	; 0x68
  40a638:	921b      	str	r2, [sp, #108]	; 0x6c
  40a63a:	46da      	mov	sl, fp
  40a63c:	4670      	mov	r0, lr
  40a63e:	f10a 0a08 	add.w	sl, sl, #8
  40a642:	f10e 0e01 	add.w	lr, lr, #1
  40a646:	e738      	b.n	40a4ba <_vfiprintf_r+0x88a>
  40a648:	9b01      	ldr	r3, [sp, #4]
  40a64a:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40a64e:	2b00      	cmp	r3, #0
  40a650:	f2c0 812a 	blt.w	40a8a8 <_vfiprintf_r+0xc78>
  40a654:	ea54 0305 	orrs.w	r3, r4, r5
  40a658:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a65c:	f43f abff 	beq.w	409e5e <_vfiprintf_r+0x22e>
  40a660:	465f      	mov	r7, fp
  40a662:	0923      	lsrs	r3, r4, #4
  40a664:	f004 010f 	and.w	r1, r4, #15
  40a668:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40a66c:	092a      	lsrs	r2, r5, #4
  40a66e:	461c      	mov	r4, r3
  40a670:	4615      	mov	r5, r2
  40a672:	5c43      	ldrb	r3, [r0, r1]
  40a674:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40a678:	ea54 0305 	orrs.w	r3, r4, r5
  40a67c:	d1f1      	bne.n	40a662 <_vfiprintf_r+0xa32>
  40a67e:	ebc7 030b 	rsb	r3, r7, fp
  40a682:	9303      	str	r3, [sp, #12]
  40a684:	f7ff bbf4 	b.w	409e70 <_vfiprintf_r+0x240>
  40a688:	aa0d      	add	r2, sp, #52	; 0x34
  40a68a:	9900      	ldr	r1, [sp, #0]
  40a68c:	9805      	ldr	r0, [sp, #20]
  40a68e:	f7ff fa93 	bl	409bb8 <__sprint_r.part.0>
  40a692:	2800      	cmp	r0, #0
  40a694:	f47f af6a 	bne.w	40a56c <_vfiprintf_r+0x93c>
  40a698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a69a:	46da      	mov	sl, fp
  40a69c:	e787      	b.n	40a5ae <_vfiprintf_r+0x97e>
  40a69e:	f04f 0900 	mov.w	r9, #0
  40a6a2:	2400      	movs	r4, #0
  40a6a4:	2500      	movs	r5, #0
  40a6a6:	e7db      	b.n	40a660 <_vfiprintf_r+0xa30>
  40a6a8:	f016 0210 	ands.w	r2, r6, #16
  40a6ac:	f000 80b2 	beq.w	40a814 <_vfiprintf_r+0xbe4>
  40a6b0:	9904      	ldr	r1, [sp, #16]
  40a6b2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a6b6:	460a      	mov	r2, r1
  40a6b8:	680c      	ldr	r4, [r1, #0]
  40a6ba:	9901      	ldr	r1, [sp, #4]
  40a6bc:	2900      	cmp	r1, #0
  40a6be:	f102 0204 	add.w	r2, r2, #4
  40a6c2:	f04f 0500 	mov.w	r5, #0
  40a6c6:	f2c0 8159 	blt.w	40a97c <_vfiprintf_r+0xd4c>
  40a6ca:	ea54 0105 	orrs.w	r1, r4, r5
  40a6ce:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a6d2:	9204      	str	r2, [sp, #16]
  40a6d4:	f43f ad51 	beq.w	40a17a <_vfiprintf_r+0x54a>
  40a6d8:	4699      	mov	r9, r3
  40a6da:	e556      	b.n	40a18a <_vfiprintf_r+0x55a>
  40a6dc:	06f7      	lsls	r7, r6, #27
  40a6de:	d40a      	bmi.n	40a6f6 <_vfiprintf_r+0xac6>
  40a6e0:	0675      	lsls	r5, r6, #25
  40a6e2:	d508      	bpl.n	40a6f6 <_vfiprintf_r+0xac6>
  40a6e4:	9904      	ldr	r1, [sp, #16]
  40a6e6:	f9b1 4000 	ldrsh.w	r4, [r1]
  40a6ea:	3104      	adds	r1, #4
  40a6ec:	17e5      	asrs	r5, r4, #31
  40a6ee:	4622      	mov	r2, r4
  40a6f0:	462b      	mov	r3, r5
  40a6f2:	9104      	str	r1, [sp, #16]
  40a6f4:	e4ea      	b.n	40a0cc <_vfiprintf_r+0x49c>
  40a6f6:	9a04      	ldr	r2, [sp, #16]
  40a6f8:	6814      	ldr	r4, [r2, #0]
  40a6fa:	4613      	mov	r3, r2
  40a6fc:	3304      	adds	r3, #4
  40a6fe:	17e5      	asrs	r5, r4, #31
  40a700:	9304      	str	r3, [sp, #16]
  40a702:	4622      	mov	r2, r4
  40a704:	462b      	mov	r3, r5
  40a706:	e4e1      	b.n	40a0cc <_vfiprintf_r+0x49c>
  40a708:	6814      	ldr	r4, [r2, #0]
  40a70a:	3204      	adds	r2, #4
  40a70c:	9204      	str	r2, [sp, #16]
  40a70e:	2500      	movs	r5, #0
  40a710:	e61f      	b.n	40a352 <_vfiprintf_r+0x722>
  40a712:	f04f 0900 	mov.w	r9, #0
  40a716:	ea54 0305 	orrs.w	r3, r4, r5
  40a71a:	f47f ace8 	bne.w	40a0ee <_vfiprintf_r+0x4be>
  40a71e:	e5d8      	b.n	40a2d2 <_vfiprintf_r+0x6a2>
  40a720:	aa0d      	add	r2, sp, #52	; 0x34
  40a722:	9900      	ldr	r1, [sp, #0]
  40a724:	9805      	ldr	r0, [sp, #20]
  40a726:	f7ff fa47 	bl	409bb8 <__sprint_r.part.0>
  40a72a:	2800      	cmp	r0, #0
  40a72c:	f47f af1e 	bne.w	40a56c <_vfiprintf_r+0x93c>
  40a730:	46da      	mov	sl, fp
  40a732:	f7ff bb48 	b.w	409dc6 <_vfiprintf_r+0x196>
  40a736:	aa0d      	add	r2, sp, #52	; 0x34
  40a738:	9900      	ldr	r1, [sp, #0]
  40a73a:	9805      	ldr	r0, [sp, #20]
  40a73c:	f7ff fa3c 	bl	409bb8 <__sprint_r.part.0>
  40a740:	2800      	cmp	r0, #0
  40a742:	f43f af45 	beq.w	40a5d0 <_vfiprintf_r+0x9a0>
  40a746:	e711      	b.n	40a56c <_vfiprintf_r+0x93c>
  40a748:	aa0d      	add	r2, sp, #52	; 0x34
  40a74a:	9900      	ldr	r1, [sp, #0]
  40a74c:	9805      	ldr	r0, [sp, #20]
  40a74e:	f7ff fa33 	bl	409bb8 <__sprint_r.part.0>
  40a752:	2800      	cmp	r0, #0
  40a754:	f47f af0a 	bne.w	40a56c <_vfiprintf_r+0x93c>
  40a758:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a75a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a75c:	f100 0e01 	add.w	lr, r0, #1
  40a760:	46da      	mov	sl, fp
  40a762:	f7ff bbe3 	b.w	409f2c <_vfiprintf_r+0x2fc>
  40a766:	aa0d      	add	r2, sp, #52	; 0x34
  40a768:	9900      	ldr	r1, [sp, #0]
  40a76a:	9805      	ldr	r0, [sp, #20]
  40a76c:	f7ff fa24 	bl	409bb8 <__sprint_r.part.0>
  40a770:	2800      	cmp	r0, #0
  40a772:	f47f aefb 	bne.w	40a56c <_vfiprintf_r+0x93c>
  40a776:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a77a:	f100 0e01 	add.w	lr, r0, #1
  40a77e:	46da      	mov	sl, fp
  40a780:	e69b      	b.n	40a4ba <_vfiprintf_r+0x88a>
  40a782:	2a00      	cmp	r2, #0
  40a784:	f040 80d8 	bne.w	40a938 <_vfiprintf_r+0xd08>
  40a788:	f04f 0e01 	mov.w	lr, #1
  40a78c:	4610      	mov	r0, r2
  40a78e:	46da      	mov	sl, fp
  40a790:	e697      	b.n	40a4c2 <_vfiprintf_r+0x892>
  40a792:	aa0d      	add	r2, sp, #52	; 0x34
  40a794:	9900      	ldr	r1, [sp, #0]
  40a796:	9805      	ldr	r0, [sp, #20]
  40a798:	f7ff fa0e 	bl	409bb8 <__sprint_r.part.0>
  40a79c:	2800      	cmp	r0, #0
  40a79e:	f47f aee5 	bne.w	40a56c <_vfiprintf_r+0x93c>
  40a7a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a7a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a7a6:	f103 0e01 	add.w	lr, r3, #1
  40a7aa:	46da      	mov	sl, fp
  40a7ac:	e422      	b.n	409ff4 <_vfiprintf_r+0x3c4>
  40a7ae:	2230      	movs	r2, #48	; 0x30
  40a7b0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  40a7b4:	9a01      	ldr	r2, [sp, #4]
  40a7b6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40a7ba:	2a00      	cmp	r2, #0
  40a7bc:	f04f 0300 	mov.w	r3, #0
  40a7c0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a7c4:	f046 0302 	orr.w	r3, r6, #2
  40a7c8:	f2c0 80cb 	blt.w	40a962 <_vfiprintf_r+0xd32>
  40a7cc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a7d0:	f046 0602 	orr.w	r6, r6, #2
  40a7d4:	f04f 0900 	mov.w	r9, #0
  40a7d8:	e742      	b.n	40a660 <_vfiprintf_r+0xa30>
  40a7da:	f04f 0900 	mov.w	r9, #0
  40a7de:	4890      	ldr	r0, [pc, #576]	; (40aa20 <_vfiprintf_r+0xdf0>)
  40a7e0:	e73e      	b.n	40a660 <_vfiprintf_r+0xa30>
  40a7e2:	9b01      	ldr	r3, [sp, #4]
  40a7e4:	4264      	negs	r4, r4
  40a7e6:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40a7ea:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40a7ee:	2b00      	cmp	r3, #0
  40a7f0:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40a7f4:	f6ff ac7b 	blt.w	40a0ee <_vfiprintf_r+0x4be>
  40a7f8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a7fc:	e477      	b.n	40a0ee <_vfiprintf_r+0x4be>
  40a7fe:	9b07      	ldr	r3, [sp, #28]
  40a800:	2b00      	cmp	r3, #0
  40a802:	d072      	beq.n	40a8ea <_vfiprintf_r+0xcba>
  40a804:	ab0c      	add	r3, sp, #48	; 0x30
  40a806:	2202      	movs	r2, #2
  40a808:	931a      	str	r3, [sp, #104]	; 0x68
  40a80a:	921b      	str	r2, [sp, #108]	; 0x6c
  40a80c:	f04f 0e01 	mov.w	lr, #1
  40a810:	46da      	mov	sl, fp
  40a812:	e713      	b.n	40a63c <_vfiprintf_r+0xa0c>
  40a814:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40a818:	d048      	beq.n	40a8ac <_vfiprintf_r+0xc7c>
  40a81a:	9904      	ldr	r1, [sp, #16]
  40a81c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40a820:	460b      	mov	r3, r1
  40a822:	880c      	ldrh	r4, [r1, #0]
  40a824:	9901      	ldr	r1, [sp, #4]
  40a826:	2900      	cmp	r1, #0
  40a828:	f103 0304 	add.w	r3, r3, #4
  40a82c:	f04f 0500 	mov.w	r5, #0
  40a830:	f6ff ae10 	blt.w	40a454 <_vfiprintf_r+0x824>
  40a834:	ea54 0105 	orrs.w	r1, r4, r5
  40a838:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a83c:	9304      	str	r3, [sp, #16]
  40a83e:	f43f ac9c 	beq.w	40a17a <_vfiprintf_r+0x54a>
  40a842:	4691      	mov	r9, r2
  40a844:	e4a1      	b.n	40a18a <_vfiprintf_r+0x55a>
  40a846:	06f0      	lsls	r0, r6, #27
  40a848:	d40a      	bmi.n	40a860 <_vfiprintf_r+0xc30>
  40a84a:	0671      	lsls	r1, r6, #25
  40a84c:	d508      	bpl.n	40a860 <_vfiprintf_r+0xc30>
  40a84e:	9a04      	ldr	r2, [sp, #16]
  40a850:	6813      	ldr	r3, [r2, #0]
  40a852:	3204      	adds	r2, #4
  40a854:	9204      	str	r2, [sp, #16]
  40a856:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40a85a:	801a      	strh	r2, [r3, #0]
  40a85c:	f7ff ba19 	b.w	409c92 <_vfiprintf_r+0x62>
  40a860:	9a04      	ldr	r2, [sp, #16]
  40a862:	6813      	ldr	r3, [r2, #0]
  40a864:	3204      	adds	r2, #4
  40a866:	9204      	str	r2, [sp, #16]
  40a868:	9a02      	ldr	r2, [sp, #8]
  40a86a:	601a      	str	r2, [r3, #0]
  40a86c:	f7ff ba11 	b.w	409c92 <_vfiprintf_r+0x62>
  40a870:	aa0d      	add	r2, sp, #52	; 0x34
  40a872:	9900      	ldr	r1, [sp, #0]
  40a874:	9805      	ldr	r0, [sp, #20]
  40a876:	f7ff f99f 	bl	409bb8 <__sprint_r.part.0>
  40a87a:	2800      	cmp	r0, #0
  40a87c:	f47f ae76 	bne.w	40a56c <_vfiprintf_r+0x93c>
  40a880:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a882:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a884:	f100 0e01 	add.w	lr, r0, #1
  40a888:	46da      	mov	sl, fp
  40a88a:	e5fa      	b.n	40a482 <_vfiprintf_r+0x852>
  40a88c:	f04f 30ff 	mov.w	r0, #4294967295
  40a890:	f7ff bab6 	b.w	409e00 <_vfiprintf_r+0x1d0>
  40a894:	4862      	ldr	r0, [pc, #392]	; (40aa20 <_vfiprintf_r+0xdf0>)
  40a896:	4616      	mov	r6, r2
  40a898:	ea54 0205 	orrs.w	r2, r4, r5
  40a89c:	9304      	str	r3, [sp, #16]
  40a89e:	f04f 0900 	mov.w	r9, #0
  40a8a2:	f47f aedd 	bne.w	40a660 <_vfiprintf_r+0xa30>
  40a8a6:	e6fc      	b.n	40a6a2 <_vfiprintf_r+0xa72>
  40a8a8:	9b04      	ldr	r3, [sp, #16]
  40a8aa:	e7f5      	b.n	40a898 <_vfiprintf_r+0xc68>
  40a8ac:	9a04      	ldr	r2, [sp, #16]
  40a8ae:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40a8b2:	4613      	mov	r3, r2
  40a8b4:	6814      	ldr	r4, [r2, #0]
  40a8b6:	9a01      	ldr	r2, [sp, #4]
  40a8b8:	2a00      	cmp	r2, #0
  40a8ba:	f103 0304 	add.w	r3, r3, #4
  40a8be:	f04f 0500 	mov.w	r5, #0
  40a8c2:	f6ff adc7 	blt.w	40a454 <_vfiprintf_r+0x824>
  40a8c6:	ea54 0205 	orrs.w	r2, r4, r5
  40a8ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a8ce:	9304      	str	r3, [sp, #16]
  40a8d0:	f47f ac5b 	bne.w	40a18a <_vfiprintf_r+0x55a>
  40a8d4:	e451      	b.n	40a17a <_vfiprintf_r+0x54a>
  40a8d6:	aa0d      	add	r2, sp, #52	; 0x34
  40a8d8:	9900      	ldr	r1, [sp, #0]
  40a8da:	9805      	ldr	r0, [sp, #20]
  40a8dc:	f7ff f96c 	bl	409bb8 <__sprint_r.part.0>
  40a8e0:	2800      	cmp	r0, #0
  40a8e2:	f47f ae43 	bne.w	40a56c <_vfiprintf_r+0x93c>
  40a8e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a8e8:	e668      	b.n	40a5bc <_vfiprintf_r+0x98c>
  40a8ea:	4610      	mov	r0, r2
  40a8ec:	f04f 0e01 	mov.w	lr, #1
  40a8f0:	46da      	mov	sl, fp
  40a8f2:	e5e6      	b.n	40a4c2 <_vfiprintf_r+0x892>
  40a8f4:	9904      	ldr	r1, [sp, #16]
  40a8f6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a8fa:	460a      	mov	r2, r1
  40a8fc:	880c      	ldrh	r4, [r1, #0]
  40a8fe:	9901      	ldr	r1, [sp, #4]
  40a900:	2900      	cmp	r1, #0
  40a902:	f102 0204 	add.w	r2, r2, #4
  40a906:	f04f 0500 	mov.w	r5, #0
  40a90a:	db4e      	blt.n	40a9aa <_vfiprintf_r+0xd7a>
  40a90c:	ea54 0105 	orrs.w	r1, r4, r5
  40a910:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a914:	9204      	str	r2, [sp, #16]
  40a916:	4699      	mov	r9, r3
  40a918:	f47f abe9 	bne.w	40a0ee <_vfiprintf_r+0x4be>
  40a91c:	e4d4      	b.n	40a2c8 <_vfiprintf_r+0x698>
  40a91e:	9304      	str	r3, [sp, #16]
  40a920:	e6f9      	b.n	40a716 <_vfiprintf_r+0xae6>
  40a922:	4638      	mov	r0, r7
  40a924:	9404      	str	r4, [sp, #16]
  40a926:	f7fd fd8b 	bl	408440 <strlen>
  40a92a:	2300      	movs	r3, #0
  40a92c:	9003      	str	r0, [sp, #12]
  40a92e:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a932:	9301      	str	r3, [sp, #4]
  40a934:	f7ff ba9c 	b.w	409e70 <_vfiprintf_r+0x240>
  40a938:	aa0d      	add	r2, sp, #52	; 0x34
  40a93a:	9900      	ldr	r1, [sp, #0]
  40a93c:	9805      	ldr	r0, [sp, #20]
  40a93e:	f7ff f93b 	bl	409bb8 <__sprint_r.part.0>
  40a942:	2800      	cmp	r0, #0
  40a944:	f47f ae12 	bne.w	40a56c <_vfiprintf_r+0x93c>
  40a948:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a94a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a94c:	f100 0e01 	add.w	lr, r0, #1
  40a950:	46da      	mov	sl, fp
  40a952:	e5b6      	b.n	40a4c2 <_vfiprintf_r+0x892>
  40a954:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a958:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40aa28 <_vfiprintf_r+0xdf8>
  40a95c:	3001      	adds	r0, #1
  40a95e:	f7ff bad2 	b.w	409f06 <_vfiprintf_r+0x2d6>
  40a962:	461e      	mov	r6, r3
  40a964:	f04f 0900 	mov.w	r9, #0
  40a968:	e67a      	b.n	40a660 <_vfiprintf_r+0xa30>
  40a96a:	2b06      	cmp	r3, #6
  40a96c:	bf28      	it	cs
  40a96e:	2306      	movcs	r3, #6
  40a970:	9303      	str	r3, [sp, #12]
  40a972:	9404      	str	r4, [sp, #16]
  40a974:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40a978:	4f2a      	ldr	r7, [pc, #168]	; (40aa24 <_vfiprintf_r+0xdf4>)
  40a97a:	e50c      	b.n	40a396 <_vfiprintf_r+0x766>
  40a97c:	9204      	str	r2, [sp, #16]
  40a97e:	e56a      	b.n	40a456 <_vfiprintf_r+0x826>
  40a980:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a982:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40aa28 <_vfiprintf_r+0xdf8>
  40a986:	3001      	adds	r0, #1
  40a988:	f7ff bb73 	b.w	40a072 <_vfiprintf_r+0x442>
  40a98c:	46f4      	mov	ip, lr
  40a98e:	f7ff bb1a 	b.w	409fc6 <_vfiprintf_r+0x396>
  40a992:	9b01      	ldr	r3, [sp, #4]
  40a994:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a998:	9303      	str	r3, [sp, #12]
  40a99a:	9404      	str	r4, [sp, #16]
  40a99c:	9001      	str	r0, [sp, #4]
  40a99e:	f7ff ba67 	b.w	409e70 <_vfiprintf_r+0x240>
  40a9a2:	2200      	movs	r2, #0
  40a9a4:	9201      	str	r2, [sp, #4]
  40a9a6:	f7ff b9ac 	b.w	409d02 <_vfiprintf_r+0xd2>
  40a9aa:	9204      	str	r2, [sp, #16]
  40a9ac:	4699      	mov	r9, r3
  40a9ae:	e6b2      	b.n	40a716 <_vfiprintf_r+0xae6>
  40a9b0:	9a04      	ldr	r2, [sp, #16]
  40a9b2:	6813      	ldr	r3, [r2, #0]
  40a9b4:	9301      	str	r3, [sp, #4]
  40a9b6:	3204      	adds	r2, #4
  40a9b8:	2b00      	cmp	r3, #0
  40a9ba:	9204      	str	r2, [sp, #16]
  40a9bc:	f898 3001 	ldrb.w	r3, [r8, #1]
  40a9c0:	46a8      	mov	r8, r5
  40a9c2:	f6bf a99c 	bge.w	409cfe <_vfiprintf_r+0xce>
  40a9c6:	f04f 32ff 	mov.w	r2, #4294967295
  40a9ca:	9201      	str	r2, [sp, #4]
  40a9cc:	f7ff b997 	b.w	409cfe <_vfiprintf_r+0xce>
  40a9d0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a9d4:	e48e      	b.n	40a2f4 <_vfiprintf_r+0x6c4>
  40a9d6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a9da:	e4f0      	b.n	40a3be <_vfiprintf_r+0x78e>
  40a9dc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a9e0:	e4ab      	b.n	40a33a <_vfiprintf_r+0x70a>
  40a9e2:	4699      	mov	r9, r3
  40a9e4:	07f3      	lsls	r3, r6, #31
  40a9e6:	d505      	bpl.n	40a9f4 <_vfiprintf_r+0xdc4>
  40a9e8:	af2a      	add	r7, sp, #168	; 0xa8
  40a9ea:	2330      	movs	r3, #48	; 0x30
  40a9ec:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40a9f0:	f7ff bb97 	b.w	40a122 <_vfiprintf_r+0x4f2>
  40a9f4:	9b01      	ldr	r3, [sp, #4]
  40a9f6:	9303      	str	r3, [sp, #12]
  40a9f8:	465f      	mov	r7, fp
  40a9fa:	f7ff ba39 	b.w	409e70 <_vfiprintf_r+0x240>
  40a9fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40aa02:	e443      	b.n	40a28c <_vfiprintf_r+0x65c>
  40aa04:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40aa08:	f7ff bb9a 	b.w	40a140 <_vfiprintf_r+0x510>
  40aa0c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40aa10:	f7ff bb4d 	b.w	40a0ae <_vfiprintf_r+0x47e>
  40aa14:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40aa18:	e50f      	b.n	40a43a <_vfiprintf_r+0x80a>
  40aa1a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40aa1e:	e4f3      	b.n	40a408 <_vfiprintf_r+0x7d8>
  40aa20:	0040ec44 	.word	0x0040ec44
  40aa24:	0040ec58 	.word	0x0040ec58
  40aa28:	0040ec84 	.word	0x0040ec84

0040aa2c <__sbprintf>:
  40aa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40aa2e:	460c      	mov	r4, r1
  40aa30:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40aa34:	8989      	ldrh	r1, [r1, #12]
  40aa36:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40aa38:	89e5      	ldrh	r5, [r4, #14]
  40aa3a:	9619      	str	r6, [sp, #100]	; 0x64
  40aa3c:	f021 0102 	bic.w	r1, r1, #2
  40aa40:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40aa42:	f8ad 500e 	strh.w	r5, [sp, #14]
  40aa46:	2500      	movs	r5, #0
  40aa48:	69e7      	ldr	r7, [r4, #28]
  40aa4a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40aa4e:	9609      	str	r6, [sp, #36]	; 0x24
  40aa50:	9506      	str	r5, [sp, #24]
  40aa52:	ae1a      	add	r6, sp, #104	; 0x68
  40aa54:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40aa58:	4669      	mov	r1, sp
  40aa5a:	9600      	str	r6, [sp, #0]
  40aa5c:	9604      	str	r6, [sp, #16]
  40aa5e:	9502      	str	r5, [sp, #8]
  40aa60:	9505      	str	r5, [sp, #20]
  40aa62:	9707      	str	r7, [sp, #28]
  40aa64:	4606      	mov	r6, r0
  40aa66:	f7ff f8e3 	bl	409c30 <_vfiprintf_r>
  40aa6a:	1e05      	subs	r5, r0, #0
  40aa6c:	db07      	blt.n	40aa7e <__sbprintf+0x52>
  40aa6e:	4630      	mov	r0, r6
  40aa70:	4669      	mov	r1, sp
  40aa72:	f001 f8e9 	bl	40bc48 <_fflush_r>
  40aa76:	2800      	cmp	r0, #0
  40aa78:	bf18      	it	ne
  40aa7a:	f04f 35ff 	movne.w	r5, #4294967295
  40aa7e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40aa82:	065b      	lsls	r3, r3, #25
  40aa84:	d503      	bpl.n	40aa8e <__sbprintf+0x62>
  40aa86:	89a3      	ldrh	r3, [r4, #12]
  40aa88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40aa8c:	81a3      	strh	r3, [r4, #12]
  40aa8e:	4628      	mov	r0, r5
  40aa90:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40aa94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40aa96:	bf00      	nop

0040aa98 <__swsetup_r>:
  40aa98:	b538      	push	{r3, r4, r5, lr}
  40aa9a:	4b30      	ldr	r3, [pc, #192]	; (40ab5c <__swsetup_r+0xc4>)
  40aa9c:	681b      	ldr	r3, [r3, #0]
  40aa9e:	4605      	mov	r5, r0
  40aaa0:	460c      	mov	r4, r1
  40aaa2:	b113      	cbz	r3, 40aaaa <__swsetup_r+0x12>
  40aaa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40aaa6:	2a00      	cmp	r2, #0
  40aaa8:	d038      	beq.n	40ab1c <__swsetup_r+0x84>
  40aaaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40aaae:	b293      	uxth	r3, r2
  40aab0:	0718      	lsls	r0, r3, #28
  40aab2:	d50c      	bpl.n	40aace <__swsetup_r+0x36>
  40aab4:	6920      	ldr	r0, [r4, #16]
  40aab6:	b1a8      	cbz	r0, 40aae4 <__swsetup_r+0x4c>
  40aab8:	f013 0201 	ands.w	r2, r3, #1
  40aabc:	d01e      	beq.n	40aafc <__swsetup_r+0x64>
  40aabe:	6963      	ldr	r3, [r4, #20]
  40aac0:	2200      	movs	r2, #0
  40aac2:	425b      	negs	r3, r3
  40aac4:	61a3      	str	r3, [r4, #24]
  40aac6:	60a2      	str	r2, [r4, #8]
  40aac8:	b1f0      	cbz	r0, 40ab08 <__swsetup_r+0x70>
  40aaca:	2000      	movs	r0, #0
  40aacc:	bd38      	pop	{r3, r4, r5, pc}
  40aace:	06d9      	lsls	r1, r3, #27
  40aad0:	d53c      	bpl.n	40ab4c <__swsetup_r+0xb4>
  40aad2:	0758      	lsls	r0, r3, #29
  40aad4:	d426      	bmi.n	40ab24 <__swsetup_r+0x8c>
  40aad6:	6920      	ldr	r0, [r4, #16]
  40aad8:	f042 0308 	orr.w	r3, r2, #8
  40aadc:	81a3      	strh	r3, [r4, #12]
  40aade:	b29b      	uxth	r3, r3
  40aae0:	2800      	cmp	r0, #0
  40aae2:	d1e9      	bne.n	40aab8 <__swsetup_r+0x20>
  40aae4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40aae8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40aaec:	d0e4      	beq.n	40aab8 <__swsetup_r+0x20>
  40aaee:	4628      	mov	r0, r5
  40aaf0:	4621      	mov	r1, r4
  40aaf2:	f001 fcd9 	bl	40c4a8 <__smakebuf_r>
  40aaf6:	89a3      	ldrh	r3, [r4, #12]
  40aaf8:	6920      	ldr	r0, [r4, #16]
  40aafa:	e7dd      	b.n	40aab8 <__swsetup_r+0x20>
  40aafc:	0799      	lsls	r1, r3, #30
  40aafe:	bf58      	it	pl
  40ab00:	6962      	ldrpl	r2, [r4, #20]
  40ab02:	60a2      	str	r2, [r4, #8]
  40ab04:	2800      	cmp	r0, #0
  40ab06:	d1e0      	bne.n	40aaca <__swsetup_r+0x32>
  40ab08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ab0c:	061a      	lsls	r2, r3, #24
  40ab0e:	d5dd      	bpl.n	40aacc <__swsetup_r+0x34>
  40ab10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ab14:	81a3      	strh	r3, [r4, #12]
  40ab16:	f04f 30ff 	mov.w	r0, #4294967295
  40ab1a:	bd38      	pop	{r3, r4, r5, pc}
  40ab1c:	4618      	mov	r0, r3
  40ab1e:	f001 f927 	bl	40bd70 <__sinit>
  40ab22:	e7c2      	b.n	40aaaa <__swsetup_r+0x12>
  40ab24:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40ab26:	b151      	cbz	r1, 40ab3e <__swsetup_r+0xa6>
  40ab28:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40ab2c:	4299      	cmp	r1, r3
  40ab2e:	d004      	beq.n	40ab3a <__swsetup_r+0xa2>
  40ab30:	4628      	mov	r0, r5
  40ab32:	f001 f9e7 	bl	40bf04 <_free_r>
  40ab36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40ab3a:	2300      	movs	r3, #0
  40ab3c:	6323      	str	r3, [r4, #48]	; 0x30
  40ab3e:	2300      	movs	r3, #0
  40ab40:	6920      	ldr	r0, [r4, #16]
  40ab42:	6063      	str	r3, [r4, #4]
  40ab44:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40ab48:	6020      	str	r0, [r4, #0]
  40ab4a:	e7c5      	b.n	40aad8 <__swsetup_r+0x40>
  40ab4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40ab50:	2309      	movs	r3, #9
  40ab52:	602b      	str	r3, [r5, #0]
  40ab54:	f04f 30ff 	mov.w	r0, #4294967295
  40ab58:	81a2      	strh	r2, [r4, #12]
  40ab5a:	bd38      	pop	{r3, r4, r5, pc}
  40ab5c:	20400480 	.word	0x20400480

0040ab60 <register_fini>:
  40ab60:	4b02      	ldr	r3, [pc, #8]	; (40ab6c <register_fini+0xc>)
  40ab62:	b113      	cbz	r3, 40ab6a <register_fini+0xa>
  40ab64:	4802      	ldr	r0, [pc, #8]	; (40ab70 <register_fini+0x10>)
  40ab66:	f000 b805 	b.w	40ab74 <atexit>
  40ab6a:	4770      	bx	lr
  40ab6c:	00000000 	.word	0x00000000
  40ab70:	0040bd85 	.word	0x0040bd85

0040ab74 <atexit>:
  40ab74:	2300      	movs	r3, #0
  40ab76:	4601      	mov	r1, r0
  40ab78:	461a      	mov	r2, r3
  40ab7a:	4618      	mov	r0, r3
  40ab7c:	f002 bec8 	b.w	40d910 <__register_exitproc>

0040ab80 <quorem>:
  40ab80:	6902      	ldr	r2, [r0, #16]
  40ab82:	690b      	ldr	r3, [r1, #16]
  40ab84:	4293      	cmp	r3, r2
  40ab86:	f300 808d 	bgt.w	40aca4 <quorem+0x124>
  40ab8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ab8e:	f103 38ff 	add.w	r8, r3, #4294967295
  40ab92:	f101 0714 	add.w	r7, r1, #20
  40ab96:	f100 0b14 	add.w	fp, r0, #20
  40ab9a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40ab9e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40aba2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40aba6:	b083      	sub	sp, #12
  40aba8:	3201      	adds	r2, #1
  40abaa:	fbb3 f9f2 	udiv	r9, r3, r2
  40abae:	eb0b 0304 	add.w	r3, fp, r4
  40abb2:	9400      	str	r4, [sp, #0]
  40abb4:	eb07 0a04 	add.w	sl, r7, r4
  40abb8:	9301      	str	r3, [sp, #4]
  40abba:	f1b9 0f00 	cmp.w	r9, #0
  40abbe:	d039      	beq.n	40ac34 <quorem+0xb4>
  40abc0:	2500      	movs	r5, #0
  40abc2:	46bc      	mov	ip, r7
  40abc4:	46de      	mov	lr, fp
  40abc6:	462b      	mov	r3, r5
  40abc8:	f85c 6b04 	ldr.w	r6, [ip], #4
  40abcc:	f8de 2000 	ldr.w	r2, [lr]
  40abd0:	b2b4      	uxth	r4, r6
  40abd2:	fb09 5504 	mla	r5, r9, r4, r5
  40abd6:	0c36      	lsrs	r6, r6, #16
  40abd8:	0c2c      	lsrs	r4, r5, #16
  40abda:	fb09 4406 	mla	r4, r9, r6, r4
  40abde:	b2ad      	uxth	r5, r5
  40abe0:	1b5b      	subs	r3, r3, r5
  40abe2:	b2a6      	uxth	r6, r4
  40abe4:	fa13 f382 	uxtah	r3, r3, r2
  40abe8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  40abec:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40abf0:	b29b      	uxth	r3, r3
  40abf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40abf6:	45e2      	cmp	sl, ip
  40abf8:	f84e 3b04 	str.w	r3, [lr], #4
  40abfc:	ea4f 4514 	mov.w	r5, r4, lsr #16
  40ac00:	ea4f 4326 	mov.w	r3, r6, asr #16
  40ac04:	d2e0      	bcs.n	40abc8 <quorem+0x48>
  40ac06:	9b00      	ldr	r3, [sp, #0]
  40ac08:	f85b 3003 	ldr.w	r3, [fp, r3]
  40ac0c:	b993      	cbnz	r3, 40ac34 <quorem+0xb4>
  40ac0e:	9c01      	ldr	r4, [sp, #4]
  40ac10:	1f23      	subs	r3, r4, #4
  40ac12:	459b      	cmp	fp, r3
  40ac14:	d20c      	bcs.n	40ac30 <quorem+0xb0>
  40ac16:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40ac1a:	b94b      	cbnz	r3, 40ac30 <quorem+0xb0>
  40ac1c:	f1a4 0308 	sub.w	r3, r4, #8
  40ac20:	e002      	b.n	40ac28 <quorem+0xa8>
  40ac22:	681a      	ldr	r2, [r3, #0]
  40ac24:	3b04      	subs	r3, #4
  40ac26:	b91a      	cbnz	r2, 40ac30 <quorem+0xb0>
  40ac28:	459b      	cmp	fp, r3
  40ac2a:	f108 38ff 	add.w	r8, r8, #4294967295
  40ac2e:	d3f8      	bcc.n	40ac22 <quorem+0xa2>
  40ac30:	f8c0 8010 	str.w	r8, [r0, #16]
  40ac34:	4604      	mov	r4, r0
  40ac36:	f002 f9fb 	bl	40d030 <__mcmp>
  40ac3a:	2800      	cmp	r0, #0
  40ac3c:	db2e      	blt.n	40ac9c <quorem+0x11c>
  40ac3e:	f109 0901 	add.w	r9, r9, #1
  40ac42:	465d      	mov	r5, fp
  40ac44:	2300      	movs	r3, #0
  40ac46:	f857 1b04 	ldr.w	r1, [r7], #4
  40ac4a:	6828      	ldr	r0, [r5, #0]
  40ac4c:	b28a      	uxth	r2, r1
  40ac4e:	1a9a      	subs	r2, r3, r2
  40ac50:	0c09      	lsrs	r1, r1, #16
  40ac52:	fa12 f280 	uxtah	r2, r2, r0
  40ac56:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40ac5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ac5e:	b291      	uxth	r1, r2
  40ac60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40ac64:	45ba      	cmp	sl, r7
  40ac66:	f845 1b04 	str.w	r1, [r5], #4
  40ac6a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ac6e:	d2ea      	bcs.n	40ac46 <quorem+0xc6>
  40ac70:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40ac74:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40ac78:	b982      	cbnz	r2, 40ac9c <quorem+0x11c>
  40ac7a:	1f1a      	subs	r2, r3, #4
  40ac7c:	4593      	cmp	fp, r2
  40ac7e:	d20b      	bcs.n	40ac98 <quorem+0x118>
  40ac80:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40ac84:	b942      	cbnz	r2, 40ac98 <quorem+0x118>
  40ac86:	3b08      	subs	r3, #8
  40ac88:	e002      	b.n	40ac90 <quorem+0x110>
  40ac8a:	681a      	ldr	r2, [r3, #0]
  40ac8c:	3b04      	subs	r3, #4
  40ac8e:	b91a      	cbnz	r2, 40ac98 <quorem+0x118>
  40ac90:	459b      	cmp	fp, r3
  40ac92:	f108 38ff 	add.w	r8, r8, #4294967295
  40ac96:	d3f8      	bcc.n	40ac8a <quorem+0x10a>
  40ac98:	f8c4 8010 	str.w	r8, [r4, #16]
  40ac9c:	4648      	mov	r0, r9
  40ac9e:	b003      	add	sp, #12
  40aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aca4:	2000      	movs	r0, #0
  40aca6:	4770      	bx	lr

0040aca8 <_dtoa_r>:
  40aca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40acac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40acae:	b097      	sub	sp, #92	; 0x5c
  40acb0:	4681      	mov	r9, r0
  40acb2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40acb4:	4692      	mov	sl, r2
  40acb6:	469b      	mov	fp, r3
  40acb8:	b149      	cbz	r1, 40acce <_dtoa_r+0x26>
  40acba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40acbc:	604a      	str	r2, [r1, #4]
  40acbe:	2301      	movs	r3, #1
  40acc0:	4093      	lsls	r3, r2
  40acc2:	608b      	str	r3, [r1, #8]
  40acc4:	f001 ffd2 	bl	40cc6c <_Bfree>
  40acc8:	2300      	movs	r3, #0
  40acca:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  40acce:	f1bb 0f00 	cmp.w	fp, #0
  40acd2:	46d8      	mov	r8, fp
  40acd4:	db33      	blt.n	40ad3e <_dtoa_r+0x96>
  40acd6:	2300      	movs	r3, #0
  40acd8:	6023      	str	r3, [r4, #0]
  40acda:	4ba5      	ldr	r3, [pc, #660]	; (40af70 <_dtoa_r+0x2c8>)
  40acdc:	461a      	mov	r2, r3
  40acde:	ea08 0303 	and.w	r3, r8, r3
  40ace2:	4293      	cmp	r3, r2
  40ace4:	d014      	beq.n	40ad10 <_dtoa_r+0x68>
  40ace6:	4650      	mov	r0, sl
  40ace8:	4659      	mov	r1, fp
  40acea:	2200      	movs	r2, #0
  40acec:	2300      	movs	r3, #0
  40acee:	f003 fb57 	bl	40e3a0 <__aeabi_dcmpeq>
  40acf2:	4605      	mov	r5, r0
  40acf4:	b348      	cbz	r0, 40ad4a <_dtoa_r+0xa2>
  40acf6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40acf8:	2301      	movs	r3, #1
  40acfa:	6013      	str	r3, [r2, #0]
  40acfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40acfe:	2b00      	cmp	r3, #0
  40ad00:	f000 80c5 	beq.w	40ae8e <_dtoa_r+0x1e6>
  40ad04:	489b      	ldr	r0, [pc, #620]	; (40af74 <_dtoa_r+0x2cc>)
  40ad06:	6018      	str	r0, [r3, #0]
  40ad08:	3801      	subs	r0, #1
  40ad0a:	b017      	add	sp, #92	; 0x5c
  40ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad10:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40ad12:	f242 730f 	movw	r3, #9999	; 0x270f
  40ad16:	6013      	str	r3, [r2, #0]
  40ad18:	f1ba 0f00 	cmp.w	sl, #0
  40ad1c:	f000 80a2 	beq.w	40ae64 <_dtoa_r+0x1bc>
  40ad20:	4895      	ldr	r0, [pc, #596]	; (40af78 <_dtoa_r+0x2d0>)
  40ad22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ad24:	2b00      	cmp	r3, #0
  40ad26:	d0f0      	beq.n	40ad0a <_dtoa_r+0x62>
  40ad28:	78c3      	ldrb	r3, [r0, #3]
  40ad2a:	2b00      	cmp	r3, #0
  40ad2c:	f000 80b1 	beq.w	40ae92 <_dtoa_r+0x1ea>
  40ad30:	f100 0308 	add.w	r3, r0, #8
  40ad34:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40ad36:	6013      	str	r3, [r2, #0]
  40ad38:	b017      	add	sp, #92	; 0x5c
  40ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad3e:	2301      	movs	r3, #1
  40ad40:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40ad44:	6023      	str	r3, [r4, #0]
  40ad46:	46c3      	mov	fp, r8
  40ad48:	e7c7      	b.n	40acda <_dtoa_r+0x32>
  40ad4a:	aa14      	add	r2, sp, #80	; 0x50
  40ad4c:	ab15      	add	r3, sp, #84	; 0x54
  40ad4e:	9201      	str	r2, [sp, #4]
  40ad50:	9300      	str	r3, [sp, #0]
  40ad52:	4652      	mov	r2, sl
  40ad54:	465b      	mov	r3, fp
  40ad56:	4648      	mov	r0, r9
  40ad58:	f002 fa14 	bl	40d184 <__d2b>
  40ad5c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  40ad60:	9008      	str	r0, [sp, #32]
  40ad62:	f040 8088 	bne.w	40ae76 <_dtoa_r+0x1ce>
  40ad66:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40ad68:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40ad6a:	442c      	add	r4, r5
  40ad6c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  40ad70:	2b20      	cmp	r3, #32
  40ad72:	f340 8291 	ble.w	40b298 <_dtoa_r+0x5f0>
  40ad76:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40ad7a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  40ad7e:	fa08 f803 	lsl.w	r8, r8, r3
  40ad82:	fa2a f000 	lsr.w	r0, sl, r0
  40ad86:	ea40 0008 	orr.w	r0, r0, r8
  40ad8a:	f003 f82b 	bl	40dde4 <__aeabi_ui2d>
  40ad8e:	2301      	movs	r3, #1
  40ad90:	3c01      	subs	r4, #1
  40ad92:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40ad96:	9310      	str	r3, [sp, #64]	; 0x40
  40ad98:	2200      	movs	r2, #0
  40ad9a:	4b78      	ldr	r3, [pc, #480]	; (40af7c <_dtoa_r+0x2d4>)
  40ad9c:	f002 fee4 	bl	40db68 <__aeabi_dsub>
  40ada0:	a36d      	add	r3, pc, #436	; (adr r3, 40af58 <_dtoa_r+0x2b0>)
  40ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ada6:	f003 f893 	bl	40ded0 <__aeabi_dmul>
  40adaa:	a36d      	add	r3, pc, #436	; (adr r3, 40af60 <_dtoa_r+0x2b8>)
  40adac:	e9d3 2300 	ldrd	r2, r3, [r3]
  40adb0:	f002 fedc 	bl	40db6c <__adddf3>
  40adb4:	4606      	mov	r6, r0
  40adb6:	4620      	mov	r0, r4
  40adb8:	460f      	mov	r7, r1
  40adba:	f003 f823 	bl	40de04 <__aeabi_i2d>
  40adbe:	a36a      	add	r3, pc, #424	; (adr r3, 40af68 <_dtoa_r+0x2c0>)
  40adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40adc4:	f003 f884 	bl	40ded0 <__aeabi_dmul>
  40adc8:	4602      	mov	r2, r0
  40adca:	460b      	mov	r3, r1
  40adcc:	4630      	mov	r0, r6
  40adce:	4639      	mov	r1, r7
  40add0:	f002 fecc 	bl	40db6c <__adddf3>
  40add4:	4606      	mov	r6, r0
  40add6:	460f      	mov	r7, r1
  40add8:	f003 fb2a 	bl	40e430 <__aeabi_d2iz>
  40addc:	2200      	movs	r2, #0
  40adde:	9004      	str	r0, [sp, #16]
  40ade0:	2300      	movs	r3, #0
  40ade2:	4630      	mov	r0, r6
  40ade4:	4639      	mov	r1, r7
  40ade6:	f003 fae5 	bl	40e3b4 <__aeabi_dcmplt>
  40adea:	2800      	cmp	r0, #0
  40adec:	f040 8230 	bne.w	40b250 <_dtoa_r+0x5a8>
  40adf0:	9e04      	ldr	r6, [sp, #16]
  40adf2:	2e16      	cmp	r6, #22
  40adf4:	f200 8229 	bhi.w	40b24a <_dtoa_r+0x5a2>
  40adf8:	4b61      	ldr	r3, [pc, #388]	; (40af80 <_dtoa_r+0x2d8>)
  40adfa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40adfe:	e9d3 0100 	ldrd	r0, r1, [r3]
  40ae02:	4652      	mov	r2, sl
  40ae04:	465b      	mov	r3, fp
  40ae06:	f003 faf3 	bl	40e3f0 <__aeabi_dcmpgt>
  40ae0a:	2800      	cmp	r0, #0
  40ae0c:	f000 8249 	beq.w	40b2a2 <_dtoa_r+0x5fa>
  40ae10:	1e73      	subs	r3, r6, #1
  40ae12:	9304      	str	r3, [sp, #16]
  40ae14:	2300      	movs	r3, #0
  40ae16:	930c      	str	r3, [sp, #48]	; 0x30
  40ae18:	1b2c      	subs	r4, r5, r4
  40ae1a:	1e63      	subs	r3, r4, #1
  40ae1c:	9302      	str	r3, [sp, #8]
  40ae1e:	f100 8232 	bmi.w	40b286 <_dtoa_r+0x5de>
  40ae22:	2300      	movs	r3, #0
  40ae24:	9305      	str	r3, [sp, #20]
  40ae26:	9b04      	ldr	r3, [sp, #16]
  40ae28:	2b00      	cmp	r3, #0
  40ae2a:	f2c0 8223 	blt.w	40b274 <_dtoa_r+0x5cc>
  40ae2e:	9a02      	ldr	r2, [sp, #8]
  40ae30:	930b      	str	r3, [sp, #44]	; 0x2c
  40ae32:	4611      	mov	r1, r2
  40ae34:	4419      	add	r1, r3
  40ae36:	2300      	movs	r3, #0
  40ae38:	9102      	str	r1, [sp, #8]
  40ae3a:	930a      	str	r3, [sp, #40]	; 0x28
  40ae3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40ae3e:	2b09      	cmp	r3, #9
  40ae40:	d829      	bhi.n	40ae96 <_dtoa_r+0x1ee>
  40ae42:	2b05      	cmp	r3, #5
  40ae44:	f340 8658 	ble.w	40baf8 <_dtoa_r+0xe50>
  40ae48:	3b04      	subs	r3, #4
  40ae4a:	9320      	str	r3, [sp, #128]	; 0x80
  40ae4c:	2500      	movs	r5, #0
  40ae4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40ae50:	3b02      	subs	r3, #2
  40ae52:	2b03      	cmp	r3, #3
  40ae54:	f200 8635 	bhi.w	40bac2 <_dtoa_r+0xe1a>
  40ae58:	e8df f013 	tbh	[pc, r3, lsl #1]
  40ae5c:	0228032c 	.word	0x0228032c
  40ae60:	04590337 	.word	0x04590337
  40ae64:	4b44      	ldr	r3, [pc, #272]	; (40af78 <_dtoa_r+0x2d0>)
  40ae66:	4a47      	ldr	r2, [pc, #284]	; (40af84 <_dtoa_r+0x2dc>)
  40ae68:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40ae6c:	2800      	cmp	r0, #0
  40ae6e:	bf14      	ite	ne
  40ae70:	4618      	movne	r0, r3
  40ae72:	4610      	moveq	r0, r2
  40ae74:	e755      	b.n	40ad22 <_dtoa_r+0x7a>
  40ae76:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40ae7a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40ae7e:	9510      	str	r5, [sp, #64]	; 0x40
  40ae80:	4650      	mov	r0, sl
  40ae82:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40ae86:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40ae8a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40ae8c:	e784      	b.n	40ad98 <_dtoa_r+0xf0>
  40ae8e:	483e      	ldr	r0, [pc, #248]	; (40af88 <_dtoa_r+0x2e0>)
  40ae90:	e73b      	b.n	40ad0a <_dtoa_r+0x62>
  40ae92:	1cc3      	adds	r3, r0, #3
  40ae94:	e74e      	b.n	40ad34 <_dtoa_r+0x8c>
  40ae96:	2100      	movs	r1, #0
  40ae98:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40ae9c:	4648      	mov	r0, r9
  40ae9e:	9120      	str	r1, [sp, #128]	; 0x80
  40aea0:	f001 febe 	bl	40cc20 <_Balloc>
  40aea4:	f04f 33ff 	mov.w	r3, #4294967295
  40aea8:	9306      	str	r3, [sp, #24]
  40aeaa:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40aeac:	930d      	str	r3, [sp, #52]	; 0x34
  40aeae:	2301      	movs	r3, #1
  40aeb0:	9007      	str	r0, [sp, #28]
  40aeb2:	9221      	str	r2, [sp, #132]	; 0x84
  40aeb4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40aeb8:	9309      	str	r3, [sp, #36]	; 0x24
  40aeba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40aebc:	2b00      	cmp	r3, #0
  40aebe:	f2c0 80d1 	blt.w	40b064 <_dtoa_r+0x3bc>
  40aec2:	9a04      	ldr	r2, [sp, #16]
  40aec4:	2a0e      	cmp	r2, #14
  40aec6:	f300 80cd 	bgt.w	40b064 <_dtoa_r+0x3bc>
  40aeca:	4b2d      	ldr	r3, [pc, #180]	; (40af80 <_dtoa_r+0x2d8>)
  40aecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40aed0:	e9d3 3400 	ldrd	r3, r4, [r3]
  40aed4:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40aed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40aeda:	2b00      	cmp	r3, #0
  40aedc:	f2c0 8300 	blt.w	40b4e0 <_dtoa_r+0x838>
  40aee0:	4656      	mov	r6, sl
  40aee2:	465f      	mov	r7, fp
  40aee4:	4650      	mov	r0, sl
  40aee6:	4659      	mov	r1, fp
  40aee8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40aeec:	4652      	mov	r2, sl
  40aeee:	465b      	mov	r3, fp
  40aef0:	f003 f918 	bl	40e124 <__aeabi_ddiv>
  40aef4:	f003 fa9c 	bl	40e430 <__aeabi_d2iz>
  40aef8:	4604      	mov	r4, r0
  40aefa:	f002 ff83 	bl	40de04 <__aeabi_i2d>
  40aefe:	4652      	mov	r2, sl
  40af00:	465b      	mov	r3, fp
  40af02:	f002 ffe5 	bl	40ded0 <__aeabi_dmul>
  40af06:	460b      	mov	r3, r1
  40af08:	4602      	mov	r2, r0
  40af0a:	4639      	mov	r1, r7
  40af0c:	4630      	mov	r0, r6
  40af0e:	f002 fe2b 	bl	40db68 <__aeabi_dsub>
  40af12:	9d07      	ldr	r5, [sp, #28]
  40af14:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40af18:	702b      	strb	r3, [r5, #0]
  40af1a:	9b06      	ldr	r3, [sp, #24]
  40af1c:	2b01      	cmp	r3, #1
  40af1e:	4606      	mov	r6, r0
  40af20:	460f      	mov	r7, r1
  40af22:	f105 0501 	add.w	r5, r5, #1
  40af26:	d062      	beq.n	40afee <_dtoa_r+0x346>
  40af28:	2200      	movs	r2, #0
  40af2a:	4b18      	ldr	r3, [pc, #96]	; (40af8c <_dtoa_r+0x2e4>)
  40af2c:	f002 ffd0 	bl	40ded0 <__aeabi_dmul>
  40af30:	2200      	movs	r2, #0
  40af32:	2300      	movs	r3, #0
  40af34:	4606      	mov	r6, r0
  40af36:	460f      	mov	r7, r1
  40af38:	f003 fa32 	bl	40e3a0 <__aeabi_dcmpeq>
  40af3c:	2800      	cmp	r0, #0
  40af3e:	d17e      	bne.n	40b03e <_dtoa_r+0x396>
  40af40:	f8cd 9014 	str.w	r9, [sp, #20]
  40af44:	f8dd a018 	ldr.w	sl, [sp, #24]
  40af48:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40af4c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40af50:	e029      	b.n	40afa6 <_dtoa_r+0x2fe>
  40af52:	bf00      	nop
  40af54:	f3af 8000 	nop.w
  40af58:	636f4361 	.word	0x636f4361
  40af5c:	3fd287a7 	.word	0x3fd287a7
  40af60:	8b60c8b3 	.word	0x8b60c8b3
  40af64:	3fc68a28 	.word	0x3fc68a28
  40af68:	509f79fb 	.word	0x509f79fb
  40af6c:	3fd34413 	.word	0x3fd34413
  40af70:	7ff00000 	.word	0x7ff00000
  40af74:	0040ec61 	.word	0x0040ec61
  40af78:	0040eca0 	.word	0x0040eca0
  40af7c:	3ff80000 	.word	0x3ff80000
  40af80:	0040ecb0 	.word	0x0040ecb0
  40af84:	0040ec94 	.word	0x0040ec94
  40af88:	0040ec60 	.word	0x0040ec60
  40af8c:	40240000 	.word	0x40240000
  40af90:	f002 ff9e 	bl	40ded0 <__aeabi_dmul>
  40af94:	2200      	movs	r2, #0
  40af96:	2300      	movs	r3, #0
  40af98:	4606      	mov	r6, r0
  40af9a:	460f      	mov	r7, r1
  40af9c:	f003 fa00 	bl	40e3a0 <__aeabi_dcmpeq>
  40afa0:	2800      	cmp	r0, #0
  40afa2:	f040 83b7 	bne.w	40b714 <_dtoa_r+0xa6c>
  40afa6:	4642      	mov	r2, r8
  40afa8:	464b      	mov	r3, r9
  40afaa:	4630      	mov	r0, r6
  40afac:	4639      	mov	r1, r7
  40afae:	f003 f8b9 	bl	40e124 <__aeabi_ddiv>
  40afb2:	f003 fa3d 	bl	40e430 <__aeabi_d2iz>
  40afb6:	4604      	mov	r4, r0
  40afb8:	f002 ff24 	bl	40de04 <__aeabi_i2d>
  40afbc:	4642      	mov	r2, r8
  40afbe:	464b      	mov	r3, r9
  40afc0:	f002 ff86 	bl	40ded0 <__aeabi_dmul>
  40afc4:	4602      	mov	r2, r0
  40afc6:	460b      	mov	r3, r1
  40afc8:	4630      	mov	r0, r6
  40afca:	4639      	mov	r1, r7
  40afcc:	f002 fdcc 	bl	40db68 <__aeabi_dsub>
  40afd0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40afd4:	f805 eb01 	strb.w	lr, [r5], #1
  40afd8:	ebcb 0e05 	rsb	lr, fp, r5
  40afdc:	45d6      	cmp	lr, sl
  40afde:	4606      	mov	r6, r0
  40afe0:	460f      	mov	r7, r1
  40afe2:	f04f 0200 	mov.w	r2, #0
  40afe6:	4bb0      	ldr	r3, [pc, #704]	; (40b2a8 <_dtoa_r+0x600>)
  40afe8:	d1d2      	bne.n	40af90 <_dtoa_r+0x2e8>
  40afea:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40afee:	4632      	mov	r2, r6
  40aff0:	463b      	mov	r3, r7
  40aff2:	4630      	mov	r0, r6
  40aff4:	4639      	mov	r1, r7
  40aff6:	f002 fdb9 	bl	40db6c <__adddf3>
  40affa:	4606      	mov	r6, r0
  40affc:	460f      	mov	r7, r1
  40affe:	4602      	mov	r2, r0
  40b000:	460b      	mov	r3, r1
  40b002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40b006:	f003 f9d5 	bl	40e3b4 <__aeabi_dcmplt>
  40b00a:	b940      	cbnz	r0, 40b01e <_dtoa_r+0x376>
  40b00c:	4632      	mov	r2, r6
  40b00e:	463b      	mov	r3, r7
  40b010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40b014:	f003 f9c4 	bl	40e3a0 <__aeabi_dcmpeq>
  40b018:	b188      	cbz	r0, 40b03e <_dtoa_r+0x396>
  40b01a:	07e3      	lsls	r3, r4, #31
  40b01c:	d50f      	bpl.n	40b03e <_dtoa_r+0x396>
  40b01e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40b022:	9a07      	ldr	r2, [sp, #28]
  40b024:	1e6b      	subs	r3, r5, #1
  40b026:	e004      	b.n	40b032 <_dtoa_r+0x38a>
  40b028:	429a      	cmp	r2, r3
  40b02a:	f000 842c 	beq.w	40b886 <_dtoa_r+0xbde>
  40b02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40b032:	2c39      	cmp	r4, #57	; 0x39
  40b034:	f103 0501 	add.w	r5, r3, #1
  40b038:	d0f6      	beq.n	40b028 <_dtoa_r+0x380>
  40b03a:	3401      	adds	r4, #1
  40b03c:	701c      	strb	r4, [r3, #0]
  40b03e:	9908      	ldr	r1, [sp, #32]
  40b040:	4648      	mov	r0, r9
  40b042:	f001 fe13 	bl	40cc6c <_Bfree>
  40b046:	2200      	movs	r2, #0
  40b048:	9b04      	ldr	r3, [sp, #16]
  40b04a:	702a      	strb	r2, [r5, #0]
  40b04c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40b04e:	3301      	adds	r3, #1
  40b050:	6013      	str	r3, [r2, #0]
  40b052:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b054:	2b00      	cmp	r3, #0
  40b056:	f000 83a7 	beq.w	40b7a8 <_dtoa_r+0xb00>
  40b05a:	9807      	ldr	r0, [sp, #28]
  40b05c:	601d      	str	r5, [r3, #0]
  40b05e:	b017      	add	sp, #92	; 0x5c
  40b060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b064:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b066:	2a00      	cmp	r2, #0
  40b068:	f000 8112 	beq.w	40b290 <_dtoa_r+0x5e8>
  40b06c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40b06e:	2a01      	cmp	r2, #1
  40b070:	f340 8258 	ble.w	40b524 <_dtoa_r+0x87c>
  40b074:	9b06      	ldr	r3, [sp, #24]
  40b076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b078:	1e5f      	subs	r7, r3, #1
  40b07a:	42ba      	cmp	r2, r7
  40b07c:	f2c0 8397 	blt.w	40b7ae <_dtoa_r+0xb06>
  40b080:	1bd7      	subs	r7, r2, r7
  40b082:	9b06      	ldr	r3, [sp, #24]
  40b084:	2b00      	cmp	r3, #0
  40b086:	f2c0 848a 	blt.w	40b99e <_dtoa_r+0xcf6>
  40b08a:	9d05      	ldr	r5, [sp, #20]
  40b08c:	9b06      	ldr	r3, [sp, #24]
  40b08e:	9a05      	ldr	r2, [sp, #20]
  40b090:	441a      	add	r2, r3
  40b092:	9205      	str	r2, [sp, #20]
  40b094:	9a02      	ldr	r2, [sp, #8]
  40b096:	2101      	movs	r1, #1
  40b098:	441a      	add	r2, r3
  40b09a:	4648      	mov	r0, r9
  40b09c:	9202      	str	r2, [sp, #8]
  40b09e:	f001 fe7d 	bl	40cd9c <__i2b>
  40b0a2:	4606      	mov	r6, r0
  40b0a4:	b165      	cbz	r5, 40b0c0 <_dtoa_r+0x418>
  40b0a6:	9902      	ldr	r1, [sp, #8]
  40b0a8:	2900      	cmp	r1, #0
  40b0aa:	460b      	mov	r3, r1
  40b0ac:	dd08      	ble.n	40b0c0 <_dtoa_r+0x418>
  40b0ae:	42a9      	cmp	r1, r5
  40b0b0:	9a05      	ldr	r2, [sp, #20]
  40b0b2:	bfa8      	it	ge
  40b0b4:	462b      	movge	r3, r5
  40b0b6:	1ad2      	subs	r2, r2, r3
  40b0b8:	1aed      	subs	r5, r5, r3
  40b0ba:	1acb      	subs	r3, r1, r3
  40b0bc:	9205      	str	r2, [sp, #20]
  40b0be:	9302      	str	r3, [sp, #8]
  40b0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b0c2:	2b00      	cmp	r3, #0
  40b0c4:	f340 82fc 	ble.w	40b6c0 <_dtoa_r+0xa18>
  40b0c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b0ca:	2a00      	cmp	r2, #0
  40b0cc:	f000 8201 	beq.w	40b4d2 <_dtoa_r+0x82a>
  40b0d0:	2f00      	cmp	r7, #0
  40b0d2:	f000 81fe 	beq.w	40b4d2 <_dtoa_r+0x82a>
  40b0d6:	4631      	mov	r1, r6
  40b0d8:	463a      	mov	r2, r7
  40b0da:	4648      	mov	r0, r9
  40b0dc:	f001 ff00 	bl	40cee0 <__pow5mult>
  40b0e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40b0e4:	4601      	mov	r1, r0
  40b0e6:	4642      	mov	r2, r8
  40b0e8:	4606      	mov	r6, r0
  40b0ea:	4648      	mov	r0, r9
  40b0ec:	f001 fe60 	bl	40cdb0 <__multiply>
  40b0f0:	4641      	mov	r1, r8
  40b0f2:	4604      	mov	r4, r0
  40b0f4:	4648      	mov	r0, r9
  40b0f6:	f001 fdb9 	bl	40cc6c <_Bfree>
  40b0fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b0fc:	1bdb      	subs	r3, r3, r7
  40b0fe:	930a      	str	r3, [sp, #40]	; 0x28
  40b100:	f040 81e6 	bne.w	40b4d0 <_dtoa_r+0x828>
  40b104:	2101      	movs	r1, #1
  40b106:	4648      	mov	r0, r9
  40b108:	f001 fe48 	bl	40cd9c <__i2b>
  40b10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b10e:	4680      	mov	r8, r0
  40b110:	2b00      	cmp	r3, #0
  40b112:	f000 8219 	beq.w	40b548 <_dtoa_r+0x8a0>
  40b116:	4601      	mov	r1, r0
  40b118:	461a      	mov	r2, r3
  40b11a:	4648      	mov	r0, r9
  40b11c:	f001 fee0 	bl	40cee0 <__pow5mult>
  40b120:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b122:	2b01      	cmp	r3, #1
  40b124:	4680      	mov	r8, r0
  40b126:	f340 82f8 	ble.w	40b71a <_dtoa_r+0xa72>
  40b12a:	2700      	movs	r7, #0
  40b12c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40b130:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40b134:	6918      	ldr	r0, [r3, #16]
  40b136:	f001 fde3 	bl	40cd00 <__hi0bits>
  40b13a:	f1c0 0020 	rsb	r0, r0, #32
  40b13e:	9a02      	ldr	r2, [sp, #8]
  40b140:	4410      	add	r0, r2
  40b142:	f010 001f 	ands.w	r0, r0, #31
  40b146:	f000 81f6 	beq.w	40b536 <_dtoa_r+0x88e>
  40b14a:	f1c0 0320 	rsb	r3, r0, #32
  40b14e:	2b04      	cmp	r3, #4
  40b150:	f340 84ca 	ble.w	40bae8 <_dtoa_r+0xe40>
  40b154:	9b05      	ldr	r3, [sp, #20]
  40b156:	f1c0 001c 	rsb	r0, r0, #28
  40b15a:	4403      	add	r3, r0
  40b15c:	9305      	str	r3, [sp, #20]
  40b15e:	4613      	mov	r3, r2
  40b160:	4403      	add	r3, r0
  40b162:	4405      	add	r5, r0
  40b164:	9302      	str	r3, [sp, #8]
  40b166:	9b05      	ldr	r3, [sp, #20]
  40b168:	2b00      	cmp	r3, #0
  40b16a:	dd05      	ble.n	40b178 <_dtoa_r+0x4d0>
  40b16c:	4621      	mov	r1, r4
  40b16e:	461a      	mov	r2, r3
  40b170:	4648      	mov	r0, r9
  40b172:	f001 ff05 	bl	40cf80 <__lshift>
  40b176:	4604      	mov	r4, r0
  40b178:	9b02      	ldr	r3, [sp, #8]
  40b17a:	2b00      	cmp	r3, #0
  40b17c:	dd05      	ble.n	40b18a <_dtoa_r+0x4e2>
  40b17e:	4641      	mov	r1, r8
  40b180:	461a      	mov	r2, r3
  40b182:	4648      	mov	r0, r9
  40b184:	f001 fefc 	bl	40cf80 <__lshift>
  40b188:	4680      	mov	r8, r0
  40b18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b18c:	2b00      	cmp	r3, #0
  40b18e:	f040 827c 	bne.w	40b68a <_dtoa_r+0x9e2>
  40b192:	9b06      	ldr	r3, [sp, #24]
  40b194:	2b00      	cmp	r3, #0
  40b196:	f340 8295 	ble.w	40b6c4 <_dtoa_r+0xa1c>
  40b19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b19c:	2b00      	cmp	r3, #0
  40b19e:	f040 81f5 	bne.w	40b58c <_dtoa_r+0x8e4>
  40b1a2:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40b1a6:	9f06      	ldr	r7, [sp, #24]
  40b1a8:	465d      	mov	r5, fp
  40b1aa:	e002      	b.n	40b1b2 <_dtoa_r+0x50a>
  40b1ac:	f001 fd68 	bl	40cc80 <__multadd>
  40b1b0:	4604      	mov	r4, r0
  40b1b2:	4641      	mov	r1, r8
  40b1b4:	4620      	mov	r0, r4
  40b1b6:	f7ff fce3 	bl	40ab80 <quorem>
  40b1ba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40b1be:	f805 ab01 	strb.w	sl, [r5], #1
  40b1c2:	ebcb 0305 	rsb	r3, fp, r5
  40b1c6:	42bb      	cmp	r3, r7
  40b1c8:	f04f 020a 	mov.w	r2, #10
  40b1cc:	f04f 0300 	mov.w	r3, #0
  40b1d0:	4621      	mov	r1, r4
  40b1d2:	4648      	mov	r0, r9
  40b1d4:	dbea      	blt.n	40b1ac <_dtoa_r+0x504>
  40b1d6:	9b07      	ldr	r3, [sp, #28]
  40b1d8:	9a06      	ldr	r2, [sp, #24]
  40b1da:	2a01      	cmp	r2, #1
  40b1dc:	bfac      	ite	ge
  40b1de:	189b      	addge	r3, r3, r2
  40b1e0:	3301      	addlt	r3, #1
  40b1e2:	461d      	mov	r5, r3
  40b1e4:	f04f 0b00 	mov.w	fp, #0
  40b1e8:	4621      	mov	r1, r4
  40b1ea:	2201      	movs	r2, #1
  40b1ec:	4648      	mov	r0, r9
  40b1ee:	f001 fec7 	bl	40cf80 <__lshift>
  40b1f2:	4641      	mov	r1, r8
  40b1f4:	9008      	str	r0, [sp, #32]
  40b1f6:	f001 ff1b 	bl	40d030 <__mcmp>
  40b1fa:	2800      	cmp	r0, #0
  40b1fc:	f340 830d 	ble.w	40b81a <_dtoa_r+0xb72>
  40b200:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40b204:	9907      	ldr	r1, [sp, #28]
  40b206:	1e6b      	subs	r3, r5, #1
  40b208:	e004      	b.n	40b214 <_dtoa_r+0x56c>
  40b20a:	428b      	cmp	r3, r1
  40b20c:	f000 8278 	beq.w	40b700 <_dtoa_r+0xa58>
  40b210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40b214:	2a39      	cmp	r2, #57	; 0x39
  40b216:	f103 0501 	add.w	r5, r3, #1
  40b21a:	d0f6      	beq.n	40b20a <_dtoa_r+0x562>
  40b21c:	3201      	adds	r2, #1
  40b21e:	701a      	strb	r2, [r3, #0]
  40b220:	4641      	mov	r1, r8
  40b222:	4648      	mov	r0, r9
  40b224:	f001 fd22 	bl	40cc6c <_Bfree>
  40b228:	2e00      	cmp	r6, #0
  40b22a:	f43f af08 	beq.w	40b03e <_dtoa_r+0x396>
  40b22e:	f1bb 0f00 	cmp.w	fp, #0
  40b232:	d005      	beq.n	40b240 <_dtoa_r+0x598>
  40b234:	45b3      	cmp	fp, r6
  40b236:	d003      	beq.n	40b240 <_dtoa_r+0x598>
  40b238:	4659      	mov	r1, fp
  40b23a:	4648      	mov	r0, r9
  40b23c:	f001 fd16 	bl	40cc6c <_Bfree>
  40b240:	4631      	mov	r1, r6
  40b242:	4648      	mov	r0, r9
  40b244:	f001 fd12 	bl	40cc6c <_Bfree>
  40b248:	e6f9      	b.n	40b03e <_dtoa_r+0x396>
  40b24a:	2301      	movs	r3, #1
  40b24c:	930c      	str	r3, [sp, #48]	; 0x30
  40b24e:	e5e3      	b.n	40ae18 <_dtoa_r+0x170>
  40b250:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40b254:	4640      	mov	r0, r8
  40b256:	f002 fdd5 	bl	40de04 <__aeabi_i2d>
  40b25a:	4602      	mov	r2, r0
  40b25c:	460b      	mov	r3, r1
  40b25e:	4630      	mov	r0, r6
  40b260:	4639      	mov	r1, r7
  40b262:	f003 f89d 	bl	40e3a0 <__aeabi_dcmpeq>
  40b266:	2800      	cmp	r0, #0
  40b268:	f47f adc2 	bne.w	40adf0 <_dtoa_r+0x148>
  40b26c:	f108 33ff 	add.w	r3, r8, #4294967295
  40b270:	9304      	str	r3, [sp, #16]
  40b272:	e5bd      	b.n	40adf0 <_dtoa_r+0x148>
  40b274:	9a05      	ldr	r2, [sp, #20]
  40b276:	9b04      	ldr	r3, [sp, #16]
  40b278:	1ad2      	subs	r2, r2, r3
  40b27a:	425b      	negs	r3, r3
  40b27c:	930a      	str	r3, [sp, #40]	; 0x28
  40b27e:	2300      	movs	r3, #0
  40b280:	9205      	str	r2, [sp, #20]
  40b282:	930b      	str	r3, [sp, #44]	; 0x2c
  40b284:	e5da      	b.n	40ae3c <_dtoa_r+0x194>
  40b286:	425b      	negs	r3, r3
  40b288:	9305      	str	r3, [sp, #20]
  40b28a:	2300      	movs	r3, #0
  40b28c:	9302      	str	r3, [sp, #8]
  40b28e:	e5ca      	b.n	40ae26 <_dtoa_r+0x17e>
  40b290:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b292:	9d05      	ldr	r5, [sp, #20]
  40b294:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40b296:	e705      	b.n	40b0a4 <_dtoa_r+0x3fc>
  40b298:	f1c3 0820 	rsb	r8, r3, #32
  40b29c:	fa0a f008 	lsl.w	r0, sl, r8
  40b2a0:	e573      	b.n	40ad8a <_dtoa_r+0xe2>
  40b2a2:	900c      	str	r0, [sp, #48]	; 0x30
  40b2a4:	e5b8      	b.n	40ae18 <_dtoa_r+0x170>
  40b2a6:	bf00      	nop
  40b2a8:	40240000 	.word	0x40240000
  40b2ac:	2300      	movs	r3, #0
  40b2ae:	9309      	str	r3, [sp, #36]	; 0x24
  40b2b0:	9b04      	ldr	r3, [sp, #16]
  40b2b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40b2b4:	4413      	add	r3, r2
  40b2b6:	930d      	str	r3, [sp, #52]	; 0x34
  40b2b8:	3301      	adds	r3, #1
  40b2ba:	2b00      	cmp	r3, #0
  40b2bc:	9306      	str	r3, [sp, #24]
  40b2be:	f340 8283 	ble.w	40b7c8 <_dtoa_r+0xb20>
  40b2c2:	9c06      	ldr	r4, [sp, #24]
  40b2c4:	4626      	mov	r6, r4
  40b2c6:	2100      	movs	r1, #0
  40b2c8:	2e17      	cmp	r6, #23
  40b2ca:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40b2ce:	d90b      	bls.n	40b2e8 <_dtoa_r+0x640>
  40b2d0:	2201      	movs	r2, #1
  40b2d2:	2304      	movs	r3, #4
  40b2d4:	005b      	lsls	r3, r3, #1
  40b2d6:	f103 0014 	add.w	r0, r3, #20
  40b2da:	42b0      	cmp	r0, r6
  40b2dc:	4611      	mov	r1, r2
  40b2de:	f102 0201 	add.w	r2, r2, #1
  40b2e2:	d9f7      	bls.n	40b2d4 <_dtoa_r+0x62c>
  40b2e4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40b2e8:	4648      	mov	r0, r9
  40b2ea:	f001 fc99 	bl	40cc20 <_Balloc>
  40b2ee:	2c0e      	cmp	r4, #14
  40b2f0:	9007      	str	r0, [sp, #28]
  40b2f2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40b2f6:	f63f ade0 	bhi.w	40aeba <_dtoa_r+0x212>
  40b2fa:	2d00      	cmp	r5, #0
  40b2fc:	f43f addd 	beq.w	40aeba <_dtoa_r+0x212>
  40b300:	9904      	ldr	r1, [sp, #16]
  40b302:	4657      	mov	r7, sl
  40b304:	46d8      	mov	r8, fp
  40b306:	2900      	cmp	r1, #0
  40b308:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40b30c:	f340 8292 	ble.w	40b834 <_dtoa_r+0xb8c>
  40b310:	4b91      	ldr	r3, [pc, #580]	; (40b558 <_dtoa_r+0x8b0>)
  40b312:	f001 020f 	and.w	r2, r1, #15
  40b316:	110e      	asrs	r6, r1, #4
  40b318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b31c:	06f0      	lsls	r0, r6, #27
  40b31e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40b322:	f140 824c 	bpl.w	40b7be <_dtoa_r+0xb16>
  40b326:	4b8d      	ldr	r3, [pc, #564]	; (40b55c <_dtoa_r+0x8b4>)
  40b328:	4650      	mov	r0, sl
  40b32a:	4659      	mov	r1, fp
  40b32c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40b330:	f002 fef8 	bl	40e124 <__aeabi_ddiv>
  40b334:	f006 060f 	and.w	r6, r6, #15
  40b338:	4682      	mov	sl, r0
  40b33a:	468b      	mov	fp, r1
  40b33c:	f04f 0803 	mov.w	r8, #3
  40b340:	b186      	cbz	r6, 40b364 <_dtoa_r+0x6bc>
  40b342:	4f86      	ldr	r7, [pc, #536]	; (40b55c <_dtoa_r+0x8b4>)
  40b344:	07f1      	lsls	r1, r6, #31
  40b346:	d509      	bpl.n	40b35c <_dtoa_r+0x6b4>
  40b348:	4620      	mov	r0, r4
  40b34a:	4629      	mov	r1, r5
  40b34c:	e9d7 2300 	ldrd	r2, r3, [r7]
  40b350:	f002 fdbe 	bl	40ded0 <__aeabi_dmul>
  40b354:	f108 0801 	add.w	r8, r8, #1
  40b358:	4604      	mov	r4, r0
  40b35a:	460d      	mov	r5, r1
  40b35c:	1076      	asrs	r6, r6, #1
  40b35e:	f107 0708 	add.w	r7, r7, #8
  40b362:	d1ef      	bne.n	40b344 <_dtoa_r+0x69c>
  40b364:	4622      	mov	r2, r4
  40b366:	462b      	mov	r3, r5
  40b368:	4650      	mov	r0, sl
  40b36a:	4659      	mov	r1, fp
  40b36c:	f002 feda 	bl	40e124 <__aeabi_ddiv>
  40b370:	4606      	mov	r6, r0
  40b372:	460f      	mov	r7, r1
  40b374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b376:	b143      	cbz	r3, 40b38a <_dtoa_r+0x6e2>
  40b378:	2200      	movs	r2, #0
  40b37a:	4b79      	ldr	r3, [pc, #484]	; (40b560 <_dtoa_r+0x8b8>)
  40b37c:	4630      	mov	r0, r6
  40b37e:	4639      	mov	r1, r7
  40b380:	f003 f818 	bl	40e3b4 <__aeabi_dcmplt>
  40b384:	2800      	cmp	r0, #0
  40b386:	f040 8320 	bne.w	40b9ca <_dtoa_r+0xd22>
  40b38a:	4640      	mov	r0, r8
  40b38c:	f002 fd3a 	bl	40de04 <__aeabi_i2d>
  40b390:	4632      	mov	r2, r6
  40b392:	463b      	mov	r3, r7
  40b394:	f002 fd9c 	bl	40ded0 <__aeabi_dmul>
  40b398:	4b72      	ldr	r3, [pc, #456]	; (40b564 <_dtoa_r+0x8bc>)
  40b39a:	2200      	movs	r2, #0
  40b39c:	f002 fbe6 	bl	40db6c <__adddf3>
  40b3a0:	9b06      	ldr	r3, [sp, #24]
  40b3a2:	4604      	mov	r4, r0
  40b3a4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40b3a8:	2b00      	cmp	r3, #0
  40b3aa:	f000 81df 	beq.w	40b76c <_dtoa_r+0xac4>
  40b3ae:	9b04      	ldr	r3, [sp, #16]
  40b3b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40b3b4:	9311      	str	r3, [sp, #68]	; 0x44
  40b3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b3b8:	2b00      	cmp	r3, #0
  40b3ba:	f000 8297 	beq.w	40b8ec <_dtoa_r+0xc44>
  40b3be:	4b66      	ldr	r3, [pc, #408]	; (40b558 <_dtoa_r+0x8b0>)
  40b3c0:	4969      	ldr	r1, [pc, #420]	; (40b568 <_dtoa_r+0x8c0>)
  40b3c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40b3c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40b3ca:	2000      	movs	r0, #0
  40b3cc:	f002 feaa 	bl	40e124 <__aeabi_ddiv>
  40b3d0:	4622      	mov	r2, r4
  40b3d2:	462b      	mov	r3, r5
  40b3d4:	f002 fbc8 	bl	40db68 <__aeabi_dsub>
  40b3d8:	4682      	mov	sl, r0
  40b3da:	468b      	mov	fp, r1
  40b3dc:	4630      	mov	r0, r6
  40b3de:	4639      	mov	r1, r7
  40b3e0:	f003 f826 	bl	40e430 <__aeabi_d2iz>
  40b3e4:	4604      	mov	r4, r0
  40b3e6:	f002 fd0d 	bl	40de04 <__aeabi_i2d>
  40b3ea:	4602      	mov	r2, r0
  40b3ec:	460b      	mov	r3, r1
  40b3ee:	4630      	mov	r0, r6
  40b3f0:	4639      	mov	r1, r7
  40b3f2:	f002 fbb9 	bl	40db68 <__aeabi_dsub>
  40b3f6:	3430      	adds	r4, #48	; 0x30
  40b3f8:	9d07      	ldr	r5, [sp, #28]
  40b3fa:	b2e4      	uxtb	r4, r4
  40b3fc:	4606      	mov	r6, r0
  40b3fe:	460f      	mov	r7, r1
  40b400:	702c      	strb	r4, [r5, #0]
  40b402:	4602      	mov	r2, r0
  40b404:	460b      	mov	r3, r1
  40b406:	4650      	mov	r0, sl
  40b408:	4659      	mov	r1, fp
  40b40a:	3501      	adds	r5, #1
  40b40c:	f002 fff0 	bl	40e3f0 <__aeabi_dcmpgt>
  40b410:	2800      	cmp	r0, #0
  40b412:	d14c      	bne.n	40b4ae <_dtoa_r+0x806>
  40b414:	4632      	mov	r2, r6
  40b416:	463b      	mov	r3, r7
  40b418:	2000      	movs	r0, #0
  40b41a:	4951      	ldr	r1, [pc, #324]	; (40b560 <_dtoa_r+0x8b8>)
  40b41c:	f002 fba4 	bl	40db68 <__aeabi_dsub>
  40b420:	4602      	mov	r2, r0
  40b422:	460b      	mov	r3, r1
  40b424:	4650      	mov	r0, sl
  40b426:	4659      	mov	r1, fp
  40b428:	f002 ffe2 	bl	40e3f0 <__aeabi_dcmpgt>
  40b42c:	2800      	cmp	r0, #0
  40b42e:	f040 830d 	bne.w	40ba4c <_dtoa_r+0xda4>
  40b432:	f1b8 0f01 	cmp.w	r8, #1
  40b436:	f340 81b3 	ble.w	40b7a0 <_dtoa_r+0xaf8>
  40b43a:	9b07      	ldr	r3, [sp, #28]
  40b43c:	4498      	add	r8, r3
  40b43e:	e00d      	b.n	40b45c <_dtoa_r+0x7b4>
  40b440:	2000      	movs	r0, #0
  40b442:	4947      	ldr	r1, [pc, #284]	; (40b560 <_dtoa_r+0x8b8>)
  40b444:	f002 fb90 	bl	40db68 <__aeabi_dsub>
  40b448:	4652      	mov	r2, sl
  40b44a:	465b      	mov	r3, fp
  40b44c:	f002 ffb2 	bl	40e3b4 <__aeabi_dcmplt>
  40b450:	2800      	cmp	r0, #0
  40b452:	f040 82fb 	bne.w	40ba4c <_dtoa_r+0xda4>
  40b456:	4545      	cmp	r5, r8
  40b458:	f000 81a2 	beq.w	40b7a0 <_dtoa_r+0xaf8>
  40b45c:	4650      	mov	r0, sl
  40b45e:	4659      	mov	r1, fp
  40b460:	2200      	movs	r2, #0
  40b462:	4b42      	ldr	r3, [pc, #264]	; (40b56c <_dtoa_r+0x8c4>)
  40b464:	f002 fd34 	bl	40ded0 <__aeabi_dmul>
  40b468:	2200      	movs	r2, #0
  40b46a:	4b40      	ldr	r3, [pc, #256]	; (40b56c <_dtoa_r+0x8c4>)
  40b46c:	4682      	mov	sl, r0
  40b46e:	468b      	mov	fp, r1
  40b470:	4630      	mov	r0, r6
  40b472:	4639      	mov	r1, r7
  40b474:	f002 fd2c 	bl	40ded0 <__aeabi_dmul>
  40b478:	460f      	mov	r7, r1
  40b47a:	4606      	mov	r6, r0
  40b47c:	f002 ffd8 	bl	40e430 <__aeabi_d2iz>
  40b480:	4604      	mov	r4, r0
  40b482:	f002 fcbf 	bl	40de04 <__aeabi_i2d>
  40b486:	4602      	mov	r2, r0
  40b488:	460b      	mov	r3, r1
  40b48a:	4630      	mov	r0, r6
  40b48c:	4639      	mov	r1, r7
  40b48e:	f002 fb6b 	bl	40db68 <__aeabi_dsub>
  40b492:	3430      	adds	r4, #48	; 0x30
  40b494:	b2e4      	uxtb	r4, r4
  40b496:	4652      	mov	r2, sl
  40b498:	465b      	mov	r3, fp
  40b49a:	f805 4b01 	strb.w	r4, [r5], #1
  40b49e:	4606      	mov	r6, r0
  40b4a0:	460f      	mov	r7, r1
  40b4a2:	f002 ff87 	bl	40e3b4 <__aeabi_dcmplt>
  40b4a6:	4632      	mov	r2, r6
  40b4a8:	463b      	mov	r3, r7
  40b4aa:	2800      	cmp	r0, #0
  40b4ac:	d0c8      	beq.n	40b440 <_dtoa_r+0x798>
  40b4ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b4b0:	9304      	str	r3, [sp, #16]
  40b4b2:	e5c4      	b.n	40b03e <_dtoa_r+0x396>
  40b4b4:	2300      	movs	r3, #0
  40b4b6:	9309      	str	r3, [sp, #36]	; 0x24
  40b4b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40b4ba:	2b00      	cmp	r3, #0
  40b4bc:	f340 8189 	ble.w	40b7d2 <_dtoa_r+0xb2a>
  40b4c0:	461e      	mov	r6, r3
  40b4c2:	461c      	mov	r4, r3
  40b4c4:	930d      	str	r3, [sp, #52]	; 0x34
  40b4c6:	9306      	str	r3, [sp, #24]
  40b4c8:	e6fd      	b.n	40b2c6 <_dtoa_r+0x61e>
  40b4ca:	2301      	movs	r3, #1
  40b4cc:	9309      	str	r3, [sp, #36]	; 0x24
  40b4ce:	e7f3      	b.n	40b4b8 <_dtoa_r+0x810>
  40b4d0:	9408      	str	r4, [sp, #32]
  40b4d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b4d4:	9908      	ldr	r1, [sp, #32]
  40b4d6:	4648      	mov	r0, r9
  40b4d8:	f001 fd02 	bl	40cee0 <__pow5mult>
  40b4dc:	4604      	mov	r4, r0
  40b4de:	e611      	b.n	40b104 <_dtoa_r+0x45c>
  40b4e0:	9b06      	ldr	r3, [sp, #24]
  40b4e2:	2b00      	cmp	r3, #0
  40b4e4:	f73f acfc 	bgt.w	40aee0 <_dtoa_r+0x238>
  40b4e8:	f040 82da 	bne.w	40baa0 <_dtoa_r+0xdf8>
  40b4ec:	2200      	movs	r2, #0
  40b4ee:	4b20      	ldr	r3, [pc, #128]	; (40b570 <_dtoa_r+0x8c8>)
  40b4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40b4f4:	f002 fcec 	bl	40ded0 <__aeabi_dmul>
  40b4f8:	4652      	mov	r2, sl
  40b4fa:	465b      	mov	r3, fp
  40b4fc:	f002 ff6e 	bl	40e3dc <__aeabi_dcmpge>
  40b500:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40b504:	4646      	mov	r6, r8
  40b506:	2800      	cmp	r0, #0
  40b508:	f000 80f2 	beq.w	40b6f0 <_dtoa_r+0xa48>
  40b50c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40b50e:	9d07      	ldr	r5, [sp, #28]
  40b510:	43db      	mvns	r3, r3
  40b512:	9304      	str	r3, [sp, #16]
  40b514:	4641      	mov	r1, r8
  40b516:	4648      	mov	r0, r9
  40b518:	f001 fba8 	bl	40cc6c <_Bfree>
  40b51c:	2e00      	cmp	r6, #0
  40b51e:	f43f ad8e 	beq.w	40b03e <_dtoa_r+0x396>
  40b522:	e68d      	b.n	40b240 <_dtoa_r+0x598>
  40b524:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40b526:	2a00      	cmp	r2, #0
  40b528:	f000 8241 	beq.w	40b9ae <_dtoa_r+0xd06>
  40b52c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40b530:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b532:	9d05      	ldr	r5, [sp, #20]
  40b534:	e5ab      	b.n	40b08e <_dtoa_r+0x3e6>
  40b536:	201c      	movs	r0, #28
  40b538:	9b05      	ldr	r3, [sp, #20]
  40b53a:	4403      	add	r3, r0
  40b53c:	9305      	str	r3, [sp, #20]
  40b53e:	9b02      	ldr	r3, [sp, #8]
  40b540:	4403      	add	r3, r0
  40b542:	4405      	add	r5, r0
  40b544:	9302      	str	r3, [sp, #8]
  40b546:	e60e      	b.n	40b166 <_dtoa_r+0x4be>
  40b548:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b54a:	2b01      	cmp	r3, #1
  40b54c:	f340 8282 	ble.w	40ba54 <_dtoa_r+0xdac>
  40b550:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40b552:	2001      	movs	r0, #1
  40b554:	e5f3      	b.n	40b13e <_dtoa_r+0x496>
  40b556:	bf00      	nop
  40b558:	0040ecb0 	.word	0x0040ecb0
  40b55c:	0040ed78 	.word	0x0040ed78
  40b560:	3ff00000 	.word	0x3ff00000
  40b564:	401c0000 	.word	0x401c0000
  40b568:	3fe00000 	.word	0x3fe00000
  40b56c:	40240000 	.word	0x40240000
  40b570:	40140000 	.word	0x40140000
  40b574:	4631      	mov	r1, r6
  40b576:	2300      	movs	r3, #0
  40b578:	220a      	movs	r2, #10
  40b57a:	4648      	mov	r0, r9
  40b57c:	f001 fb80 	bl	40cc80 <__multadd>
  40b580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b582:	2b00      	cmp	r3, #0
  40b584:	4606      	mov	r6, r0
  40b586:	f340 8297 	ble.w	40bab8 <_dtoa_r+0xe10>
  40b58a:	9306      	str	r3, [sp, #24]
  40b58c:	2d00      	cmp	r5, #0
  40b58e:	dd05      	ble.n	40b59c <_dtoa_r+0x8f4>
  40b590:	4631      	mov	r1, r6
  40b592:	462a      	mov	r2, r5
  40b594:	4648      	mov	r0, r9
  40b596:	f001 fcf3 	bl	40cf80 <__lshift>
  40b59a:	4606      	mov	r6, r0
  40b59c:	2f00      	cmp	r7, #0
  40b59e:	f040 817c 	bne.w	40b89a <_dtoa_r+0xbf2>
  40b5a2:	9605      	str	r6, [sp, #20]
  40b5a4:	9b06      	ldr	r3, [sp, #24]
  40b5a6:	9a07      	ldr	r2, [sp, #28]
  40b5a8:	f8dd b014 	ldr.w	fp, [sp, #20]
  40b5ac:	3b01      	subs	r3, #1
  40b5ae:	18d3      	adds	r3, r2, r3
  40b5b0:	9308      	str	r3, [sp, #32]
  40b5b2:	f00a 0301 	and.w	r3, sl, #1
  40b5b6:	9309      	str	r3, [sp, #36]	; 0x24
  40b5b8:	4617      	mov	r7, r2
  40b5ba:	46c2      	mov	sl, r8
  40b5bc:	4651      	mov	r1, sl
  40b5be:	4620      	mov	r0, r4
  40b5c0:	f7ff fade 	bl	40ab80 <quorem>
  40b5c4:	4631      	mov	r1, r6
  40b5c6:	4605      	mov	r5, r0
  40b5c8:	4620      	mov	r0, r4
  40b5ca:	f001 fd31 	bl	40d030 <__mcmp>
  40b5ce:	465a      	mov	r2, fp
  40b5d0:	9002      	str	r0, [sp, #8]
  40b5d2:	4651      	mov	r1, sl
  40b5d4:	4648      	mov	r0, r9
  40b5d6:	f001 fd4b 	bl	40d070 <__mdiff>
  40b5da:	68c2      	ldr	r2, [r0, #12]
  40b5dc:	4680      	mov	r8, r0
  40b5de:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40b5e2:	2a00      	cmp	r2, #0
  40b5e4:	d149      	bne.n	40b67a <_dtoa_r+0x9d2>
  40b5e6:	4601      	mov	r1, r0
  40b5e8:	4620      	mov	r0, r4
  40b5ea:	9306      	str	r3, [sp, #24]
  40b5ec:	f001 fd20 	bl	40d030 <__mcmp>
  40b5f0:	4641      	mov	r1, r8
  40b5f2:	9005      	str	r0, [sp, #20]
  40b5f4:	4648      	mov	r0, r9
  40b5f6:	f001 fb39 	bl	40cc6c <_Bfree>
  40b5fa:	9a05      	ldr	r2, [sp, #20]
  40b5fc:	9b06      	ldr	r3, [sp, #24]
  40b5fe:	b92a      	cbnz	r2, 40b60c <_dtoa_r+0x964>
  40b600:	9920      	ldr	r1, [sp, #128]	; 0x80
  40b602:	b919      	cbnz	r1, 40b60c <_dtoa_r+0x964>
  40b604:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b606:	2900      	cmp	r1, #0
  40b608:	f000 8236 	beq.w	40ba78 <_dtoa_r+0xdd0>
  40b60c:	9902      	ldr	r1, [sp, #8]
  40b60e:	2900      	cmp	r1, #0
  40b610:	f2c0 80e4 	blt.w	40b7dc <_dtoa_r+0xb34>
  40b614:	d105      	bne.n	40b622 <_dtoa_r+0x97a>
  40b616:	9920      	ldr	r1, [sp, #128]	; 0x80
  40b618:	b919      	cbnz	r1, 40b622 <_dtoa_r+0x97a>
  40b61a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b61c:	2900      	cmp	r1, #0
  40b61e:	f000 80dd 	beq.w	40b7dc <_dtoa_r+0xb34>
  40b622:	2a00      	cmp	r2, #0
  40b624:	f300 814d 	bgt.w	40b8c2 <_dtoa_r+0xc1a>
  40b628:	9a08      	ldr	r2, [sp, #32]
  40b62a:	703b      	strb	r3, [r7, #0]
  40b62c:	f107 0801 	add.w	r8, r7, #1
  40b630:	4297      	cmp	r7, r2
  40b632:	4645      	mov	r5, r8
  40b634:	f000 8154 	beq.w	40b8e0 <_dtoa_r+0xc38>
  40b638:	4621      	mov	r1, r4
  40b63a:	2300      	movs	r3, #0
  40b63c:	220a      	movs	r2, #10
  40b63e:	4648      	mov	r0, r9
  40b640:	f001 fb1e 	bl	40cc80 <__multadd>
  40b644:	455e      	cmp	r6, fp
  40b646:	4604      	mov	r4, r0
  40b648:	4631      	mov	r1, r6
  40b64a:	f04f 0300 	mov.w	r3, #0
  40b64e:	f04f 020a 	mov.w	r2, #10
  40b652:	4648      	mov	r0, r9
  40b654:	d00b      	beq.n	40b66e <_dtoa_r+0x9c6>
  40b656:	f001 fb13 	bl	40cc80 <__multadd>
  40b65a:	4659      	mov	r1, fp
  40b65c:	4606      	mov	r6, r0
  40b65e:	2300      	movs	r3, #0
  40b660:	220a      	movs	r2, #10
  40b662:	4648      	mov	r0, r9
  40b664:	f001 fb0c 	bl	40cc80 <__multadd>
  40b668:	4647      	mov	r7, r8
  40b66a:	4683      	mov	fp, r0
  40b66c:	e7a6      	b.n	40b5bc <_dtoa_r+0x914>
  40b66e:	f001 fb07 	bl	40cc80 <__multadd>
  40b672:	4647      	mov	r7, r8
  40b674:	4606      	mov	r6, r0
  40b676:	4683      	mov	fp, r0
  40b678:	e7a0      	b.n	40b5bc <_dtoa_r+0x914>
  40b67a:	4601      	mov	r1, r0
  40b67c:	4648      	mov	r0, r9
  40b67e:	9305      	str	r3, [sp, #20]
  40b680:	f001 faf4 	bl	40cc6c <_Bfree>
  40b684:	2201      	movs	r2, #1
  40b686:	9b05      	ldr	r3, [sp, #20]
  40b688:	e7c0      	b.n	40b60c <_dtoa_r+0x964>
  40b68a:	4641      	mov	r1, r8
  40b68c:	4620      	mov	r0, r4
  40b68e:	f001 fccf 	bl	40d030 <__mcmp>
  40b692:	2800      	cmp	r0, #0
  40b694:	f6bf ad7d 	bge.w	40b192 <_dtoa_r+0x4ea>
  40b698:	4621      	mov	r1, r4
  40b69a:	9c04      	ldr	r4, [sp, #16]
  40b69c:	2300      	movs	r3, #0
  40b69e:	3c01      	subs	r4, #1
  40b6a0:	220a      	movs	r2, #10
  40b6a2:	4648      	mov	r0, r9
  40b6a4:	9404      	str	r4, [sp, #16]
  40b6a6:	f001 faeb 	bl	40cc80 <__multadd>
  40b6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b6ac:	4604      	mov	r4, r0
  40b6ae:	2b00      	cmp	r3, #0
  40b6b0:	f47f af60 	bne.w	40b574 <_dtoa_r+0x8cc>
  40b6b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b6b6:	2b00      	cmp	r3, #0
  40b6b8:	f340 81f6 	ble.w	40baa8 <_dtoa_r+0xe00>
  40b6bc:	9306      	str	r3, [sp, #24]
  40b6be:	e570      	b.n	40b1a2 <_dtoa_r+0x4fa>
  40b6c0:	9c08      	ldr	r4, [sp, #32]
  40b6c2:	e51f      	b.n	40b104 <_dtoa_r+0x45c>
  40b6c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b6c6:	2b02      	cmp	r3, #2
  40b6c8:	f77f ad67 	ble.w	40b19a <_dtoa_r+0x4f2>
  40b6cc:	9b06      	ldr	r3, [sp, #24]
  40b6ce:	2b00      	cmp	r3, #0
  40b6d0:	f040 8179 	bne.w	40b9c6 <_dtoa_r+0xd1e>
  40b6d4:	4641      	mov	r1, r8
  40b6d6:	2205      	movs	r2, #5
  40b6d8:	4648      	mov	r0, r9
  40b6da:	f001 fad1 	bl	40cc80 <__multadd>
  40b6de:	4601      	mov	r1, r0
  40b6e0:	4680      	mov	r8, r0
  40b6e2:	4620      	mov	r0, r4
  40b6e4:	f001 fca4 	bl	40d030 <__mcmp>
  40b6e8:	2800      	cmp	r0, #0
  40b6ea:	9408      	str	r4, [sp, #32]
  40b6ec:	f77f af0e 	ble.w	40b50c <_dtoa_r+0x864>
  40b6f0:	9a04      	ldr	r2, [sp, #16]
  40b6f2:	9907      	ldr	r1, [sp, #28]
  40b6f4:	2331      	movs	r3, #49	; 0x31
  40b6f6:	3201      	adds	r2, #1
  40b6f8:	9204      	str	r2, [sp, #16]
  40b6fa:	700b      	strb	r3, [r1, #0]
  40b6fc:	1c4d      	adds	r5, r1, #1
  40b6fe:	e709      	b.n	40b514 <_dtoa_r+0x86c>
  40b700:	9a04      	ldr	r2, [sp, #16]
  40b702:	3201      	adds	r2, #1
  40b704:	9204      	str	r2, [sp, #16]
  40b706:	9a07      	ldr	r2, [sp, #28]
  40b708:	2331      	movs	r3, #49	; 0x31
  40b70a:	7013      	strb	r3, [r2, #0]
  40b70c:	e588      	b.n	40b220 <_dtoa_r+0x578>
  40b70e:	2301      	movs	r3, #1
  40b710:	9309      	str	r3, [sp, #36]	; 0x24
  40b712:	e5cd      	b.n	40b2b0 <_dtoa_r+0x608>
  40b714:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40b718:	e491      	b.n	40b03e <_dtoa_r+0x396>
  40b71a:	f1ba 0f00 	cmp.w	sl, #0
  40b71e:	f47f ad04 	bne.w	40b12a <_dtoa_r+0x482>
  40b722:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40b726:	2b00      	cmp	r3, #0
  40b728:	f040 813f 	bne.w	40b9aa <_dtoa_r+0xd02>
  40b72c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40b730:	0d3f      	lsrs	r7, r7, #20
  40b732:	053f      	lsls	r7, r7, #20
  40b734:	b137      	cbz	r7, 40b744 <_dtoa_r+0xa9c>
  40b736:	9b05      	ldr	r3, [sp, #20]
  40b738:	3301      	adds	r3, #1
  40b73a:	9305      	str	r3, [sp, #20]
  40b73c:	9b02      	ldr	r3, [sp, #8]
  40b73e:	3301      	adds	r3, #1
  40b740:	9302      	str	r3, [sp, #8]
  40b742:	2701      	movs	r7, #1
  40b744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b746:	2001      	movs	r0, #1
  40b748:	2b00      	cmp	r3, #0
  40b74a:	f43f acf8 	beq.w	40b13e <_dtoa_r+0x496>
  40b74e:	e4ed      	b.n	40b12c <_dtoa_r+0x484>
  40b750:	4640      	mov	r0, r8
  40b752:	f002 fb57 	bl	40de04 <__aeabi_i2d>
  40b756:	4632      	mov	r2, r6
  40b758:	463b      	mov	r3, r7
  40b75a:	f002 fbb9 	bl	40ded0 <__aeabi_dmul>
  40b75e:	2200      	movs	r2, #0
  40b760:	4bbf      	ldr	r3, [pc, #764]	; (40ba60 <_dtoa_r+0xdb8>)
  40b762:	f002 fa03 	bl	40db6c <__adddf3>
  40b766:	4604      	mov	r4, r0
  40b768:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40b76c:	4630      	mov	r0, r6
  40b76e:	4639      	mov	r1, r7
  40b770:	2200      	movs	r2, #0
  40b772:	4bbc      	ldr	r3, [pc, #752]	; (40ba64 <_dtoa_r+0xdbc>)
  40b774:	f002 f9f8 	bl	40db68 <__aeabi_dsub>
  40b778:	4622      	mov	r2, r4
  40b77a:	462b      	mov	r3, r5
  40b77c:	4606      	mov	r6, r0
  40b77e:	460f      	mov	r7, r1
  40b780:	f002 fe36 	bl	40e3f0 <__aeabi_dcmpgt>
  40b784:	4680      	mov	r8, r0
  40b786:	2800      	cmp	r0, #0
  40b788:	f040 8105 	bne.w	40b996 <_dtoa_r+0xcee>
  40b78c:	4622      	mov	r2, r4
  40b78e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40b792:	4630      	mov	r0, r6
  40b794:	4639      	mov	r1, r7
  40b796:	f002 fe0d 	bl	40e3b4 <__aeabi_dcmplt>
  40b79a:	b108      	cbz	r0, 40b7a0 <_dtoa_r+0xaf8>
  40b79c:	4646      	mov	r6, r8
  40b79e:	e6b5      	b.n	40b50c <_dtoa_r+0x864>
  40b7a0:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40b7a4:	f7ff bb89 	b.w	40aeba <_dtoa_r+0x212>
  40b7a8:	9807      	ldr	r0, [sp, #28]
  40b7aa:	f7ff baae 	b.w	40ad0a <_dtoa_r+0x62>
  40b7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b7b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b7b2:	970a      	str	r7, [sp, #40]	; 0x28
  40b7b4:	1afb      	subs	r3, r7, r3
  40b7b6:	441a      	add	r2, r3
  40b7b8:	920b      	str	r2, [sp, #44]	; 0x2c
  40b7ba:	2700      	movs	r7, #0
  40b7bc:	e461      	b.n	40b082 <_dtoa_r+0x3da>
  40b7be:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40b7c2:	f04f 0802 	mov.w	r8, #2
  40b7c6:	e5bb      	b.n	40b340 <_dtoa_r+0x698>
  40b7c8:	461c      	mov	r4, r3
  40b7ca:	2100      	movs	r1, #0
  40b7cc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40b7d0:	e58a      	b.n	40b2e8 <_dtoa_r+0x640>
  40b7d2:	2401      	movs	r4, #1
  40b7d4:	9421      	str	r4, [sp, #132]	; 0x84
  40b7d6:	940d      	str	r4, [sp, #52]	; 0x34
  40b7d8:	9406      	str	r4, [sp, #24]
  40b7da:	e7f6      	b.n	40b7ca <_dtoa_r+0xb22>
  40b7dc:	2a00      	cmp	r2, #0
  40b7de:	46d0      	mov	r8, sl
  40b7e0:	f8cd b014 	str.w	fp, [sp, #20]
  40b7e4:	469a      	mov	sl, r3
  40b7e6:	dd11      	ble.n	40b80c <_dtoa_r+0xb64>
  40b7e8:	4621      	mov	r1, r4
  40b7ea:	2201      	movs	r2, #1
  40b7ec:	4648      	mov	r0, r9
  40b7ee:	f001 fbc7 	bl	40cf80 <__lshift>
  40b7f2:	4641      	mov	r1, r8
  40b7f4:	4604      	mov	r4, r0
  40b7f6:	f001 fc1b 	bl	40d030 <__mcmp>
  40b7fa:	2800      	cmp	r0, #0
  40b7fc:	f340 8149 	ble.w	40ba92 <_dtoa_r+0xdea>
  40b800:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40b804:	f000 8106 	beq.w	40ba14 <_dtoa_r+0xd6c>
  40b808:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40b80c:	46b3      	mov	fp, r6
  40b80e:	f887 a000 	strb.w	sl, [r7]
  40b812:	1c7d      	adds	r5, r7, #1
  40b814:	9e05      	ldr	r6, [sp, #20]
  40b816:	9408      	str	r4, [sp, #32]
  40b818:	e502      	b.n	40b220 <_dtoa_r+0x578>
  40b81a:	d104      	bne.n	40b826 <_dtoa_r+0xb7e>
  40b81c:	f01a 0f01 	tst.w	sl, #1
  40b820:	d001      	beq.n	40b826 <_dtoa_r+0xb7e>
  40b822:	e4ed      	b.n	40b200 <_dtoa_r+0x558>
  40b824:	4615      	mov	r5, r2
  40b826:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b82a:	2b30      	cmp	r3, #48	; 0x30
  40b82c:	f105 32ff 	add.w	r2, r5, #4294967295
  40b830:	d0f8      	beq.n	40b824 <_dtoa_r+0xb7c>
  40b832:	e4f5      	b.n	40b220 <_dtoa_r+0x578>
  40b834:	9b04      	ldr	r3, [sp, #16]
  40b836:	425c      	negs	r4, r3
  40b838:	2c00      	cmp	r4, #0
  40b83a:	f000 80bf 	beq.w	40b9bc <_dtoa_r+0xd14>
  40b83e:	4b8a      	ldr	r3, [pc, #552]	; (40ba68 <_dtoa_r+0xdc0>)
  40b840:	f004 020f 	and.w	r2, r4, #15
  40b844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b848:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b84c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40b850:	f002 fb3e 	bl	40ded0 <__aeabi_dmul>
  40b854:	1124      	asrs	r4, r4, #4
  40b856:	4606      	mov	r6, r0
  40b858:	460f      	mov	r7, r1
  40b85a:	f000 812a 	beq.w	40bab2 <_dtoa_r+0xe0a>
  40b85e:	4d83      	ldr	r5, [pc, #524]	; (40ba6c <_dtoa_r+0xdc4>)
  40b860:	f04f 0802 	mov.w	r8, #2
  40b864:	07e2      	lsls	r2, r4, #31
  40b866:	d509      	bpl.n	40b87c <_dtoa_r+0xbd4>
  40b868:	4630      	mov	r0, r6
  40b86a:	4639      	mov	r1, r7
  40b86c:	e9d5 2300 	ldrd	r2, r3, [r5]
  40b870:	f002 fb2e 	bl	40ded0 <__aeabi_dmul>
  40b874:	f108 0801 	add.w	r8, r8, #1
  40b878:	4606      	mov	r6, r0
  40b87a:	460f      	mov	r7, r1
  40b87c:	1064      	asrs	r4, r4, #1
  40b87e:	f105 0508 	add.w	r5, r5, #8
  40b882:	d1ef      	bne.n	40b864 <_dtoa_r+0xbbc>
  40b884:	e576      	b.n	40b374 <_dtoa_r+0x6cc>
  40b886:	9907      	ldr	r1, [sp, #28]
  40b888:	2230      	movs	r2, #48	; 0x30
  40b88a:	700a      	strb	r2, [r1, #0]
  40b88c:	9a04      	ldr	r2, [sp, #16]
  40b88e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40b892:	3201      	adds	r2, #1
  40b894:	9204      	str	r2, [sp, #16]
  40b896:	f7ff bbd0 	b.w	40b03a <_dtoa_r+0x392>
  40b89a:	6871      	ldr	r1, [r6, #4]
  40b89c:	4648      	mov	r0, r9
  40b89e:	f001 f9bf 	bl	40cc20 <_Balloc>
  40b8a2:	6933      	ldr	r3, [r6, #16]
  40b8a4:	1c9a      	adds	r2, r3, #2
  40b8a6:	4605      	mov	r5, r0
  40b8a8:	0092      	lsls	r2, r2, #2
  40b8aa:	f106 010c 	add.w	r1, r6, #12
  40b8ae:	300c      	adds	r0, #12
  40b8b0:	f7fc fb3a 	bl	407f28 <memcpy>
  40b8b4:	4629      	mov	r1, r5
  40b8b6:	2201      	movs	r2, #1
  40b8b8:	4648      	mov	r0, r9
  40b8ba:	f001 fb61 	bl	40cf80 <__lshift>
  40b8be:	9005      	str	r0, [sp, #20]
  40b8c0:	e670      	b.n	40b5a4 <_dtoa_r+0x8fc>
  40b8c2:	2b39      	cmp	r3, #57	; 0x39
  40b8c4:	f8cd b014 	str.w	fp, [sp, #20]
  40b8c8:	46d0      	mov	r8, sl
  40b8ca:	f000 80a3 	beq.w	40ba14 <_dtoa_r+0xd6c>
  40b8ce:	f103 0a01 	add.w	sl, r3, #1
  40b8d2:	46b3      	mov	fp, r6
  40b8d4:	f887 a000 	strb.w	sl, [r7]
  40b8d8:	1c7d      	adds	r5, r7, #1
  40b8da:	9e05      	ldr	r6, [sp, #20]
  40b8dc:	9408      	str	r4, [sp, #32]
  40b8de:	e49f      	b.n	40b220 <_dtoa_r+0x578>
  40b8e0:	465a      	mov	r2, fp
  40b8e2:	46d0      	mov	r8, sl
  40b8e4:	46b3      	mov	fp, r6
  40b8e6:	469a      	mov	sl, r3
  40b8e8:	4616      	mov	r6, r2
  40b8ea:	e47d      	b.n	40b1e8 <_dtoa_r+0x540>
  40b8ec:	495e      	ldr	r1, [pc, #376]	; (40ba68 <_dtoa_r+0xdc0>)
  40b8ee:	f108 3aff 	add.w	sl, r8, #4294967295
  40b8f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40b8f6:	4622      	mov	r2, r4
  40b8f8:	462b      	mov	r3, r5
  40b8fa:	e9d1 0100 	ldrd	r0, r1, [r1]
  40b8fe:	f002 fae7 	bl	40ded0 <__aeabi_dmul>
  40b902:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40b906:	4639      	mov	r1, r7
  40b908:	4630      	mov	r0, r6
  40b90a:	f002 fd91 	bl	40e430 <__aeabi_d2iz>
  40b90e:	4604      	mov	r4, r0
  40b910:	f002 fa78 	bl	40de04 <__aeabi_i2d>
  40b914:	4602      	mov	r2, r0
  40b916:	460b      	mov	r3, r1
  40b918:	4630      	mov	r0, r6
  40b91a:	4639      	mov	r1, r7
  40b91c:	f002 f924 	bl	40db68 <__aeabi_dsub>
  40b920:	9a07      	ldr	r2, [sp, #28]
  40b922:	3430      	adds	r4, #48	; 0x30
  40b924:	f1b8 0f01 	cmp.w	r8, #1
  40b928:	4606      	mov	r6, r0
  40b92a:	460f      	mov	r7, r1
  40b92c:	7014      	strb	r4, [r2, #0]
  40b92e:	f102 0501 	add.w	r5, r2, #1
  40b932:	d01e      	beq.n	40b972 <_dtoa_r+0xcca>
  40b934:	9b07      	ldr	r3, [sp, #28]
  40b936:	eb03 0b08 	add.w	fp, r3, r8
  40b93a:	46a8      	mov	r8, r5
  40b93c:	2200      	movs	r2, #0
  40b93e:	4b4c      	ldr	r3, [pc, #304]	; (40ba70 <_dtoa_r+0xdc8>)
  40b940:	4630      	mov	r0, r6
  40b942:	4639      	mov	r1, r7
  40b944:	f002 fac4 	bl	40ded0 <__aeabi_dmul>
  40b948:	460f      	mov	r7, r1
  40b94a:	4606      	mov	r6, r0
  40b94c:	f002 fd70 	bl	40e430 <__aeabi_d2iz>
  40b950:	4604      	mov	r4, r0
  40b952:	f002 fa57 	bl	40de04 <__aeabi_i2d>
  40b956:	3430      	adds	r4, #48	; 0x30
  40b958:	4602      	mov	r2, r0
  40b95a:	460b      	mov	r3, r1
  40b95c:	4630      	mov	r0, r6
  40b95e:	4639      	mov	r1, r7
  40b960:	f002 f902 	bl	40db68 <__aeabi_dsub>
  40b964:	f808 4b01 	strb.w	r4, [r8], #1
  40b968:	45c3      	cmp	fp, r8
  40b96a:	4606      	mov	r6, r0
  40b96c:	460f      	mov	r7, r1
  40b96e:	d1e5      	bne.n	40b93c <_dtoa_r+0xc94>
  40b970:	4455      	add	r5, sl
  40b972:	2200      	movs	r2, #0
  40b974:	4b3f      	ldr	r3, [pc, #252]	; (40ba74 <_dtoa_r+0xdcc>)
  40b976:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40b97a:	f002 f8f7 	bl	40db6c <__adddf3>
  40b97e:	4632      	mov	r2, r6
  40b980:	463b      	mov	r3, r7
  40b982:	f002 fd17 	bl	40e3b4 <__aeabi_dcmplt>
  40b986:	2800      	cmp	r0, #0
  40b988:	d04c      	beq.n	40ba24 <_dtoa_r+0xd7c>
  40b98a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b98c:	9304      	str	r3, [sp, #16]
  40b98e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40b992:	f7ff bb46 	b.w	40b022 <_dtoa_r+0x37a>
  40b996:	f04f 0800 	mov.w	r8, #0
  40b99a:	4646      	mov	r6, r8
  40b99c:	e6a8      	b.n	40b6f0 <_dtoa_r+0xa48>
  40b99e:	9b05      	ldr	r3, [sp, #20]
  40b9a0:	9a06      	ldr	r2, [sp, #24]
  40b9a2:	1a9d      	subs	r5, r3, r2
  40b9a4:	2300      	movs	r3, #0
  40b9a6:	f7ff bb72 	b.w	40b08e <_dtoa_r+0x3e6>
  40b9aa:	2700      	movs	r7, #0
  40b9ac:	e6ca      	b.n	40b744 <_dtoa_r+0xa9c>
  40b9ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b9b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b9b2:	9d05      	ldr	r5, [sp, #20]
  40b9b4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40b9b8:	f7ff bb69 	b.w	40b08e <_dtoa_r+0x3e6>
  40b9bc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  40b9c0:	f04f 0802 	mov.w	r8, #2
  40b9c4:	e4d6      	b.n	40b374 <_dtoa_r+0x6cc>
  40b9c6:	9408      	str	r4, [sp, #32]
  40b9c8:	e5a0      	b.n	40b50c <_dtoa_r+0x864>
  40b9ca:	9b06      	ldr	r3, [sp, #24]
  40b9cc:	2b00      	cmp	r3, #0
  40b9ce:	f43f aebf 	beq.w	40b750 <_dtoa_r+0xaa8>
  40b9d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b9d4:	2b00      	cmp	r3, #0
  40b9d6:	f77f aee3 	ble.w	40b7a0 <_dtoa_r+0xaf8>
  40b9da:	2200      	movs	r2, #0
  40b9dc:	4b24      	ldr	r3, [pc, #144]	; (40ba70 <_dtoa_r+0xdc8>)
  40b9de:	4630      	mov	r0, r6
  40b9e0:	4639      	mov	r1, r7
  40b9e2:	f002 fa75 	bl	40ded0 <__aeabi_dmul>
  40b9e6:	4606      	mov	r6, r0
  40b9e8:	460f      	mov	r7, r1
  40b9ea:	f108 0001 	add.w	r0, r8, #1
  40b9ee:	f002 fa09 	bl	40de04 <__aeabi_i2d>
  40b9f2:	4632      	mov	r2, r6
  40b9f4:	463b      	mov	r3, r7
  40b9f6:	f002 fa6b 	bl	40ded0 <__aeabi_dmul>
  40b9fa:	2200      	movs	r2, #0
  40b9fc:	4b18      	ldr	r3, [pc, #96]	; (40ba60 <_dtoa_r+0xdb8>)
  40b9fe:	f002 f8b5 	bl	40db6c <__adddf3>
  40ba02:	9a04      	ldr	r2, [sp, #16]
  40ba04:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40ba08:	3a01      	subs	r2, #1
  40ba0a:	4604      	mov	r4, r0
  40ba0c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40ba10:	9211      	str	r2, [sp, #68]	; 0x44
  40ba12:	e4d0      	b.n	40b3b6 <_dtoa_r+0x70e>
  40ba14:	2239      	movs	r2, #57	; 0x39
  40ba16:	46b3      	mov	fp, r6
  40ba18:	9408      	str	r4, [sp, #32]
  40ba1a:	9e05      	ldr	r6, [sp, #20]
  40ba1c:	703a      	strb	r2, [r7, #0]
  40ba1e:	1c7d      	adds	r5, r7, #1
  40ba20:	f7ff bbf0 	b.w	40b204 <_dtoa_r+0x55c>
  40ba24:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40ba28:	2000      	movs	r0, #0
  40ba2a:	4912      	ldr	r1, [pc, #72]	; (40ba74 <_dtoa_r+0xdcc>)
  40ba2c:	f002 f89c 	bl	40db68 <__aeabi_dsub>
  40ba30:	4632      	mov	r2, r6
  40ba32:	463b      	mov	r3, r7
  40ba34:	f002 fcdc 	bl	40e3f0 <__aeabi_dcmpgt>
  40ba38:	b908      	cbnz	r0, 40ba3e <_dtoa_r+0xd96>
  40ba3a:	e6b1      	b.n	40b7a0 <_dtoa_r+0xaf8>
  40ba3c:	4615      	mov	r5, r2
  40ba3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40ba42:	2b30      	cmp	r3, #48	; 0x30
  40ba44:	f105 32ff 	add.w	r2, r5, #4294967295
  40ba48:	d0f8      	beq.n	40ba3c <_dtoa_r+0xd94>
  40ba4a:	e530      	b.n	40b4ae <_dtoa_r+0x806>
  40ba4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ba4e:	9304      	str	r3, [sp, #16]
  40ba50:	f7ff bae7 	b.w	40b022 <_dtoa_r+0x37a>
  40ba54:	f1ba 0f00 	cmp.w	sl, #0
  40ba58:	f47f ad7a 	bne.w	40b550 <_dtoa_r+0x8a8>
  40ba5c:	e661      	b.n	40b722 <_dtoa_r+0xa7a>
  40ba5e:	bf00      	nop
  40ba60:	401c0000 	.word	0x401c0000
  40ba64:	40140000 	.word	0x40140000
  40ba68:	0040ecb0 	.word	0x0040ecb0
  40ba6c:	0040ed78 	.word	0x0040ed78
  40ba70:	40240000 	.word	0x40240000
  40ba74:	3fe00000 	.word	0x3fe00000
  40ba78:	2b39      	cmp	r3, #57	; 0x39
  40ba7a:	f8cd b014 	str.w	fp, [sp, #20]
  40ba7e:	46d0      	mov	r8, sl
  40ba80:	f8dd b008 	ldr.w	fp, [sp, #8]
  40ba84:	469a      	mov	sl, r3
  40ba86:	d0c5      	beq.n	40ba14 <_dtoa_r+0xd6c>
  40ba88:	f1bb 0f00 	cmp.w	fp, #0
  40ba8c:	f73f aebc 	bgt.w	40b808 <_dtoa_r+0xb60>
  40ba90:	e6bc      	b.n	40b80c <_dtoa_r+0xb64>
  40ba92:	f47f aebb 	bne.w	40b80c <_dtoa_r+0xb64>
  40ba96:	f01a 0f01 	tst.w	sl, #1
  40ba9a:	f43f aeb7 	beq.w	40b80c <_dtoa_r+0xb64>
  40ba9e:	e6af      	b.n	40b800 <_dtoa_r+0xb58>
  40baa0:	f04f 0800 	mov.w	r8, #0
  40baa4:	4646      	mov	r6, r8
  40baa6:	e531      	b.n	40b50c <_dtoa_r+0x864>
  40baa8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40baaa:	2b02      	cmp	r3, #2
  40baac:	dc21      	bgt.n	40baf2 <_dtoa_r+0xe4a>
  40baae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bab0:	e604      	b.n	40b6bc <_dtoa_r+0xa14>
  40bab2:	f04f 0802 	mov.w	r8, #2
  40bab6:	e45d      	b.n	40b374 <_dtoa_r+0x6cc>
  40bab8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40baba:	2b02      	cmp	r3, #2
  40babc:	dc19      	bgt.n	40baf2 <_dtoa_r+0xe4a>
  40babe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bac0:	e563      	b.n	40b58a <_dtoa_r+0x8e2>
  40bac2:	2400      	movs	r4, #0
  40bac4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  40bac8:	4621      	mov	r1, r4
  40baca:	4648      	mov	r0, r9
  40bacc:	f001 f8a8 	bl	40cc20 <_Balloc>
  40bad0:	f04f 33ff 	mov.w	r3, #4294967295
  40bad4:	9306      	str	r3, [sp, #24]
  40bad6:	930d      	str	r3, [sp, #52]	; 0x34
  40bad8:	2301      	movs	r3, #1
  40bada:	9007      	str	r0, [sp, #28]
  40badc:	9421      	str	r4, [sp, #132]	; 0x84
  40bade:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40bae2:	9309      	str	r3, [sp, #36]	; 0x24
  40bae4:	f7ff b9e9 	b.w	40aeba <_dtoa_r+0x212>
  40bae8:	f43f ab3d 	beq.w	40b166 <_dtoa_r+0x4be>
  40baec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40baf0:	e522      	b.n	40b538 <_dtoa_r+0x890>
  40baf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40baf4:	9306      	str	r3, [sp, #24]
  40baf6:	e5e9      	b.n	40b6cc <_dtoa_r+0xa24>
  40baf8:	2501      	movs	r5, #1
  40bafa:	f7ff b9a8 	b.w	40ae4e <_dtoa_r+0x1a6>
  40bafe:	bf00      	nop

0040bb00 <__sflush_r>:
  40bb00:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40bb04:	b29a      	uxth	r2, r3
  40bb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bb0a:	460d      	mov	r5, r1
  40bb0c:	0711      	lsls	r1, r2, #28
  40bb0e:	4680      	mov	r8, r0
  40bb10:	d43c      	bmi.n	40bb8c <__sflush_r+0x8c>
  40bb12:	686a      	ldr	r2, [r5, #4]
  40bb14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40bb18:	2a00      	cmp	r2, #0
  40bb1a:	81ab      	strh	r3, [r5, #12]
  40bb1c:	dd73      	ble.n	40bc06 <__sflush_r+0x106>
  40bb1e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40bb20:	2c00      	cmp	r4, #0
  40bb22:	d04b      	beq.n	40bbbc <__sflush_r+0xbc>
  40bb24:	b29b      	uxth	r3, r3
  40bb26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40bb2a:	2100      	movs	r1, #0
  40bb2c:	b292      	uxth	r2, r2
  40bb2e:	f8d8 6000 	ldr.w	r6, [r8]
  40bb32:	f8c8 1000 	str.w	r1, [r8]
  40bb36:	2a00      	cmp	r2, #0
  40bb38:	d069      	beq.n	40bc0e <__sflush_r+0x10e>
  40bb3a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40bb3c:	075f      	lsls	r7, r3, #29
  40bb3e:	d505      	bpl.n	40bb4c <__sflush_r+0x4c>
  40bb40:	6869      	ldr	r1, [r5, #4]
  40bb42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40bb44:	1a52      	subs	r2, r2, r1
  40bb46:	b10b      	cbz	r3, 40bb4c <__sflush_r+0x4c>
  40bb48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40bb4a:	1ad2      	subs	r2, r2, r3
  40bb4c:	2300      	movs	r3, #0
  40bb4e:	69e9      	ldr	r1, [r5, #28]
  40bb50:	4640      	mov	r0, r8
  40bb52:	47a0      	blx	r4
  40bb54:	1c44      	adds	r4, r0, #1
  40bb56:	d03c      	beq.n	40bbd2 <__sflush_r+0xd2>
  40bb58:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40bb5c:	692a      	ldr	r2, [r5, #16]
  40bb5e:	602a      	str	r2, [r5, #0]
  40bb60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40bb64:	2200      	movs	r2, #0
  40bb66:	81ab      	strh	r3, [r5, #12]
  40bb68:	04db      	lsls	r3, r3, #19
  40bb6a:	606a      	str	r2, [r5, #4]
  40bb6c:	d449      	bmi.n	40bc02 <__sflush_r+0x102>
  40bb6e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40bb70:	f8c8 6000 	str.w	r6, [r8]
  40bb74:	b311      	cbz	r1, 40bbbc <__sflush_r+0xbc>
  40bb76:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40bb7a:	4299      	cmp	r1, r3
  40bb7c:	d002      	beq.n	40bb84 <__sflush_r+0x84>
  40bb7e:	4640      	mov	r0, r8
  40bb80:	f000 f9c0 	bl	40bf04 <_free_r>
  40bb84:	2000      	movs	r0, #0
  40bb86:	6328      	str	r0, [r5, #48]	; 0x30
  40bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bb8c:	692e      	ldr	r6, [r5, #16]
  40bb8e:	b1ae      	cbz	r6, 40bbbc <__sflush_r+0xbc>
  40bb90:	682c      	ldr	r4, [r5, #0]
  40bb92:	602e      	str	r6, [r5, #0]
  40bb94:	0790      	lsls	r0, r2, #30
  40bb96:	bf0c      	ite	eq
  40bb98:	696b      	ldreq	r3, [r5, #20]
  40bb9a:	2300      	movne	r3, #0
  40bb9c:	1ba4      	subs	r4, r4, r6
  40bb9e:	60ab      	str	r3, [r5, #8]
  40bba0:	e00a      	b.n	40bbb8 <__sflush_r+0xb8>
  40bba2:	4623      	mov	r3, r4
  40bba4:	4632      	mov	r2, r6
  40bba6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40bba8:	69e9      	ldr	r1, [r5, #28]
  40bbaa:	4640      	mov	r0, r8
  40bbac:	47b8      	blx	r7
  40bbae:	2800      	cmp	r0, #0
  40bbb0:	eba4 0400 	sub.w	r4, r4, r0
  40bbb4:	4406      	add	r6, r0
  40bbb6:	dd04      	ble.n	40bbc2 <__sflush_r+0xc2>
  40bbb8:	2c00      	cmp	r4, #0
  40bbba:	dcf2      	bgt.n	40bba2 <__sflush_r+0xa2>
  40bbbc:	2000      	movs	r0, #0
  40bbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bbc2:	89ab      	ldrh	r3, [r5, #12]
  40bbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bbc8:	81ab      	strh	r3, [r5, #12]
  40bbca:	f04f 30ff 	mov.w	r0, #4294967295
  40bbce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bbd2:	f8d8 2000 	ldr.w	r2, [r8]
  40bbd6:	2a1d      	cmp	r2, #29
  40bbd8:	d8f3      	bhi.n	40bbc2 <__sflush_r+0xc2>
  40bbda:	4b1a      	ldr	r3, [pc, #104]	; (40bc44 <__sflush_r+0x144>)
  40bbdc:	40d3      	lsrs	r3, r2
  40bbde:	f003 0301 	and.w	r3, r3, #1
  40bbe2:	f083 0401 	eor.w	r4, r3, #1
  40bbe6:	2b00      	cmp	r3, #0
  40bbe8:	d0eb      	beq.n	40bbc2 <__sflush_r+0xc2>
  40bbea:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40bbee:	6929      	ldr	r1, [r5, #16]
  40bbf0:	6029      	str	r1, [r5, #0]
  40bbf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40bbf6:	04d9      	lsls	r1, r3, #19
  40bbf8:	606c      	str	r4, [r5, #4]
  40bbfa:	81ab      	strh	r3, [r5, #12]
  40bbfc:	d5b7      	bpl.n	40bb6e <__sflush_r+0x6e>
  40bbfe:	2a00      	cmp	r2, #0
  40bc00:	d1b5      	bne.n	40bb6e <__sflush_r+0x6e>
  40bc02:	6528      	str	r0, [r5, #80]	; 0x50
  40bc04:	e7b3      	b.n	40bb6e <__sflush_r+0x6e>
  40bc06:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40bc08:	2a00      	cmp	r2, #0
  40bc0a:	dc88      	bgt.n	40bb1e <__sflush_r+0x1e>
  40bc0c:	e7d6      	b.n	40bbbc <__sflush_r+0xbc>
  40bc0e:	2301      	movs	r3, #1
  40bc10:	69e9      	ldr	r1, [r5, #28]
  40bc12:	4640      	mov	r0, r8
  40bc14:	47a0      	blx	r4
  40bc16:	1c43      	adds	r3, r0, #1
  40bc18:	4602      	mov	r2, r0
  40bc1a:	d002      	beq.n	40bc22 <__sflush_r+0x122>
  40bc1c:	89ab      	ldrh	r3, [r5, #12]
  40bc1e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40bc20:	e78c      	b.n	40bb3c <__sflush_r+0x3c>
  40bc22:	f8d8 3000 	ldr.w	r3, [r8]
  40bc26:	2b00      	cmp	r3, #0
  40bc28:	d0f8      	beq.n	40bc1c <__sflush_r+0x11c>
  40bc2a:	2b1d      	cmp	r3, #29
  40bc2c:	d001      	beq.n	40bc32 <__sflush_r+0x132>
  40bc2e:	2b16      	cmp	r3, #22
  40bc30:	d102      	bne.n	40bc38 <__sflush_r+0x138>
  40bc32:	f8c8 6000 	str.w	r6, [r8]
  40bc36:	e7c1      	b.n	40bbbc <__sflush_r+0xbc>
  40bc38:	89ab      	ldrh	r3, [r5, #12]
  40bc3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bc3e:	81ab      	strh	r3, [r5, #12]
  40bc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bc44:	20400001 	.word	0x20400001

0040bc48 <_fflush_r>:
  40bc48:	b510      	push	{r4, lr}
  40bc4a:	4604      	mov	r4, r0
  40bc4c:	b082      	sub	sp, #8
  40bc4e:	b108      	cbz	r0, 40bc54 <_fflush_r+0xc>
  40bc50:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bc52:	b153      	cbz	r3, 40bc6a <_fflush_r+0x22>
  40bc54:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40bc58:	b908      	cbnz	r0, 40bc5e <_fflush_r+0x16>
  40bc5a:	b002      	add	sp, #8
  40bc5c:	bd10      	pop	{r4, pc}
  40bc5e:	4620      	mov	r0, r4
  40bc60:	b002      	add	sp, #8
  40bc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40bc66:	f7ff bf4b 	b.w	40bb00 <__sflush_r>
  40bc6a:	9101      	str	r1, [sp, #4]
  40bc6c:	f000 f880 	bl	40bd70 <__sinit>
  40bc70:	9901      	ldr	r1, [sp, #4]
  40bc72:	e7ef      	b.n	40bc54 <_fflush_r+0xc>

0040bc74 <_cleanup_r>:
  40bc74:	4901      	ldr	r1, [pc, #4]	; (40bc7c <_cleanup_r+0x8>)
  40bc76:	f000 bbaf 	b.w	40c3d8 <_fwalk_reent>
  40bc7a:	bf00      	nop
  40bc7c:	0040da39 	.word	0x0040da39

0040bc80 <__sinit.part.1>:
  40bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bc84:	4b35      	ldr	r3, [pc, #212]	; (40bd5c <__sinit.part.1+0xdc>)
  40bc86:	6845      	ldr	r5, [r0, #4]
  40bc88:	63c3      	str	r3, [r0, #60]	; 0x3c
  40bc8a:	2400      	movs	r4, #0
  40bc8c:	4607      	mov	r7, r0
  40bc8e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40bc92:	2304      	movs	r3, #4
  40bc94:	2103      	movs	r1, #3
  40bc96:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40bc9a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40bc9e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40bca2:	b083      	sub	sp, #12
  40bca4:	602c      	str	r4, [r5, #0]
  40bca6:	606c      	str	r4, [r5, #4]
  40bca8:	60ac      	str	r4, [r5, #8]
  40bcaa:	666c      	str	r4, [r5, #100]	; 0x64
  40bcac:	81ec      	strh	r4, [r5, #14]
  40bcae:	612c      	str	r4, [r5, #16]
  40bcb0:	616c      	str	r4, [r5, #20]
  40bcb2:	61ac      	str	r4, [r5, #24]
  40bcb4:	81ab      	strh	r3, [r5, #12]
  40bcb6:	4621      	mov	r1, r4
  40bcb8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40bcbc:	2208      	movs	r2, #8
  40bcbe:	f7fc f9cd 	bl	40805c <memset>
  40bcc2:	68be      	ldr	r6, [r7, #8]
  40bcc4:	f8df b098 	ldr.w	fp, [pc, #152]	; 40bd60 <__sinit.part.1+0xe0>
  40bcc8:	f8df a098 	ldr.w	sl, [pc, #152]	; 40bd64 <__sinit.part.1+0xe4>
  40bccc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40bd68 <__sinit.part.1+0xe8>
  40bcd0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40bd6c <__sinit.part.1+0xec>
  40bcd4:	f8c5 b020 	str.w	fp, [r5, #32]
  40bcd8:	2301      	movs	r3, #1
  40bcda:	2209      	movs	r2, #9
  40bcdc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40bce0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40bce4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40bce8:	61ed      	str	r5, [r5, #28]
  40bcea:	4621      	mov	r1, r4
  40bcec:	81f3      	strh	r3, [r6, #14]
  40bcee:	81b2      	strh	r2, [r6, #12]
  40bcf0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40bcf4:	6034      	str	r4, [r6, #0]
  40bcf6:	6074      	str	r4, [r6, #4]
  40bcf8:	60b4      	str	r4, [r6, #8]
  40bcfa:	6674      	str	r4, [r6, #100]	; 0x64
  40bcfc:	6134      	str	r4, [r6, #16]
  40bcfe:	6174      	str	r4, [r6, #20]
  40bd00:	61b4      	str	r4, [r6, #24]
  40bd02:	2208      	movs	r2, #8
  40bd04:	9301      	str	r3, [sp, #4]
  40bd06:	f7fc f9a9 	bl	40805c <memset>
  40bd0a:	68fd      	ldr	r5, [r7, #12]
  40bd0c:	61f6      	str	r6, [r6, #28]
  40bd0e:	2012      	movs	r0, #18
  40bd10:	2202      	movs	r2, #2
  40bd12:	f8c6 b020 	str.w	fp, [r6, #32]
  40bd16:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40bd1a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40bd1e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40bd22:	4621      	mov	r1, r4
  40bd24:	81a8      	strh	r0, [r5, #12]
  40bd26:	81ea      	strh	r2, [r5, #14]
  40bd28:	602c      	str	r4, [r5, #0]
  40bd2a:	606c      	str	r4, [r5, #4]
  40bd2c:	60ac      	str	r4, [r5, #8]
  40bd2e:	666c      	str	r4, [r5, #100]	; 0x64
  40bd30:	612c      	str	r4, [r5, #16]
  40bd32:	616c      	str	r4, [r5, #20]
  40bd34:	61ac      	str	r4, [r5, #24]
  40bd36:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40bd3a:	2208      	movs	r2, #8
  40bd3c:	f7fc f98e 	bl	40805c <memset>
  40bd40:	9b01      	ldr	r3, [sp, #4]
  40bd42:	61ed      	str	r5, [r5, #28]
  40bd44:	f8c5 b020 	str.w	fp, [r5, #32]
  40bd48:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40bd4c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40bd50:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40bd54:	63bb      	str	r3, [r7, #56]	; 0x38
  40bd56:	b003      	add	sp, #12
  40bd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bd5c:	0040bc75 	.word	0x0040bc75
  40bd60:	0040d641 	.word	0x0040d641
  40bd64:	0040d665 	.word	0x0040d665
  40bd68:	0040d6a1 	.word	0x0040d6a1
  40bd6c:	0040d6c1 	.word	0x0040d6c1

0040bd70 <__sinit>:
  40bd70:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bd72:	b103      	cbz	r3, 40bd76 <__sinit+0x6>
  40bd74:	4770      	bx	lr
  40bd76:	f7ff bf83 	b.w	40bc80 <__sinit.part.1>
  40bd7a:	bf00      	nop

0040bd7c <__sfp_lock_acquire>:
  40bd7c:	4770      	bx	lr
  40bd7e:	bf00      	nop

0040bd80 <__sfp_lock_release>:
  40bd80:	4770      	bx	lr
  40bd82:	bf00      	nop

0040bd84 <__libc_fini_array>:
  40bd84:	b538      	push	{r3, r4, r5, lr}
  40bd86:	4d07      	ldr	r5, [pc, #28]	; (40bda4 <__libc_fini_array+0x20>)
  40bd88:	4c07      	ldr	r4, [pc, #28]	; (40bda8 <__libc_fini_array+0x24>)
  40bd8a:	1b2c      	subs	r4, r5, r4
  40bd8c:	10a4      	asrs	r4, r4, #2
  40bd8e:	d005      	beq.n	40bd9c <__libc_fini_array+0x18>
  40bd90:	3c01      	subs	r4, #1
  40bd92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40bd96:	4798      	blx	r3
  40bd98:	2c00      	cmp	r4, #0
  40bd9a:	d1f9      	bne.n	40bd90 <__libc_fini_array+0xc>
  40bd9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40bda0:	f003 b80e 	b.w	40edc0 <_fini>
  40bda4:	0040edd0 	.word	0x0040edd0
  40bda8:	0040edcc 	.word	0x0040edcc

0040bdac <__fputwc>:
  40bdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40bdb0:	b082      	sub	sp, #8
  40bdb2:	4680      	mov	r8, r0
  40bdb4:	4689      	mov	r9, r1
  40bdb6:	4614      	mov	r4, r2
  40bdb8:	f000 fb3c 	bl	40c434 <__locale_mb_cur_max>
  40bdbc:	2801      	cmp	r0, #1
  40bdbe:	d033      	beq.n	40be28 <__fputwc+0x7c>
  40bdc0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40bdc4:	464a      	mov	r2, r9
  40bdc6:	a901      	add	r1, sp, #4
  40bdc8:	4640      	mov	r0, r8
  40bdca:	f001 fd53 	bl	40d874 <_wcrtomb_r>
  40bdce:	f1b0 3fff 	cmp.w	r0, #4294967295
  40bdd2:	4682      	mov	sl, r0
  40bdd4:	d021      	beq.n	40be1a <__fputwc+0x6e>
  40bdd6:	b388      	cbz	r0, 40be3c <__fputwc+0x90>
  40bdd8:	f89d 6004 	ldrb.w	r6, [sp, #4]
  40bddc:	2500      	movs	r5, #0
  40bdde:	e008      	b.n	40bdf2 <__fputwc+0x46>
  40bde0:	6823      	ldr	r3, [r4, #0]
  40bde2:	1c5a      	adds	r2, r3, #1
  40bde4:	6022      	str	r2, [r4, #0]
  40bde6:	701e      	strb	r6, [r3, #0]
  40bde8:	3501      	adds	r5, #1
  40bdea:	4555      	cmp	r5, sl
  40bdec:	d226      	bcs.n	40be3c <__fputwc+0x90>
  40bdee:	ab01      	add	r3, sp, #4
  40bdf0:	5d5e      	ldrb	r6, [r3, r5]
  40bdf2:	68a3      	ldr	r3, [r4, #8]
  40bdf4:	3b01      	subs	r3, #1
  40bdf6:	2b00      	cmp	r3, #0
  40bdf8:	60a3      	str	r3, [r4, #8]
  40bdfa:	daf1      	bge.n	40bde0 <__fputwc+0x34>
  40bdfc:	69a7      	ldr	r7, [r4, #24]
  40bdfe:	42bb      	cmp	r3, r7
  40be00:	4631      	mov	r1, r6
  40be02:	4622      	mov	r2, r4
  40be04:	4640      	mov	r0, r8
  40be06:	db01      	blt.n	40be0c <__fputwc+0x60>
  40be08:	2e0a      	cmp	r6, #10
  40be0a:	d1e9      	bne.n	40bde0 <__fputwc+0x34>
  40be0c:	f001 fcdc 	bl	40d7c8 <__swbuf_r>
  40be10:	1c43      	adds	r3, r0, #1
  40be12:	d1e9      	bne.n	40bde8 <__fputwc+0x3c>
  40be14:	b002      	add	sp, #8
  40be16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40be1a:	89a3      	ldrh	r3, [r4, #12]
  40be1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40be20:	81a3      	strh	r3, [r4, #12]
  40be22:	b002      	add	sp, #8
  40be24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40be28:	f109 33ff 	add.w	r3, r9, #4294967295
  40be2c:	2bfe      	cmp	r3, #254	; 0xfe
  40be2e:	d8c7      	bhi.n	40bdc0 <__fputwc+0x14>
  40be30:	fa5f f689 	uxtb.w	r6, r9
  40be34:	4682      	mov	sl, r0
  40be36:	f88d 6004 	strb.w	r6, [sp, #4]
  40be3a:	e7cf      	b.n	40bddc <__fputwc+0x30>
  40be3c:	4648      	mov	r0, r9
  40be3e:	b002      	add	sp, #8
  40be40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040be44 <_fputwc_r>:
  40be44:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40be48:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40be4c:	d10a      	bne.n	40be64 <_fputwc_r+0x20>
  40be4e:	b410      	push	{r4}
  40be50:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40be52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40be56:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40be5a:	6654      	str	r4, [r2, #100]	; 0x64
  40be5c:	8193      	strh	r3, [r2, #12]
  40be5e:	bc10      	pop	{r4}
  40be60:	f7ff bfa4 	b.w	40bdac <__fputwc>
  40be64:	f7ff bfa2 	b.w	40bdac <__fputwc>

0040be68 <_malloc_trim_r>:
  40be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40be6a:	4f23      	ldr	r7, [pc, #140]	; (40bef8 <_malloc_trim_r+0x90>)
  40be6c:	460c      	mov	r4, r1
  40be6e:	4606      	mov	r6, r0
  40be70:	f000 fed2 	bl	40cc18 <__malloc_lock>
  40be74:	68bb      	ldr	r3, [r7, #8]
  40be76:	685d      	ldr	r5, [r3, #4]
  40be78:	f025 0503 	bic.w	r5, r5, #3
  40be7c:	1b29      	subs	r1, r5, r4
  40be7e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40be82:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40be86:	f021 010f 	bic.w	r1, r1, #15
  40be8a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40be8e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40be92:	db07      	blt.n	40bea4 <_malloc_trim_r+0x3c>
  40be94:	2100      	movs	r1, #0
  40be96:	4630      	mov	r0, r6
  40be98:	f001 fbc0 	bl	40d61c <_sbrk_r>
  40be9c:	68bb      	ldr	r3, [r7, #8]
  40be9e:	442b      	add	r3, r5
  40bea0:	4298      	cmp	r0, r3
  40bea2:	d004      	beq.n	40beae <_malloc_trim_r+0x46>
  40bea4:	4630      	mov	r0, r6
  40bea6:	f000 feb9 	bl	40cc1c <__malloc_unlock>
  40beaa:	2000      	movs	r0, #0
  40beac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40beae:	4261      	negs	r1, r4
  40beb0:	4630      	mov	r0, r6
  40beb2:	f001 fbb3 	bl	40d61c <_sbrk_r>
  40beb6:	3001      	adds	r0, #1
  40beb8:	d00d      	beq.n	40bed6 <_malloc_trim_r+0x6e>
  40beba:	4b10      	ldr	r3, [pc, #64]	; (40befc <_malloc_trim_r+0x94>)
  40bebc:	68ba      	ldr	r2, [r7, #8]
  40bebe:	6819      	ldr	r1, [r3, #0]
  40bec0:	1b2d      	subs	r5, r5, r4
  40bec2:	f045 0501 	orr.w	r5, r5, #1
  40bec6:	4630      	mov	r0, r6
  40bec8:	1b09      	subs	r1, r1, r4
  40beca:	6055      	str	r5, [r2, #4]
  40becc:	6019      	str	r1, [r3, #0]
  40bece:	f000 fea5 	bl	40cc1c <__malloc_unlock>
  40bed2:	2001      	movs	r0, #1
  40bed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bed6:	2100      	movs	r1, #0
  40bed8:	4630      	mov	r0, r6
  40beda:	f001 fb9f 	bl	40d61c <_sbrk_r>
  40bede:	68ba      	ldr	r2, [r7, #8]
  40bee0:	1a83      	subs	r3, r0, r2
  40bee2:	2b0f      	cmp	r3, #15
  40bee4:	ddde      	ble.n	40bea4 <_malloc_trim_r+0x3c>
  40bee6:	4c06      	ldr	r4, [pc, #24]	; (40bf00 <_malloc_trim_r+0x98>)
  40bee8:	4904      	ldr	r1, [pc, #16]	; (40befc <_malloc_trim_r+0x94>)
  40beea:	6824      	ldr	r4, [r4, #0]
  40beec:	f043 0301 	orr.w	r3, r3, #1
  40bef0:	1b00      	subs	r0, r0, r4
  40bef2:	6053      	str	r3, [r2, #4]
  40bef4:	6008      	str	r0, [r1, #0]
  40bef6:	e7d5      	b.n	40bea4 <_malloc_trim_r+0x3c>
  40bef8:	204004e0 	.word	0x204004e0
  40befc:	20403800 	.word	0x20403800
  40bf00:	204008ec 	.word	0x204008ec

0040bf04 <_free_r>:
  40bf04:	2900      	cmp	r1, #0
  40bf06:	d045      	beq.n	40bf94 <_free_r+0x90>
  40bf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bf0c:	460d      	mov	r5, r1
  40bf0e:	4680      	mov	r8, r0
  40bf10:	f000 fe82 	bl	40cc18 <__malloc_lock>
  40bf14:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40bf18:	496a      	ldr	r1, [pc, #424]	; (40c0c4 <_free_r+0x1c0>)
  40bf1a:	f027 0301 	bic.w	r3, r7, #1
  40bf1e:	f1a5 0408 	sub.w	r4, r5, #8
  40bf22:	18e2      	adds	r2, r4, r3
  40bf24:	688e      	ldr	r6, [r1, #8]
  40bf26:	6850      	ldr	r0, [r2, #4]
  40bf28:	42b2      	cmp	r2, r6
  40bf2a:	f020 0003 	bic.w	r0, r0, #3
  40bf2e:	d062      	beq.n	40bff6 <_free_r+0xf2>
  40bf30:	07fe      	lsls	r6, r7, #31
  40bf32:	6050      	str	r0, [r2, #4]
  40bf34:	d40b      	bmi.n	40bf4e <_free_r+0x4a>
  40bf36:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40bf3a:	1be4      	subs	r4, r4, r7
  40bf3c:	f101 0e08 	add.w	lr, r1, #8
  40bf40:	68a5      	ldr	r5, [r4, #8]
  40bf42:	4575      	cmp	r5, lr
  40bf44:	443b      	add	r3, r7
  40bf46:	d06f      	beq.n	40c028 <_free_r+0x124>
  40bf48:	68e7      	ldr	r7, [r4, #12]
  40bf4a:	60ef      	str	r7, [r5, #12]
  40bf4c:	60bd      	str	r5, [r7, #8]
  40bf4e:	1815      	adds	r5, r2, r0
  40bf50:	686d      	ldr	r5, [r5, #4]
  40bf52:	07ed      	lsls	r5, r5, #31
  40bf54:	d542      	bpl.n	40bfdc <_free_r+0xd8>
  40bf56:	f043 0201 	orr.w	r2, r3, #1
  40bf5a:	6062      	str	r2, [r4, #4]
  40bf5c:	50e3      	str	r3, [r4, r3]
  40bf5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bf62:	d218      	bcs.n	40bf96 <_free_r+0x92>
  40bf64:	08db      	lsrs	r3, r3, #3
  40bf66:	1c5a      	adds	r2, r3, #1
  40bf68:	684d      	ldr	r5, [r1, #4]
  40bf6a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40bf6e:	60a7      	str	r7, [r4, #8]
  40bf70:	2001      	movs	r0, #1
  40bf72:	109b      	asrs	r3, r3, #2
  40bf74:	fa00 f303 	lsl.w	r3, r0, r3
  40bf78:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40bf7c:	431d      	orrs	r5, r3
  40bf7e:	3808      	subs	r0, #8
  40bf80:	60e0      	str	r0, [r4, #12]
  40bf82:	604d      	str	r5, [r1, #4]
  40bf84:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  40bf88:	60fc      	str	r4, [r7, #12]
  40bf8a:	4640      	mov	r0, r8
  40bf8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bf90:	f000 be44 	b.w	40cc1c <__malloc_unlock>
  40bf94:	4770      	bx	lr
  40bf96:	0a5a      	lsrs	r2, r3, #9
  40bf98:	2a04      	cmp	r2, #4
  40bf9a:	d853      	bhi.n	40c044 <_free_r+0x140>
  40bf9c:	099a      	lsrs	r2, r3, #6
  40bf9e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40bfa2:	007f      	lsls	r7, r7, #1
  40bfa4:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40bfa8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40bfac:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40bfb0:	4944      	ldr	r1, [pc, #272]	; (40c0c4 <_free_r+0x1c0>)
  40bfb2:	3808      	subs	r0, #8
  40bfb4:	4290      	cmp	r0, r2
  40bfb6:	d04d      	beq.n	40c054 <_free_r+0x150>
  40bfb8:	6851      	ldr	r1, [r2, #4]
  40bfba:	f021 0103 	bic.w	r1, r1, #3
  40bfbe:	428b      	cmp	r3, r1
  40bfc0:	d202      	bcs.n	40bfc8 <_free_r+0xc4>
  40bfc2:	6892      	ldr	r2, [r2, #8]
  40bfc4:	4290      	cmp	r0, r2
  40bfc6:	d1f7      	bne.n	40bfb8 <_free_r+0xb4>
  40bfc8:	68d0      	ldr	r0, [r2, #12]
  40bfca:	60e0      	str	r0, [r4, #12]
  40bfcc:	60a2      	str	r2, [r4, #8]
  40bfce:	6084      	str	r4, [r0, #8]
  40bfd0:	60d4      	str	r4, [r2, #12]
  40bfd2:	4640      	mov	r0, r8
  40bfd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bfd8:	f000 be20 	b.w	40cc1c <__malloc_unlock>
  40bfdc:	6895      	ldr	r5, [r2, #8]
  40bfde:	4f3a      	ldr	r7, [pc, #232]	; (40c0c8 <_free_r+0x1c4>)
  40bfe0:	42bd      	cmp	r5, r7
  40bfe2:	4403      	add	r3, r0
  40bfe4:	d03f      	beq.n	40c066 <_free_r+0x162>
  40bfe6:	68d0      	ldr	r0, [r2, #12]
  40bfe8:	60e8      	str	r0, [r5, #12]
  40bfea:	f043 0201 	orr.w	r2, r3, #1
  40bfee:	6085      	str	r5, [r0, #8]
  40bff0:	6062      	str	r2, [r4, #4]
  40bff2:	50e3      	str	r3, [r4, r3]
  40bff4:	e7b3      	b.n	40bf5e <_free_r+0x5a>
  40bff6:	07ff      	lsls	r7, r7, #31
  40bff8:	4403      	add	r3, r0
  40bffa:	d407      	bmi.n	40c00c <_free_r+0x108>
  40bffc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40c000:	1aa4      	subs	r4, r4, r2
  40c002:	4413      	add	r3, r2
  40c004:	68a0      	ldr	r0, [r4, #8]
  40c006:	68e2      	ldr	r2, [r4, #12]
  40c008:	60c2      	str	r2, [r0, #12]
  40c00a:	6090      	str	r0, [r2, #8]
  40c00c:	4a2f      	ldr	r2, [pc, #188]	; (40c0cc <_free_r+0x1c8>)
  40c00e:	6812      	ldr	r2, [r2, #0]
  40c010:	f043 0001 	orr.w	r0, r3, #1
  40c014:	4293      	cmp	r3, r2
  40c016:	6060      	str	r0, [r4, #4]
  40c018:	608c      	str	r4, [r1, #8]
  40c01a:	d3b6      	bcc.n	40bf8a <_free_r+0x86>
  40c01c:	4b2c      	ldr	r3, [pc, #176]	; (40c0d0 <_free_r+0x1cc>)
  40c01e:	4640      	mov	r0, r8
  40c020:	6819      	ldr	r1, [r3, #0]
  40c022:	f7ff ff21 	bl	40be68 <_malloc_trim_r>
  40c026:	e7b0      	b.n	40bf8a <_free_r+0x86>
  40c028:	1811      	adds	r1, r2, r0
  40c02a:	6849      	ldr	r1, [r1, #4]
  40c02c:	07c9      	lsls	r1, r1, #31
  40c02e:	d444      	bmi.n	40c0ba <_free_r+0x1b6>
  40c030:	6891      	ldr	r1, [r2, #8]
  40c032:	68d2      	ldr	r2, [r2, #12]
  40c034:	60ca      	str	r2, [r1, #12]
  40c036:	4403      	add	r3, r0
  40c038:	f043 0001 	orr.w	r0, r3, #1
  40c03c:	6091      	str	r1, [r2, #8]
  40c03e:	6060      	str	r0, [r4, #4]
  40c040:	50e3      	str	r3, [r4, r3]
  40c042:	e7a2      	b.n	40bf8a <_free_r+0x86>
  40c044:	2a14      	cmp	r2, #20
  40c046:	d817      	bhi.n	40c078 <_free_r+0x174>
  40c048:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40c04c:	007f      	lsls	r7, r7, #1
  40c04e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40c052:	e7a9      	b.n	40bfa8 <_free_r+0xa4>
  40c054:	10aa      	asrs	r2, r5, #2
  40c056:	684b      	ldr	r3, [r1, #4]
  40c058:	2501      	movs	r5, #1
  40c05a:	fa05 f202 	lsl.w	r2, r5, r2
  40c05e:	4313      	orrs	r3, r2
  40c060:	604b      	str	r3, [r1, #4]
  40c062:	4602      	mov	r2, r0
  40c064:	e7b1      	b.n	40bfca <_free_r+0xc6>
  40c066:	f043 0201 	orr.w	r2, r3, #1
  40c06a:	614c      	str	r4, [r1, #20]
  40c06c:	610c      	str	r4, [r1, #16]
  40c06e:	60e5      	str	r5, [r4, #12]
  40c070:	60a5      	str	r5, [r4, #8]
  40c072:	6062      	str	r2, [r4, #4]
  40c074:	50e3      	str	r3, [r4, r3]
  40c076:	e788      	b.n	40bf8a <_free_r+0x86>
  40c078:	2a54      	cmp	r2, #84	; 0x54
  40c07a:	d806      	bhi.n	40c08a <_free_r+0x186>
  40c07c:	0b1a      	lsrs	r2, r3, #12
  40c07e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40c082:	007f      	lsls	r7, r7, #1
  40c084:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40c088:	e78e      	b.n	40bfa8 <_free_r+0xa4>
  40c08a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40c08e:	d806      	bhi.n	40c09e <_free_r+0x19a>
  40c090:	0bda      	lsrs	r2, r3, #15
  40c092:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40c096:	007f      	lsls	r7, r7, #1
  40c098:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40c09c:	e784      	b.n	40bfa8 <_free_r+0xa4>
  40c09e:	f240 5054 	movw	r0, #1364	; 0x554
  40c0a2:	4282      	cmp	r2, r0
  40c0a4:	d806      	bhi.n	40c0b4 <_free_r+0x1b0>
  40c0a6:	0c9a      	lsrs	r2, r3, #18
  40c0a8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40c0ac:	007f      	lsls	r7, r7, #1
  40c0ae:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40c0b2:	e779      	b.n	40bfa8 <_free_r+0xa4>
  40c0b4:	27fe      	movs	r7, #254	; 0xfe
  40c0b6:	257e      	movs	r5, #126	; 0x7e
  40c0b8:	e776      	b.n	40bfa8 <_free_r+0xa4>
  40c0ba:	f043 0201 	orr.w	r2, r3, #1
  40c0be:	6062      	str	r2, [r4, #4]
  40c0c0:	50e3      	str	r3, [r4, r3]
  40c0c2:	e762      	b.n	40bf8a <_free_r+0x86>
  40c0c4:	204004e0 	.word	0x204004e0
  40c0c8:	204004e8 	.word	0x204004e8
  40c0cc:	204008e8 	.word	0x204008e8
  40c0d0:	204037fc 	.word	0x204037fc

0040c0d4 <__sfvwrite_r>:
  40c0d4:	6893      	ldr	r3, [r2, #8]
  40c0d6:	2b00      	cmp	r3, #0
  40c0d8:	d076      	beq.n	40c1c8 <__sfvwrite_r+0xf4>
  40c0da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c0de:	898b      	ldrh	r3, [r1, #12]
  40c0e0:	b085      	sub	sp, #20
  40c0e2:	460c      	mov	r4, r1
  40c0e4:	0719      	lsls	r1, r3, #28
  40c0e6:	9001      	str	r0, [sp, #4]
  40c0e8:	4616      	mov	r6, r2
  40c0ea:	d529      	bpl.n	40c140 <__sfvwrite_r+0x6c>
  40c0ec:	6922      	ldr	r2, [r4, #16]
  40c0ee:	b33a      	cbz	r2, 40c140 <__sfvwrite_r+0x6c>
  40c0f0:	f003 0802 	and.w	r8, r3, #2
  40c0f4:	fa1f f088 	uxth.w	r0, r8
  40c0f8:	6835      	ldr	r5, [r6, #0]
  40c0fa:	2800      	cmp	r0, #0
  40c0fc:	d02f      	beq.n	40c15e <__sfvwrite_r+0x8a>
  40c0fe:	f04f 0900 	mov.w	r9, #0
  40c102:	4fb4      	ldr	r7, [pc, #720]	; (40c3d4 <__sfvwrite_r+0x300>)
  40c104:	46c8      	mov	r8, r9
  40c106:	46b2      	mov	sl, r6
  40c108:	45b8      	cmp	r8, r7
  40c10a:	4643      	mov	r3, r8
  40c10c:	464a      	mov	r2, r9
  40c10e:	bf28      	it	cs
  40c110:	463b      	movcs	r3, r7
  40c112:	9801      	ldr	r0, [sp, #4]
  40c114:	f1b8 0f00 	cmp.w	r8, #0
  40c118:	d050      	beq.n	40c1bc <__sfvwrite_r+0xe8>
  40c11a:	69e1      	ldr	r1, [r4, #28]
  40c11c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40c11e:	47b0      	blx	r6
  40c120:	2800      	cmp	r0, #0
  40c122:	dd71      	ble.n	40c208 <__sfvwrite_r+0x134>
  40c124:	f8da 3008 	ldr.w	r3, [sl, #8]
  40c128:	1a1b      	subs	r3, r3, r0
  40c12a:	4481      	add	r9, r0
  40c12c:	ebc0 0808 	rsb	r8, r0, r8
  40c130:	f8ca 3008 	str.w	r3, [sl, #8]
  40c134:	2b00      	cmp	r3, #0
  40c136:	d1e7      	bne.n	40c108 <__sfvwrite_r+0x34>
  40c138:	2000      	movs	r0, #0
  40c13a:	b005      	add	sp, #20
  40c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c140:	4621      	mov	r1, r4
  40c142:	9801      	ldr	r0, [sp, #4]
  40c144:	f7fe fca8 	bl	40aa98 <__swsetup_r>
  40c148:	2800      	cmp	r0, #0
  40c14a:	f040 813a 	bne.w	40c3c2 <__sfvwrite_r+0x2ee>
  40c14e:	89a3      	ldrh	r3, [r4, #12]
  40c150:	6835      	ldr	r5, [r6, #0]
  40c152:	f003 0802 	and.w	r8, r3, #2
  40c156:	fa1f f088 	uxth.w	r0, r8
  40c15a:	2800      	cmp	r0, #0
  40c15c:	d1cf      	bne.n	40c0fe <__sfvwrite_r+0x2a>
  40c15e:	f013 0901 	ands.w	r9, r3, #1
  40c162:	d15b      	bne.n	40c21c <__sfvwrite_r+0x148>
  40c164:	464f      	mov	r7, r9
  40c166:	9602      	str	r6, [sp, #8]
  40c168:	b31f      	cbz	r7, 40c1b2 <__sfvwrite_r+0xde>
  40c16a:	059a      	lsls	r2, r3, #22
  40c16c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40c170:	d52c      	bpl.n	40c1cc <__sfvwrite_r+0xf8>
  40c172:	4547      	cmp	r7, r8
  40c174:	46c2      	mov	sl, r8
  40c176:	f0c0 80a4 	bcc.w	40c2c2 <__sfvwrite_r+0x1ee>
  40c17a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40c17e:	f040 80b1 	bne.w	40c2e4 <__sfvwrite_r+0x210>
  40c182:	6820      	ldr	r0, [r4, #0]
  40c184:	4652      	mov	r2, sl
  40c186:	4649      	mov	r1, r9
  40c188:	f000 fce2 	bl	40cb50 <memmove>
  40c18c:	68a0      	ldr	r0, [r4, #8]
  40c18e:	6823      	ldr	r3, [r4, #0]
  40c190:	ebc8 0000 	rsb	r0, r8, r0
  40c194:	4453      	add	r3, sl
  40c196:	60a0      	str	r0, [r4, #8]
  40c198:	6023      	str	r3, [r4, #0]
  40c19a:	4638      	mov	r0, r7
  40c19c:	9a02      	ldr	r2, [sp, #8]
  40c19e:	6893      	ldr	r3, [r2, #8]
  40c1a0:	1a1b      	subs	r3, r3, r0
  40c1a2:	4481      	add	r9, r0
  40c1a4:	1a3f      	subs	r7, r7, r0
  40c1a6:	6093      	str	r3, [r2, #8]
  40c1a8:	2b00      	cmp	r3, #0
  40c1aa:	d0c5      	beq.n	40c138 <__sfvwrite_r+0x64>
  40c1ac:	89a3      	ldrh	r3, [r4, #12]
  40c1ae:	2f00      	cmp	r7, #0
  40c1b0:	d1db      	bne.n	40c16a <__sfvwrite_r+0x96>
  40c1b2:	f8d5 9000 	ldr.w	r9, [r5]
  40c1b6:	686f      	ldr	r7, [r5, #4]
  40c1b8:	3508      	adds	r5, #8
  40c1ba:	e7d5      	b.n	40c168 <__sfvwrite_r+0x94>
  40c1bc:	f8d5 9000 	ldr.w	r9, [r5]
  40c1c0:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40c1c4:	3508      	adds	r5, #8
  40c1c6:	e79f      	b.n	40c108 <__sfvwrite_r+0x34>
  40c1c8:	2000      	movs	r0, #0
  40c1ca:	4770      	bx	lr
  40c1cc:	6820      	ldr	r0, [r4, #0]
  40c1ce:	6923      	ldr	r3, [r4, #16]
  40c1d0:	4298      	cmp	r0, r3
  40c1d2:	d803      	bhi.n	40c1dc <__sfvwrite_r+0x108>
  40c1d4:	6961      	ldr	r1, [r4, #20]
  40c1d6:	428f      	cmp	r7, r1
  40c1d8:	f080 80b7 	bcs.w	40c34a <__sfvwrite_r+0x276>
  40c1dc:	45b8      	cmp	r8, r7
  40c1de:	bf28      	it	cs
  40c1e0:	46b8      	movcs	r8, r7
  40c1e2:	4642      	mov	r2, r8
  40c1e4:	4649      	mov	r1, r9
  40c1e6:	f000 fcb3 	bl	40cb50 <memmove>
  40c1ea:	68a3      	ldr	r3, [r4, #8]
  40c1ec:	6822      	ldr	r2, [r4, #0]
  40c1ee:	ebc8 0303 	rsb	r3, r8, r3
  40c1f2:	4442      	add	r2, r8
  40c1f4:	60a3      	str	r3, [r4, #8]
  40c1f6:	6022      	str	r2, [r4, #0]
  40c1f8:	2b00      	cmp	r3, #0
  40c1fa:	d149      	bne.n	40c290 <__sfvwrite_r+0x1bc>
  40c1fc:	4621      	mov	r1, r4
  40c1fe:	9801      	ldr	r0, [sp, #4]
  40c200:	f7ff fd22 	bl	40bc48 <_fflush_r>
  40c204:	2800      	cmp	r0, #0
  40c206:	d043      	beq.n	40c290 <__sfvwrite_r+0x1bc>
  40c208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c210:	f04f 30ff 	mov.w	r0, #4294967295
  40c214:	81a3      	strh	r3, [r4, #12]
  40c216:	b005      	add	sp, #20
  40c218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c21c:	4680      	mov	r8, r0
  40c21e:	9002      	str	r0, [sp, #8]
  40c220:	4682      	mov	sl, r0
  40c222:	4681      	mov	r9, r0
  40c224:	f1b9 0f00 	cmp.w	r9, #0
  40c228:	d02a      	beq.n	40c280 <__sfvwrite_r+0x1ac>
  40c22a:	9b02      	ldr	r3, [sp, #8]
  40c22c:	2b00      	cmp	r3, #0
  40c22e:	d04c      	beq.n	40c2ca <__sfvwrite_r+0x1f6>
  40c230:	6820      	ldr	r0, [r4, #0]
  40c232:	6923      	ldr	r3, [r4, #16]
  40c234:	6962      	ldr	r2, [r4, #20]
  40c236:	45c8      	cmp	r8, r9
  40c238:	46c3      	mov	fp, r8
  40c23a:	bf28      	it	cs
  40c23c:	46cb      	movcs	fp, r9
  40c23e:	4298      	cmp	r0, r3
  40c240:	465f      	mov	r7, fp
  40c242:	d904      	bls.n	40c24e <__sfvwrite_r+0x17a>
  40c244:	68a3      	ldr	r3, [r4, #8]
  40c246:	4413      	add	r3, r2
  40c248:	459b      	cmp	fp, r3
  40c24a:	f300 8090 	bgt.w	40c36e <__sfvwrite_r+0x29a>
  40c24e:	4593      	cmp	fp, r2
  40c250:	db20      	blt.n	40c294 <__sfvwrite_r+0x1c0>
  40c252:	4613      	mov	r3, r2
  40c254:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40c256:	69e1      	ldr	r1, [r4, #28]
  40c258:	9801      	ldr	r0, [sp, #4]
  40c25a:	4652      	mov	r2, sl
  40c25c:	47b8      	blx	r7
  40c25e:	1e07      	subs	r7, r0, #0
  40c260:	ddd2      	ble.n	40c208 <__sfvwrite_r+0x134>
  40c262:	ebb8 0807 	subs.w	r8, r8, r7
  40c266:	d023      	beq.n	40c2b0 <__sfvwrite_r+0x1dc>
  40c268:	68b3      	ldr	r3, [r6, #8]
  40c26a:	1bdb      	subs	r3, r3, r7
  40c26c:	44ba      	add	sl, r7
  40c26e:	ebc7 0909 	rsb	r9, r7, r9
  40c272:	60b3      	str	r3, [r6, #8]
  40c274:	2b00      	cmp	r3, #0
  40c276:	f43f af5f 	beq.w	40c138 <__sfvwrite_r+0x64>
  40c27a:	f1b9 0f00 	cmp.w	r9, #0
  40c27e:	d1d4      	bne.n	40c22a <__sfvwrite_r+0x156>
  40c280:	2300      	movs	r3, #0
  40c282:	f8d5 a000 	ldr.w	sl, [r5]
  40c286:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40c28a:	9302      	str	r3, [sp, #8]
  40c28c:	3508      	adds	r5, #8
  40c28e:	e7c9      	b.n	40c224 <__sfvwrite_r+0x150>
  40c290:	4640      	mov	r0, r8
  40c292:	e783      	b.n	40c19c <__sfvwrite_r+0xc8>
  40c294:	465a      	mov	r2, fp
  40c296:	4651      	mov	r1, sl
  40c298:	f000 fc5a 	bl	40cb50 <memmove>
  40c29c:	68a2      	ldr	r2, [r4, #8]
  40c29e:	6823      	ldr	r3, [r4, #0]
  40c2a0:	ebcb 0202 	rsb	r2, fp, r2
  40c2a4:	445b      	add	r3, fp
  40c2a6:	ebb8 0807 	subs.w	r8, r8, r7
  40c2aa:	60a2      	str	r2, [r4, #8]
  40c2ac:	6023      	str	r3, [r4, #0]
  40c2ae:	d1db      	bne.n	40c268 <__sfvwrite_r+0x194>
  40c2b0:	4621      	mov	r1, r4
  40c2b2:	9801      	ldr	r0, [sp, #4]
  40c2b4:	f7ff fcc8 	bl	40bc48 <_fflush_r>
  40c2b8:	2800      	cmp	r0, #0
  40c2ba:	d1a5      	bne.n	40c208 <__sfvwrite_r+0x134>
  40c2bc:	f8cd 8008 	str.w	r8, [sp, #8]
  40c2c0:	e7d2      	b.n	40c268 <__sfvwrite_r+0x194>
  40c2c2:	6820      	ldr	r0, [r4, #0]
  40c2c4:	46b8      	mov	r8, r7
  40c2c6:	46ba      	mov	sl, r7
  40c2c8:	e75c      	b.n	40c184 <__sfvwrite_r+0xb0>
  40c2ca:	464a      	mov	r2, r9
  40c2cc:	210a      	movs	r1, #10
  40c2ce:	4650      	mov	r0, sl
  40c2d0:	f000 fbee 	bl	40cab0 <memchr>
  40c2d4:	2800      	cmp	r0, #0
  40c2d6:	d06f      	beq.n	40c3b8 <__sfvwrite_r+0x2e4>
  40c2d8:	3001      	adds	r0, #1
  40c2da:	2301      	movs	r3, #1
  40c2dc:	ebca 0800 	rsb	r8, sl, r0
  40c2e0:	9302      	str	r3, [sp, #8]
  40c2e2:	e7a5      	b.n	40c230 <__sfvwrite_r+0x15c>
  40c2e4:	6962      	ldr	r2, [r4, #20]
  40c2e6:	6820      	ldr	r0, [r4, #0]
  40c2e8:	6921      	ldr	r1, [r4, #16]
  40c2ea:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40c2ee:	ebc1 0a00 	rsb	sl, r1, r0
  40c2f2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40c2f6:	f10a 0001 	add.w	r0, sl, #1
  40c2fa:	ea4f 0868 	mov.w	r8, r8, asr #1
  40c2fe:	4438      	add	r0, r7
  40c300:	4540      	cmp	r0, r8
  40c302:	4642      	mov	r2, r8
  40c304:	bf84      	itt	hi
  40c306:	4680      	movhi	r8, r0
  40c308:	4642      	movhi	r2, r8
  40c30a:	055b      	lsls	r3, r3, #21
  40c30c:	d542      	bpl.n	40c394 <__sfvwrite_r+0x2c0>
  40c30e:	4611      	mov	r1, r2
  40c310:	9801      	ldr	r0, [sp, #4]
  40c312:	f000 f915 	bl	40c540 <_malloc_r>
  40c316:	4683      	mov	fp, r0
  40c318:	2800      	cmp	r0, #0
  40c31a:	d055      	beq.n	40c3c8 <__sfvwrite_r+0x2f4>
  40c31c:	4652      	mov	r2, sl
  40c31e:	6921      	ldr	r1, [r4, #16]
  40c320:	f7fb fe02 	bl	407f28 <memcpy>
  40c324:	89a3      	ldrh	r3, [r4, #12]
  40c326:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40c32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c32e:	81a3      	strh	r3, [r4, #12]
  40c330:	ebca 0308 	rsb	r3, sl, r8
  40c334:	eb0b 000a 	add.w	r0, fp, sl
  40c338:	f8c4 8014 	str.w	r8, [r4, #20]
  40c33c:	f8c4 b010 	str.w	fp, [r4, #16]
  40c340:	6020      	str	r0, [r4, #0]
  40c342:	60a3      	str	r3, [r4, #8]
  40c344:	46b8      	mov	r8, r7
  40c346:	46ba      	mov	sl, r7
  40c348:	e71c      	b.n	40c184 <__sfvwrite_r+0xb0>
  40c34a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40c34e:	42bb      	cmp	r3, r7
  40c350:	bf28      	it	cs
  40c352:	463b      	movcs	r3, r7
  40c354:	464a      	mov	r2, r9
  40c356:	fb93 f3f1 	sdiv	r3, r3, r1
  40c35a:	9801      	ldr	r0, [sp, #4]
  40c35c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40c35e:	fb01 f303 	mul.w	r3, r1, r3
  40c362:	69e1      	ldr	r1, [r4, #28]
  40c364:	47b0      	blx	r6
  40c366:	2800      	cmp	r0, #0
  40c368:	f73f af18 	bgt.w	40c19c <__sfvwrite_r+0xc8>
  40c36c:	e74c      	b.n	40c208 <__sfvwrite_r+0x134>
  40c36e:	461a      	mov	r2, r3
  40c370:	4651      	mov	r1, sl
  40c372:	9303      	str	r3, [sp, #12]
  40c374:	f000 fbec 	bl	40cb50 <memmove>
  40c378:	6822      	ldr	r2, [r4, #0]
  40c37a:	9b03      	ldr	r3, [sp, #12]
  40c37c:	9801      	ldr	r0, [sp, #4]
  40c37e:	441a      	add	r2, r3
  40c380:	6022      	str	r2, [r4, #0]
  40c382:	4621      	mov	r1, r4
  40c384:	f7ff fc60 	bl	40bc48 <_fflush_r>
  40c388:	9b03      	ldr	r3, [sp, #12]
  40c38a:	2800      	cmp	r0, #0
  40c38c:	f47f af3c 	bne.w	40c208 <__sfvwrite_r+0x134>
  40c390:	461f      	mov	r7, r3
  40c392:	e766      	b.n	40c262 <__sfvwrite_r+0x18e>
  40c394:	9801      	ldr	r0, [sp, #4]
  40c396:	f000 ff51 	bl	40d23c <_realloc_r>
  40c39a:	4683      	mov	fp, r0
  40c39c:	2800      	cmp	r0, #0
  40c39e:	d1c7      	bne.n	40c330 <__sfvwrite_r+0x25c>
  40c3a0:	9d01      	ldr	r5, [sp, #4]
  40c3a2:	6921      	ldr	r1, [r4, #16]
  40c3a4:	4628      	mov	r0, r5
  40c3a6:	f7ff fdad 	bl	40bf04 <_free_r>
  40c3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c3ae:	220c      	movs	r2, #12
  40c3b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40c3b4:	602a      	str	r2, [r5, #0]
  40c3b6:	e729      	b.n	40c20c <__sfvwrite_r+0x138>
  40c3b8:	2301      	movs	r3, #1
  40c3ba:	f109 0801 	add.w	r8, r9, #1
  40c3be:	9302      	str	r3, [sp, #8]
  40c3c0:	e736      	b.n	40c230 <__sfvwrite_r+0x15c>
  40c3c2:	f04f 30ff 	mov.w	r0, #4294967295
  40c3c6:	e6b8      	b.n	40c13a <__sfvwrite_r+0x66>
  40c3c8:	9a01      	ldr	r2, [sp, #4]
  40c3ca:	230c      	movs	r3, #12
  40c3cc:	6013      	str	r3, [r2, #0]
  40c3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c3d2:	e71b      	b.n	40c20c <__sfvwrite_r+0x138>
  40c3d4:	7ffffc00 	.word	0x7ffffc00

0040c3d8 <_fwalk_reent>:
  40c3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c3dc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40c3e0:	d01f      	beq.n	40c422 <_fwalk_reent+0x4a>
  40c3e2:	4688      	mov	r8, r1
  40c3e4:	4606      	mov	r6, r0
  40c3e6:	f04f 0900 	mov.w	r9, #0
  40c3ea:	687d      	ldr	r5, [r7, #4]
  40c3ec:	68bc      	ldr	r4, [r7, #8]
  40c3ee:	3d01      	subs	r5, #1
  40c3f0:	d411      	bmi.n	40c416 <_fwalk_reent+0x3e>
  40c3f2:	89a3      	ldrh	r3, [r4, #12]
  40c3f4:	2b01      	cmp	r3, #1
  40c3f6:	f105 35ff 	add.w	r5, r5, #4294967295
  40c3fa:	d908      	bls.n	40c40e <_fwalk_reent+0x36>
  40c3fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40c400:	3301      	adds	r3, #1
  40c402:	4621      	mov	r1, r4
  40c404:	4630      	mov	r0, r6
  40c406:	d002      	beq.n	40c40e <_fwalk_reent+0x36>
  40c408:	47c0      	blx	r8
  40c40a:	ea49 0900 	orr.w	r9, r9, r0
  40c40e:	1c6b      	adds	r3, r5, #1
  40c410:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40c414:	d1ed      	bne.n	40c3f2 <_fwalk_reent+0x1a>
  40c416:	683f      	ldr	r7, [r7, #0]
  40c418:	2f00      	cmp	r7, #0
  40c41a:	d1e6      	bne.n	40c3ea <_fwalk_reent+0x12>
  40c41c:	4648      	mov	r0, r9
  40c41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c422:	46b9      	mov	r9, r7
  40c424:	4648      	mov	r0, r9
  40c426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c42a:	bf00      	nop

0040c42c <__locale_charset>:
  40c42c:	4800      	ldr	r0, [pc, #0]	; (40c430 <__locale_charset+0x4>)
  40c42e:	4770      	bx	lr
  40c430:	204004bc 	.word	0x204004bc

0040c434 <__locale_mb_cur_max>:
  40c434:	4b01      	ldr	r3, [pc, #4]	; (40c43c <__locale_mb_cur_max+0x8>)
  40c436:	6818      	ldr	r0, [r3, #0]
  40c438:	4770      	bx	lr
  40c43a:	bf00      	nop
  40c43c:	204004dc 	.word	0x204004dc

0040c440 <_localeconv_r>:
  40c440:	4800      	ldr	r0, [pc, #0]	; (40c444 <_localeconv_r+0x4>)
  40c442:	4770      	bx	lr
  40c444:	20400484 	.word	0x20400484

0040c448 <__swhatbuf_r>:
  40c448:	b570      	push	{r4, r5, r6, lr}
  40c44a:	460d      	mov	r5, r1
  40c44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c450:	2900      	cmp	r1, #0
  40c452:	b090      	sub	sp, #64	; 0x40
  40c454:	4614      	mov	r4, r2
  40c456:	461e      	mov	r6, r3
  40c458:	db14      	blt.n	40c484 <__swhatbuf_r+0x3c>
  40c45a:	aa01      	add	r2, sp, #4
  40c45c:	f001 fb2e 	bl	40dabc <_fstat_r>
  40c460:	2800      	cmp	r0, #0
  40c462:	db0f      	blt.n	40c484 <__swhatbuf_r+0x3c>
  40c464:	9a02      	ldr	r2, [sp, #8]
  40c466:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40c46a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40c46e:	fab2 f282 	clz	r2, r2
  40c472:	0952      	lsrs	r2, r2, #5
  40c474:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c478:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40c47c:	6032      	str	r2, [r6, #0]
  40c47e:	6023      	str	r3, [r4, #0]
  40c480:	b010      	add	sp, #64	; 0x40
  40c482:	bd70      	pop	{r4, r5, r6, pc}
  40c484:	89a8      	ldrh	r0, [r5, #12]
  40c486:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40c48a:	b282      	uxth	r2, r0
  40c48c:	2000      	movs	r0, #0
  40c48e:	6030      	str	r0, [r6, #0]
  40c490:	b11a      	cbz	r2, 40c49a <__swhatbuf_r+0x52>
  40c492:	2340      	movs	r3, #64	; 0x40
  40c494:	6023      	str	r3, [r4, #0]
  40c496:	b010      	add	sp, #64	; 0x40
  40c498:	bd70      	pop	{r4, r5, r6, pc}
  40c49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c49e:	4610      	mov	r0, r2
  40c4a0:	6023      	str	r3, [r4, #0]
  40c4a2:	b010      	add	sp, #64	; 0x40
  40c4a4:	bd70      	pop	{r4, r5, r6, pc}
  40c4a6:	bf00      	nop

0040c4a8 <__smakebuf_r>:
  40c4a8:	898a      	ldrh	r2, [r1, #12]
  40c4aa:	0792      	lsls	r2, r2, #30
  40c4ac:	460b      	mov	r3, r1
  40c4ae:	d506      	bpl.n	40c4be <__smakebuf_r+0x16>
  40c4b0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40c4b4:	2101      	movs	r1, #1
  40c4b6:	601a      	str	r2, [r3, #0]
  40c4b8:	611a      	str	r2, [r3, #16]
  40c4ba:	6159      	str	r1, [r3, #20]
  40c4bc:	4770      	bx	lr
  40c4be:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c4c0:	b083      	sub	sp, #12
  40c4c2:	ab01      	add	r3, sp, #4
  40c4c4:	466a      	mov	r2, sp
  40c4c6:	460c      	mov	r4, r1
  40c4c8:	4605      	mov	r5, r0
  40c4ca:	f7ff ffbd 	bl	40c448 <__swhatbuf_r>
  40c4ce:	9900      	ldr	r1, [sp, #0]
  40c4d0:	4606      	mov	r6, r0
  40c4d2:	4628      	mov	r0, r5
  40c4d4:	f000 f834 	bl	40c540 <_malloc_r>
  40c4d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c4dc:	b1d0      	cbz	r0, 40c514 <__smakebuf_r+0x6c>
  40c4de:	9a01      	ldr	r2, [sp, #4]
  40c4e0:	4f12      	ldr	r7, [pc, #72]	; (40c52c <__smakebuf_r+0x84>)
  40c4e2:	9900      	ldr	r1, [sp, #0]
  40c4e4:	63ef      	str	r7, [r5, #60]	; 0x3c
  40c4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c4ea:	81a3      	strh	r3, [r4, #12]
  40c4ec:	6020      	str	r0, [r4, #0]
  40c4ee:	6120      	str	r0, [r4, #16]
  40c4f0:	6161      	str	r1, [r4, #20]
  40c4f2:	b91a      	cbnz	r2, 40c4fc <__smakebuf_r+0x54>
  40c4f4:	4333      	orrs	r3, r6
  40c4f6:	81a3      	strh	r3, [r4, #12]
  40c4f8:	b003      	add	sp, #12
  40c4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c4fc:	4628      	mov	r0, r5
  40c4fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c502:	f001 faef 	bl	40dae4 <_isatty_r>
  40c506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c50a:	2800      	cmp	r0, #0
  40c50c:	d0f2      	beq.n	40c4f4 <__smakebuf_r+0x4c>
  40c50e:	f043 0301 	orr.w	r3, r3, #1
  40c512:	e7ef      	b.n	40c4f4 <__smakebuf_r+0x4c>
  40c514:	059a      	lsls	r2, r3, #22
  40c516:	d4ef      	bmi.n	40c4f8 <__smakebuf_r+0x50>
  40c518:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40c51c:	f043 0302 	orr.w	r3, r3, #2
  40c520:	2101      	movs	r1, #1
  40c522:	81a3      	strh	r3, [r4, #12]
  40c524:	6022      	str	r2, [r4, #0]
  40c526:	6122      	str	r2, [r4, #16]
  40c528:	6161      	str	r1, [r4, #20]
  40c52a:	e7e5      	b.n	40c4f8 <__smakebuf_r+0x50>
  40c52c:	0040bc75 	.word	0x0040bc75

0040c530 <malloc>:
  40c530:	4b02      	ldr	r3, [pc, #8]	; (40c53c <malloc+0xc>)
  40c532:	4601      	mov	r1, r0
  40c534:	6818      	ldr	r0, [r3, #0]
  40c536:	f000 b803 	b.w	40c540 <_malloc_r>
  40c53a:	bf00      	nop
  40c53c:	20400480 	.word	0x20400480

0040c540 <_malloc_r>:
  40c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c544:	f101 050b 	add.w	r5, r1, #11
  40c548:	2d16      	cmp	r5, #22
  40c54a:	b083      	sub	sp, #12
  40c54c:	4606      	mov	r6, r0
  40c54e:	f240 809f 	bls.w	40c690 <_malloc_r+0x150>
  40c552:	f035 0507 	bics.w	r5, r5, #7
  40c556:	f100 80bf 	bmi.w	40c6d8 <_malloc_r+0x198>
  40c55a:	42a9      	cmp	r1, r5
  40c55c:	f200 80bc 	bhi.w	40c6d8 <_malloc_r+0x198>
  40c560:	f000 fb5a 	bl	40cc18 <__malloc_lock>
  40c564:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40c568:	f0c0 829c 	bcc.w	40caa4 <_malloc_r+0x564>
  40c56c:	0a6b      	lsrs	r3, r5, #9
  40c56e:	f000 80ba 	beq.w	40c6e6 <_malloc_r+0x1a6>
  40c572:	2b04      	cmp	r3, #4
  40c574:	f200 8183 	bhi.w	40c87e <_malloc_r+0x33e>
  40c578:	09a8      	lsrs	r0, r5, #6
  40c57a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40c57e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c582:	3038      	adds	r0, #56	; 0x38
  40c584:	4fc4      	ldr	r7, [pc, #784]	; (40c898 <_malloc_r+0x358>)
  40c586:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40c58a:	f1a3 0108 	sub.w	r1, r3, #8
  40c58e:	685c      	ldr	r4, [r3, #4]
  40c590:	42a1      	cmp	r1, r4
  40c592:	d107      	bne.n	40c5a4 <_malloc_r+0x64>
  40c594:	e0ac      	b.n	40c6f0 <_malloc_r+0x1b0>
  40c596:	2a00      	cmp	r2, #0
  40c598:	f280 80ac 	bge.w	40c6f4 <_malloc_r+0x1b4>
  40c59c:	68e4      	ldr	r4, [r4, #12]
  40c59e:	42a1      	cmp	r1, r4
  40c5a0:	f000 80a6 	beq.w	40c6f0 <_malloc_r+0x1b0>
  40c5a4:	6863      	ldr	r3, [r4, #4]
  40c5a6:	f023 0303 	bic.w	r3, r3, #3
  40c5aa:	1b5a      	subs	r2, r3, r5
  40c5ac:	2a0f      	cmp	r2, #15
  40c5ae:	ddf2      	ble.n	40c596 <_malloc_r+0x56>
  40c5b0:	49b9      	ldr	r1, [pc, #740]	; (40c898 <_malloc_r+0x358>)
  40c5b2:	693c      	ldr	r4, [r7, #16]
  40c5b4:	f101 0e08 	add.w	lr, r1, #8
  40c5b8:	4574      	cmp	r4, lr
  40c5ba:	f000 81b3 	beq.w	40c924 <_malloc_r+0x3e4>
  40c5be:	6863      	ldr	r3, [r4, #4]
  40c5c0:	f023 0303 	bic.w	r3, r3, #3
  40c5c4:	1b5a      	subs	r2, r3, r5
  40c5c6:	2a0f      	cmp	r2, #15
  40c5c8:	f300 8199 	bgt.w	40c8fe <_malloc_r+0x3be>
  40c5cc:	2a00      	cmp	r2, #0
  40c5ce:	f8c1 e014 	str.w	lr, [r1, #20]
  40c5d2:	f8c1 e010 	str.w	lr, [r1, #16]
  40c5d6:	f280 809e 	bge.w	40c716 <_malloc_r+0x1d6>
  40c5da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40c5de:	f080 8167 	bcs.w	40c8b0 <_malloc_r+0x370>
  40c5e2:	08db      	lsrs	r3, r3, #3
  40c5e4:	f103 0c01 	add.w	ip, r3, #1
  40c5e8:	2201      	movs	r2, #1
  40c5ea:	109b      	asrs	r3, r3, #2
  40c5ec:	fa02 f303 	lsl.w	r3, r2, r3
  40c5f0:	684a      	ldr	r2, [r1, #4]
  40c5f2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40c5f6:	f8c4 8008 	str.w	r8, [r4, #8]
  40c5fa:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40c5fe:	431a      	orrs	r2, r3
  40c600:	f1a9 0308 	sub.w	r3, r9, #8
  40c604:	60e3      	str	r3, [r4, #12]
  40c606:	604a      	str	r2, [r1, #4]
  40c608:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  40c60c:	f8c8 400c 	str.w	r4, [r8, #12]
  40c610:	1083      	asrs	r3, r0, #2
  40c612:	2401      	movs	r4, #1
  40c614:	409c      	lsls	r4, r3
  40c616:	4294      	cmp	r4, r2
  40c618:	f200 808a 	bhi.w	40c730 <_malloc_r+0x1f0>
  40c61c:	4214      	tst	r4, r2
  40c61e:	d106      	bne.n	40c62e <_malloc_r+0xee>
  40c620:	f020 0003 	bic.w	r0, r0, #3
  40c624:	0064      	lsls	r4, r4, #1
  40c626:	4214      	tst	r4, r2
  40c628:	f100 0004 	add.w	r0, r0, #4
  40c62c:	d0fa      	beq.n	40c624 <_malloc_r+0xe4>
  40c62e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40c632:	46cc      	mov	ip, r9
  40c634:	4680      	mov	r8, r0
  40c636:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40c63a:	458c      	cmp	ip, r1
  40c63c:	d107      	bne.n	40c64e <_malloc_r+0x10e>
  40c63e:	e173      	b.n	40c928 <_malloc_r+0x3e8>
  40c640:	2a00      	cmp	r2, #0
  40c642:	f280 8181 	bge.w	40c948 <_malloc_r+0x408>
  40c646:	68c9      	ldr	r1, [r1, #12]
  40c648:	458c      	cmp	ip, r1
  40c64a:	f000 816d 	beq.w	40c928 <_malloc_r+0x3e8>
  40c64e:	684b      	ldr	r3, [r1, #4]
  40c650:	f023 0303 	bic.w	r3, r3, #3
  40c654:	1b5a      	subs	r2, r3, r5
  40c656:	2a0f      	cmp	r2, #15
  40c658:	ddf2      	ble.n	40c640 <_malloc_r+0x100>
  40c65a:	460c      	mov	r4, r1
  40c65c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40c660:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40c664:	194b      	adds	r3, r1, r5
  40c666:	f045 0501 	orr.w	r5, r5, #1
  40c66a:	604d      	str	r5, [r1, #4]
  40c66c:	f042 0101 	orr.w	r1, r2, #1
  40c670:	f8c8 c00c 	str.w	ip, [r8, #12]
  40c674:	4630      	mov	r0, r6
  40c676:	f8cc 8008 	str.w	r8, [ip, #8]
  40c67a:	617b      	str	r3, [r7, #20]
  40c67c:	613b      	str	r3, [r7, #16]
  40c67e:	f8c3 e00c 	str.w	lr, [r3, #12]
  40c682:	f8c3 e008 	str.w	lr, [r3, #8]
  40c686:	6059      	str	r1, [r3, #4]
  40c688:	509a      	str	r2, [r3, r2]
  40c68a:	f000 fac7 	bl	40cc1c <__malloc_unlock>
  40c68e:	e01f      	b.n	40c6d0 <_malloc_r+0x190>
  40c690:	2910      	cmp	r1, #16
  40c692:	d821      	bhi.n	40c6d8 <_malloc_r+0x198>
  40c694:	f000 fac0 	bl	40cc18 <__malloc_lock>
  40c698:	2510      	movs	r5, #16
  40c69a:	2306      	movs	r3, #6
  40c69c:	2002      	movs	r0, #2
  40c69e:	4f7e      	ldr	r7, [pc, #504]	; (40c898 <_malloc_r+0x358>)
  40c6a0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40c6a4:	f1a3 0208 	sub.w	r2, r3, #8
  40c6a8:	685c      	ldr	r4, [r3, #4]
  40c6aa:	4294      	cmp	r4, r2
  40c6ac:	f000 8145 	beq.w	40c93a <_malloc_r+0x3fa>
  40c6b0:	6863      	ldr	r3, [r4, #4]
  40c6b2:	68e1      	ldr	r1, [r4, #12]
  40c6b4:	68a5      	ldr	r5, [r4, #8]
  40c6b6:	f023 0303 	bic.w	r3, r3, #3
  40c6ba:	4423      	add	r3, r4
  40c6bc:	4630      	mov	r0, r6
  40c6be:	685a      	ldr	r2, [r3, #4]
  40c6c0:	60e9      	str	r1, [r5, #12]
  40c6c2:	f042 0201 	orr.w	r2, r2, #1
  40c6c6:	608d      	str	r5, [r1, #8]
  40c6c8:	605a      	str	r2, [r3, #4]
  40c6ca:	f000 faa7 	bl	40cc1c <__malloc_unlock>
  40c6ce:	3408      	adds	r4, #8
  40c6d0:	4620      	mov	r0, r4
  40c6d2:	b003      	add	sp, #12
  40c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c6d8:	2400      	movs	r4, #0
  40c6da:	230c      	movs	r3, #12
  40c6dc:	4620      	mov	r0, r4
  40c6de:	6033      	str	r3, [r6, #0]
  40c6e0:	b003      	add	sp, #12
  40c6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c6e6:	2380      	movs	r3, #128	; 0x80
  40c6e8:	f04f 0e40 	mov.w	lr, #64	; 0x40
  40c6ec:	203f      	movs	r0, #63	; 0x3f
  40c6ee:	e749      	b.n	40c584 <_malloc_r+0x44>
  40c6f0:	4670      	mov	r0, lr
  40c6f2:	e75d      	b.n	40c5b0 <_malloc_r+0x70>
  40c6f4:	4423      	add	r3, r4
  40c6f6:	68e1      	ldr	r1, [r4, #12]
  40c6f8:	685a      	ldr	r2, [r3, #4]
  40c6fa:	68a5      	ldr	r5, [r4, #8]
  40c6fc:	f042 0201 	orr.w	r2, r2, #1
  40c700:	60e9      	str	r1, [r5, #12]
  40c702:	4630      	mov	r0, r6
  40c704:	608d      	str	r5, [r1, #8]
  40c706:	605a      	str	r2, [r3, #4]
  40c708:	f000 fa88 	bl	40cc1c <__malloc_unlock>
  40c70c:	3408      	adds	r4, #8
  40c70e:	4620      	mov	r0, r4
  40c710:	b003      	add	sp, #12
  40c712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c716:	4423      	add	r3, r4
  40c718:	4630      	mov	r0, r6
  40c71a:	685a      	ldr	r2, [r3, #4]
  40c71c:	f042 0201 	orr.w	r2, r2, #1
  40c720:	605a      	str	r2, [r3, #4]
  40c722:	f000 fa7b 	bl	40cc1c <__malloc_unlock>
  40c726:	3408      	adds	r4, #8
  40c728:	4620      	mov	r0, r4
  40c72a:	b003      	add	sp, #12
  40c72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c730:	68bc      	ldr	r4, [r7, #8]
  40c732:	6863      	ldr	r3, [r4, #4]
  40c734:	f023 0803 	bic.w	r8, r3, #3
  40c738:	45a8      	cmp	r8, r5
  40c73a:	d304      	bcc.n	40c746 <_malloc_r+0x206>
  40c73c:	ebc5 0308 	rsb	r3, r5, r8
  40c740:	2b0f      	cmp	r3, #15
  40c742:	f300 808c 	bgt.w	40c85e <_malloc_r+0x31e>
  40c746:	4b55      	ldr	r3, [pc, #340]	; (40c89c <_malloc_r+0x35c>)
  40c748:	f8df 9160 	ldr.w	r9, [pc, #352]	; 40c8ac <_malloc_r+0x36c>
  40c74c:	681a      	ldr	r2, [r3, #0]
  40c74e:	f8d9 3000 	ldr.w	r3, [r9]
  40c752:	3301      	adds	r3, #1
  40c754:	442a      	add	r2, r5
  40c756:	eb04 0a08 	add.w	sl, r4, r8
  40c75a:	f000 8160 	beq.w	40ca1e <_malloc_r+0x4de>
  40c75e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40c762:	320f      	adds	r2, #15
  40c764:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40c768:	f022 020f 	bic.w	r2, r2, #15
  40c76c:	4611      	mov	r1, r2
  40c76e:	4630      	mov	r0, r6
  40c770:	9201      	str	r2, [sp, #4]
  40c772:	f000 ff53 	bl	40d61c <_sbrk_r>
  40c776:	f1b0 3fff 	cmp.w	r0, #4294967295
  40c77a:	4683      	mov	fp, r0
  40c77c:	9a01      	ldr	r2, [sp, #4]
  40c77e:	f000 8158 	beq.w	40ca32 <_malloc_r+0x4f2>
  40c782:	4582      	cmp	sl, r0
  40c784:	f200 80fc 	bhi.w	40c980 <_malloc_r+0x440>
  40c788:	4b45      	ldr	r3, [pc, #276]	; (40c8a0 <_malloc_r+0x360>)
  40c78a:	6819      	ldr	r1, [r3, #0]
  40c78c:	45da      	cmp	sl, fp
  40c78e:	4411      	add	r1, r2
  40c790:	6019      	str	r1, [r3, #0]
  40c792:	f000 8153 	beq.w	40ca3c <_malloc_r+0x4fc>
  40c796:	f8d9 0000 	ldr.w	r0, [r9]
  40c79a:	f8df e110 	ldr.w	lr, [pc, #272]	; 40c8ac <_malloc_r+0x36c>
  40c79e:	3001      	adds	r0, #1
  40c7a0:	bf1b      	ittet	ne
  40c7a2:	ebca 0a0b 	rsbne	sl, sl, fp
  40c7a6:	4451      	addne	r1, sl
  40c7a8:	f8ce b000 	streq.w	fp, [lr]
  40c7ac:	6019      	strne	r1, [r3, #0]
  40c7ae:	f01b 0107 	ands.w	r1, fp, #7
  40c7b2:	f000 8117 	beq.w	40c9e4 <_malloc_r+0x4a4>
  40c7b6:	f1c1 0008 	rsb	r0, r1, #8
  40c7ba:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40c7be:	4483      	add	fp, r0
  40c7c0:	3108      	adds	r1, #8
  40c7c2:	445a      	add	r2, fp
  40c7c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40c7c8:	ebc2 0901 	rsb	r9, r2, r1
  40c7cc:	4649      	mov	r1, r9
  40c7ce:	4630      	mov	r0, r6
  40c7d0:	9301      	str	r3, [sp, #4]
  40c7d2:	f000 ff23 	bl	40d61c <_sbrk_r>
  40c7d6:	1c43      	adds	r3, r0, #1
  40c7d8:	9b01      	ldr	r3, [sp, #4]
  40c7da:	f000 813f 	beq.w	40ca5c <_malloc_r+0x51c>
  40c7de:	ebcb 0200 	rsb	r2, fp, r0
  40c7e2:	444a      	add	r2, r9
  40c7e4:	f042 0201 	orr.w	r2, r2, #1
  40c7e8:	6819      	ldr	r1, [r3, #0]
  40c7ea:	f8c7 b008 	str.w	fp, [r7, #8]
  40c7ee:	4449      	add	r1, r9
  40c7f0:	42bc      	cmp	r4, r7
  40c7f2:	f8cb 2004 	str.w	r2, [fp, #4]
  40c7f6:	6019      	str	r1, [r3, #0]
  40c7f8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40c8a0 <_malloc_r+0x360>
  40c7fc:	d016      	beq.n	40c82c <_malloc_r+0x2ec>
  40c7fe:	f1b8 0f0f 	cmp.w	r8, #15
  40c802:	f240 80fd 	bls.w	40ca00 <_malloc_r+0x4c0>
  40c806:	6862      	ldr	r2, [r4, #4]
  40c808:	f1a8 030c 	sub.w	r3, r8, #12
  40c80c:	f023 0307 	bic.w	r3, r3, #7
  40c810:	18e0      	adds	r0, r4, r3
  40c812:	f002 0201 	and.w	r2, r2, #1
  40c816:	f04f 0e05 	mov.w	lr, #5
  40c81a:	431a      	orrs	r2, r3
  40c81c:	2b0f      	cmp	r3, #15
  40c81e:	6062      	str	r2, [r4, #4]
  40c820:	f8c0 e004 	str.w	lr, [r0, #4]
  40c824:	f8c0 e008 	str.w	lr, [r0, #8]
  40c828:	f200 811c 	bhi.w	40ca64 <_malloc_r+0x524>
  40c82c:	4b1d      	ldr	r3, [pc, #116]	; (40c8a4 <_malloc_r+0x364>)
  40c82e:	68bc      	ldr	r4, [r7, #8]
  40c830:	681a      	ldr	r2, [r3, #0]
  40c832:	4291      	cmp	r1, r2
  40c834:	bf88      	it	hi
  40c836:	6019      	strhi	r1, [r3, #0]
  40c838:	4b1b      	ldr	r3, [pc, #108]	; (40c8a8 <_malloc_r+0x368>)
  40c83a:	681a      	ldr	r2, [r3, #0]
  40c83c:	4291      	cmp	r1, r2
  40c83e:	6862      	ldr	r2, [r4, #4]
  40c840:	bf88      	it	hi
  40c842:	6019      	strhi	r1, [r3, #0]
  40c844:	f022 0203 	bic.w	r2, r2, #3
  40c848:	4295      	cmp	r5, r2
  40c84a:	eba2 0305 	sub.w	r3, r2, r5
  40c84e:	d801      	bhi.n	40c854 <_malloc_r+0x314>
  40c850:	2b0f      	cmp	r3, #15
  40c852:	dc04      	bgt.n	40c85e <_malloc_r+0x31e>
  40c854:	4630      	mov	r0, r6
  40c856:	f000 f9e1 	bl	40cc1c <__malloc_unlock>
  40c85a:	2400      	movs	r4, #0
  40c85c:	e738      	b.n	40c6d0 <_malloc_r+0x190>
  40c85e:	1962      	adds	r2, r4, r5
  40c860:	f043 0301 	orr.w	r3, r3, #1
  40c864:	f045 0501 	orr.w	r5, r5, #1
  40c868:	6065      	str	r5, [r4, #4]
  40c86a:	4630      	mov	r0, r6
  40c86c:	60ba      	str	r2, [r7, #8]
  40c86e:	6053      	str	r3, [r2, #4]
  40c870:	f000 f9d4 	bl	40cc1c <__malloc_unlock>
  40c874:	3408      	adds	r4, #8
  40c876:	4620      	mov	r0, r4
  40c878:	b003      	add	sp, #12
  40c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c87e:	2b14      	cmp	r3, #20
  40c880:	d971      	bls.n	40c966 <_malloc_r+0x426>
  40c882:	2b54      	cmp	r3, #84	; 0x54
  40c884:	f200 80a4 	bhi.w	40c9d0 <_malloc_r+0x490>
  40c888:	0b28      	lsrs	r0, r5, #12
  40c88a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40c88e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c892:	306e      	adds	r0, #110	; 0x6e
  40c894:	e676      	b.n	40c584 <_malloc_r+0x44>
  40c896:	bf00      	nop
  40c898:	204004e0 	.word	0x204004e0
  40c89c:	204037fc 	.word	0x204037fc
  40c8a0:	20403800 	.word	0x20403800
  40c8a4:	204037f8 	.word	0x204037f8
  40c8a8:	204037f4 	.word	0x204037f4
  40c8ac:	204008ec 	.word	0x204008ec
  40c8b0:	0a5a      	lsrs	r2, r3, #9
  40c8b2:	2a04      	cmp	r2, #4
  40c8b4:	d95e      	bls.n	40c974 <_malloc_r+0x434>
  40c8b6:	2a14      	cmp	r2, #20
  40c8b8:	f200 80b3 	bhi.w	40ca22 <_malloc_r+0x4e2>
  40c8bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40c8c0:	0049      	lsls	r1, r1, #1
  40c8c2:	325b      	adds	r2, #91	; 0x5b
  40c8c4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40c8c8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  40c8cc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 40caac <_malloc_r+0x56c>
  40c8d0:	f1ac 0c08 	sub.w	ip, ip, #8
  40c8d4:	458c      	cmp	ip, r1
  40c8d6:	f000 8088 	beq.w	40c9ea <_malloc_r+0x4aa>
  40c8da:	684a      	ldr	r2, [r1, #4]
  40c8dc:	f022 0203 	bic.w	r2, r2, #3
  40c8e0:	4293      	cmp	r3, r2
  40c8e2:	d202      	bcs.n	40c8ea <_malloc_r+0x3aa>
  40c8e4:	6889      	ldr	r1, [r1, #8]
  40c8e6:	458c      	cmp	ip, r1
  40c8e8:	d1f7      	bne.n	40c8da <_malloc_r+0x39a>
  40c8ea:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40c8ee:	687a      	ldr	r2, [r7, #4]
  40c8f0:	f8c4 c00c 	str.w	ip, [r4, #12]
  40c8f4:	60a1      	str	r1, [r4, #8]
  40c8f6:	f8cc 4008 	str.w	r4, [ip, #8]
  40c8fa:	60cc      	str	r4, [r1, #12]
  40c8fc:	e688      	b.n	40c610 <_malloc_r+0xd0>
  40c8fe:	1963      	adds	r3, r4, r5
  40c900:	f042 0701 	orr.w	r7, r2, #1
  40c904:	f045 0501 	orr.w	r5, r5, #1
  40c908:	6065      	str	r5, [r4, #4]
  40c90a:	4630      	mov	r0, r6
  40c90c:	614b      	str	r3, [r1, #20]
  40c90e:	610b      	str	r3, [r1, #16]
  40c910:	f8c3 e00c 	str.w	lr, [r3, #12]
  40c914:	f8c3 e008 	str.w	lr, [r3, #8]
  40c918:	605f      	str	r7, [r3, #4]
  40c91a:	509a      	str	r2, [r3, r2]
  40c91c:	3408      	adds	r4, #8
  40c91e:	f000 f97d 	bl	40cc1c <__malloc_unlock>
  40c922:	e6d5      	b.n	40c6d0 <_malloc_r+0x190>
  40c924:	684a      	ldr	r2, [r1, #4]
  40c926:	e673      	b.n	40c610 <_malloc_r+0xd0>
  40c928:	f108 0801 	add.w	r8, r8, #1
  40c92c:	f018 0f03 	tst.w	r8, #3
  40c930:	f10c 0c08 	add.w	ip, ip, #8
  40c934:	f47f ae7f 	bne.w	40c636 <_malloc_r+0xf6>
  40c938:	e030      	b.n	40c99c <_malloc_r+0x45c>
  40c93a:	68dc      	ldr	r4, [r3, #12]
  40c93c:	42a3      	cmp	r3, r4
  40c93e:	bf08      	it	eq
  40c940:	3002      	addeq	r0, #2
  40c942:	f43f ae35 	beq.w	40c5b0 <_malloc_r+0x70>
  40c946:	e6b3      	b.n	40c6b0 <_malloc_r+0x170>
  40c948:	440b      	add	r3, r1
  40c94a:	460c      	mov	r4, r1
  40c94c:	685a      	ldr	r2, [r3, #4]
  40c94e:	68c9      	ldr	r1, [r1, #12]
  40c950:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40c954:	f042 0201 	orr.w	r2, r2, #1
  40c958:	605a      	str	r2, [r3, #4]
  40c95a:	4630      	mov	r0, r6
  40c95c:	60e9      	str	r1, [r5, #12]
  40c95e:	608d      	str	r5, [r1, #8]
  40c960:	f000 f95c 	bl	40cc1c <__malloc_unlock>
  40c964:	e6b4      	b.n	40c6d0 <_malloc_r+0x190>
  40c966:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40c96a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40c96e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c972:	e607      	b.n	40c584 <_malloc_r+0x44>
  40c974:	099a      	lsrs	r2, r3, #6
  40c976:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40c97a:	0049      	lsls	r1, r1, #1
  40c97c:	3238      	adds	r2, #56	; 0x38
  40c97e:	e7a1      	b.n	40c8c4 <_malloc_r+0x384>
  40c980:	42bc      	cmp	r4, r7
  40c982:	4b4a      	ldr	r3, [pc, #296]	; (40caac <_malloc_r+0x56c>)
  40c984:	f43f af00 	beq.w	40c788 <_malloc_r+0x248>
  40c988:	689c      	ldr	r4, [r3, #8]
  40c98a:	6862      	ldr	r2, [r4, #4]
  40c98c:	f022 0203 	bic.w	r2, r2, #3
  40c990:	e75a      	b.n	40c848 <_malloc_r+0x308>
  40c992:	f859 3908 	ldr.w	r3, [r9], #-8
  40c996:	4599      	cmp	r9, r3
  40c998:	f040 8082 	bne.w	40caa0 <_malloc_r+0x560>
  40c99c:	f010 0f03 	tst.w	r0, #3
  40c9a0:	f100 30ff 	add.w	r0, r0, #4294967295
  40c9a4:	d1f5      	bne.n	40c992 <_malloc_r+0x452>
  40c9a6:	687b      	ldr	r3, [r7, #4]
  40c9a8:	ea23 0304 	bic.w	r3, r3, r4
  40c9ac:	607b      	str	r3, [r7, #4]
  40c9ae:	0064      	lsls	r4, r4, #1
  40c9b0:	429c      	cmp	r4, r3
  40c9b2:	f63f aebd 	bhi.w	40c730 <_malloc_r+0x1f0>
  40c9b6:	2c00      	cmp	r4, #0
  40c9b8:	f43f aeba 	beq.w	40c730 <_malloc_r+0x1f0>
  40c9bc:	421c      	tst	r4, r3
  40c9be:	4640      	mov	r0, r8
  40c9c0:	f47f ae35 	bne.w	40c62e <_malloc_r+0xee>
  40c9c4:	0064      	lsls	r4, r4, #1
  40c9c6:	421c      	tst	r4, r3
  40c9c8:	f100 0004 	add.w	r0, r0, #4
  40c9cc:	d0fa      	beq.n	40c9c4 <_malloc_r+0x484>
  40c9ce:	e62e      	b.n	40c62e <_malloc_r+0xee>
  40c9d0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40c9d4:	d818      	bhi.n	40ca08 <_malloc_r+0x4c8>
  40c9d6:	0be8      	lsrs	r0, r5, #15
  40c9d8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  40c9dc:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40c9e0:	3077      	adds	r0, #119	; 0x77
  40c9e2:	e5cf      	b.n	40c584 <_malloc_r+0x44>
  40c9e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40c9e8:	e6eb      	b.n	40c7c2 <_malloc_r+0x282>
  40c9ea:	2101      	movs	r1, #1
  40c9ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40c9f0:	1092      	asrs	r2, r2, #2
  40c9f2:	fa01 f202 	lsl.w	r2, r1, r2
  40c9f6:	431a      	orrs	r2, r3
  40c9f8:	f8c8 2004 	str.w	r2, [r8, #4]
  40c9fc:	4661      	mov	r1, ip
  40c9fe:	e777      	b.n	40c8f0 <_malloc_r+0x3b0>
  40ca00:	2301      	movs	r3, #1
  40ca02:	f8cb 3004 	str.w	r3, [fp, #4]
  40ca06:	e725      	b.n	40c854 <_malloc_r+0x314>
  40ca08:	f240 5254 	movw	r2, #1364	; 0x554
  40ca0c:	4293      	cmp	r3, r2
  40ca0e:	d820      	bhi.n	40ca52 <_malloc_r+0x512>
  40ca10:	0ca8      	lsrs	r0, r5, #18
  40ca12:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40ca16:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40ca1a:	307c      	adds	r0, #124	; 0x7c
  40ca1c:	e5b2      	b.n	40c584 <_malloc_r+0x44>
  40ca1e:	3210      	adds	r2, #16
  40ca20:	e6a4      	b.n	40c76c <_malloc_r+0x22c>
  40ca22:	2a54      	cmp	r2, #84	; 0x54
  40ca24:	d826      	bhi.n	40ca74 <_malloc_r+0x534>
  40ca26:	0b1a      	lsrs	r2, r3, #12
  40ca28:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40ca2c:	0049      	lsls	r1, r1, #1
  40ca2e:	326e      	adds	r2, #110	; 0x6e
  40ca30:	e748      	b.n	40c8c4 <_malloc_r+0x384>
  40ca32:	68bc      	ldr	r4, [r7, #8]
  40ca34:	6862      	ldr	r2, [r4, #4]
  40ca36:	f022 0203 	bic.w	r2, r2, #3
  40ca3a:	e705      	b.n	40c848 <_malloc_r+0x308>
  40ca3c:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40ca40:	2800      	cmp	r0, #0
  40ca42:	f47f aea8 	bne.w	40c796 <_malloc_r+0x256>
  40ca46:	4442      	add	r2, r8
  40ca48:	68bb      	ldr	r3, [r7, #8]
  40ca4a:	f042 0201 	orr.w	r2, r2, #1
  40ca4e:	605a      	str	r2, [r3, #4]
  40ca50:	e6ec      	b.n	40c82c <_malloc_r+0x2ec>
  40ca52:	23fe      	movs	r3, #254	; 0xfe
  40ca54:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40ca58:	207e      	movs	r0, #126	; 0x7e
  40ca5a:	e593      	b.n	40c584 <_malloc_r+0x44>
  40ca5c:	2201      	movs	r2, #1
  40ca5e:	f04f 0900 	mov.w	r9, #0
  40ca62:	e6c1      	b.n	40c7e8 <_malloc_r+0x2a8>
  40ca64:	f104 0108 	add.w	r1, r4, #8
  40ca68:	4630      	mov	r0, r6
  40ca6a:	f7ff fa4b 	bl	40bf04 <_free_r>
  40ca6e:	f8d9 1000 	ldr.w	r1, [r9]
  40ca72:	e6db      	b.n	40c82c <_malloc_r+0x2ec>
  40ca74:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40ca78:	d805      	bhi.n	40ca86 <_malloc_r+0x546>
  40ca7a:	0bda      	lsrs	r2, r3, #15
  40ca7c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40ca80:	0049      	lsls	r1, r1, #1
  40ca82:	3277      	adds	r2, #119	; 0x77
  40ca84:	e71e      	b.n	40c8c4 <_malloc_r+0x384>
  40ca86:	f240 5154 	movw	r1, #1364	; 0x554
  40ca8a:	428a      	cmp	r2, r1
  40ca8c:	d805      	bhi.n	40ca9a <_malloc_r+0x55a>
  40ca8e:	0c9a      	lsrs	r2, r3, #18
  40ca90:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40ca94:	0049      	lsls	r1, r1, #1
  40ca96:	327c      	adds	r2, #124	; 0x7c
  40ca98:	e714      	b.n	40c8c4 <_malloc_r+0x384>
  40ca9a:	21fe      	movs	r1, #254	; 0xfe
  40ca9c:	227e      	movs	r2, #126	; 0x7e
  40ca9e:	e711      	b.n	40c8c4 <_malloc_r+0x384>
  40caa0:	687b      	ldr	r3, [r7, #4]
  40caa2:	e784      	b.n	40c9ae <_malloc_r+0x46e>
  40caa4:	08e8      	lsrs	r0, r5, #3
  40caa6:	1c43      	adds	r3, r0, #1
  40caa8:	005b      	lsls	r3, r3, #1
  40caaa:	e5f8      	b.n	40c69e <_malloc_r+0x15e>
  40caac:	204004e0 	.word	0x204004e0

0040cab0 <memchr>:
  40cab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40cab4:	2a10      	cmp	r2, #16
  40cab6:	db2b      	blt.n	40cb10 <memchr+0x60>
  40cab8:	f010 0f07 	tst.w	r0, #7
  40cabc:	d008      	beq.n	40cad0 <memchr+0x20>
  40cabe:	f810 3b01 	ldrb.w	r3, [r0], #1
  40cac2:	3a01      	subs	r2, #1
  40cac4:	428b      	cmp	r3, r1
  40cac6:	d02d      	beq.n	40cb24 <memchr+0x74>
  40cac8:	f010 0f07 	tst.w	r0, #7
  40cacc:	b342      	cbz	r2, 40cb20 <memchr+0x70>
  40cace:	d1f6      	bne.n	40cabe <memchr+0xe>
  40cad0:	b4f0      	push	{r4, r5, r6, r7}
  40cad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40cad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40cada:	f022 0407 	bic.w	r4, r2, #7
  40cade:	f07f 0700 	mvns.w	r7, #0
  40cae2:	2300      	movs	r3, #0
  40cae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40cae8:	3c08      	subs	r4, #8
  40caea:	ea85 0501 	eor.w	r5, r5, r1
  40caee:	ea86 0601 	eor.w	r6, r6, r1
  40caf2:	fa85 f547 	uadd8	r5, r5, r7
  40caf6:	faa3 f587 	sel	r5, r3, r7
  40cafa:	fa86 f647 	uadd8	r6, r6, r7
  40cafe:	faa5 f687 	sel	r6, r5, r7
  40cb02:	b98e      	cbnz	r6, 40cb28 <memchr+0x78>
  40cb04:	d1ee      	bne.n	40cae4 <memchr+0x34>
  40cb06:	bcf0      	pop	{r4, r5, r6, r7}
  40cb08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40cb0c:	f002 0207 	and.w	r2, r2, #7
  40cb10:	b132      	cbz	r2, 40cb20 <memchr+0x70>
  40cb12:	f810 3b01 	ldrb.w	r3, [r0], #1
  40cb16:	3a01      	subs	r2, #1
  40cb18:	ea83 0301 	eor.w	r3, r3, r1
  40cb1c:	b113      	cbz	r3, 40cb24 <memchr+0x74>
  40cb1e:	d1f8      	bne.n	40cb12 <memchr+0x62>
  40cb20:	2000      	movs	r0, #0
  40cb22:	4770      	bx	lr
  40cb24:	3801      	subs	r0, #1
  40cb26:	4770      	bx	lr
  40cb28:	2d00      	cmp	r5, #0
  40cb2a:	bf06      	itte	eq
  40cb2c:	4635      	moveq	r5, r6
  40cb2e:	3803      	subeq	r0, #3
  40cb30:	3807      	subne	r0, #7
  40cb32:	f015 0f01 	tst.w	r5, #1
  40cb36:	d107      	bne.n	40cb48 <memchr+0x98>
  40cb38:	3001      	adds	r0, #1
  40cb3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40cb3e:	bf02      	ittt	eq
  40cb40:	3001      	addeq	r0, #1
  40cb42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40cb46:	3001      	addeq	r0, #1
  40cb48:	bcf0      	pop	{r4, r5, r6, r7}
  40cb4a:	3801      	subs	r0, #1
  40cb4c:	4770      	bx	lr
  40cb4e:	bf00      	nop

0040cb50 <memmove>:
  40cb50:	4288      	cmp	r0, r1
  40cb52:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cb54:	d90d      	bls.n	40cb72 <memmove+0x22>
  40cb56:	188b      	adds	r3, r1, r2
  40cb58:	4298      	cmp	r0, r3
  40cb5a:	d20a      	bcs.n	40cb72 <memmove+0x22>
  40cb5c:	1881      	adds	r1, r0, r2
  40cb5e:	2a00      	cmp	r2, #0
  40cb60:	d051      	beq.n	40cc06 <memmove+0xb6>
  40cb62:	1a9a      	subs	r2, r3, r2
  40cb64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40cb68:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40cb6c:	4293      	cmp	r3, r2
  40cb6e:	d1f9      	bne.n	40cb64 <memmove+0x14>
  40cb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40cb72:	2a0f      	cmp	r2, #15
  40cb74:	d948      	bls.n	40cc08 <memmove+0xb8>
  40cb76:	ea41 0300 	orr.w	r3, r1, r0
  40cb7a:	079b      	lsls	r3, r3, #30
  40cb7c:	d146      	bne.n	40cc0c <memmove+0xbc>
  40cb7e:	f100 0410 	add.w	r4, r0, #16
  40cb82:	f101 0310 	add.w	r3, r1, #16
  40cb86:	4615      	mov	r5, r2
  40cb88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40cb8c:	f844 6c10 	str.w	r6, [r4, #-16]
  40cb90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40cb94:	f844 6c0c 	str.w	r6, [r4, #-12]
  40cb98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40cb9c:	f844 6c08 	str.w	r6, [r4, #-8]
  40cba0:	3d10      	subs	r5, #16
  40cba2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40cba6:	f844 6c04 	str.w	r6, [r4, #-4]
  40cbaa:	2d0f      	cmp	r5, #15
  40cbac:	f103 0310 	add.w	r3, r3, #16
  40cbb0:	f104 0410 	add.w	r4, r4, #16
  40cbb4:	d8e8      	bhi.n	40cb88 <memmove+0x38>
  40cbb6:	f1a2 0310 	sub.w	r3, r2, #16
  40cbba:	f023 030f 	bic.w	r3, r3, #15
  40cbbe:	f002 0e0f 	and.w	lr, r2, #15
  40cbc2:	3310      	adds	r3, #16
  40cbc4:	f1be 0f03 	cmp.w	lr, #3
  40cbc8:	4419      	add	r1, r3
  40cbca:	4403      	add	r3, r0
  40cbcc:	d921      	bls.n	40cc12 <memmove+0xc2>
  40cbce:	1f1e      	subs	r6, r3, #4
  40cbd0:	460d      	mov	r5, r1
  40cbd2:	4674      	mov	r4, lr
  40cbd4:	3c04      	subs	r4, #4
  40cbd6:	f855 7b04 	ldr.w	r7, [r5], #4
  40cbda:	f846 7f04 	str.w	r7, [r6, #4]!
  40cbde:	2c03      	cmp	r4, #3
  40cbe0:	d8f8      	bhi.n	40cbd4 <memmove+0x84>
  40cbe2:	f1ae 0404 	sub.w	r4, lr, #4
  40cbe6:	f024 0403 	bic.w	r4, r4, #3
  40cbea:	3404      	adds	r4, #4
  40cbec:	4423      	add	r3, r4
  40cbee:	4421      	add	r1, r4
  40cbf0:	f002 0203 	and.w	r2, r2, #3
  40cbf4:	b162      	cbz	r2, 40cc10 <memmove+0xc0>
  40cbf6:	3b01      	subs	r3, #1
  40cbf8:	440a      	add	r2, r1
  40cbfa:	f811 4b01 	ldrb.w	r4, [r1], #1
  40cbfe:	f803 4f01 	strb.w	r4, [r3, #1]!
  40cc02:	428a      	cmp	r2, r1
  40cc04:	d1f9      	bne.n	40cbfa <memmove+0xaa>
  40cc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40cc08:	4603      	mov	r3, r0
  40cc0a:	e7f3      	b.n	40cbf4 <memmove+0xa4>
  40cc0c:	4603      	mov	r3, r0
  40cc0e:	e7f2      	b.n	40cbf6 <memmove+0xa6>
  40cc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40cc12:	4672      	mov	r2, lr
  40cc14:	e7ee      	b.n	40cbf4 <memmove+0xa4>
  40cc16:	bf00      	nop

0040cc18 <__malloc_lock>:
  40cc18:	4770      	bx	lr
  40cc1a:	bf00      	nop

0040cc1c <__malloc_unlock>:
  40cc1c:	4770      	bx	lr
  40cc1e:	bf00      	nop

0040cc20 <_Balloc>:
  40cc20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40cc22:	b570      	push	{r4, r5, r6, lr}
  40cc24:	4605      	mov	r5, r0
  40cc26:	460c      	mov	r4, r1
  40cc28:	b14b      	cbz	r3, 40cc3e <_Balloc+0x1e>
  40cc2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40cc2e:	b180      	cbz	r0, 40cc52 <_Balloc+0x32>
  40cc30:	6802      	ldr	r2, [r0, #0]
  40cc32:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40cc36:	2300      	movs	r3, #0
  40cc38:	6103      	str	r3, [r0, #16]
  40cc3a:	60c3      	str	r3, [r0, #12]
  40cc3c:	bd70      	pop	{r4, r5, r6, pc}
  40cc3e:	2221      	movs	r2, #33	; 0x21
  40cc40:	2104      	movs	r1, #4
  40cc42:	f000 feb7 	bl	40d9b4 <_calloc_r>
  40cc46:	64e8      	str	r0, [r5, #76]	; 0x4c
  40cc48:	4603      	mov	r3, r0
  40cc4a:	2800      	cmp	r0, #0
  40cc4c:	d1ed      	bne.n	40cc2a <_Balloc+0xa>
  40cc4e:	2000      	movs	r0, #0
  40cc50:	bd70      	pop	{r4, r5, r6, pc}
  40cc52:	2101      	movs	r1, #1
  40cc54:	fa01 f604 	lsl.w	r6, r1, r4
  40cc58:	1d72      	adds	r2, r6, #5
  40cc5a:	4628      	mov	r0, r5
  40cc5c:	0092      	lsls	r2, r2, #2
  40cc5e:	f000 fea9 	bl	40d9b4 <_calloc_r>
  40cc62:	2800      	cmp	r0, #0
  40cc64:	d0f3      	beq.n	40cc4e <_Balloc+0x2e>
  40cc66:	6044      	str	r4, [r0, #4]
  40cc68:	6086      	str	r6, [r0, #8]
  40cc6a:	e7e4      	b.n	40cc36 <_Balloc+0x16>

0040cc6c <_Bfree>:
  40cc6c:	b131      	cbz	r1, 40cc7c <_Bfree+0x10>
  40cc6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40cc70:	684a      	ldr	r2, [r1, #4]
  40cc72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40cc76:	6008      	str	r0, [r1, #0]
  40cc78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40cc7c:	4770      	bx	lr
  40cc7e:	bf00      	nop

0040cc80 <__multadd>:
  40cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cc82:	690c      	ldr	r4, [r1, #16]
  40cc84:	b083      	sub	sp, #12
  40cc86:	460d      	mov	r5, r1
  40cc88:	4606      	mov	r6, r0
  40cc8a:	f101 0e14 	add.w	lr, r1, #20
  40cc8e:	2700      	movs	r7, #0
  40cc90:	f8de 0000 	ldr.w	r0, [lr]
  40cc94:	b281      	uxth	r1, r0
  40cc96:	fb02 3101 	mla	r1, r2, r1, r3
  40cc9a:	0c0b      	lsrs	r3, r1, #16
  40cc9c:	0c00      	lsrs	r0, r0, #16
  40cc9e:	fb02 3300 	mla	r3, r2, r0, r3
  40cca2:	b289      	uxth	r1, r1
  40cca4:	3701      	adds	r7, #1
  40cca6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  40ccaa:	42bc      	cmp	r4, r7
  40ccac:	f84e 1b04 	str.w	r1, [lr], #4
  40ccb0:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40ccb4:	dcec      	bgt.n	40cc90 <__multadd+0x10>
  40ccb6:	b13b      	cbz	r3, 40ccc8 <__multadd+0x48>
  40ccb8:	68aa      	ldr	r2, [r5, #8]
  40ccba:	4294      	cmp	r4, r2
  40ccbc:	da07      	bge.n	40ccce <__multadd+0x4e>
  40ccbe:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40ccc2:	3401      	adds	r4, #1
  40ccc4:	6153      	str	r3, [r2, #20]
  40ccc6:	612c      	str	r4, [r5, #16]
  40ccc8:	4628      	mov	r0, r5
  40ccca:	b003      	add	sp, #12
  40cccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ccce:	6869      	ldr	r1, [r5, #4]
  40ccd0:	9301      	str	r3, [sp, #4]
  40ccd2:	3101      	adds	r1, #1
  40ccd4:	4630      	mov	r0, r6
  40ccd6:	f7ff ffa3 	bl	40cc20 <_Balloc>
  40ccda:	692a      	ldr	r2, [r5, #16]
  40ccdc:	3202      	adds	r2, #2
  40ccde:	f105 010c 	add.w	r1, r5, #12
  40cce2:	4607      	mov	r7, r0
  40cce4:	0092      	lsls	r2, r2, #2
  40cce6:	300c      	adds	r0, #12
  40cce8:	f7fb f91e 	bl	407f28 <memcpy>
  40ccec:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40ccee:	6869      	ldr	r1, [r5, #4]
  40ccf0:	9b01      	ldr	r3, [sp, #4]
  40ccf2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40ccf6:	6028      	str	r0, [r5, #0]
  40ccf8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40ccfc:	463d      	mov	r5, r7
  40ccfe:	e7de      	b.n	40ccbe <__multadd+0x3e>

0040cd00 <__hi0bits>:
  40cd00:	0c03      	lsrs	r3, r0, #16
  40cd02:	041b      	lsls	r3, r3, #16
  40cd04:	b9b3      	cbnz	r3, 40cd34 <__hi0bits+0x34>
  40cd06:	0400      	lsls	r0, r0, #16
  40cd08:	2310      	movs	r3, #16
  40cd0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40cd0e:	bf04      	itt	eq
  40cd10:	0200      	lsleq	r0, r0, #8
  40cd12:	3308      	addeq	r3, #8
  40cd14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40cd18:	bf04      	itt	eq
  40cd1a:	0100      	lsleq	r0, r0, #4
  40cd1c:	3304      	addeq	r3, #4
  40cd1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40cd22:	bf04      	itt	eq
  40cd24:	0080      	lsleq	r0, r0, #2
  40cd26:	3302      	addeq	r3, #2
  40cd28:	2800      	cmp	r0, #0
  40cd2a:	db07      	blt.n	40cd3c <__hi0bits+0x3c>
  40cd2c:	0042      	lsls	r2, r0, #1
  40cd2e:	d403      	bmi.n	40cd38 <__hi0bits+0x38>
  40cd30:	2020      	movs	r0, #32
  40cd32:	4770      	bx	lr
  40cd34:	2300      	movs	r3, #0
  40cd36:	e7e8      	b.n	40cd0a <__hi0bits+0xa>
  40cd38:	1c58      	adds	r0, r3, #1
  40cd3a:	4770      	bx	lr
  40cd3c:	4618      	mov	r0, r3
  40cd3e:	4770      	bx	lr

0040cd40 <__lo0bits>:
  40cd40:	6803      	ldr	r3, [r0, #0]
  40cd42:	f013 0207 	ands.w	r2, r3, #7
  40cd46:	d007      	beq.n	40cd58 <__lo0bits+0x18>
  40cd48:	07d9      	lsls	r1, r3, #31
  40cd4a:	d420      	bmi.n	40cd8e <__lo0bits+0x4e>
  40cd4c:	079a      	lsls	r2, r3, #30
  40cd4e:	d420      	bmi.n	40cd92 <__lo0bits+0x52>
  40cd50:	089b      	lsrs	r3, r3, #2
  40cd52:	6003      	str	r3, [r0, #0]
  40cd54:	2002      	movs	r0, #2
  40cd56:	4770      	bx	lr
  40cd58:	b299      	uxth	r1, r3
  40cd5a:	b909      	cbnz	r1, 40cd60 <__lo0bits+0x20>
  40cd5c:	0c1b      	lsrs	r3, r3, #16
  40cd5e:	2210      	movs	r2, #16
  40cd60:	f013 0fff 	tst.w	r3, #255	; 0xff
  40cd64:	bf04      	itt	eq
  40cd66:	0a1b      	lsreq	r3, r3, #8
  40cd68:	3208      	addeq	r2, #8
  40cd6a:	0719      	lsls	r1, r3, #28
  40cd6c:	bf04      	itt	eq
  40cd6e:	091b      	lsreq	r3, r3, #4
  40cd70:	3204      	addeq	r2, #4
  40cd72:	0799      	lsls	r1, r3, #30
  40cd74:	bf04      	itt	eq
  40cd76:	089b      	lsreq	r3, r3, #2
  40cd78:	3202      	addeq	r2, #2
  40cd7a:	07d9      	lsls	r1, r3, #31
  40cd7c:	d404      	bmi.n	40cd88 <__lo0bits+0x48>
  40cd7e:	085b      	lsrs	r3, r3, #1
  40cd80:	d101      	bne.n	40cd86 <__lo0bits+0x46>
  40cd82:	2020      	movs	r0, #32
  40cd84:	4770      	bx	lr
  40cd86:	3201      	adds	r2, #1
  40cd88:	6003      	str	r3, [r0, #0]
  40cd8a:	4610      	mov	r0, r2
  40cd8c:	4770      	bx	lr
  40cd8e:	2000      	movs	r0, #0
  40cd90:	4770      	bx	lr
  40cd92:	085b      	lsrs	r3, r3, #1
  40cd94:	6003      	str	r3, [r0, #0]
  40cd96:	2001      	movs	r0, #1
  40cd98:	4770      	bx	lr
  40cd9a:	bf00      	nop

0040cd9c <__i2b>:
  40cd9c:	b510      	push	{r4, lr}
  40cd9e:	460c      	mov	r4, r1
  40cda0:	2101      	movs	r1, #1
  40cda2:	f7ff ff3d 	bl	40cc20 <_Balloc>
  40cda6:	2201      	movs	r2, #1
  40cda8:	6144      	str	r4, [r0, #20]
  40cdaa:	6102      	str	r2, [r0, #16]
  40cdac:	bd10      	pop	{r4, pc}
  40cdae:	bf00      	nop

0040cdb0 <__multiply>:
  40cdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cdb4:	690d      	ldr	r5, [r1, #16]
  40cdb6:	6917      	ldr	r7, [r2, #16]
  40cdb8:	42bd      	cmp	r5, r7
  40cdba:	b083      	sub	sp, #12
  40cdbc:	460c      	mov	r4, r1
  40cdbe:	4616      	mov	r6, r2
  40cdc0:	da04      	bge.n	40cdcc <__multiply+0x1c>
  40cdc2:	462a      	mov	r2, r5
  40cdc4:	4634      	mov	r4, r6
  40cdc6:	463d      	mov	r5, r7
  40cdc8:	460e      	mov	r6, r1
  40cdca:	4617      	mov	r7, r2
  40cdcc:	68a3      	ldr	r3, [r4, #8]
  40cdce:	6861      	ldr	r1, [r4, #4]
  40cdd0:	eb05 0807 	add.w	r8, r5, r7
  40cdd4:	4598      	cmp	r8, r3
  40cdd6:	bfc8      	it	gt
  40cdd8:	3101      	addgt	r1, #1
  40cdda:	f7ff ff21 	bl	40cc20 <_Balloc>
  40cdde:	f100 0c14 	add.w	ip, r0, #20
  40cde2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40cde6:	45cc      	cmp	ip, r9
  40cde8:	9000      	str	r0, [sp, #0]
  40cdea:	d205      	bcs.n	40cdf8 <__multiply+0x48>
  40cdec:	4663      	mov	r3, ip
  40cdee:	2100      	movs	r1, #0
  40cdf0:	f843 1b04 	str.w	r1, [r3], #4
  40cdf4:	4599      	cmp	r9, r3
  40cdf6:	d8fb      	bhi.n	40cdf0 <__multiply+0x40>
  40cdf8:	f106 0214 	add.w	r2, r6, #20
  40cdfc:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40ce00:	f104 0314 	add.w	r3, r4, #20
  40ce04:	4552      	cmp	r2, sl
  40ce06:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  40ce0a:	d254      	bcs.n	40ceb6 <__multiply+0x106>
  40ce0c:	f8cd 9004 	str.w	r9, [sp, #4]
  40ce10:	4699      	mov	r9, r3
  40ce12:	f852 3b04 	ldr.w	r3, [r2], #4
  40ce16:	fa1f fb83 	uxth.w	fp, r3
  40ce1a:	f1bb 0f00 	cmp.w	fp, #0
  40ce1e:	d020      	beq.n	40ce62 <__multiply+0xb2>
  40ce20:	2000      	movs	r0, #0
  40ce22:	464f      	mov	r7, r9
  40ce24:	4666      	mov	r6, ip
  40ce26:	4605      	mov	r5, r0
  40ce28:	e000      	b.n	40ce2c <__multiply+0x7c>
  40ce2a:	461e      	mov	r6, r3
  40ce2c:	f857 4b04 	ldr.w	r4, [r7], #4
  40ce30:	6830      	ldr	r0, [r6, #0]
  40ce32:	b2a1      	uxth	r1, r4
  40ce34:	b283      	uxth	r3, r0
  40ce36:	fb0b 3101 	mla	r1, fp, r1, r3
  40ce3a:	0c24      	lsrs	r4, r4, #16
  40ce3c:	0c00      	lsrs	r0, r0, #16
  40ce3e:	194b      	adds	r3, r1, r5
  40ce40:	fb0b 0004 	mla	r0, fp, r4, r0
  40ce44:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40ce48:	b299      	uxth	r1, r3
  40ce4a:	4633      	mov	r3, r6
  40ce4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40ce50:	45be      	cmp	lr, r7
  40ce52:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40ce56:	f843 1b04 	str.w	r1, [r3], #4
  40ce5a:	d8e6      	bhi.n	40ce2a <__multiply+0x7a>
  40ce5c:	6075      	str	r5, [r6, #4]
  40ce5e:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40ce62:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40ce66:	d020      	beq.n	40ceaa <__multiply+0xfa>
  40ce68:	f8dc 3000 	ldr.w	r3, [ip]
  40ce6c:	4667      	mov	r7, ip
  40ce6e:	4618      	mov	r0, r3
  40ce70:	464d      	mov	r5, r9
  40ce72:	2100      	movs	r1, #0
  40ce74:	e000      	b.n	40ce78 <__multiply+0xc8>
  40ce76:	4637      	mov	r7, r6
  40ce78:	882c      	ldrh	r4, [r5, #0]
  40ce7a:	0c00      	lsrs	r0, r0, #16
  40ce7c:	fb0b 0004 	mla	r0, fp, r4, r0
  40ce80:	4401      	add	r1, r0
  40ce82:	b29c      	uxth	r4, r3
  40ce84:	463e      	mov	r6, r7
  40ce86:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40ce8a:	f846 3b04 	str.w	r3, [r6], #4
  40ce8e:	6878      	ldr	r0, [r7, #4]
  40ce90:	f855 4b04 	ldr.w	r4, [r5], #4
  40ce94:	b283      	uxth	r3, r0
  40ce96:	0c24      	lsrs	r4, r4, #16
  40ce98:	fb0b 3404 	mla	r4, fp, r4, r3
  40ce9c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40cea0:	45ae      	cmp	lr, r5
  40cea2:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40cea6:	d8e6      	bhi.n	40ce76 <__multiply+0xc6>
  40cea8:	607b      	str	r3, [r7, #4]
  40ceaa:	4592      	cmp	sl, r2
  40ceac:	f10c 0c04 	add.w	ip, ip, #4
  40ceb0:	d8af      	bhi.n	40ce12 <__multiply+0x62>
  40ceb2:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40ceb6:	f1b8 0f00 	cmp.w	r8, #0
  40ceba:	dd0b      	ble.n	40ced4 <__multiply+0x124>
  40cebc:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40cec0:	f1a9 0904 	sub.w	r9, r9, #4
  40cec4:	b11b      	cbz	r3, 40cece <__multiply+0x11e>
  40cec6:	e005      	b.n	40ced4 <__multiply+0x124>
  40cec8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40cecc:	b913      	cbnz	r3, 40ced4 <__multiply+0x124>
  40cece:	f1b8 0801 	subs.w	r8, r8, #1
  40ced2:	d1f9      	bne.n	40cec8 <__multiply+0x118>
  40ced4:	9800      	ldr	r0, [sp, #0]
  40ced6:	f8c0 8010 	str.w	r8, [r0, #16]
  40ceda:	b003      	add	sp, #12
  40cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040cee0 <__pow5mult>:
  40cee0:	f012 0303 	ands.w	r3, r2, #3
  40cee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cee8:	4614      	mov	r4, r2
  40ceea:	4607      	mov	r7, r0
  40ceec:	d12e      	bne.n	40cf4c <__pow5mult+0x6c>
  40ceee:	460e      	mov	r6, r1
  40cef0:	10a4      	asrs	r4, r4, #2
  40cef2:	d01c      	beq.n	40cf2e <__pow5mult+0x4e>
  40cef4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40cef6:	b395      	cbz	r5, 40cf5e <__pow5mult+0x7e>
  40cef8:	07e3      	lsls	r3, r4, #31
  40cefa:	f04f 0800 	mov.w	r8, #0
  40cefe:	d406      	bmi.n	40cf0e <__pow5mult+0x2e>
  40cf00:	1064      	asrs	r4, r4, #1
  40cf02:	d014      	beq.n	40cf2e <__pow5mult+0x4e>
  40cf04:	6828      	ldr	r0, [r5, #0]
  40cf06:	b1a8      	cbz	r0, 40cf34 <__pow5mult+0x54>
  40cf08:	4605      	mov	r5, r0
  40cf0a:	07e3      	lsls	r3, r4, #31
  40cf0c:	d5f8      	bpl.n	40cf00 <__pow5mult+0x20>
  40cf0e:	462a      	mov	r2, r5
  40cf10:	4631      	mov	r1, r6
  40cf12:	4638      	mov	r0, r7
  40cf14:	f7ff ff4c 	bl	40cdb0 <__multiply>
  40cf18:	b1b6      	cbz	r6, 40cf48 <__pow5mult+0x68>
  40cf1a:	6872      	ldr	r2, [r6, #4]
  40cf1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40cf1e:	1064      	asrs	r4, r4, #1
  40cf20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40cf24:	6031      	str	r1, [r6, #0]
  40cf26:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40cf2a:	4606      	mov	r6, r0
  40cf2c:	d1ea      	bne.n	40cf04 <__pow5mult+0x24>
  40cf2e:	4630      	mov	r0, r6
  40cf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cf34:	462a      	mov	r2, r5
  40cf36:	4629      	mov	r1, r5
  40cf38:	4638      	mov	r0, r7
  40cf3a:	f7ff ff39 	bl	40cdb0 <__multiply>
  40cf3e:	6028      	str	r0, [r5, #0]
  40cf40:	f8c0 8000 	str.w	r8, [r0]
  40cf44:	4605      	mov	r5, r0
  40cf46:	e7e0      	b.n	40cf0a <__pow5mult+0x2a>
  40cf48:	4606      	mov	r6, r0
  40cf4a:	e7d9      	b.n	40cf00 <__pow5mult+0x20>
  40cf4c:	1e5a      	subs	r2, r3, #1
  40cf4e:	4d0b      	ldr	r5, [pc, #44]	; (40cf7c <__pow5mult+0x9c>)
  40cf50:	2300      	movs	r3, #0
  40cf52:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40cf56:	f7ff fe93 	bl	40cc80 <__multadd>
  40cf5a:	4606      	mov	r6, r0
  40cf5c:	e7c8      	b.n	40cef0 <__pow5mult+0x10>
  40cf5e:	2101      	movs	r1, #1
  40cf60:	4638      	mov	r0, r7
  40cf62:	f7ff fe5d 	bl	40cc20 <_Balloc>
  40cf66:	f240 2171 	movw	r1, #625	; 0x271
  40cf6a:	2201      	movs	r2, #1
  40cf6c:	2300      	movs	r3, #0
  40cf6e:	6141      	str	r1, [r0, #20]
  40cf70:	6102      	str	r2, [r0, #16]
  40cf72:	4605      	mov	r5, r0
  40cf74:	64b8      	str	r0, [r7, #72]	; 0x48
  40cf76:	6003      	str	r3, [r0, #0]
  40cf78:	e7be      	b.n	40cef8 <__pow5mult+0x18>
  40cf7a:	bf00      	nop
  40cf7c:	0040eda0 	.word	0x0040eda0

0040cf80 <__lshift>:
  40cf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40cf84:	4691      	mov	r9, r2
  40cf86:	690a      	ldr	r2, [r1, #16]
  40cf88:	688b      	ldr	r3, [r1, #8]
  40cf8a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40cf8e:	eb04 0802 	add.w	r8, r4, r2
  40cf92:	f108 0501 	add.w	r5, r8, #1
  40cf96:	429d      	cmp	r5, r3
  40cf98:	460e      	mov	r6, r1
  40cf9a:	4682      	mov	sl, r0
  40cf9c:	6849      	ldr	r1, [r1, #4]
  40cf9e:	dd04      	ble.n	40cfaa <__lshift+0x2a>
  40cfa0:	005b      	lsls	r3, r3, #1
  40cfa2:	429d      	cmp	r5, r3
  40cfa4:	f101 0101 	add.w	r1, r1, #1
  40cfa8:	dcfa      	bgt.n	40cfa0 <__lshift+0x20>
  40cfaa:	4650      	mov	r0, sl
  40cfac:	f7ff fe38 	bl	40cc20 <_Balloc>
  40cfb0:	2c00      	cmp	r4, #0
  40cfb2:	f100 0214 	add.w	r2, r0, #20
  40cfb6:	dd38      	ble.n	40d02a <__lshift+0xaa>
  40cfb8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40cfbc:	2100      	movs	r1, #0
  40cfbe:	f842 1b04 	str.w	r1, [r2], #4
  40cfc2:	4293      	cmp	r3, r2
  40cfc4:	d1fb      	bne.n	40cfbe <__lshift+0x3e>
  40cfc6:	6934      	ldr	r4, [r6, #16]
  40cfc8:	f106 0114 	add.w	r1, r6, #20
  40cfcc:	f019 091f 	ands.w	r9, r9, #31
  40cfd0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40cfd4:	d021      	beq.n	40d01a <__lshift+0x9a>
  40cfd6:	f1c9 0220 	rsb	r2, r9, #32
  40cfda:	2400      	movs	r4, #0
  40cfdc:	680f      	ldr	r7, [r1, #0]
  40cfde:	fa07 fc09 	lsl.w	ip, r7, r9
  40cfe2:	ea4c 0404 	orr.w	r4, ip, r4
  40cfe6:	469c      	mov	ip, r3
  40cfe8:	f843 4b04 	str.w	r4, [r3], #4
  40cfec:	f851 4b04 	ldr.w	r4, [r1], #4
  40cff0:	458e      	cmp	lr, r1
  40cff2:	fa24 f402 	lsr.w	r4, r4, r2
  40cff6:	d8f1      	bhi.n	40cfdc <__lshift+0x5c>
  40cff8:	f8cc 4004 	str.w	r4, [ip, #4]
  40cffc:	b10c      	cbz	r4, 40d002 <__lshift+0x82>
  40cffe:	f108 0502 	add.w	r5, r8, #2
  40d002:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  40d006:	6872      	ldr	r2, [r6, #4]
  40d008:	3d01      	subs	r5, #1
  40d00a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40d00e:	6105      	str	r5, [r0, #16]
  40d010:	6031      	str	r1, [r6, #0]
  40d012:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40d016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d01a:	3b04      	subs	r3, #4
  40d01c:	f851 2b04 	ldr.w	r2, [r1], #4
  40d020:	f843 2f04 	str.w	r2, [r3, #4]!
  40d024:	458e      	cmp	lr, r1
  40d026:	d8f9      	bhi.n	40d01c <__lshift+0x9c>
  40d028:	e7eb      	b.n	40d002 <__lshift+0x82>
  40d02a:	4613      	mov	r3, r2
  40d02c:	e7cb      	b.n	40cfc6 <__lshift+0x46>
  40d02e:	bf00      	nop

0040d030 <__mcmp>:
  40d030:	6902      	ldr	r2, [r0, #16]
  40d032:	690b      	ldr	r3, [r1, #16]
  40d034:	1ad2      	subs	r2, r2, r3
  40d036:	d112      	bne.n	40d05e <__mcmp+0x2e>
  40d038:	009b      	lsls	r3, r3, #2
  40d03a:	3014      	adds	r0, #20
  40d03c:	3114      	adds	r1, #20
  40d03e:	4419      	add	r1, r3
  40d040:	b410      	push	{r4}
  40d042:	4403      	add	r3, r0
  40d044:	e001      	b.n	40d04a <__mcmp+0x1a>
  40d046:	4298      	cmp	r0, r3
  40d048:	d20b      	bcs.n	40d062 <__mcmp+0x32>
  40d04a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40d04e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40d052:	4294      	cmp	r4, r2
  40d054:	d0f7      	beq.n	40d046 <__mcmp+0x16>
  40d056:	d307      	bcc.n	40d068 <__mcmp+0x38>
  40d058:	2001      	movs	r0, #1
  40d05a:	bc10      	pop	{r4}
  40d05c:	4770      	bx	lr
  40d05e:	4610      	mov	r0, r2
  40d060:	4770      	bx	lr
  40d062:	2000      	movs	r0, #0
  40d064:	bc10      	pop	{r4}
  40d066:	4770      	bx	lr
  40d068:	f04f 30ff 	mov.w	r0, #4294967295
  40d06c:	e7f5      	b.n	40d05a <__mcmp+0x2a>
  40d06e:	bf00      	nop

0040d070 <__mdiff>:
  40d070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d074:	690b      	ldr	r3, [r1, #16]
  40d076:	460f      	mov	r7, r1
  40d078:	6911      	ldr	r1, [r2, #16]
  40d07a:	1a5b      	subs	r3, r3, r1
  40d07c:	2b00      	cmp	r3, #0
  40d07e:	4690      	mov	r8, r2
  40d080:	d117      	bne.n	40d0b2 <__mdiff+0x42>
  40d082:	0089      	lsls	r1, r1, #2
  40d084:	f107 0214 	add.w	r2, r7, #20
  40d088:	f108 0514 	add.w	r5, r8, #20
  40d08c:	1853      	adds	r3, r2, r1
  40d08e:	4429      	add	r1, r5
  40d090:	e001      	b.n	40d096 <__mdiff+0x26>
  40d092:	429a      	cmp	r2, r3
  40d094:	d25e      	bcs.n	40d154 <__mdiff+0xe4>
  40d096:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40d09a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40d09e:	42a6      	cmp	r6, r4
  40d0a0:	d0f7      	beq.n	40d092 <__mdiff+0x22>
  40d0a2:	d260      	bcs.n	40d166 <__mdiff+0xf6>
  40d0a4:	463b      	mov	r3, r7
  40d0a6:	4614      	mov	r4, r2
  40d0a8:	4647      	mov	r7, r8
  40d0aa:	f04f 0901 	mov.w	r9, #1
  40d0ae:	4698      	mov	r8, r3
  40d0b0:	e006      	b.n	40d0c0 <__mdiff+0x50>
  40d0b2:	db5d      	blt.n	40d170 <__mdiff+0x100>
  40d0b4:	f107 0514 	add.w	r5, r7, #20
  40d0b8:	f102 0414 	add.w	r4, r2, #20
  40d0bc:	f04f 0900 	mov.w	r9, #0
  40d0c0:	6879      	ldr	r1, [r7, #4]
  40d0c2:	f7ff fdad 	bl	40cc20 <_Balloc>
  40d0c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40d0ca:	693e      	ldr	r6, [r7, #16]
  40d0cc:	f8c0 900c 	str.w	r9, [r0, #12]
  40d0d0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40d0d4:	46a6      	mov	lr, r4
  40d0d6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40d0da:	f100 0414 	add.w	r4, r0, #20
  40d0de:	2300      	movs	r3, #0
  40d0e0:	f85e 1b04 	ldr.w	r1, [lr], #4
  40d0e4:	f855 8b04 	ldr.w	r8, [r5], #4
  40d0e8:	b28a      	uxth	r2, r1
  40d0ea:	fa13 f388 	uxtah	r3, r3, r8
  40d0ee:	0c09      	lsrs	r1, r1, #16
  40d0f0:	1a9a      	subs	r2, r3, r2
  40d0f2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40d0f6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40d0fa:	b292      	uxth	r2, r2
  40d0fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40d100:	45f4      	cmp	ip, lr
  40d102:	f844 2b04 	str.w	r2, [r4], #4
  40d106:	ea4f 4323 	mov.w	r3, r3, asr #16
  40d10a:	d8e9      	bhi.n	40d0e0 <__mdiff+0x70>
  40d10c:	42af      	cmp	r7, r5
  40d10e:	d917      	bls.n	40d140 <__mdiff+0xd0>
  40d110:	46a4      	mov	ip, r4
  40d112:	4629      	mov	r1, r5
  40d114:	f851 eb04 	ldr.w	lr, [r1], #4
  40d118:	fa13 f28e 	uxtah	r2, r3, lr
  40d11c:	1413      	asrs	r3, r2, #16
  40d11e:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40d122:	b292      	uxth	r2, r2
  40d124:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40d128:	428f      	cmp	r7, r1
  40d12a:	f84c 2b04 	str.w	r2, [ip], #4
  40d12e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40d132:	d8ef      	bhi.n	40d114 <__mdiff+0xa4>
  40d134:	43ed      	mvns	r5, r5
  40d136:	443d      	add	r5, r7
  40d138:	f025 0503 	bic.w	r5, r5, #3
  40d13c:	3504      	adds	r5, #4
  40d13e:	442c      	add	r4, r5
  40d140:	3c04      	subs	r4, #4
  40d142:	b922      	cbnz	r2, 40d14e <__mdiff+0xde>
  40d144:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40d148:	3e01      	subs	r6, #1
  40d14a:	2b00      	cmp	r3, #0
  40d14c:	d0fa      	beq.n	40d144 <__mdiff+0xd4>
  40d14e:	6106      	str	r6, [r0, #16]
  40d150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d154:	2100      	movs	r1, #0
  40d156:	f7ff fd63 	bl	40cc20 <_Balloc>
  40d15a:	2201      	movs	r2, #1
  40d15c:	2300      	movs	r3, #0
  40d15e:	6102      	str	r2, [r0, #16]
  40d160:	6143      	str	r3, [r0, #20]
  40d162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d166:	462c      	mov	r4, r5
  40d168:	f04f 0900 	mov.w	r9, #0
  40d16c:	4615      	mov	r5, r2
  40d16e:	e7a7      	b.n	40d0c0 <__mdiff+0x50>
  40d170:	463b      	mov	r3, r7
  40d172:	f107 0414 	add.w	r4, r7, #20
  40d176:	f108 0514 	add.w	r5, r8, #20
  40d17a:	4647      	mov	r7, r8
  40d17c:	f04f 0901 	mov.w	r9, #1
  40d180:	4698      	mov	r8, r3
  40d182:	e79d      	b.n	40d0c0 <__mdiff+0x50>

0040d184 <__d2b>:
  40d184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d188:	b082      	sub	sp, #8
  40d18a:	2101      	movs	r1, #1
  40d18c:	461c      	mov	r4, r3
  40d18e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40d192:	4615      	mov	r5, r2
  40d194:	9e08      	ldr	r6, [sp, #32]
  40d196:	f7ff fd43 	bl	40cc20 <_Balloc>
  40d19a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40d19e:	4680      	mov	r8, r0
  40d1a0:	b10f      	cbz	r7, 40d1a6 <__d2b+0x22>
  40d1a2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40d1a6:	9401      	str	r4, [sp, #4]
  40d1a8:	b31d      	cbz	r5, 40d1f2 <__d2b+0x6e>
  40d1aa:	a802      	add	r0, sp, #8
  40d1ac:	f840 5d08 	str.w	r5, [r0, #-8]!
  40d1b0:	f7ff fdc6 	bl	40cd40 <__lo0bits>
  40d1b4:	2800      	cmp	r0, #0
  40d1b6:	d134      	bne.n	40d222 <__d2b+0x9e>
  40d1b8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40d1bc:	f8c8 2014 	str.w	r2, [r8, #20]
  40d1c0:	2b00      	cmp	r3, #0
  40d1c2:	bf0c      	ite	eq
  40d1c4:	2101      	moveq	r1, #1
  40d1c6:	2102      	movne	r1, #2
  40d1c8:	f8c8 3018 	str.w	r3, [r8, #24]
  40d1cc:	f8c8 1010 	str.w	r1, [r8, #16]
  40d1d0:	b9df      	cbnz	r7, 40d20a <__d2b+0x86>
  40d1d2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40d1d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40d1da:	6030      	str	r0, [r6, #0]
  40d1dc:	6918      	ldr	r0, [r3, #16]
  40d1de:	f7ff fd8f 	bl	40cd00 <__hi0bits>
  40d1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d1e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40d1e8:	6018      	str	r0, [r3, #0]
  40d1ea:	4640      	mov	r0, r8
  40d1ec:	b002      	add	sp, #8
  40d1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d1f2:	a801      	add	r0, sp, #4
  40d1f4:	f7ff fda4 	bl	40cd40 <__lo0bits>
  40d1f8:	9b01      	ldr	r3, [sp, #4]
  40d1fa:	f8c8 3014 	str.w	r3, [r8, #20]
  40d1fe:	2101      	movs	r1, #1
  40d200:	3020      	adds	r0, #32
  40d202:	f8c8 1010 	str.w	r1, [r8, #16]
  40d206:	2f00      	cmp	r7, #0
  40d208:	d0e3      	beq.n	40d1d2 <__d2b+0x4e>
  40d20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d20c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40d210:	4407      	add	r7, r0
  40d212:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40d216:	6037      	str	r7, [r6, #0]
  40d218:	6018      	str	r0, [r3, #0]
  40d21a:	4640      	mov	r0, r8
  40d21c:	b002      	add	sp, #8
  40d21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d222:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40d226:	f1c0 0120 	rsb	r1, r0, #32
  40d22a:	fa03 f101 	lsl.w	r1, r3, r1
  40d22e:	430a      	orrs	r2, r1
  40d230:	40c3      	lsrs	r3, r0
  40d232:	9301      	str	r3, [sp, #4]
  40d234:	f8c8 2014 	str.w	r2, [r8, #20]
  40d238:	e7c2      	b.n	40d1c0 <__d2b+0x3c>
  40d23a:	bf00      	nop

0040d23c <_realloc_r>:
  40d23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d240:	4617      	mov	r7, r2
  40d242:	b083      	sub	sp, #12
  40d244:	2900      	cmp	r1, #0
  40d246:	f000 80c1 	beq.w	40d3cc <_realloc_r+0x190>
  40d24a:	460e      	mov	r6, r1
  40d24c:	4681      	mov	r9, r0
  40d24e:	f107 050b 	add.w	r5, r7, #11
  40d252:	f7ff fce1 	bl	40cc18 <__malloc_lock>
  40d256:	f856 ec04 	ldr.w	lr, [r6, #-4]
  40d25a:	2d16      	cmp	r5, #22
  40d25c:	f02e 0403 	bic.w	r4, lr, #3
  40d260:	f1a6 0808 	sub.w	r8, r6, #8
  40d264:	d840      	bhi.n	40d2e8 <_realloc_r+0xac>
  40d266:	2210      	movs	r2, #16
  40d268:	4615      	mov	r5, r2
  40d26a:	42af      	cmp	r7, r5
  40d26c:	d841      	bhi.n	40d2f2 <_realloc_r+0xb6>
  40d26e:	4294      	cmp	r4, r2
  40d270:	da75      	bge.n	40d35e <_realloc_r+0x122>
  40d272:	4bc9      	ldr	r3, [pc, #804]	; (40d598 <_realloc_r+0x35c>)
  40d274:	6899      	ldr	r1, [r3, #8]
  40d276:	eb08 0004 	add.w	r0, r8, r4
  40d27a:	4288      	cmp	r0, r1
  40d27c:	6841      	ldr	r1, [r0, #4]
  40d27e:	f000 80d9 	beq.w	40d434 <_realloc_r+0x1f8>
  40d282:	f021 0301 	bic.w	r3, r1, #1
  40d286:	4403      	add	r3, r0
  40d288:	685b      	ldr	r3, [r3, #4]
  40d28a:	07db      	lsls	r3, r3, #31
  40d28c:	d57d      	bpl.n	40d38a <_realloc_r+0x14e>
  40d28e:	f01e 0f01 	tst.w	lr, #1
  40d292:	d035      	beq.n	40d300 <_realloc_r+0xc4>
  40d294:	4639      	mov	r1, r7
  40d296:	4648      	mov	r0, r9
  40d298:	f7ff f952 	bl	40c540 <_malloc_r>
  40d29c:	4607      	mov	r7, r0
  40d29e:	b1e0      	cbz	r0, 40d2da <_realloc_r+0x9e>
  40d2a0:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40d2a4:	f023 0301 	bic.w	r3, r3, #1
  40d2a8:	4443      	add	r3, r8
  40d2aa:	f1a0 0208 	sub.w	r2, r0, #8
  40d2ae:	429a      	cmp	r2, r3
  40d2b0:	f000 8144 	beq.w	40d53c <_realloc_r+0x300>
  40d2b4:	1f22      	subs	r2, r4, #4
  40d2b6:	2a24      	cmp	r2, #36	; 0x24
  40d2b8:	f200 8131 	bhi.w	40d51e <_realloc_r+0x2e2>
  40d2bc:	2a13      	cmp	r2, #19
  40d2be:	f200 8104 	bhi.w	40d4ca <_realloc_r+0x28e>
  40d2c2:	4603      	mov	r3, r0
  40d2c4:	4632      	mov	r2, r6
  40d2c6:	6811      	ldr	r1, [r2, #0]
  40d2c8:	6019      	str	r1, [r3, #0]
  40d2ca:	6851      	ldr	r1, [r2, #4]
  40d2cc:	6059      	str	r1, [r3, #4]
  40d2ce:	6892      	ldr	r2, [r2, #8]
  40d2d0:	609a      	str	r2, [r3, #8]
  40d2d2:	4631      	mov	r1, r6
  40d2d4:	4648      	mov	r0, r9
  40d2d6:	f7fe fe15 	bl	40bf04 <_free_r>
  40d2da:	4648      	mov	r0, r9
  40d2dc:	f7ff fc9e 	bl	40cc1c <__malloc_unlock>
  40d2e0:	4638      	mov	r0, r7
  40d2e2:	b003      	add	sp, #12
  40d2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d2e8:	f025 0507 	bic.w	r5, r5, #7
  40d2ec:	2d00      	cmp	r5, #0
  40d2ee:	462a      	mov	r2, r5
  40d2f0:	dabb      	bge.n	40d26a <_realloc_r+0x2e>
  40d2f2:	230c      	movs	r3, #12
  40d2f4:	2000      	movs	r0, #0
  40d2f6:	f8c9 3000 	str.w	r3, [r9]
  40d2fa:	b003      	add	sp, #12
  40d2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d300:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40d304:	ebc3 0a08 	rsb	sl, r3, r8
  40d308:	f8da 3004 	ldr.w	r3, [sl, #4]
  40d30c:	f023 0c03 	bic.w	ip, r3, #3
  40d310:	eb04 030c 	add.w	r3, r4, ip
  40d314:	4293      	cmp	r3, r2
  40d316:	dbbd      	blt.n	40d294 <_realloc_r+0x58>
  40d318:	4657      	mov	r7, sl
  40d31a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40d31e:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40d322:	1f22      	subs	r2, r4, #4
  40d324:	2a24      	cmp	r2, #36	; 0x24
  40d326:	60c1      	str	r1, [r0, #12]
  40d328:	6088      	str	r0, [r1, #8]
  40d32a:	f200 8117 	bhi.w	40d55c <_realloc_r+0x320>
  40d32e:	2a13      	cmp	r2, #19
  40d330:	f240 8112 	bls.w	40d558 <_realloc_r+0x31c>
  40d334:	6831      	ldr	r1, [r6, #0]
  40d336:	f8ca 1008 	str.w	r1, [sl, #8]
  40d33a:	6871      	ldr	r1, [r6, #4]
  40d33c:	f8ca 100c 	str.w	r1, [sl, #12]
  40d340:	2a1b      	cmp	r2, #27
  40d342:	f200 812b 	bhi.w	40d59c <_realloc_r+0x360>
  40d346:	3608      	adds	r6, #8
  40d348:	f10a 0210 	add.w	r2, sl, #16
  40d34c:	6831      	ldr	r1, [r6, #0]
  40d34e:	6011      	str	r1, [r2, #0]
  40d350:	6871      	ldr	r1, [r6, #4]
  40d352:	6051      	str	r1, [r2, #4]
  40d354:	68b1      	ldr	r1, [r6, #8]
  40d356:	6091      	str	r1, [r2, #8]
  40d358:	463e      	mov	r6, r7
  40d35a:	461c      	mov	r4, r3
  40d35c:	46d0      	mov	r8, sl
  40d35e:	1b63      	subs	r3, r4, r5
  40d360:	2b0f      	cmp	r3, #15
  40d362:	d81d      	bhi.n	40d3a0 <_realloc_r+0x164>
  40d364:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40d368:	f003 0301 	and.w	r3, r3, #1
  40d36c:	4323      	orrs	r3, r4
  40d36e:	4444      	add	r4, r8
  40d370:	f8c8 3004 	str.w	r3, [r8, #4]
  40d374:	6863      	ldr	r3, [r4, #4]
  40d376:	f043 0301 	orr.w	r3, r3, #1
  40d37a:	6063      	str	r3, [r4, #4]
  40d37c:	4648      	mov	r0, r9
  40d37e:	f7ff fc4d 	bl	40cc1c <__malloc_unlock>
  40d382:	4630      	mov	r0, r6
  40d384:	b003      	add	sp, #12
  40d386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d38a:	f021 0103 	bic.w	r1, r1, #3
  40d38e:	4421      	add	r1, r4
  40d390:	4291      	cmp	r1, r2
  40d392:	db21      	blt.n	40d3d8 <_realloc_r+0x19c>
  40d394:	68c3      	ldr	r3, [r0, #12]
  40d396:	6882      	ldr	r2, [r0, #8]
  40d398:	460c      	mov	r4, r1
  40d39a:	60d3      	str	r3, [r2, #12]
  40d39c:	609a      	str	r2, [r3, #8]
  40d39e:	e7de      	b.n	40d35e <_realloc_r+0x122>
  40d3a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40d3a4:	eb08 0105 	add.w	r1, r8, r5
  40d3a8:	f002 0201 	and.w	r2, r2, #1
  40d3ac:	4315      	orrs	r5, r2
  40d3ae:	f043 0201 	orr.w	r2, r3, #1
  40d3b2:	440b      	add	r3, r1
  40d3b4:	f8c8 5004 	str.w	r5, [r8, #4]
  40d3b8:	604a      	str	r2, [r1, #4]
  40d3ba:	685a      	ldr	r2, [r3, #4]
  40d3bc:	f042 0201 	orr.w	r2, r2, #1
  40d3c0:	3108      	adds	r1, #8
  40d3c2:	605a      	str	r2, [r3, #4]
  40d3c4:	4648      	mov	r0, r9
  40d3c6:	f7fe fd9d 	bl	40bf04 <_free_r>
  40d3ca:	e7d7      	b.n	40d37c <_realloc_r+0x140>
  40d3cc:	4611      	mov	r1, r2
  40d3ce:	b003      	add	sp, #12
  40d3d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d3d4:	f7ff b8b4 	b.w	40c540 <_malloc_r>
  40d3d8:	f01e 0f01 	tst.w	lr, #1
  40d3dc:	f47f af5a 	bne.w	40d294 <_realloc_r+0x58>
  40d3e0:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40d3e4:	ebc3 0a08 	rsb	sl, r3, r8
  40d3e8:	f8da 3004 	ldr.w	r3, [sl, #4]
  40d3ec:	f023 0c03 	bic.w	ip, r3, #3
  40d3f0:	eb01 0e0c 	add.w	lr, r1, ip
  40d3f4:	4596      	cmp	lr, r2
  40d3f6:	db8b      	blt.n	40d310 <_realloc_r+0xd4>
  40d3f8:	68c3      	ldr	r3, [r0, #12]
  40d3fa:	6882      	ldr	r2, [r0, #8]
  40d3fc:	4657      	mov	r7, sl
  40d3fe:	60d3      	str	r3, [r2, #12]
  40d400:	609a      	str	r2, [r3, #8]
  40d402:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40d406:	f8da 300c 	ldr.w	r3, [sl, #12]
  40d40a:	60cb      	str	r3, [r1, #12]
  40d40c:	1f22      	subs	r2, r4, #4
  40d40e:	2a24      	cmp	r2, #36	; 0x24
  40d410:	6099      	str	r1, [r3, #8]
  40d412:	f200 8099 	bhi.w	40d548 <_realloc_r+0x30c>
  40d416:	2a13      	cmp	r2, #19
  40d418:	d962      	bls.n	40d4e0 <_realloc_r+0x2a4>
  40d41a:	6833      	ldr	r3, [r6, #0]
  40d41c:	f8ca 3008 	str.w	r3, [sl, #8]
  40d420:	6873      	ldr	r3, [r6, #4]
  40d422:	f8ca 300c 	str.w	r3, [sl, #12]
  40d426:	2a1b      	cmp	r2, #27
  40d428:	f200 80a0 	bhi.w	40d56c <_realloc_r+0x330>
  40d42c:	3608      	adds	r6, #8
  40d42e:	f10a 0310 	add.w	r3, sl, #16
  40d432:	e056      	b.n	40d4e2 <_realloc_r+0x2a6>
  40d434:	f021 0b03 	bic.w	fp, r1, #3
  40d438:	44a3      	add	fp, r4
  40d43a:	f105 0010 	add.w	r0, r5, #16
  40d43e:	4583      	cmp	fp, r0
  40d440:	da59      	bge.n	40d4f6 <_realloc_r+0x2ba>
  40d442:	f01e 0f01 	tst.w	lr, #1
  40d446:	f47f af25 	bne.w	40d294 <_realloc_r+0x58>
  40d44a:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40d44e:	ebc1 0a08 	rsb	sl, r1, r8
  40d452:	f8da 1004 	ldr.w	r1, [sl, #4]
  40d456:	f021 0c03 	bic.w	ip, r1, #3
  40d45a:	44e3      	add	fp, ip
  40d45c:	4558      	cmp	r0, fp
  40d45e:	f73f af57 	bgt.w	40d310 <_realloc_r+0xd4>
  40d462:	4657      	mov	r7, sl
  40d464:	f8da 100c 	ldr.w	r1, [sl, #12]
  40d468:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40d46c:	1f22      	subs	r2, r4, #4
  40d46e:	2a24      	cmp	r2, #36	; 0x24
  40d470:	60c1      	str	r1, [r0, #12]
  40d472:	6088      	str	r0, [r1, #8]
  40d474:	f200 80b4 	bhi.w	40d5e0 <_realloc_r+0x3a4>
  40d478:	2a13      	cmp	r2, #19
  40d47a:	f240 80a5 	bls.w	40d5c8 <_realloc_r+0x38c>
  40d47e:	6831      	ldr	r1, [r6, #0]
  40d480:	f8ca 1008 	str.w	r1, [sl, #8]
  40d484:	6871      	ldr	r1, [r6, #4]
  40d486:	f8ca 100c 	str.w	r1, [sl, #12]
  40d48a:	2a1b      	cmp	r2, #27
  40d48c:	f200 80af 	bhi.w	40d5ee <_realloc_r+0x3b2>
  40d490:	3608      	adds	r6, #8
  40d492:	f10a 0210 	add.w	r2, sl, #16
  40d496:	6831      	ldr	r1, [r6, #0]
  40d498:	6011      	str	r1, [r2, #0]
  40d49a:	6871      	ldr	r1, [r6, #4]
  40d49c:	6051      	str	r1, [r2, #4]
  40d49e:	68b1      	ldr	r1, [r6, #8]
  40d4a0:	6091      	str	r1, [r2, #8]
  40d4a2:	eb0a 0105 	add.w	r1, sl, r5
  40d4a6:	ebc5 020b 	rsb	r2, r5, fp
  40d4aa:	f042 0201 	orr.w	r2, r2, #1
  40d4ae:	6099      	str	r1, [r3, #8]
  40d4b0:	604a      	str	r2, [r1, #4]
  40d4b2:	f8da 3004 	ldr.w	r3, [sl, #4]
  40d4b6:	f003 0301 	and.w	r3, r3, #1
  40d4ba:	431d      	orrs	r5, r3
  40d4bc:	4648      	mov	r0, r9
  40d4be:	f8ca 5004 	str.w	r5, [sl, #4]
  40d4c2:	f7ff fbab 	bl	40cc1c <__malloc_unlock>
  40d4c6:	4638      	mov	r0, r7
  40d4c8:	e75c      	b.n	40d384 <_realloc_r+0x148>
  40d4ca:	6833      	ldr	r3, [r6, #0]
  40d4cc:	6003      	str	r3, [r0, #0]
  40d4ce:	6873      	ldr	r3, [r6, #4]
  40d4d0:	6043      	str	r3, [r0, #4]
  40d4d2:	2a1b      	cmp	r2, #27
  40d4d4:	d827      	bhi.n	40d526 <_realloc_r+0x2ea>
  40d4d6:	f100 0308 	add.w	r3, r0, #8
  40d4da:	f106 0208 	add.w	r2, r6, #8
  40d4de:	e6f2      	b.n	40d2c6 <_realloc_r+0x8a>
  40d4e0:	463b      	mov	r3, r7
  40d4e2:	6832      	ldr	r2, [r6, #0]
  40d4e4:	601a      	str	r2, [r3, #0]
  40d4e6:	6872      	ldr	r2, [r6, #4]
  40d4e8:	605a      	str	r2, [r3, #4]
  40d4ea:	68b2      	ldr	r2, [r6, #8]
  40d4ec:	609a      	str	r2, [r3, #8]
  40d4ee:	463e      	mov	r6, r7
  40d4f0:	4674      	mov	r4, lr
  40d4f2:	46d0      	mov	r8, sl
  40d4f4:	e733      	b.n	40d35e <_realloc_r+0x122>
  40d4f6:	eb08 0105 	add.w	r1, r8, r5
  40d4fa:	ebc5 0b0b 	rsb	fp, r5, fp
  40d4fe:	f04b 0201 	orr.w	r2, fp, #1
  40d502:	6099      	str	r1, [r3, #8]
  40d504:	604a      	str	r2, [r1, #4]
  40d506:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40d50a:	f003 0301 	and.w	r3, r3, #1
  40d50e:	431d      	orrs	r5, r3
  40d510:	4648      	mov	r0, r9
  40d512:	f846 5c04 	str.w	r5, [r6, #-4]
  40d516:	f7ff fb81 	bl	40cc1c <__malloc_unlock>
  40d51a:	4630      	mov	r0, r6
  40d51c:	e732      	b.n	40d384 <_realloc_r+0x148>
  40d51e:	4631      	mov	r1, r6
  40d520:	f7ff fb16 	bl	40cb50 <memmove>
  40d524:	e6d5      	b.n	40d2d2 <_realloc_r+0x96>
  40d526:	68b3      	ldr	r3, [r6, #8]
  40d528:	6083      	str	r3, [r0, #8]
  40d52a:	68f3      	ldr	r3, [r6, #12]
  40d52c:	60c3      	str	r3, [r0, #12]
  40d52e:	2a24      	cmp	r2, #36	; 0x24
  40d530:	d028      	beq.n	40d584 <_realloc_r+0x348>
  40d532:	f100 0310 	add.w	r3, r0, #16
  40d536:	f106 0210 	add.w	r2, r6, #16
  40d53a:	e6c4      	b.n	40d2c6 <_realloc_r+0x8a>
  40d53c:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40d540:	f023 0303 	bic.w	r3, r3, #3
  40d544:	441c      	add	r4, r3
  40d546:	e70a      	b.n	40d35e <_realloc_r+0x122>
  40d548:	4631      	mov	r1, r6
  40d54a:	4638      	mov	r0, r7
  40d54c:	4674      	mov	r4, lr
  40d54e:	46d0      	mov	r8, sl
  40d550:	f7ff fafe 	bl	40cb50 <memmove>
  40d554:	463e      	mov	r6, r7
  40d556:	e702      	b.n	40d35e <_realloc_r+0x122>
  40d558:	463a      	mov	r2, r7
  40d55a:	e6f7      	b.n	40d34c <_realloc_r+0x110>
  40d55c:	4631      	mov	r1, r6
  40d55e:	4638      	mov	r0, r7
  40d560:	461c      	mov	r4, r3
  40d562:	46d0      	mov	r8, sl
  40d564:	f7ff faf4 	bl	40cb50 <memmove>
  40d568:	463e      	mov	r6, r7
  40d56a:	e6f8      	b.n	40d35e <_realloc_r+0x122>
  40d56c:	68b3      	ldr	r3, [r6, #8]
  40d56e:	f8ca 3010 	str.w	r3, [sl, #16]
  40d572:	68f3      	ldr	r3, [r6, #12]
  40d574:	f8ca 3014 	str.w	r3, [sl, #20]
  40d578:	2a24      	cmp	r2, #36	; 0x24
  40d57a:	d01b      	beq.n	40d5b4 <_realloc_r+0x378>
  40d57c:	3610      	adds	r6, #16
  40d57e:	f10a 0318 	add.w	r3, sl, #24
  40d582:	e7ae      	b.n	40d4e2 <_realloc_r+0x2a6>
  40d584:	6933      	ldr	r3, [r6, #16]
  40d586:	6103      	str	r3, [r0, #16]
  40d588:	6973      	ldr	r3, [r6, #20]
  40d58a:	6143      	str	r3, [r0, #20]
  40d58c:	f106 0218 	add.w	r2, r6, #24
  40d590:	f100 0318 	add.w	r3, r0, #24
  40d594:	e697      	b.n	40d2c6 <_realloc_r+0x8a>
  40d596:	bf00      	nop
  40d598:	204004e0 	.word	0x204004e0
  40d59c:	68b1      	ldr	r1, [r6, #8]
  40d59e:	f8ca 1010 	str.w	r1, [sl, #16]
  40d5a2:	68f1      	ldr	r1, [r6, #12]
  40d5a4:	f8ca 1014 	str.w	r1, [sl, #20]
  40d5a8:	2a24      	cmp	r2, #36	; 0x24
  40d5aa:	d00f      	beq.n	40d5cc <_realloc_r+0x390>
  40d5ac:	3610      	adds	r6, #16
  40d5ae:	f10a 0218 	add.w	r2, sl, #24
  40d5b2:	e6cb      	b.n	40d34c <_realloc_r+0x110>
  40d5b4:	6933      	ldr	r3, [r6, #16]
  40d5b6:	f8ca 3018 	str.w	r3, [sl, #24]
  40d5ba:	6973      	ldr	r3, [r6, #20]
  40d5bc:	f8ca 301c 	str.w	r3, [sl, #28]
  40d5c0:	3618      	adds	r6, #24
  40d5c2:	f10a 0320 	add.w	r3, sl, #32
  40d5c6:	e78c      	b.n	40d4e2 <_realloc_r+0x2a6>
  40d5c8:	463a      	mov	r2, r7
  40d5ca:	e764      	b.n	40d496 <_realloc_r+0x25a>
  40d5cc:	6932      	ldr	r2, [r6, #16]
  40d5ce:	f8ca 2018 	str.w	r2, [sl, #24]
  40d5d2:	6972      	ldr	r2, [r6, #20]
  40d5d4:	f8ca 201c 	str.w	r2, [sl, #28]
  40d5d8:	3618      	adds	r6, #24
  40d5da:	f10a 0220 	add.w	r2, sl, #32
  40d5de:	e6b5      	b.n	40d34c <_realloc_r+0x110>
  40d5e0:	4631      	mov	r1, r6
  40d5e2:	4638      	mov	r0, r7
  40d5e4:	9301      	str	r3, [sp, #4]
  40d5e6:	f7ff fab3 	bl	40cb50 <memmove>
  40d5ea:	9b01      	ldr	r3, [sp, #4]
  40d5ec:	e759      	b.n	40d4a2 <_realloc_r+0x266>
  40d5ee:	68b1      	ldr	r1, [r6, #8]
  40d5f0:	f8ca 1010 	str.w	r1, [sl, #16]
  40d5f4:	68f1      	ldr	r1, [r6, #12]
  40d5f6:	f8ca 1014 	str.w	r1, [sl, #20]
  40d5fa:	2a24      	cmp	r2, #36	; 0x24
  40d5fc:	d003      	beq.n	40d606 <_realloc_r+0x3ca>
  40d5fe:	3610      	adds	r6, #16
  40d600:	f10a 0218 	add.w	r2, sl, #24
  40d604:	e747      	b.n	40d496 <_realloc_r+0x25a>
  40d606:	6932      	ldr	r2, [r6, #16]
  40d608:	f8ca 2018 	str.w	r2, [sl, #24]
  40d60c:	6972      	ldr	r2, [r6, #20]
  40d60e:	f8ca 201c 	str.w	r2, [sl, #28]
  40d612:	3618      	adds	r6, #24
  40d614:	f10a 0220 	add.w	r2, sl, #32
  40d618:	e73d      	b.n	40d496 <_realloc_r+0x25a>
  40d61a:	bf00      	nop

0040d61c <_sbrk_r>:
  40d61c:	b538      	push	{r3, r4, r5, lr}
  40d61e:	4c07      	ldr	r4, [pc, #28]	; (40d63c <_sbrk_r+0x20>)
  40d620:	2300      	movs	r3, #0
  40d622:	4605      	mov	r5, r0
  40d624:	4608      	mov	r0, r1
  40d626:	6023      	str	r3, [r4, #0]
  40d628:	f7f3 fd0c 	bl	401044 <_sbrk>
  40d62c:	1c43      	adds	r3, r0, #1
  40d62e:	d000      	beq.n	40d632 <_sbrk_r+0x16>
  40d630:	bd38      	pop	{r3, r4, r5, pc}
  40d632:	6823      	ldr	r3, [r4, #0]
  40d634:	2b00      	cmp	r3, #0
  40d636:	d0fb      	beq.n	40d630 <_sbrk_r+0x14>
  40d638:	602b      	str	r3, [r5, #0]
  40d63a:	bd38      	pop	{r3, r4, r5, pc}
  40d63c:	204048f8 	.word	0x204048f8

0040d640 <__sread>:
  40d640:	b510      	push	{r4, lr}
  40d642:	460c      	mov	r4, r1
  40d644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d648:	f000 fa74 	bl	40db34 <_read_r>
  40d64c:	2800      	cmp	r0, #0
  40d64e:	db03      	blt.n	40d658 <__sread+0x18>
  40d650:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40d652:	4403      	add	r3, r0
  40d654:	6523      	str	r3, [r4, #80]	; 0x50
  40d656:	bd10      	pop	{r4, pc}
  40d658:	89a3      	ldrh	r3, [r4, #12]
  40d65a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40d65e:	81a3      	strh	r3, [r4, #12]
  40d660:	bd10      	pop	{r4, pc}
  40d662:	bf00      	nop

0040d664 <__swrite>:
  40d664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d668:	4616      	mov	r6, r2
  40d66a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40d66e:	461f      	mov	r7, r3
  40d670:	05d3      	lsls	r3, r2, #23
  40d672:	460c      	mov	r4, r1
  40d674:	4605      	mov	r5, r0
  40d676:	d507      	bpl.n	40d688 <__swrite+0x24>
  40d678:	2200      	movs	r2, #0
  40d67a:	2302      	movs	r3, #2
  40d67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d680:	f000 fa42 	bl	40db08 <_lseek_r>
  40d684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40d68c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40d690:	81a2      	strh	r2, [r4, #12]
  40d692:	463b      	mov	r3, r7
  40d694:	4632      	mov	r2, r6
  40d696:	4628      	mov	r0, r5
  40d698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40d69c:	f000 b922 	b.w	40d8e4 <_write_r>

0040d6a0 <__sseek>:
  40d6a0:	b510      	push	{r4, lr}
  40d6a2:	460c      	mov	r4, r1
  40d6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d6a8:	f000 fa2e 	bl	40db08 <_lseek_r>
  40d6ac:	89a3      	ldrh	r3, [r4, #12]
  40d6ae:	1c42      	adds	r2, r0, #1
  40d6b0:	bf0e      	itee	eq
  40d6b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40d6b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40d6ba:	6520      	strne	r0, [r4, #80]	; 0x50
  40d6bc:	81a3      	strh	r3, [r4, #12]
  40d6be:	bd10      	pop	{r4, pc}

0040d6c0 <__sclose>:
  40d6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d6c4:	f000 b9a6 	b.w	40da14 <_close_r>

0040d6c8 <__ssprint_r>:
  40d6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d6cc:	6893      	ldr	r3, [r2, #8]
  40d6ce:	b083      	sub	sp, #12
  40d6d0:	4690      	mov	r8, r2
  40d6d2:	2b00      	cmp	r3, #0
  40d6d4:	d072      	beq.n	40d7bc <__ssprint_r+0xf4>
  40d6d6:	4683      	mov	fp, r0
  40d6d8:	f04f 0900 	mov.w	r9, #0
  40d6dc:	6816      	ldr	r6, [r2, #0]
  40d6de:	6808      	ldr	r0, [r1, #0]
  40d6e0:	688b      	ldr	r3, [r1, #8]
  40d6e2:	460d      	mov	r5, r1
  40d6e4:	464c      	mov	r4, r9
  40d6e6:	2c00      	cmp	r4, #0
  40d6e8:	d045      	beq.n	40d776 <__ssprint_r+0xae>
  40d6ea:	429c      	cmp	r4, r3
  40d6ec:	461f      	mov	r7, r3
  40d6ee:	469a      	mov	sl, r3
  40d6f0:	d346      	bcc.n	40d780 <__ssprint_r+0xb8>
  40d6f2:	89ab      	ldrh	r3, [r5, #12]
  40d6f4:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40d6f8:	d02d      	beq.n	40d756 <__ssprint_r+0x8e>
  40d6fa:	696f      	ldr	r7, [r5, #20]
  40d6fc:	6929      	ldr	r1, [r5, #16]
  40d6fe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40d702:	ebc1 0a00 	rsb	sl, r1, r0
  40d706:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40d70a:	1c60      	adds	r0, r4, #1
  40d70c:	107f      	asrs	r7, r7, #1
  40d70e:	4450      	add	r0, sl
  40d710:	42b8      	cmp	r0, r7
  40d712:	463a      	mov	r2, r7
  40d714:	bf84      	itt	hi
  40d716:	4607      	movhi	r7, r0
  40d718:	463a      	movhi	r2, r7
  40d71a:	055b      	lsls	r3, r3, #21
  40d71c:	d533      	bpl.n	40d786 <__ssprint_r+0xbe>
  40d71e:	4611      	mov	r1, r2
  40d720:	4658      	mov	r0, fp
  40d722:	f7fe ff0d 	bl	40c540 <_malloc_r>
  40d726:	2800      	cmp	r0, #0
  40d728:	d037      	beq.n	40d79a <__ssprint_r+0xd2>
  40d72a:	4652      	mov	r2, sl
  40d72c:	6929      	ldr	r1, [r5, #16]
  40d72e:	9001      	str	r0, [sp, #4]
  40d730:	f7fa fbfa 	bl	407f28 <memcpy>
  40d734:	89aa      	ldrh	r2, [r5, #12]
  40d736:	9b01      	ldr	r3, [sp, #4]
  40d738:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40d73c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40d740:	81aa      	strh	r2, [r5, #12]
  40d742:	ebca 0207 	rsb	r2, sl, r7
  40d746:	eb03 000a 	add.w	r0, r3, sl
  40d74a:	616f      	str	r7, [r5, #20]
  40d74c:	612b      	str	r3, [r5, #16]
  40d74e:	6028      	str	r0, [r5, #0]
  40d750:	60aa      	str	r2, [r5, #8]
  40d752:	4627      	mov	r7, r4
  40d754:	46a2      	mov	sl, r4
  40d756:	4652      	mov	r2, sl
  40d758:	4649      	mov	r1, r9
  40d75a:	f7ff f9f9 	bl	40cb50 <memmove>
  40d75e:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40d762:	68ab      	ldr	r3, [r5, #8]
  40d764:	6828      	ldr	r0, [r5, #0]
  40d766:	1bdb      	subs	r3, r3, r7
  40d768:	4450      	add	r0, sl
  40d76a:	1b14      	subs	r4, r2, r4
  40d76c:	60ab      	str	r3, [r5, #8]
  40d76e:	6028      	str	r0, [r5, #0]
  40d770:	f8c8 4008 	str.w	r4, [r8, #8]
  40d774:	b314      	cbz	r4, 40d7bc <__ssprint_r+0xf4>
  40d776:	f8d6 9000 	ldr.w	r9, [r6]
  40d77a:	6874      	ldr	r4, [r6, #4]
  40d77c:	3608      	adds	r6, #8
  40d77e:	e7b2      	b.n	40d6e6 <__ssprint_r+0x1e>
  40d780:	4627      	mov	r7, r4
  40d782:	46a2      	mov	sl, r4
  40d784:	e7e7      	b.n	40d756 <__ssprint_r+0x8e>
  40d786:	4658      	mov	r0, fp
  40d788:	f7ff fd58 	bl	40d23c <_realloc_r>
  40d78c:	4603      	mov	r3, r0
  40d78e:	2800      	cmp	r0, #0
  40d790:	d1d7      	bne.n	40d742 <__ssprint_r+0x7a>
  40d792:	6929      	ldr	r1, [r5, #16]
  40d794:	4658      	mov	r0, fp
  40d796:	f7fe fbb5 	bl	40bf04 <_free_r>
  40d79a:	230c      	movs	r3, #12
  40d79c:	f8cb 3000 	str.w	r3, [fp]
  40d7a0:	89ab      	ldrh	r3, [r5, #12]
  40d7a2:	2200      	movs	r2, #0
  40d7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d7a8:	f04f 30ff 	mov.w	r0, #4294967295
  40d7ac:	81ab      	strh	r3, [r5, #12]
  40d7ae:	f8c8 2008 	str.w	r2, [r8, #8]
  40d7b2:	f8c8 2004 	str.w	r2, [r8, #4]
  40d7b6:	b003      	add	sp, #12
  40d7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d7bc:	2000      	movs	r0, #0
  40d7be:	f8c8 0004 	str.w	r0, [r8, #4]
  40d7c2:	b003      	add	sp, #12
  40d7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d7c8 <__swbuf_r>:
  40d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d7ca:	460e      	mov	r6, r1
  40d7cc:	4614      	mov	r4, r2
  40d7ce:	4607      	mov	r7, r0
  40d7d0:	b110      	cbz	r0, 40d7d8 <__swbuf_r+0x10>
  40d7d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d7d4:	2b00      	cmp	r3, #0
  40d7d6:	d04a      	beq.n	40d86e <__swbuf_r+0xa6>
  40d7d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d7dc:	69a3      	ldr	r3, [r4, #24]
  40d7de:	60a3      	str	r3, [r4, #8]
  40d7e0:	b291      	uxth	r1, r2
  40d7e2:	0708      	lsls	r0, r1, #28
  40d7e4:	d538      	bpl.n	40d858 <__swbuf_r+0x90>
  40d7e6:	6923      	ldr	r3, [r4, #16]
  40d7e8:	2b00      	cmp	r3, #0
  40d7ea:	d035      	beq.n	40d858 <__swbuf_r+0x90>
  40d7ec:	0489      	lsls	r1, r1, #18
  40d7ee:	b2f5      	uxtb	r5, r6
  40d7f0:	d515      	bpl.n	40d81e <__swbuf_r+0x56>
  40d7f2:	6822      	ldr	r2, [r4, #0]
  40d7f4:	6961      	ldr	r1, [r4, #20]
  40d7f6:	1ad3      	subs	r3, r2, r3
  40d7f8:	428b      	cmp	r3, r1
  40d7fa:	da1c      	bge.n	40d836 <__swbuf_r+0x6e>
  40d7fc:	3301      	adds	r3, #1
  40d7fe:	68a1      	ldr	r1, [r4, #8]
  40d800:	1c50      	adds	r0, r2, #1
  40d802:	3901      	subs	r1, #1
  40d804:	60a1      	str	r1, [r4, #8]
  40d806:	6020      	str	r0, [r4, #0]
  40d808:	7016      	strb	r6, [r2, #0]
  40d80a:	6962      	ldr	r2, [r4, #20]
  40d80c:	429a      	cmp	r2, r3
  40d80e:	d01a      	beq.n	40d846 <__swbuf_r+0x7e>
  40d810:	89a3      	ldrh	r3, [r4, #12]
  40d812:	07db      	lsls	r3, r3, #31
  40d814:	d501      	bpl.n	40d81a <__swbuf_r+0x52>
  40d816:	2d0a      	cmp	r5, #10
  40d818:	d015      	beq.n	40d846 <__swbuf_r+0x7e>
  40d81a:	4628      	mov	r0, r5
  40d81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d81e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40d820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40d824:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40d828:	81a2      	strh	r2, [r4, #12]
  40d82a:	6822      	ldr	r2, [r4, #0]
  40d82c:	6661      	str	r1, [r4, #100]	; 0x64
  40d82e:	6961      	ldr	r1, [r4, #20]
  40d830:	1ad3      	subs	r3, r2, r3
  40d832:	428b      	cmp	r3, r1
  40d834:	dbe2      	blt.n	40d7fc <__swbuf_r+0x34>
  40d836:	4621      	mov	r1, r4
  40d838:	4638      	mov	r0, r7
  40d83a:	f7fe fa05 	bl	40bc48 <_fflush_r>
  40d83e:	b940      	cbnz	r0, 40d852 <__swbuf_r+0x8a>
  40d840:	6822      	ldr	r2, [r4, #0]
  40d842:	2301      	movs	r3, #1
  40d844:	e7db      	b.n	40d7fe <__swbuf_r+0x36>
  40d846:	4621      	mov	r1, r4
  40d848:	4638      	mov	r0, r7
  40d84a:	f7fe f9fd 	bl	40bc48 <_fflush_r>
  40d84e:	2800      	cmp	r0, #0
  40d850:	d0e3      	beq.n	40d81a <__swbuf_r+0x52>
  40d852:	f04f 30ff 	mov.w	r0, #4294967295
  40d856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d858:	4621      	mov	r1, r4
  40d85a:	4638      	mov	r0, r7
  40d85c:	f7fd f91c 	bl	40aa98 <__swsetup_r>
  40d860:	2800      	cmp	r0, #0
  40d862:	d1f6      	bne.n	40d852 <__swbuf_r+0x8a>
  40d864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40d868:	6923      	ldr	r3, [r4, #16]
  40d86a:	b291      	uxth	r1, r2
  40d86c:	e7be      	b.n	40d7ec <__swbuf_r+0x24>
  40d86e:	f7fe fa7f 	bl	40bd70 <__sinit>
  40d872:	e7b1      	b.n	40d7d8 <__swbuf_r+0x10>

0040d874 <_wcrtomb_r>:
  40d874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d878:	4605      	mov	r5, r0
  40d87a:	b086      	sub	sp, #24
  40d87c:	461e      	mov	r6, r3
  40d87e:	460c      	mov	r4, r1
  40d880:	b1a1      	cbz	r1, 40d8ac <_wcrtomb_r+0x38>
  40d882:	4b10      	ldr	r3, [pc, #64]	; (40d8c4 <_wcrtomb_r+0x50>)
  40d884:	4617      	mov	r7, r2
  40d886:	f8d3 8000 	ldr.w	r8, [r3]
  40d88a:	f7fe fdcf 	bl	40c42c <__locale_charset>
  40d88e:	9600      	str	r6, [sp, #0]
  40d890:	4603      	mov	r3, r0
  40d892:	463a      	mov	r2, r7
  40d894:	4621      	mov	r1, r4
  40d896:	4628      	mov	r0, r5
  40d898:	47c0      	blx	r8
  40d89a:	1c43      	adds	r3, r0, #1
  40d89c:	d103      	bne.n	40d8a6 <_wcrtomb_r+0x32>
  40d89e:	2200      	movs	r2, #0
  40d8a0:	238a      	movs	r3, #138	; 0x8a
  40d8a2:	6032      	str	r2, [r6, #0]
  40d8a4:	602b      	str	r3, [r5, #0]
  40d8a6:	b006      	add	sp, #24
  40d8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d8ac:	4b05      	ldr	r3, [pc, #20]	; (40d8c4 <_wcrtomb_r+0x50>)
  40d8ae:	681f      	ldr	r7, [r3, #0]
  40d8b0:	f7fe fdbc 	bl	40c42c <__locale_charset>
  40d8b4:	9600      	str	r6, [sp, #0]
  40d8b6:	4603      	mov	r3, r0
  40d8b8:	4622      	mov	r2, r4
  40d8ba:	a903      	add	r1, sp, #12
  40d8bc:	4628      	mov	r0, r5
  40d8be:	47b8      	blx	r7
  40d8c0:	e7eb      	b.n	40d89a <_wcrtomb_r+0x26>
  40d8c2:	bf00      	nop
  40d8c4:	204008f0 	.word	0x204008f0

0040d8c8 <__ascii_wctomb>:
  40d8c8:	b121      	cbz	r1, 40d8d4 <__ascii_wctomb+0xc>
  40d8ca:	2aff      	cmp	r2, #255	; 0xff
  40d8cc:	d804      	bhi.n	40d8d8 <__ascii_wctomb+0x10>
  40d8ce:	700a      	strb	r2, [r1, #0]
  40d8d0:	2001      	movs	r0, #1
  40d8d2:	4770      	bx	lr
  40d8d4:	4608      	mov	r0, r1
  40d8d6:	4770      	bx	lr
  40d8d8:	238a      	movs	r3, #138	; 0x8a
  40d8da:	6003      	str	r3, [r0, #0]
  40d8dc:	f04f 30ff 	mov.w	r0, #4294967295
  40d8e0:	4770      	bx	lr
  40d8e2:	bf00      	nop

0040d8e4 <_write_r>:
  40d8e4:	b570      	push	{r4, r5, r6, lr}
  40d8e6:	460d      	mov	r5, r1
  40d8e8:	4c08      	ldr	r4, [pc, #32]	; (40d90c <_write_r+0x28>)
  40d8ea:	4611      	mov	r1, r2
  40d8ec:	4606      	mov	r6, r0
  40d8ee:	461a      	mov	r2, r3
  40d8f0:	4628      	mov	r0, r5
  40d8f2:	2300      	movs	r3, #0
  40d8f4:	6023      	str	r3, [r4, #0]
  40d8f6:	f7f2 fca9 	bl	40024c <_write>
  40d8fa:	1c43      	adds	r3, r0, #1
  40d8fc:	d000      	beq.n	40d900 <_write_r+0x1c>
  40d8fe:	bd70      	pop	{r4, r5, r6, pc}
  40d900:	6823      	ldr	r3, [r4, #0]
  40d902:	2b00      	cmp	r3, #0
  40d904:	d0fb      	beq.n	40d8fe <_write_r+0x1a>
  40d906:	6033      	str	r3, [r6, #0]
  40d908:	bd70      	pop	{r4, r5, r6, pc}
  40d90a:	bf00      	nop
  40d90c:	204048f8 	.word	0x204048f8

0040d910 <__register_exitproc>:
  40d910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d914:	4c25      	ldr	r4, [pc, #148]	; (40d9ac <__register_exitproc+0x9c>)
  40d916:	6825      	ldr	r5, [r4, #0]
  40d918:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40d91c:	4606      	mov	r6, r0
  40d91e:	4688      	mov	r8, r1
  40d920:	4692      	mov	sl, r2
  40d922:	4699      	mov	r9, r3
  40d924:	b3c4      	cbz	r4, 40d998 <__register_exitproc+0x88>
  40d926:	6860      	ldr	r0, [r4, #4]
  40d928:	281f      	cmp	r0, #31
  40d92a:	dc17      	bgt.n	40d95c <__register_exitproc+0x4c>
  40d92c:	1c43      	adds	r3, r0, #1
  40d92e:	b176      	cbz	r6, 40d94e <__register_exitproc+0x3e>
  40d930:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40d934:	2201      	movs	r2, #1
  40d936:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40d93a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40d93e:	4082      	lsls	r2, r0
  40d940:	4311      	orrs	r1, r2
  40d942:	2e02      	cmp	r6, #2
  40d944:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40d948:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40d94c:	d01e      	beq.n	40d98c <__register_exitproc+0x7c>
  40d94e:	3002      	adds	r0, #2
  40d950:	6063      	str	r3, [r4, #4]
  40d952:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40d956:	2000      	movs	r0, #0
  40d958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d95c:	4b14      	ldr	r3, [pc, #80]	; (40d9b0 <__register_exitproc+0xa0>)
  40d95e:	b303      	cbz	r3, 40d9a2 <__register_exitproc+0x92>
  40d960:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40d964:	f7fe fde4 	bl	40c530 <malloc>
  40d968:	4604      	mov	r4, r0
  40d96a:	b1d0      	cbz	r0, 40d9a2 <__register_exitproc+0x92>
  40d96c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40d970:	2700      	movs	r7, #0
  40d972:	e880 0088 	stmia.w	r0, {r3, r7}
  40d976:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d97a:	4638      	mov	r0, r7
  40d97c:	2301      	movs	r3, #1
  40d97e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40d982:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40d986:	2e00      	cmp	r6, #0
  40d988:	d0e1      	beq.n	40d94e <__register_exitproc+0x3e>
  40d98a:	e7d1      	b.n	40d930 <__register_exitproc+0x20>
  40d98c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40d990:	430a      	orrs	r2, r1
  40d992:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40d996:	e7da      	b.n	40d94e <__register_exitproc+0x3e>
  40d998:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40d99c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d9a0:	e7c1      	b.n	40d926 <__register_exitproc+0x16>
  40d9a2:	f04f 30ff 	mov.w	r0, #4294967295
  40d9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d9aa:	bf00      	nop
  40d9ac:	0040ec0c 	.word	0x0040ec0c
  40d9b0:	0040c531 	.word	0x0040c531

0040d9b4 <_calloc_r>:
  40d9b4:	b510      	push	{r4, lr}
  40d9b6:	fb02 f101 	mul.w	r1, r2, r1
  40d9ba:	f7fe fdc1 	bl	40c540 <_malloc_r>
  40d9be:	4604      	mov	r4, r0
  40d9c0:	b1d8      	cbz	r0, 40d9fa <_calloc_r+0x46>
  40d9c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40d9c6:	f022 0203 	bic.w	r2, r2, #3
  40d9ca:	3a04      	subs	r2, #4
  40d9cc:	2a24      	cmp	r2, #36	; 0x24
  40d9ce:	d818      	bhi.n	40da02 <_calloc_r+0x4e>
  40d9d0:	2a13      	cmp	r2, #19
  40d9d2:	d914      	bls.n	40d9fe <_calloc_r+0x4a>
  40d9d4:	2300      	movs	r3, #0
  40d9d6:	2a1b      	cmp	r2, #27
  40d9d8:	6003      	str	r3, [r0, #0]
  40d9da:	6043      	str	r3, [r0, #4]
  40d9dc:	d916      	bls.n	40da0c <_calloc_r+0x58>
  40d9de:	2a24      	cmp	r2, #36	; 0x24
  40d9e0:	6083      	str	r3, [r0, #8]
  40d9e2:	60c3      	str	r3, [r0, #12]
  40d9e4:	bf11      	iteee	ne
  40d9e6:	f100 0210 	addne.w	r2, r0, #16
  40d9ea:	6103      	streq	r3, [r0, #16]
  40d9ec:	6143      	streq	r3, [r0, #20]
  40d9ee:	f100 0218 	addeq.w	r2, r0, #24
  40d9f2:	2300      	movs	r3, #0
  40d9f4:	6013      	str	r3, [r2, #0]
  40d9f6:	6053      	str	r3, [r2, #4]
  40d9f8:	6093      	str	r3, [r2, #8]
  40d9fa:	4620      	mov	r0, r4
  40d9fc:	bd10      	pop	{r4, pc}
  40d9fe:	4602      	mov	r2, r0
  40da00:	e7f7      	b.n	40d9f2 <_calloc_r+0x3e>
  40da02:	2100      	movs	r1, #0
  40da04:	f7fa fb2a 	bl	40805c <memset>
  40da08:	4620      	mov	r0, r4
  40da0a:	bd10      	pop	{r4, pc}
  40da0c:	f100 0208 	add.w	r2, r0, #8
  40da10:	e7ef      	b.n	40d9f2 <_calloc_r+0x3e>
  40da12:	bf00      	nop

0040da14 <_close_r>:
  40da14:	b538      	push	{r3, r4, r5, lr}
  40da16:	4c07      	ldr	r4, [pc, #28]	; (40da34 <_close_r+0x20>)
  40da18:	2300      	movs	r3, #0
  40da1a:	4605      	mov	r5, r0
  40da1c:	4608      	mov	r0, r1
  40da1e:	6023      	str	r3, [r4, #0]
  40da20:	f7f3 fb2a 	bl	401078 <_close>
  40da24:	1c43      	adds	r3, r0, #1
  40da26:	d000      	beq.n	40da2a <_close_r+0x16>
  40da28:	bd38      	pop	{r3, r4, r5, pc}
  40da2a:	6823      	ldr	r3, [r4, #0]
  40da2c:	2b00      	cmp	r3, #0
  40da2e:	d0fb      	beq.n	40da28 <_close_r+0x14>
  40da30:	602b      	str	r3, [r5, #0]
  40da32:	bd38      	pop	{r3, r4, r5, pc}
  40da34:	204048f8 	.word	0x204048f8

0040da38 <_fclose_r>:
  40da38:	2900      	cmp	r1, #0
  40da3a:	d03d      	beq.n	40dab8 <_fclose_r+0x80>
  40da3c:	b570      	push	{r4, r5, r6, lr}
  40da3e:	4605      	mov	r5, r0
  40da40:	460c      	mov	r4, r1
  40da42:	b108      	cbz	r0, 40da48 <_fclose_r+0x10>
  40da44:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40da46:	b37b      	cbz	r3, 40daa8 <_fclose_r+0x70>
  40da48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40da4c:	b90b      	cbnz	r3, 40da52 <_fclose_r+0x1a>
  40da4e:	2000      	movs	r0, #0
  40da50:	bd70      	pop	{r4, r5, r6, pc}
  40da52:	4621      	mov	r1, r4
  40da54:	4628      	mov	r0, r5
  40da56:	f7fe f853 	bl	40bb00 <__sflush_r>
  40da5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40da5c:	4606      	mov	r6, r0
  40da5e:	b133      	cbz	r3, 40da6e <_fclose_r+0x36>
  40da60:	69e1      	ldr	r1, [r4, #28]
  40da62:	4628      	mov	r0, r5
  40da64:	4798      	blx	r3
  40da66:	2800      	cmp	r0, #0
  40da68:	bfb8      	it	lt
  40da6a:	f04f 36ff 	movlt.w	r6, #4294967295
  40da6e:	89a3      	ldrh	r3, [r4, #12]
  40da70:	061b      	lsls	r3, r3, #24
  40da72:	d41c      	bmi.n	40daae <_fclose_r+0x76>
  40da74:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40da76:	b141      	cbz	r1, 40da8a <_fclose_r+0x52>
  40da78:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40da7c:	4299      	cmp	r1, r3
  40da7e:	d002      	beq.n	40da86 <_fclose_r+0x4e>
  40da80:	4628      	mov	r0, r5
  40da82:	f7fe fa3f 	bl	40bf04 <_free_r>
  40da86:	2300      	movs	r3, #0
  40da88:	6323      	str	r3, [r4, #48]	; 0x30
  40da8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40da8c:	b121      	cbz	r1, 40da98 <_fclose_r+0x60>
  40da8e:	4628      	mov	r0, r5
  40da90:	f7fe fa38 	bl	40bf04 <_free_r>
  40da94:	2300      	movs	r3, #0
  40da96:	6463      	str	r3, [r4, #68]	; 0x44
  40da98:	f7fe f970 	bl	40bd7c <__sfp_lock_acquire>
  40da9c:	2300      	movs	r3, #0
  40da9e:	81a3      	strh	r3, [r4, #12]
  40daa0:	f7fe f96e 	bl	40bd80 <__sfp_lock_release>
  40daa4:	4630      	mov	r0, r6
  40daa6:	bd70      	pop	{r4, r5, r6, pc}
  40daa8:	f7fe f962 	bl	40bd70 <__sinit>
  40daac:	e7cc      	b.n	40da48 <_fclose_r+0x10>
  40daae:	6921      	ldr	r1, [r4, #16]
  40dab0:	4628      	mov	r0, r5
  40dab2:	f7fe fa27 	bl	40bf04 <_free_r>
  40dab6:	e7dd      	b.n	40da74 <_fclose_r+0x3c>
  40dab8:	2000      	movs	r0, #0
  40daba:	4770      	bx	lr

0040dabc <_fstat_r>:
  40dabc:	b538      	push	{r3, r4, r5, lr}
  40dabe:	460b      	mov	r3, r1
  40dac0:	4c07      	ldr	r4, [pc, #28]	; (40dae0 <_fstat_r+0x24>)
  40dac2:	4605      	mov	r5, r0
  40dac4:	4611      	mov	r1, r2
  40dac6:	4618      	mov	r0, r3
  40dac8:	2300      	movs	r3, #0
  40daca:	6023      	str	r3, [r4, #0]
  40dacc:	f7f3 fad8 	bl	401080 <_fstat>
  40dad0:	1c43      	adds	r3, r0, #1
  40dad2:	d000      	beq.n	40dad6 <_fstat_r+0x1a>
  40dad4:	bd38      	pop	{r3, r4, r5, pc}
  40dad6:	6823      	ldr	r3, [r4, #0]
  40dad8:	2b00      	cmp	r3, #0
  40dada:	d0fb      	beq.n	40dad4 <_fstat_r+0x18>
  40dadc:	602b      	str	r3, [r5, #0]
  40dade:	bd38      	pop	{r3, r4, r5, pc}
  40dae0:	204048f8 	.word	0x204048f8

0040dae4 <_isatty_r>:
  40dae4:	b538      	push	{r3, r4, r5, lr}
  40dae6:	4c07      	ldr	r4, [pc, #28]	; (40db04 <_isatty_r+0x20>)
  40dae8:	2300      	movs	r3, #0
  40daea:	4605      	mov	r5, r0
  40daec:	4608      	mov	r0, r1
  40daee:	6023      	str	r3, [r4, #0]
  40daf0:	f7f3 facc 	bl	40108c <_isatty>
  40daf4:	1c43      	adds	r3, r0, #1
  40daf6:	d000      	beq.n	40dafa <_isatty_r+0x16>
  40daf8:	bd38      	pop	{r3, r4, r5, pc}
  40dafa:	6823      	ldr	r3, [r4, #0]
  40dafc:	2b00      	cmp	r3, #0
  40dafe:	d0fb      	beq.n	40daf8 <_isatty_r+0x14>
  40db00:	602b      	str	r3, [r5, #0]
  40db02:	bd38      	pop	{r3, r4, r5, pc}
  40db04:	204048f8 	.word	0x204048f8

0040db08 <_lseek_r>:
  40db08:	b570      	push	{r4, r5, r6, lr}
  40db0a:	460d      	mov	r5, r1
  40db0c:	4c08      	ldr	r4, [pc, #32]	; (40db30 <_lseek_r+0x28>)
  40db0e:	4611      	mov	r1, r2
  40db10:	4606      	mov	r6, r0
  40db12:	461a      	mov	r2, r3
  40db14:	4628      	mov	r0, r5
  40db16:	2300      	movs	r3, #0
  40db18:	6023      	str	r3, [r4, #0]
  40db1a:	f7f3 fab9 	bl	401090 <_lseek>
  40db1e:	1c43      	adds	r3, r0, #1
  40db20:	d000      	beq.n	40db24 <_lseek_r+0x1c>
  40db22:	bd70      	pop	{r4, r5, r6, pc}
  40db24:	6823      	ldr	r3, [r4, #0]
  40db26:	2b00      	cmp	r3, #0
  40db28:	d0fb      	beq.n	40db22 <_lseek_r+0x1a>
  40db2a:	6033      	str	r3, [r6, #0]
  40db2c:	bd70      	pop	{r4, r5, r6, pc}
  40db2e:	bf00      	nop
  40db30:	204048f8 	.word	0x204048f8

0040db34 <_read_r>:
  40db34:	b570      	push	{r4, r5, r6, lr}
  40db36:	460d      	mov	r5, r1
  40db38:	4c08      	ldr	r4, [pc, #32]	; (40db5c <_read_r+0x28>)
  40db3a:	4611      	mov	r1, r2
  40db3c:	4606      	mov	r6, r0
  40db3e:	461a      	mov	r2, r3
  40db40:	4628      	mov	r0, r5
  40db42:	2300      	movs	r3, #0
  40db44:	6023      	str	r3, [r4, #0]
  40db46:	f7f2 fb63 	bl	400210 <_read>
  40db4a:	1c43      	adds	r3, r0, #1
  40db4c:	d000      	beq.n	40db50 <_read_r+0x1c>
  40db4e:	bd70      	pop	{r4, r5, r6, pc}
  40db50:	6823      	ldr	r3, [r4, #0]
  40db52:	2b00      	cmp	r3, #0
  40db54:	d0fb      	beq.n	40db4e <_read_r+0x1a>
  40db56:	6033      	str	r3, [r6, #0]
  40db58:	bd70      	pop	{r4, r5, r6, pc}
  40db5a:	bf00      	nop
  40db5c:	204048f8 	.word	0x204048f8

0040db60 <__aeabi_drsub>:
  40db60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40db64:	e002      	b.n	40db6c <__adddf3>
  40db66:	bf00      	nop

0040db68 <__aeabi_dsub>:
  40db68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040db6c <__adddf3>:
  40db6c:	b530      	push	{r4, r5, lr}
  40db6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40db72:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40db76:	ea94 0f05 	teq	r4, r5
  40db7a:	bf08      	it	eq
  40db7c:	ea90 0f02 	teqeq	r0, r2
  40db80:	bf1f      	itttt	ne
  40db82:	ea54 0c00 	orrsne.w	ip, r4, r0
  40db86:	ea55 0c02 	orrsne.w	ip, r5, r2
  40db8a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40db8e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40db92:	f000 80e2 	beq.w	40dd5a <__adddf3+0x1ee>
  40db96:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40db9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40db9e:	bfb8      	it	lt
  40dba0:	426d      	neglt	r5, r5
  40dba2:	dd0c      	ble.n	40dbbe <__adddf3+0x52>
  40dba4:	442c      	add	r4, r5
  40dba6:	ea80 0202 	eor.w	r2, r0, r2
  40dbaa:	ea81 0303 	eor.w	r3, r1, r3
  40dbae:	ea82 0000 	eor.w	r0, r2, r0
  40dbb2:	ea83 0101 	eor.w	r1, r3, r1
  40dbb6:	ea80 0202 	eor.w	r2, r0, r2
  40dbba:	ea81 0303 	eor.w	r3, r1, r3
  40dbbe:	2d36      	cmp	r5, #54	; 0x36
  40dbc0:	bf88      	it	hi
  40dbc2:	bd30      	pophi	{r4, r5, pc}
  40dbc4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40dbc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40dbcc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40dbd0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40dbd4:	d002      	beq.n	40dbdc <__adddf3+0x70>
  40dbd6:	4240      	negs	r0, r0
  40dbd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40dbdc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40dbe0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40dbe4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40dbe8:	d002      	beq.n	40dbf0 <__adddf3+0x84>
  40dbea:	4252      	negs	r2, r2
  40dbec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40dbf0:	ea94 0f05 	teq	r4, r5
  40dbf4:	f000 80a7 	beq.w	40dd46 <__adddf3+0x1da>
  40dbf8:	f1a4 0401 	sub.w	r4, r4, #1
  40dbfc:	f1d5 0e20 	rsbs	lr, r5, #32
  40dc00:	db0d      	blt.n	40dc1e <__adddf3+0xb2>
  40dc02:	fa02 fc0e 	lsl.w	ip, r2, lr
  40dc06:	fa22 f205 	lsr.w	r2, r2, r5
  40dc0a:	1880      	adds	r0, r0, r2
  40dc0c:	f141 0100 	adc.w	r1, r1, #0
  40dc10:	fa03 f20e 	lsl.w	r2, r3, lr
  40dc14:	1880      	adds	r0, r0, r2
  40dc16:	fa43 f305 	asr.w	r3, r3, r5
  40dc1a:	4159      	adcs	r1, r3
  40dc1c:	e00e      	b.n	40dc3c <__adddf3+0xd0>
  40dc1e:	f1a5 0520 	sub.w	r5, r5, #32
  40dc22:	f10e 0e20 	add.w	lr, lr, #32
  40dc26:	2a01      	cmp	r2, #1
  40dc28:	fa03 fc0e 	lsl.w	ip, r3, lr
  40dc2c:	bf28      	it	cs
  40dc2e:	f04c 0c02 	orrcs.w	ip, ip, #2
  40dc32:	fa43 f305 	asr.w	r3, r3, r5
  40dc36:	18c0      	adds	r0, r0, r3
  40dc38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40dc3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40dc40:	d507      	bpl.n	40dc52 <__adddf3+0xe6>
  40dc42:	f04f 0e00 	mov.w	lr, #0
  40dc46:	f1dc 0c00 	rsbs	ip, ip, #0
  40dc4a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40dc4e:	eb6e 0101 	sbc.w	r1, lr, r1
  40dc52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40dc56:	d31b      	bcc.n	40dc90 <__adddf3+0x124>
  40dc58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40dc5c:	d30c      	bcc.n	40dc78 <__adddf3+0x10c>
  40dc5e:	0849      	lsrs	r1, r1, #1
  40dc60:	ea5f 0030 	movs.w	r0, r0, rrx
  40dc64:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40dc68:	f104 0401 	add.w	r4, r4, #1
  40dc6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40dc70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40dc74:	f080 809a 	bcs.w	40ddac <__adddf3+0x240>
  40dc78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40dc7c:	bf08      	it	eq
  40dc7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40dc82:	f150 0000 	adcs.w	r0, r0, #0
  40dc86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40dc8a:	ea41 0105 	orr.w	r1, r1, r5
  40dc8e:	bd30      	pop	{r4, r5, pc}
  40dc90:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40dc94:	4140      	adcs	r0, r0
  40dc96:	eb41 0101 	adc.w	r1, r1, r1
  40dc9a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40dc9e:	f1a4 0401 	sub.w	r4, r4, #1
  40dca2:	d1e9      	bne.n	40dc78 <__adddf3+0x10c>
  40dca4:	f091 0f00 	teq	r1, #0
  40dca8:	bf04      	itt	eq
  40dcaa:	4601      	moveq	r1, r0
  40dcac:	2000      	moveq	r0, #0
  40dcae:	fab1 f381 	clz	r3, r1
  40dcb2:	bf08      	it	eq
  40dcb4:	3320      	addeq	r3, #32
  40dcb6:	f1a3 030b 	sub.w	r3, r3, #11
  40dcba:	f1b3 0220 	subs.w	r2, r3, #32
  40dcbe:	da0c      	bge.n	40dcda <__adddf3+0x16e>
  40dcc0:	320c      	adds	r2, #12
  40dcc2:	dd08      	ble.n	40dcd6 <__adddf3+0x16a>
  40dcc4:	f102 0c14 	add.w	ip, r2, #20
  40dcc8:	f1c2 020c 	rsb	r2, r2, #12
  40dccc:	fa01 f00c 	lsl.w	r0, r1, ip
  40dcd0:	fa21 f102 	lsr.w	r1, r1, r2
  40dcd4:	e00c      	b.n	40dcf0 <__adddf3+0x184>
  40dcd6:	f102 0214 	add.w	r2, r2, #20
  40dcda:	bfd8      	it	le
  40dcdc:	f1c2 0c20 	rsble	ip, r2, #32
  40dce0:	fa01 f102 	lsl.w	r1, r1, r2
  40dce4:	fa20 fc0c 	lsr.w	ip, r0, ip
  40dce8:	bfdc      	itt	le
  40dcea:	ea41 010c 	orrle.w	r1, r1, ip
  40dcee:	4090      	lslle	r0, r2
  40dcf0:	1ae4      	subs	r4, r4, r3
  40dcf2:	bfa2      	ittt	ge
  40dcf4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40dcf8:	4329      	orrge	r1, r5
  40dcfa:	bd30      	popge	{r4, r5, pc}
  40dcfc:	ea6f 0404 	mvn.w	r4, r4
  40dd00:	3c1f      	subs	r4, #31
  40dd02:	da1c      	bge.n	40dd3e <__adddf3+0x1d2>
  40dd04:	340c      	adds	r4, #12
  40dd06:	dc0e      	bgt.n	40dd26 <__adddf3+0x1ba>
  40dd08:	f104 0414 	add.w	r4, r4, #20
  40dd0c:	f1c4 0220 	rsb	r2, r4, #32
  40dd10:	fa20 f004 	lsr.w	r0, r0, r4
  40dd14:	fa01 f302 	lsl.w	r3, r1, r2
  40dd18:	ea40 0003 	orr.w	r0, r0, r3
  40dd1c:	fa21 f304 	lsr.w	r3, r1, r4
  40dd20:	ea45 0103 	orr.w	r1, r5, r3
  40dd24:	bd30      	pop	{r4, r5, pc}
  40dd26:	f1c4 040c 	rsb	r4, r4, #12
  40dd2a:	f1c4 0220 	rsb	r2, r4, #32
  40dd2e:	fa20 f002 	lsr.w	r0, r0, r2
  40dd32:	fa01 f304 	lsl.w	r3, r1, r4
  40dd36:	ea40 0003 	orr.w	r0, r0, r3
  40dd3a:	4629      	mov	r1, r5
  40dd3c:	bd30      	pop	{r4, r5, pc}
  40dd3e:	fa21 f004 	lsr.w	r0, r1, r4
  40dd42:	4629      	mov	r1, r5
  40dd44:	bd30      	pop	{r4, r5, pc}
  40dd46:	f094 0f00 	teq	r4, #0
  40dd4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40dd4e:	bf06      	itte	eq
  40dd50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40dd54:	3401      	addeq	r4, #1
  40dd56:	3d01      	subne	r5, #1
  40dd58:	e74e      	b.n	40dbf8 <__adddf3+0x8c>
  40dd5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40dd5e:	bf18      	it	ne
  40dd60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40dd64:	d029      	beq.n	40ddba <__adddf3+0x24e>
  40dd66:	ea94 0f05 	teq	r4, r5
  40dd6a:	bf08      	it	eq
  40dd6c:	ea90 0f02 	teqeq	r0, r2
  40dd70:	d005      	beq.n	40dd7e <__adddf3+0x212>
  40dd72:	ea54 0c00 	orrs.w	ip, r4, r0
  40dd76:	bf04      	itt	eq
  40dd78:	4619      	moveq	r1, r3
  40dd7a:	4610      	moveq	r0, r2
  40dd7c:	bd30      	pop	{r4, r5, pc}
  40dd7e:	ea91 0f03 	teq	r1, r3
  40dd82:	bf1e      	ittt	ne
  40dd84:	2100      	movne	r1, #0
  40dd86:	2000      	movne	r0, #0
  40dd88:	bd30      	popne	{r4, r5, pc}
  40dd8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40dd8e:	d105      	bne.n	40dd9c <__adddf3+0x230>
  40dd90:	0040      	lsls	r0, r0, #1
  40dd92:	4149      	adcs	r1, r1
  40dd94:	bf28      	it	cs
  40dd96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40dd9a:	bd30      	pop	{r4, r5, pc}
  40dd9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40dda0:	bf3c      	itt	cc
  40dda2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40dda6:	bd30      	popcc	{r4, r5, pc}
  40dda8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ddac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40ddb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ddb4:	f04f 0000 	mov.w	r0, #0
  40ddb8:	bd30      	pop	{r4, r5, pc}
  40ddba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ddbe:	bf1a      	itte	ne
  40ddc0:	4619      	movne	r1, r3
  40ddc2:	4610      	movne	r0, r2
  40ddc4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40ddc8:	bf1c      	itt	ne
  40ddca:	460b      	movne	r3, r1
  40ddcc:	4602      	movne	r2, r0
  40ddce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ddd2:	bf06      	itte	eq
  40ddd4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40ddd8:	ea91 0f03 	teqeq	r1, r3
  40dddc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40dde0:	bd30      	pop	{r4, r5, pc}
  40dde2:	bf00      	nop

0040dde4 <__aeabi_ui2d>:
  40dde4:	f090 0f00 	teq	r0, #0
  40dde8:	bf04      	itt	eq
  40ddea:	2100      	moveq	r1, #0
  40ddec:	4770      	bxeq	lr
  40ddee:	b530      	push	{r4, r5, lr}
  40ddf0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ddf4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ddf8:	f04f 0500 	mov.w	r5, #0
  40ddfc:	f04f 0100 	mov.w	r1, #0
  40de00:	e750      	b.n	40dca4 <__adddf3+0x138>
  40de02:	bf00      	nop

0040de04 <__aeabi_i2d>:
  40de04:	f090 0f00 	teq	r0, #0
  40de08:	bf04      	itt	eq
  40de0a:	2100      	moveq	r1, #0
  40de0c:	4770      	bxeq	lr
  40de0e:	b530      	push	{r4, r5, lr}
  40de10:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40de14:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40de18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40de1c:	bf48      	it	mi
  40de1e:	4240      	negmi	r0, r0
  40de20:	f04f 0100 	mov.w	r1, #0
  40de24:	e73e      	b.n	40dca4 <__adddf3+0x138>
  40de26:	bf00      	nop

0040de28 <__aeabi_f2d>:
  40de28:	0042      	lsls	r2, r0, #1
  40de2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40de2e:	ea4f 0131 	mov.w	r1, r1, rrx
  40de32:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40de36:	bf1f      	itttt	ne
  40de38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40de3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40de40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40de44:	4770      	bxne	lr
  40de46:	f092 0f00 	teq	r2, #0
  40de4a:	bf14      	ite	ne
  40de4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40de50:	4770      	bxeq	lr
  40de52:	b530      	push	{r4, r5, lr}
  40de54:	f44f 7460 	mov.w	r4, #896	; 0x380
  40de58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40de5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40de60:	e720      	b.n	40dca4 <__adddf3+0x138>
  40de62:	bf00      	nop

0040de64 <__aeabi_ul2d>:
  40de64:	ea50 0201 	orrs.w	r2, r0, r1
  40de68:	bf08      	it	eq
  40de6a:	4770      	bxeq	lr
  40de6c:	b530      	push	{r4, r5, lr}
  40de6e:	f04f 0500 	mov.w	r5, #0
  40de72:	e00a      	b.n	40de8a <__aeabi_l2d+0x16>

0040de74 <__aeabi_l2d>:
  40de74:	ea50 0201 	orrs.w	r2, r0, r1
  40de78:	bf08      	it	eq
  40de7a:	4770      	bxeq	lr
  40de7c:	b530      	push	{r4, r5, lr}
  40de7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40de82:	d502      	bpl.n	40de8a <__aeabi_l2d+0x16>
  40de84:	4240      	negs	r0, r0
  40de86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40de8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40de8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40de92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40de96:	f43f aedc 	beq.w	40dc52 <__adddf3+0xe6>
  40de9a:	f04f 0203 	mov.w	r2, #3
  40de9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40dea2:	bf18      	it	ne
  40dea4:	3203      	addne	r2, #3
  40dea6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40deaa:	bf18      	it	ne
  40deac:	3203      	addne	r2, #3
  40deae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40deb2:	f1c2 0320 	rsb	r3, r2, #32
  40deb6:	fa00 fc03 	lsl.w	ip, r0, r3
  40deba:	fa20 f002 	lsr.w	r0, r0, r2
  40debe:	fa01 fe03 	lsl.w	lr, r1, r3
  40dec2:	ea40 000e 	orr.w	r0, r0, lr
  40dec6:	fa21 f102 	lsr.w	r1, r1, r2
  40deca:	4414      	add	r4, r2
  40decc:	e6c1      	b.n	40dc52 <__adddf3+0xe6>
  40dece:	bf00      	nop

0040ded0 <__aeabi_dmul>:
  40ded0:	b570      	push	{r4, r5, r6, lr}
  40ded2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ded6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40deda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40dede:	bf1d      	ittte	ne
  40dee0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40dee4:	ea94 0f0c 	teqne	r4, ip
  40dee8:	ea95 0f0c 	teqne	r5, ip
  40deec:	f000 f8de 	bleq	40e0ac <__aeabi_dmul+0x1dc>
  40def0:	442c      	add	r4, r5
  40def2:	ea81 0603 	eor.w	r6, r1, r3
  40def6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40defa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40defe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40df02:	bf18      	it	ne
  40df04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40df08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40df0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40df10:	d038      	beq.n	40df84 <__aeabi_dmul+0xb4>
  40df12:	fba0 ce02 	umull	ip, lr, r0, r2
  40df16:	f04f 0500 	mov.w	r5, #0
  40df1a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40df1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40df22:	fbe0 e503 	umlal	lr, r5, r0, r3
  40df26:	f04f 0600 	mov.w	r6, #0
  40df2a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40df2e:	f09c 0f00 	teq	ip, #0
  40df32:	bf18      	it	ne
  40df34:	f04e 0e01 	orrne.w	lr, lr, #1
  40df38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40df3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40df40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40df44:	d204      	bcs.n	40df50 <__aeabi_dmul+0x80>
  40df46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40df4a:	416d      	adcs	r5, r5
  40df4c:	eb46 0606 	adc.w	r6, r6, r6
  40df50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40df54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40df58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40df5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40df60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40df64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40df68:	bf88      	it	hi
  40df6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40df6e:	d81e      	bhi.n	40dfae <__aeabi_dmul+0xde>
  40df70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40df74:	bf08      	it	eq
  40df76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40df7a:	f150 0000 	adcs.w	r0, r0, #0
  40df7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40df82:	bd70      	pop	{r4, r5, r6, pc}
  40df84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40df88:	ea46 0101 	orr.w	r1, r6, r1
  40df8c:	ea40 0002 	orr.w	r0, r0, r2
  40df90:	ea81 0103 	eor.w	r1, r1, r3
  40df94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40df98:	bfc2      	ittt	gt
  40df9a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40df9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40dfa2:	bd70      	popgt	{r4, r5, r6, pc}
  40dfa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40dfa8:	f04f 0e00 	mov.w	lr, #0
  40dfac:	3c01      	subs	r4, #1
  40dfae:	f300 80ab 	bgt.w	40e108 <__aeabi_dmul+0x238>
  40dfb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40dfb6:	bfde      	ittt	le
  40dfb8:	2000      	movle	r0, #0
  40dfba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40dfbe:	bd70      	pople	{r4, r5, r6, pc}
  40dfc0:	f1c4 0400 	rsb	r4, r4, #0
  40dfc4:	3c20      	subs	r4, #32
  40dfc6:	da35      	bge.n	40e034 <__aeabi_dmul+0x164>
  40dfc8:	340c      	adds	r4, #12
  40dfca:	dc1b      	bgt.n	40e004 <__aeabi_dmul+0x134>
  40dfcc:	f104 0414 	add.w	r4, r4, #20
  40dfd0:	f1c4 0520 	rsb	r5, r4, #32
  40dfd4:	fa00 f305 	lsl.w	r3, r0, r5
  40dfd8:	fa20 f004 	lsr.w	r0, r0, r4
  40dfdc:	fa01 f205 	lsl.w	r2, r1, r5
  40dfe0:	ea40 0002 	orr.w	r0, r0, r2
  40dfe4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40dfe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40dfec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40dff0:	fa21 f604 	lsr.w	r6, r1, r4
  40dff4:	eb42 0106 	adc.w	r1, r2, r6
  40dff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40dffc:	bf08      	it	eq
  40dffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e002:	bd70      	pop	{r4, r5, r6, pc}
  40e004:	f1c4 040c 	rsb	r4, r4, #12
  40e008:	f1c4 0520 	rsb	r5, r4, #32
  40e00c:	fa00 f304 	lsl.w	r3, r0, r4
  40e010:	fa20 f005 	lsr.w	r0, r0, r5
  40e014:	fa01 f204 	lsl.w	r2, r1, r4
  40e018:	ea40 0002 	orr.w	r0, r0, r2
  40e01c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e020:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40e024:	f141 0100 	adc.w	r1, r1, #0
  40e028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e02c:	bf08      	it	eq
  40e02e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e032:	bd70      	pop	{r4, r5, r6, pc}
  40e034:	f1c4 0520 	rsb	r5, r4, #32
  40e038:	fa00 f205 	lsl.w	r2, r0, r5
  40e03c:	ea4e 0e02 	orr.w	lr, lr, r2
  40e040:	fa20 f304 	lsr.w	r3, r0, r4
  40e044:	fa01 f205 	lsl.w	r2, r1, r5
  40e048:	ea43 0302 	orr.w	r3, r3, r2
  40e04c:	fa21 f004 	lsr.w	r0, r1, r4
  40e050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e054:	fa21 f204 	lsr.w	r2, r1, r4
  40e058:	ea20 0002 	bic.w	r0, r0, r2
  40e05c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40e060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e064:	bf08      	it	eq
  40e066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e06a:	bd70      	pop	{r4, r5, r6, pc}
  40e06c:	f094 0f00 	teq	r4, #0
  40e070:	d10f      	bne.n	40e092 <__aeabi_dmul+0x1c2>
  40e072:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40e076:	0040      	lsls	r0, r0, #1
  40e078:	eb41 0101 	adc.w	r1, r1, r1
  40e07c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e080:	bf08      	it	eq
  40e082:	3c01      	subeq	r4, #1
  40e084:	d0f7      	beq.n	40e076 <__aeabi_dmul+0x1a6>
  40e086:	ea41 0106 	orr.w	r1, r1, r6
  40e08a:	f095 0f00 	teq	r5, #0
  40e08e:	bf18      	it	ne
  40e090:	4770      	bxne	lr
  40e092:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40e096:	0052      	lsls	r2, r2, #1
  40e098:	eb43 0303 	adc.w	r3, r3, r3
  40e09c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40e0a0:	bf08      	it	eq
  40e0a2:	3d01      	subeq	r5, #1
  40e0a4:	d0f7      	beq.n	40e096 <__aeabi_dmul+0x1c6>
  40e0a6:	ea43 0306 	orr.w	r3, r3, r6
  40e0aa:	4770      	bx	lr
  40e0ac:	ea94 0f0c 	teq	r4, ip
  40e0b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e0b4:	bf18      	it	ne
  40e0b6:	ea95 0f0c 	teqne	r5, ip
  40e0ba:	d00c      	beq.n	40e0d6 <__aeabi_dmul+0x206>
  40e0bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e0c0:	bf18      	it	ne
  40e0c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e0c6:	d1d1      	bne.n	40e06c <__aeabi_dmul+0x19c>
  40e0c8:	ea81 0103 	eor.w	r1, r1, r3
  40e0cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e0d0:	f04f 0000 	mov.w	r0, #0
  40e0d4:	bd70      	pop	{r4, r5, r6, pc}
  40e0d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e0da:	bf06      	itte	eq
  40e0dc:	4610      	moveq	r0, r2
  40e0de:	4619      	moveq	r1, r3
  40e0e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e0e4:	d019      	beq.n	40e11a <__aeabi_dmul+0x24a>
  40e0e6:	ea94 0f0c 	teq	r4, ip
  40e0ea:	d102      	bne.n	40e0f2 <__aeabi_dmul+0x222>
  40e0ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40e0f0:	d113      	bne.n	40e11a <__aeabi_dmul+0x24a>
  40e0f2:	ea95 0f0c 	teq	r5, ip
  40e0f6:	d105      	bne.n	40e104 <__aeabi_dmul+0x234>
  40e0f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40e0fc:	bf1c      	itt	ne
  40e0fe:	4610      	movne	r0, r2
  40e100:	4619      	movne	r1, r3
  40e102:	d10a      	bne.n	40e11a <__aeabi_dmul+0x24a>
  40e104:	ea81 0103 	eor.w	r1, r1, r3
  40e108:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e10c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e110:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40e114:	f04f 0000 	mov.w	r0, #0
  40e118:	bd70      	pop	{r4, r5, r6, pc}
  40e11a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e11e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40e122:	bd70      	pop	{r4, r5, r6, pc}

0040e124 <__aeabi_ddiv>:
  40e124:	b570      	push	{r4, r5, r6, lr}
  40e126:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40e12a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40e12e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40e132:	bf1d      	ittte	ne
  40e134:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40e138:	ea94 0f0c 	teqne	r4, ip
  40e13c:	ea95 0f0c 	teqne	r5, ip
  40e140:	f000 f8a7 	bleq	40e292 <__aeabi_ddiv+0x16e>
  40e144:	eba4 0405 	sub.w	r4, r4, r5
  40e148:	ea81 0e03 	eor.w	lr, r1, r3
  40e14c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e150:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40e154:	f000 8088 	beq.w	40e268 <__aeabi_ddiv+0x144>
  40e158:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40e15c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40e160:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40e164:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40e168:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40e16c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40e170:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40e174:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40e178:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40e17c:	429d      	cmp	r5, r3
  40e17e:	bf08      	it	eq
  40e180:	4296      	cmpeq	r6, r2
  40e182:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40e186:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40e18a:	d202      	bcs.n	40e192 <__aeabi_ddiv+0x6e>
  40e18c:	085b      	lsrs	r3, r3, #1
  40e18e:	ea4f 0232 	mov.w	r2, r2, rrx
  40e192:	1ab6      	subs	r6, r6, r2
  40e194:	eb65 0503 	sbc.w	r5, r5, r3
  40e198:	085b      	lsrs	r3, r3, #1
  40e19a:	ea4f 0232 	mov.w	r2, r2, rrx
  40e19e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40e1a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40e1a6:	ebb6 0e02 	subs.w	lr, r6, r2
  40e1aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e1ae:	bf22      	ittt	cs
  40e1b0:	1ab6      	subcs	r6, r6, r2
  40e1b2:	4675      	movcs	r5, lr
  40e1b4:	ea40 000c 	orrcs.w	r0, r0, ip
  40e1b8:	085b      	lsrs	r3, r3, #1
  40e1ba:	ea4f 0232 	mov.w	r2, r2, rrx
  40e1be:	ebb6 0e02 	subs.w	lr, r6, r2
  40e1c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e1c6:	bf22      	ittt	cs
  40e1c8:	1ab6      	subcs	r6, r6, r2
  40e1ca:	4675      	movcs	r5, lr
  40e1cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40e1d0:	085b      	lsrs	r3, r3, #1
  40e1d2:	ea4f 0232 	mov.w	r2, r2, rrx
  40e1d6:	ebb6 0e02 	subs.w	lr, r6, r2
  40e1da:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e1de:	bf22      	ittt	cs
  40e1e0:	1ab6      	subcs	r6, r6, r2
  40e1e2:	4675      	movcs	r5, lr
  40e1e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40e1e8:	085b      	lsrs	r3, r3, #1
  40e1ea:	ea4f 0232 	mov.w	r2, r2, rrx
  40e1ee:	ebb6 0e02 	subs.w	lr, r6, r2
  40e1f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e1f6:	bf22      	ittt	cs
  40e1f8:	1ab6      	subcs	r6, r6, r2
  40e1fa:	4675      	movcs	r5, lr
  40e1fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40e200:	ea55 0e06 	orrs.w	lr, r5, r6
  40e204:	d018      	beq.n	40e238 <__aeabi_ddiv+0x114>
  40e206:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40e20a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40e20e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40e212:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40e216:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40e21a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40e21e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40e222:	d1c0      	bne.n	40e1a6 <__aeabi_ddiv+0x82>
  40e224:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e228:	d10b      	bne.n	40e242 <__aeabi_ddiv+0x11e>
  40e22a:	ea41 0100 	orr.w	r1, r1, r0
  40e22e:	f04f 0000 	mov.w	r0, #0
  40e232:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40e236:	e7b6      	b.n	40e1a6 <__aeabi_ddiv+0x82>
  40e238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e23c:	bf04      	itt	eq
  40e23e:	4301      	orreq	r1, r0
  40e240:	2000      	moveq	r0, #0
  40e242:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40e246:	bf88      	it	hi
  40e248:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40e24c:	f63f aeaf 	bhi.w	40dfae <__aeabi_dmul+0xde>
  40e250:	ebb5 0c03 	subs.w	ip, r5, r3
  40e254:	bf04      	itt	eq
  40e256:	ebb6 0c02 	subseq.w	ip, r6, r2
  40e25a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40e25e:	f150 0000 	adcs.w	r0, r0, #0
  40e262:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e266:	bd70      	pop	{r4, r5, r6, pc}
  40e268:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40e26c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40e270:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40e274:	bfc2      	ittt	gt
  40e276:	ebd4 050c 	rsbsgt	r5, r4, ip
  40e27a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40e27e:	bd70      	popgt	{r4, r5, r6, pc}
  40e280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e284:	f04f 0e00 	mov.w	lr, #0
  40e288:	3c01      	subs	r4, #1
  40e28a:	e690      	b.n	40dfae <__aeabi_dmul+0xde>
  40e28c:	ea45 0e06 	orr.w	lr, r5, r6
  40e290:	e68d      	b.n	40dfae <__aeabi_dmul+0xde>
  40e292:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e296:	ea94 0f0c 	teq	r4, ip
  40e29a:	bf08      	it	eq
  40e29c:	ea95 0f0c 	teqeq	r5, ip
  40e2a0:	f43f af3b 	beq.w	40e11a <__aeabi_dmul+0x24a>
  40e2a4:	ea94 0f0c 	teq	r4, ip
  40e2a8:	d10a      	bne.n	40e2c0 <__aeabi_ddiv+0x19c>
  40e2aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40e2ae:	f47f af34 	bne.w	40e11a <__aeabi_dmul+0x24a>
  40e2b2:	ea95 0f0c 	teq	r5, ip
  40e2b6:	f47f af25 	bne.w	40e104 <__aeabi_dmul+0x234>
  40e2ba:	4610      	mov	r0, r2
  40e2bc:	4619      	mov	r1, r3
  40e2be:	e72c      	b.n	40e11a <__aeabi_dmul+0x24a>
  40e2c0:	ea95 0f0c 	teq	r5, ip
  40e2c4:	d106      	bne.n	40e2d4 <__aeabi_ddiv+0x1b0>
  40e2c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e2ca:	f43f aefd 	beq.w	40e0c8 <__aeabi_dmul+0x1f8>
  40e2ce:	4610      	mov	r0, r2
  40e2d0:	4619      	mov	r1, r3
  40e2d2:	e722      	b.n	40e11a <__aeabi_dmul+0x24a>
  40e2d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e2d8:	bf18      	it	ne
  40e2da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e2de:	f47f aec5 	bne.w	40e06c <__aeabi_dmul+0x19c>
  40e2e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40e2e6:	f47f af0d 	bne.w	40e104 <__aeabi_dmul+0x234>
  40e2ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40e2ee:	f47f aeeb 	bne.w	40e0c8 <__aeabi_dmul+0x1f8>
  40e2f2:	e712      	b.n	40e11a <__aeabi_dmul+0x24a>

0040e2f4 <__gedf2>:
  40e2f4:	f04f 3cff 	mov.w	ip, #4294967295
  40e2f8:	e006      	b.n	40e308 <__cmpdf2+0x4>
  40e2fa:	bf00      	nop

0040e2fc <__ledf2>:
  40e2fc:	f04f 0c01 	mov.w	ip, #1
  40e300:	e002      	b.n	40e308 <__cmpdf2+0x4>
  40e302:	bf00      	nop

0040e304 <__cmpdf2>:
  40e304:	f04f 0c01 	mov.w	ip, #1
  40e308:	f84d cd04 	str.w	ip, [sp, #-4]!
  40e30c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e310:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e314:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e318:	bf18      	it	ne
  40e31a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40e31e:	d01b      	beq.n	40e358 <__cmpdf2+0x54>
  40e320:	b001      	add	sp, #4
  40e322:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40e326:	bf0c      	ite	eq
  40e328:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40e32c:	ea91 0f03 	teqne	r1, r3
  40e330:	bf02      	ittt	eq
  40e332:	ea90 0f02 	teqeq	r0, r2
  40e336:	2000      	moveq	r0, #0
  40e338:	4770      	bxeq	lr
  40e33a:	f110 0f00 	cmn.w	r0, #0
  40e33e:	ea91 0f03 	teq	r1, r3
  40e342:	bf58      	it	pl
  40e344:	4299      	cmppl	r1, r3
  40e346:	bf08      	it	eq
  40e348:	4290      	cmpeq	r0, r2
  40e34a:	bf2c      	ite	cs
  40e34c:	17d8      	asrcs	r0, r3, #31
  40e34e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40e352:	f040 0001 	orr.w	r0, r0, #1
  40e356:	4770      	bx	lr
  40e358:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e35c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e360:	d102      	bne.n	40e368 <__cmpdf2+0x64>
  40e362:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e366:	d107      	bne.n	40e378 <__cmpdf2+0x74>
  40e368:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e36c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e370:	d1d6      	bne.n	40e320 <__cmpdf2+0x1c>
  40e372:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e376:	d0d3      	beq.n	40e320 <__cmpdf2+0x1c>
  40e378:	f85d 0b04 	ldr.w	r0, [sp], #4
  40e37c:	4770      	bx	lr
  40e37e:	bf00      	nop

0040e380 <__aeabi_cdrcmple>:
  40e380:	4684      	mov	ip, r0
  40e382:	4610      	mov	r0, r2
  40e384:	4662      	mov	r2, ip
  40e386:	468c      	mov	ip, r1
  40e388:	4619      	mov	r1, r3
  40e38a:	4663      	mov	r3, ip
  40e38c:	e000      	b.n	40e390 <__aeabi_cdcmpeq>
  40e38e:	bf00      	nop

0040e390 <__aeabi_cdcmpeq>:
  40e390:	b501      	push	{r0, lr}
  40e392:	f7ff ffb7 	bl	40e304 <__cmpdf2>
  40e396:	2800      	cmp	r0, #0
  40e398:	bf48      	it	mi
  40e39a:	f110 0f00 	cmnmi.w	r0, #0
  40e39e:	bd01      	pop	{r0, pc}

0040e3a0 <__aeabi_dcmpeq>:
  40e3a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e3a4:	f7ff fff4 	bl	40e390 <__aeabi_cdcmpeq>
  40e3a8:	bf0c      	ite	eq
  40e3aa:	2001      	moveq	r0, #1
  40e3ac:	2000      	movne	r0, #0
  40e3ae:	f85d fb08 	ldr.w	pc, [sp], #8
  40e3b2:	bf00      	nop

0040e3b4 <__aeabi_dcmplt>:
  40e3b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e3b8:	f7ff ffea 	bl	40e390 <__aeabi_cdcmpeq>
  40e3bc:	bf34      	ite	cc
  40e3be:	2001      	movcc	r0, #1
  40e3c0:	2000      	movcs	r0, #0
  40e3c2:	f85d fb08 	ldr.w	pc, [sp], #8
  40e3c6:	bf00      	nop

0040e3c8 <__aeabi_dcmple>:
  40e3c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e3cc:	f7ff ffe0 	bl	40e390 <__aeabi_cdcmpeq>
  40e3d0:	bf94      	ite	ls
  40e3d2:	2001      	movls	r0, #1
  40e3d4:	2000      	movhi	r0, #0
  40e3d6:	f85d fb08 	ldr.w	pc, [sp], #8
  40e3da:	bf00      	nop

0040e3dc <__aeabi_dcmpge>:
  40e3dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e3e0:	f7ff ffce 	bl	40e380 <__aeabi_cdrcmple>
  40e3e4:	bf94      	ite	ls
  40e3e6:	2001      	movls	r0, #1
  40e3e8:	2000      	movhi	r0, #0
  40e3ea:	f85d fb08 	ldr.w	pc, [sp], #8
  40e3ee:	bf00      	nop

0040e3f0 <__aeabi_dcmpgt>:
  40e3f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e3f4:	f7ff ffc4 	bl	40e380 <__aeabi_cdrcmple>
  40e3f8:	bf34      	ite	cc
  40e3fa:	2001      	movcc	r0, #1
  40e3fc:	2000      	movcs	r0, #0
  40e3fe:	f85d fb08 	ldr.w	pc, [sp], #8
  40e402:	bf00      	nop

0040e404 <__aeabi_dcmpun>:
  40e404:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e40c:	d102      	bne.n	40e414 <__aeabi_dcmpun+0x10>
  40e40e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e412:	d10a      	bne.n	40e42a <__aeabi_dcmpun+0x26>
  40e414:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e41c:	d102      	bne.n	40e424 <__aeabi_dcmpun+0x20>
  40e41e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e422:	d102      	bne.n	40e42a <__aeabi_dcmpun+0x26>
  40e424:	f04f 0000 	mov.w	r0, #0
  40e428:	4770      	bx	lr
  40e42a:	f04f 0001 	mov.w	r0, #1
  40e42e:	4770      	bx	lr

0040e430 <__aeabi_d2iz>:
  40e430:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40e434:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40e438:	d215      	bcs.n	40e466 <__aeabi_d2iz+0x36>
  40e43a:	d511      	bpl.n	40e460 <__aeabi_d2iz+0x30>
  40e43c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40e440:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40e444:	d912      	bls.n	40e46c <__aeabi_d2iz+0x3c>
  40e446:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40e44a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40e44e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40e452:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40e456:	fa23 f002 	lsr.w	r0, r3, r2
  40e45a:	bf18      	it	ne
  40e45c:	4240      	negne	r0, r0
  40e45e:	4770      	bx	lr
  40e460:	f04f 0000 	mov.w	r0, #0
  40e464:	4770      	bx	lr
  40e466:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40e46a:	d105      	bne.n	40e478 <__aeabi_d2iz+0x48>
  40e46c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40e470:	bf08      	it	eq
  40e472:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40e476:	4770      	bx	lr
  40e478:	f04f 0000 	mov.w	r0, #0
  40e47c:	4770      	bx	lr
  40e47e:	bf00      	nop

0040e480 <__aeabi_uldivmod>:
  40e480:	b953      	cbnz	r3, 40e498 <__aeabi_uldivmod+0x18>
  40e482:	b94a      	cbnz	r2, 40e498 <__aeabi_uldivmod+0x18>
  40e484:	2900      	cmp	r1, #0
  40e486:	bf08      	it	eq
  40e488:	2800      	cmpeq	r0, #0
  40e48a:	bf1c      	itt	ne
  40e48c:	f04f 31ff 	movne.w	r1, #4294967295
  40e490:	f04f 30ff 	movne.w	r0, #4294967295
  40e494:	f000 b97e 	b.w	40e794 <__aeabi_idiv0>
  40e498:	f1ad 0c08 	sub.w	ip, sp, #8
  40e49c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40e4a0:	f000 f806 	bl	40e4b0 <__udivmoddi4>
  40e4a4:	f8dd e004 	ldr.w	lr, [sp, #4]
  40e4a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40e4ac:	b004      	add	sp, #16
  40e4ae:	4770      	bx	lr

0040e4b0 <__udivmoddi4>:
  40e4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e4b4:	468c      	mov	ip, r1
  40e4b6:	460e      	mov	r6, r1
  40e4b8:	4604      	mov	r4, r0
  40e4ba:	9d08      	ldr	r5, [sp, #32]
  40e4bc:	2b00      	cmp	r3, #0
  40e4be:	d150      	bne.n	40e562 <__udivmoddi4+0xb2>
  40e4c0:	428a      	cmp	r2, r1
  40e4c2:	4617      	mov	r7, r2
  40e4c4:	d96c      	bls.n	40e5a0 <__udivmoddi4+0xf0>
  40e4c6:	fab2 fe82 	clz	lr, r2
  40e4ca:	f1be 0f00 	cmp.w	lr, #0
  40e4ce:	d00b      	beq.n	40e4e8 <__udivmoddi4+0x38>
  40e4d0:	f1ce 0420 	rsb	r4, lr, #32
  40e4d4:	fa20 f404 	lsr.w	r4, r0, r4
  40e4d8:	fa01 f60e 	lsl.w	r6, r1, lr
  40e4dc:	ea44 0c06 	orr.w	ip, r4, r6
  40e4e0:	fa02 f70e 	lsl.w	r7, r2, lr
  40e4e4:	fa00 f40e 	lsl.w	r4, r0, lr
  40e4e8:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40e4ec:	0c22      	lsrs	r2, r4, #16
  40e4ee:	fbbc f0f9 	udiv	r0, ip, r9
  40e4f2:	fa1f f887 	uxth.w	r8, r7
  40e4f6:	fb09 c610 	mls	r6, r9, r0, ip
  40e4fa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40e4fe:	fb00 f308 	mul.w	r3, r0, r8
  40e502:	42b3      	cmp	r3, r6
  40e504:	d909      	bls.n	40e51a <__udivmoddi4+0x6a>
  40e506:	19f6      	adds	r6, r6, r7
  40e508:	f100 32ff 	add.w	r2, r0, #4294967295
  40e50c:	f080 8122 	bcs.w	40e754 <__udivmoddi4+0x2a4>
  40e510:	42b3      	cmp	r3, r6
  40e512:	f240 811f 	bls.w	40e754 <__udivmoddi4+0x2a4>
  40e516:	3802      	subs	r0, #2
  40e518:	443e      	add	r6, r7
  40e51a:	1af6      	subs	r6, r6, r3
  40e51c:	b2a2      	uxth	r2, r4
  40e51e:	fbb6 f3f9 	udiv	r3, r6, r9
  40e522:	fb09 6613 	mls	r6, r9, r3, r6
  40e526:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40e52a:	fb03 f808 	mul.w	r8, r3, r8
  40e52e:	45a0      	cmp	r8, r4
  40e530:	d909      	bls.n	40e546 <__udivmoddi4+0x96>
  40e532:	19e4      	adds	r4, r4, r7
  40e534:	f103 32ff 	add.w	r2, r3, #4294967295
  40e538:	f080 810a 	bcs.w	40e750 <__udivmoddi4+0x2a0>
  40e53c:	45a0      	cmp	r8, r4
  40e53e:	f240 8107 	bls.w	40e750 <__udivmoddi4+0x2a0>
  40e542:	3b02      	subs	r3, #2
  40e544:	443c      	add	r4, r7
  40e546:	ebc8 0404 	rsb	r4, r8, r4
  40e54a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40e54e:	2100      	movs	r1, #0
  40e550:	2d00      	cmp	r5, #0
  40e552:	d062      	beq.n	40e61a <__udivmoddi4+0x16a>
  40e554:	fa24 f40e 	lsr.w	r4, r4, lr
  40e558:	2300      	movs	r3, #0
  40e55a:	602c      	str	r4, [r5, #0]
  40e55c:	606b      	str	r3, [r5, #4]
  40e55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e562:	428b      	cmp	r3, r1
  40e564:	d907      	bls.n	40e576 <__udivmoddi4+0xc6>
  40e566:	2d00      	cmp	r5, #0
  40e568:	d055      	beq.n	40e616 <__udivmoddi4+0x166>
  40e56a:	2100      	movs	r1, #0
  40e56c:	e885 0041 	stmia.w	r5, {r0, r6}
  40e570:	4608      	mov	r0, r1
  40e572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e576:	fab3 f183 	clz	r1, r3
  40e57a:	2900      	cmp	r1, #0
  40e57c:	f040 8090 	bne.w	40e6a0 <__udivmoddi4+0x1f0>
  40e580:	42b3      	cmp	r3, r6
  40e582:	d302      	bcc.n	40e58a <__udivmoddi4+0xda>
  40e584:	4282      	cmp	r2, r0
  40e586:	f200 80f8 	bhi.w	40e77a <__udivmoddi4+0x2ca>
  40e58a:	1a84      	subs	r4, r0, r2
  40e58c:	eb66 0603 	sbc.w	r6, r6, r3
  40e590:	2001      	movs	r0, #1
  40e592:	46b4      	mov	ip, r6
  40e594:	2d00      	cmp	r5, #0
  40e596:	d040      	beq.n	40e61a <__udivmoddi4+0x16a>
  40e598:	e885 1010 	stmia.w	r5, {r4, ip}
  40e59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e5a0:	b912      	cbnz	r2, 40e5a8 <__udivmoddi4+0xf8>
  40e5a2:	2701      	movs	r7, #1
  40e5a4:	fbb7 f7f2 	udiv	r7, r7, r2
  40e5a8:	fab7 fe87 	clz	lr, r7
  40e5ac:	f1be 0f00 	cmp.w	lr, #0
  40e5b0:	d135      	bne.n	40e61e <__udivmoddi4+0x16e>
  40e5b2:	1bf3      	subs	r3, r6, r7
  40e5b4:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40e5b8:	fa1f fc87 	uxth.w	ip, r7
  40e5bc:	2101      	movs	r1, #1
  40e5be:	fbb3 f0f8 	udiv	r0, r3, r8
  40e5c2:	0c22      	lsrs	r2, r4, #16
  40e5c4:	fb08 3610 	mls	r6, r8, r0, r3
  40e5c8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40e5cc:	fb0c f300 	mul.w	r3, ip, r0
  40e5d0:	42b3      	cmp	r3, r6
  40e5d2:	d907      	bls.n	40e5e4 <__udivmoddi4+0x134>
  40e5d4:	19f6      	adds	r6, r6, r7
  40e5d6:	f100 32ff 	add.w	r2, r0, #4294967295
  40e5da:	d202      	bcs.n	40e5e2 <__udivmoddi4+0x132>
  40e5dc:	42b3      	cmp	r3, r6
  40e5de:	f200 80ce 	bhi.w	40e77e <__udivmoddi4+0x2ce>
  40e5e2:	4610      	mov	r0, r2
  40e5e4:	1af6      	subs	r6, r6, r3
  40e5e6:	b2a2      	uxth	r2, r4
  40e5e8:	fbb6 f3f8 	udiv	r3, r6, r8
  40e5ec:	fb08 6613 	mls	r6, r8, r3, r6
  40e5f0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40e5f4:	fb0c fc03 	mul.w	ip, ip, r3
  40e5f8:	45a4      	cmp	ip, r4
  40e5fa:	d907      	bls.n	40e60c <__udivmoddi4+0x15c>
  40e5fc:	19e4      	adds	r4, r4, r7
  40e5fe:	f103 32ff 	add.w	r2, r3, #4294967295
  40e602:	d202      	bcs.n	40e60a <__udivmoddi4+0x15a>
  40e604:	45a4      	cmp	ip, r4
  40e606:	f200 80b5 	bhi.w	40e774 <__udivmoddi4+0x2c4>
  40e60a:	4613      	mov	r3, r2
  40e60c:	ebcc 0404 	rsb	r4, ip, r4
  40e610:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40e614:	e79c      	b.n	40e550 <__udivmoddi4+0xa0>
  40e616:	4629      	mov	r1, r5
  40e618:	4628      	mov	r0, r5
  40e61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e61e:	f1ce 0120 	rsb	r1, lr, #32
  40e622:	fa06 f30e 	lsl.w	r3, r6, lr
  40e626:	fa07 f70e 	lsl.w	r7, r7, lr
  40e62a:	fa20 f901 	lsr.w	r9, r0, r1
  40e62e:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40e632:	40ce      	lsrs	r6, r1
  40e634:	ea49 0903 	orr.w	r9, r9, r3
  40e638:	fbb6 faf8 	udiv	sl, r6, r8
  40e63c:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40e640:	fb08 661a 	mls	r6, r8, sl, r6
  40e644:	fa1f fc87 	uxth.w	ip, r7
  40e648:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40e64c:	fb0a f20c 	mul.w	r2, sl, ip
  40e650:	429a      	cmp	r2, r3
  40e652:	fa00 f40e 	lsl.w	r4, r0, lr
  40e656:	d90a      	bls.n	40e66e <__udivmoddi4+0x1be>
  40e658:	19db      	adds	r3, r3, r7
  40e65a:	f10a 31ff 	add.w	r1, sl, #4294967295
  40e65e:	f080 8087 	bcs.w	40e770 <__udivmoddi4+0x2c0>
  40e662:	429a      	cmp	r2, r3
  40e664:	f240 8084 	bls.w	40e770 <__udivmoddi4+0x2c0>
  40e668:	f1aa 0a02 	sub.w	sl, sl, #2
  40e66c:	443b      	add	r3, r7
  40e66e:	1a9b      	subs	r3, r3, r2
  40e670:	fa1f f989 	uxth.w	r9, r9
  40e674:	fbb3 f1f8 	udiv	r1, r3, r8
  40e678:	fb08 3311 	mls	r3, r8, r1, r3
  40e67c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40e680:	fb01 f60c 	mul.w	r6, r1, ip
  40e684:	429e      	cmp	r6, r3
  40e686:	d907      	bls.n	40e698 <__udivmoddi4+0x1e8>
  40e688:	19db      	adds	r3, r3, r7
  40e68a:	f101 32ff 	add.w	r2, r1, #4294967295
  40e68e:	d26b      	bcs.n	40e768 <__udivmoddi4+0x2b8>
  40e690:	429e      	cmp	r6, r3
  40e692:	d969      	bls.n	40e768 <__udivmoddi4+0x2b8>
  40e694:	3902      	subs	r1, #2
  40e696:	443b      	add	r3, r7
  40e698:	1b9b      	subs	r3, r3, r6
  40e69a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40e69e:	e78e      	b.n	40e5be <__udivmoddi4+0x10e>
  40e6a0:	f1c1 0e20 	rsb	lr, r1, #32
  40e6a4:	fa22 f40e 	lsr.w	r4, r2, lr
  40e6a8:	408b      	lsls	r3, r1
  40e6aa:	4323      	orrs	r3, r4
  40e6ac:	fa20 f70e 	lsr.w	r7, r0, lr
  40e6b0:	fa06 f401 	lsl.w	r4, r6, r1
  40e6b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40e6b8:	fa26 f60e 	lsr.w	r6, r6, lr
  40e6bc:	433c      	orrs	r4, r7
  40e6be:	fbb6 f9fc 	udiv	r9, r6, ip
  40e6c2:	0c27      	lsrs	r7, r4, #16
  40e6c4:	fb0c 6619 	mls	r6, ip, r9, r6
  40e6c8:	fa1f f883 	uxth.w	r8, r3
  40e6cc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40e6d0:	fb09 f708 	mul.w	r7, r9, r8
  40e6d4:	42b7      	cmp	r7, r6
  40e6d6:	fa02 f201 	lsl.w	r2, r2, r1
  40e6da:	fa00 fa01 	lsl.w	sl, r0, r1
  40e6de:	d908      	bls.n	40e6f2 <__udivmoddi4+0x242>
  40e6e0:	18f6      	adds	r6, r6, r3
  40e6e2:	f109 30ff 	add.w	r0, r9, #4294967295
  40e6e6:	d241      	bcs.n	40e76c <__udivmoddi4+0x2bc>
  40e6e8:	42b7      	cmp	r7, r6
  40e6ea:	d93f      	bls.n	40e76c <__udivmoddi4+0x2bc>
  40e6ec:	f1a9 0902 	sub.w	r9, r9, #2
  40e6f0:	441e      	add	r6, r3
  40e6f2:	1bf6      	subs	r6, r6, r7
  40e6f4:	b2a0      	uxth	r0, r4
  40e6f6:	fbb6 f4fc 	udiv	r4, r6, ip
  40e6fa:	fb0c 6614 	mls	r6, ip, r4, r6
  40e6fe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40e702:	fb04 f808 	mul.w	r8, r4, r8
  40e706:	45b8      	cmp	r8, r7
  40e708:	d907      	bls.n	40e71a <__udivmoddi4+0x26a>
  40e70a:	18ff      	adds	r7, r7, r3
  40e70c:	f104 30ff 	add.w	r0, r4, #4294967295
  40e710:	d228      	bcs.n	40e764 <__udivmoddi4+0x2b4>
  40e712:	45b8      	cmp	r8, r7
  40e714:	d926      	bls.n	40e764 <__udivmoddi4+0x2b4>
  40e716:	3c02      	subs	r4, #2
  40e718:	441f      	add	r7, r3
  40e71a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40e71e:	ebc8 0707 	rsb	r7, r8, r7
  40e722:	fba0 8902 	umull	r8, r9, r0, r2
  40e726:	454f      	cmp	r7, r9
  40e728:	4644      	mov	r4, r8
  40e72a:	464e      	mov	r6, r9
  40e72c:	d314      	bcc.n	40e758 <__udivmoddi4+0x2a8>
  40e72e:	d029      	beq.n	40e784 <__udivmoddi4+0x2d4>
  40e730:	b365      	cbz	r5, 40e78c <__udivmoddi4+0x2dc>
  40e732:	ebba 0304 	subs.w	r3, sl, r4
  40e736:	eb67 0706 	sbc.w	r7, r7, r6
  40e73a:	fa07 fe0e 	lsl.w	lr, r7, lr
  40e73e:	40cb      	lsrs	r3, r1
  40e740:	40cf      	lsrs	r7, r1
  40e742:	ea4e 0303 	orr.w	r3, lr, r3
  40e746:	e885 0088 	stmia.w	r5, {r3, r7}
  40e74a:	2100      	movs	r1, #0
  40e74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e750:	4613      	mov	r3, r2
  40e752:	e6f8      	b.n	40e546 <__udivmoddi4+0x96>
  40e754:	4610      	mov	r0, r2
  40e756:	e6e0      	b.n	40e51a <__udivmoddi4+0x6a>
  40e758:	ebb8 0402 	subs.w	r4, r8, r2
  40e75c:	eb69 0603 	sbc.w	r6, r9, r3
  40e760:	3801      	subs	r0, #1
  40e762:	e7e5      	b.n	40e730 <__udivmoddi4+0x280>
  40e764:	4604      	mov	r4, r0
  40e766:	e7d8      	b.n	40e71a <__udivmoddi4+0x26a>
  40e768:	4611      	mov	r1, r2
  40e76a:	e795      	b.n	40e698 <__udivmoddi4+0x1e8>
  40e76c:	4681      	mov	r9, r0
  40e76e:	e7c0      	b.n	40e6f2 <__udivmoddi4+0x242>
  40e770:	468a      	mov	sl, r1
  40e772:	e77c      	b.n	40e66e <__udivmoddi4+0x1be>
  40e774:	3b02      	subs	r3, #2
  40e776:	443c      	add	r4, r7
  40e778:	e748      	b.n	40e60c <__udivmoddi4+0x15c>
  40e77a:	4608      	mov	r0, r1
  40e77c:	e70a      	b.n	40e594 <__udivmoddi4+0xe4>
  40e77e:	3802      	subs	r0, #2
  40e780:	443e      	add	r6, r7
  40e782:	e72f      	b.n	40e5e4 <__udivmoddi4+0x134>
  40e784:	45c2      	cmp	sl, r8
  40e786:	d3e7      	bcc.n	40e758 <__udivmoddi4+0x2a8>
  40e788:	463e      	mov	r6, r7
  40e78a:	e7d1      	b.n	40e730 <__udivmoddi4+0x280>
  40e78c:	4629      	mov	r1, r5
  40e78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e792:	bf00      	nop

0040e794 <__aeabi_idiv0>:
  40e794:	4770      	bx	lr
  40e796:	bf00      	nop

0040e798 <ip_addr_broadcast>:
  40e798:	ffff ffff                                   ....

0040e79c <ip_addr_any>:
  40e79c:	0000 0000                                   ....

0040e7a0 <memp_num>:
  40e7a0:	0001 0002 0001 0008 0002 0005 0002 0004     ................

0040e7b0 <memp_sizes>:
  40e7b0:	0020 0098 001c 0010 0020 0010 0010 0610      ....... .......

0040e7c0 <tcp_pcb_lists>:
  40e7c0:	48a4 2040 48ac 2040 489c 2040 48b0 2040     .H@ .H@ .H@ .H@ 

0040e7d0 <tcp_backoff>:
  40e7d0:	0201 0403 0605 0707 0707 0707 0007 0000     ................

0040e7e0 <tcp_persist_backoff>:
  40e7e0:	0603 180c 6030 0078                         ....0`x.

0040e7e8 <ethbroadcast>:
  40e7e8:	ffff ffff ffff 0000                         ........

0040e7f0 <ethzero>:
	...
  40e7f8:	654e 7774 726f 206b 7075 2520 0d73 000a     Network up %s...
  40e808:	654e 7774 726f 206b 6f64 6e77 0a0d 0000     Network down....
  40e818:	4844 5043 5320 6174 7472 6465 0a0d 0000     DHCP Started....
  40e828:	6374 4570 7272 726f 6148 646e 656c 2072     tcpErrorHandler 
  40e838:	6177 2073 6163 6c6c 6465 2e2e 0a2e 200a     was called..... 
  40e848:	0000 0000 6374 5370 6e65 4364 6c61 626c     ....tcpSendCallb
  40e858:	6361 206b 6177 2073 6163 6c6c 6465 2e2e     ack was called..
  40e868:	0a2e 000a 7553 6363 7365 6673 6c75 796c     ....Successfully
  40e878:	7320 6e65 2074 6170 6b63 7620 6169 5420      sent pack via T
  40e888:	5043 0a0a 0000 0000 6425 0000 4f50 5453     CP......%d..POST
  40e898:	2f20 6f6c 2e67 6870 2070 5448 5054 312f      /log.php HTTP/1
  40e8a8:	302e 0a0d 4f48 5453 203a 6f6c 6163 686c     .0..HOST: localh
  40e8b8:	736f 0d74 430a 6e6f 6574 746e 4c2d 6e65     ost..Content-Len
  40e8c8:	7467 3a68 0020 0000 0a0d 000a 654b 6262     gth: .......Kebb
  40e8d8:	0061 0000 0a0d 0a0d 0000 0000 5245 4f52     a...........ERRO
  40e8e8:	3a52 4320 646f 3a65 2520 2064 7428 7063     R: Code: %d (tcp
  40e8f8:	735f 6e65 5f64 6170 6b63 7465 3a20 203a     _send_packet :: 
  40e908:	6374 5f70 7277 7469 2965 0a0a 0000 0000     tcp_write)......
  40e918:	7553 6363 7365 6673 6c75 796c 7720 6972     Successfully wri
  40e928:	7474 6e65 7420 206f 6270 6675 7720 7361     tten to pbuf was
  40e938:	7420 6568 6620 6c6f 6f6c 6977 676e 203a      the following: 
  40e948:	270a 7325 0a27 000a 5245 4f52 3a52 4320     .'%s'...ERROR: C
  40e958:	646f 3a65 2520 2064 7428 7063 735f 6e65     ode: %d (tcp_sen
  40e968:	5f64 6170 6b63 7465 3a20 203a 6374 5f70     d_packet :: tcp_
  40e978:	756f 7074 7475 0a29 0000 0000 7553 6363     output).....Succ
  40e988:	7365 6673 6c75 796c 6920 696e 6974 7461     essfully initiat
  40e998:	6465 7320 6e65 2064 7266 6d6f 7020 7562     ed send from pbu
  40e9a8:	2066 6177 2073 6874 2065 6f66 6c6c 776f     f was the follow
  40e9b8:	6e69 2067 203a 2527 2773 0a0a 0000 0000     ing : '%s'......
  40e9c8:	530a 6375 6563 7373 7566 6c6c 2079 7263     .Successfully cr
  40e9d8:	6165 6574 2064 4354 2050 6f63 6e6e 6365     eated TCP connec
  40e9e8:	6974 6e6f 0a21 000a 720a 6165 7964 7320     tion!....ready s
  40e9f8:	7465 7420 3a6f 2520 2064 200a 3d3d 3d3d     et to: %d . ====
  40ea08:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
  40ea18:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
  40ea28:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 000a     ==============..
  40ea38:	6f43 6e6e 6365 6974 6e6f 6f20 616b 2079     Connection okay 
  40ea48:	6562 6163 7375 2065 6425 7720 7361 7220     because %d was r
  40ea58:	7465 7275 656e 2064 7962 7420 7063 635f     eturned by tcp_c
  40ea68:	6e6f 656e 7463 0a0a 0000 0000 4e0a 746f     onnect.......Not
  40ea78:	4320 6e6f 656e 7463 6465 203a 7265 6f72      Connected: erro
  40ea88:	2072 6425 0a0a 0000 6374 5270 6365 4376     r %d....tcpRecvC
  40ea98:	6c61 626c 6361 206b 6177 2073 6163 6c6c     allback was call
  40eaa8:	6465 2e2e 0a2e 000a 6144 6174 7220 6365     ed......Data rec
  40eab8:	6569 6576 2e64 0a0a 0000 0000 6854 2065     ieved.......The 
  40eac8:	6572 6f6d 6574 6820 736f 2074 6c63 736f     remote host clos
  40ead8:	6465 7420 6568 6320 6e6f 656e 7463 6f69     ed the connectio
  40eae8:	2e6e 0a0a 0000 0000 6f4e 2077 2749 206d     n.......Now I'm 
  40eaf8:	6c63 736f 6e69 2067 6874 2065 6f63 6e6e     closing the conn
  40eb08:	6365 6974 6e6f 0a2e 000a 0000 754e 626d     ection......Numb
  40eb18:	7265 6f20 2066 6270 6675 2073 2527 2764     er of pbufs '%d'
  40eb28:	0a0a 0000 6f43 746e 6e65 7374 6f20 2066     ....Contents of 
  40eb38:	6270 6675 2720 7325 0a27 000a 2d2d 4d20     pbuf '%s'...-- M
  40eb48:	444f 4649 4549 2044 6152 2077 5448 5054     ODIFIED Raw HTTP
  40eb58:	4220 7361 6369 4520 6178 706d 656c 2d20      Basic Example -
  40eb68:	2820 4545 3134 2035 704f 6c61 6177 6572      (EE415 Opalware
  40eb78:	4c20 434c 2029 2d2d 0a0d 2d2d 5320 4d41      LLC) --..-- SAM
  40eb88:	3745 2d30 5058 444c 2d20 0d2d 2d0a 202d     E70-XPLD --..-- 
  40eb98:	6f43 706d 6c69 6465 203a 614d 2072 3331     Compiled: Mar 13
  40eba8:	3220 3130 2037 3531 343a 3a32 3931 2d20      2017 15:42:19 -
  40ebb8:	0d2d 000a 656e 7774 726f 206b 7369 6420     -...network is d
  40ebc8:	776f 2c6e 6220 7475 7220 6165 7964 7420     own, but ready t
  40ebd8:	206f 6573 646e 0000 656e 7774 726f 206b     o send..network 
  40ebe8:	7369 6420 776f 2c6e 6220 7475 6e20 746f     is down, but not
  40ebf8:	7220 6165 7964 7420 206f 6573 646e 0000      ready to send..
  40ec08:	0043 0000                                   C...

0040ec0c <_global_impure_ptr>:
  40ec0c:	0058 2040                                   X.@ 

0040ec10 <zeroes.7035>:
  40ec10:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40ec20:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  40ec30:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40ec40:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  40ec50:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  40ec60:	0030 0000                                   0...

0040ec64 <blanks.7034>:
  40ec64:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040ec74 <zeroes.6993>:
  40ec74:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040ec84 <blanks.6992>:
  40ec84:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40ec94:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40eca4:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040ecb0 <__mprec_tens>:
  40ecb0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40ecc0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40ecd0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40ece0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40ecf0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40ed00:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40ed10:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40ed20:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40ed30:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40ed40:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40ed50:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40ed60:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40ed70:	9db4 79d9 7843 44ea                         ...yCx.D

0040ed78 <__mprec_bigtens>:
  40ed78:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40ed88:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40ed98:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040eda0 <p05.5373>:
  40eda0:	0005 0000 0019 0000 007d 0000               ........}...

0040edac <_init>:
  40edac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40edae:	bf00      	nop
  40edb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40edb2:	bc08      	pop	{r3}
  40edb4:	469e      	mov	lr, r3
  40edb6:	4770      	bx	lr

0040edb8 <__init_array_start>:
  40edb8:	0040ab61 	.word	0x0040ab61

0040edbc <__frame_dummy_init_array_entry>:
  40edbc:	00400165                                e.@.

0040edc0 <_fini>:
  40edc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40edc2:	bf00      	nop
  40edc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40edc6:	bc08      	pop	{r3}
  40edc8:	469e      	mov	lr, r3
  40edca:	4770      	bx	lr

0040edcc <__fini_array_start>:
  40edcc:	00400141 	.word	0x00400141
